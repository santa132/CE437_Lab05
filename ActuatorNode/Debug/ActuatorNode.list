
ActuatorNode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a630  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000464  0800a740  0800a740  0001a740  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aba4  0800aba4  0002020c  2**0
                  CONTENTS
  4 .ARM          00000000  0800aba4  0800aba4  0002020c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800aba4  0800aba4  0002020c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aba4  0800aba4  0001aba4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800aba8  0800aba8  0001aba8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000020c  20000000  0800abac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000410  2000020c  0800adb8  0002020c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000061c  0800adb8  0002061c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020235  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015332  00000000  00000000  00020278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002f8a  00000000  00000000  000355aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013b8  00000000  00000000  00038538  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f6c  00000000  00000000  000398f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000449a  00000000  00000000  0003a85c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018cd5  00000000  00000000  0003ecf6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000932e1  00000000  00000000  000579cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006970  00000000  00000000  000eacac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  000f161c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000020c 	.word	0x2000020c
 800012c:	00000000 	.word	0x00000000
 8000130:	0800a728 	.word	0x0800a728

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000210 	.word	0x20000210
 800014c:	0800a728 	.word	0x0800a728

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__gesf2>:
 8001024:	f04f 3cff 	mov.w	ip, #4294967295
 8001028:	e006      	b.n	8001038 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__lesf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	e002      	b.n	8001038 <__cmpsf2+0x4>
 8001032:	bf00      	nop

08001034 <__cmpsf2>:
 8001034:	f04f 0c01 	mov.w	ip, #1
 8001038:	f84d cd04 	str.w	ip, [sp, #-4]!
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	bf18      	it	ne
 800104a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104e:	d011      	beq.n	8001074 <__cmpsf2+0x40>
 8001050:	b001      	add	sp, #4
 8001052:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001056:	bf18      	it	ne
 8001058:	ea90 0f01 	teqne	r0, r1
 800105c:	bf58      	it	pl
 800105e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001062:	bf88      	it	hi
 8001064:	17c8      	asrhi	r0, r1, #31
 8001066:	bf38      	it	cc
 8001068:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800106c:	bf18      	it	ne
 800106e:	f040 0001 	orrne.w	r0, r0, #1
 8001072:	4770      	bx	lr
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__cmpsf2+0x4c>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d105      	bne.n	800108c <__cmpsf2+0x58>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d1e4      	bne.n	8001050 <__cmpsf2+0x1c>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d0e1      	beq.n	8001050 <__cmpsf2+0x1c>
 800108c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <__aeabi_cfrcmple>:
 8001094:	4684      	mov	ip, r0
 8001096:	4608      	mov	r0, r1
 8001098:	4661      	mov	r1, ip
 800109a:	e7ff      	b.n	800109c <__aeabi_cfcmpeq>

0800109c <__aeabi_cfcmpeq>:
 800109c:	b50f      	push	{r0, r1, r2, r3, lr}
 800109e:	f7ff ffc9 	bl	8001034 <__cmpsf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	bf48      	it	mi
 80010a6:	f110 0f00 	cmnmi.w	r0, #0
 80010aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ac <__aeabi_fcmpeq>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff fff4 	bl	800109c <__aeabi_cfcmpeq>
 80010b4:	bf0c      	ite	eq
 80010b6:	2001      	moveq	r0, #1
 80010b8:	2000      	movne	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmplt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffea 	bl	800109c <__aeabi_cfcmpeq>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmple>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffe0 	bl	800109c <__aeabi_cfcmpeq>
 80010dc:	bf94      	ite	ls
 80010de:	2001      	movls	r0, #1
 80010e0:	2000      	movhi	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmpge>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffd2 	bl	8001094 <__aeabi_cfrcmple>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpgt>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffc8 	bl	8001094 <__aeabi_cfrcmple>
 8001104:	bf34      	ite	cc
 8001106:	2001      	movcc	r0, #1
 8001108:	2000      	movcs	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_f2uiz>:
 8001110:	0042      	lsls	r2, r0, #1
 8001112:	d20e      	bcs.n	8001132 <__aeabi_f2uiz+0x22>
 8001114:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001118:	d30b      	bcc.n	8001132 <__aeabi_f2uiz+0x22>
 800111a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800111e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001122:	d409      	bmi.n	8001138 <__aeabi_f2uiz+0x28>
 8001124:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001128:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800112c:	fa23 f002 	lsr.w	r0, r3, r2
 8001130:	4770      	bx	lr
 8001132:	f04f 0000 	mov.w	r0, #0
 8001136:	4770      	bx	lr
 8001138:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800113c:	d101      	bne.n	8001142 <__aeabi_f2uiz+0x32>
 800113e:	0242      	lsls	r2, r0, #9
 8001140:	d102      	bne.n	8001148 <__aeabi_f2uiz+0x38>
 8001142:	f04f 30ff 	mov.w	r0, #4294967295
 8001146:	4770      	bx	lr
 8001148:	f04f 0000 	mov.w	r0, #0
 800114c:	4770      	bx	lr
 800114e:	bf00      	nop

08001150 <__aeabi_d2lz>:
 8001150:	b538      	push	{r3, r4, r5, lr}
 8001152:	4605      	mov	r5, r0
 8001154:	460c      	mov	r4, r1
 8001156:	2200      	movs	r2, #0
 8001158:	2300      	movs	r3, #0
 800115a:	4628      	mov	r0, r5
 800115c:	4621      	mov	r1, r4
 800115e:	f7ff fc2d 	bl	80009bc <__aeabi_dcmplt>
 8001162:	b928      	cbnz	r0, 8001170 <__aeabi_d2lz+0x20>
 8001164:	4628      	mov	r0, r5
 8001166:	4621      	mov	r1, r4
 8001168:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800116c:	f000 b80a 	b.w	8001184 <__aeabi_d2ulz>
 8001170:	4628      	mov	r0, r5
 8001172:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8001176:	f000 f805 	bl	8001184 <__aeabi_d2ulz>
 800117a:	4240      	negs	r0, r0
 800117c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001180:	bd38      	pop	{r3, r4, r5, pc}
 8001182:	bf00      	nop

08001184 <__aeabi_d2ulz>:
 8001184:	b5d0      	push	{r4, r6, r7, lr}
 8001186:	2200      	movs	r2, #0
 8001188:	4b0b      	ldr	r3, [pc, #44]	; (80011b8 <__aeabi_d2ulz+0x34>)
 800118a:	4606      	mov	r6, r0
 800118c:	460f      	mov	r7, r1
 800118e:	f7ff f9a3 	bl	80004d8 <__aeabi_dmul>
 8001192:	f7ff fc79 	bl	8000a88 <__aeabi_d2uiz>
 8001196:	4604      	mov	r4, r0
 8001198:	f7ff f924 	bl	80003e4 <__aeabi_ui2d>
 800119c:	2200      	movs	r2, #0
 800119e:	4b07      	ldr	r3, [pc, #28]	; (80011bc <__aeabi_d2ulz+0x38>)
 80011a0:	f7ff f99a 	bl	80004d8 <__aeabi_dmul>
 80011a4:	4602      	mov	r2, r0
 80011a6:	460b      	mov	r3, r1
 80011a8:	4630      	mov	r0, r6
 80011aa:	4639      	mov	r1, r7
 80011ac:	f7fe ffdc 	bl	8000168 <__aeabi_dsub>
 80011b0:	f7ff fc6a 	bl	8000a88 <__aeabi_d2uiz>
 80011b4:	4621      	mov	r1, r4
 80011b6:	bdd0      	pop	{r4, r6, r7, pc}
 80011b8:	3df00000 	.word	0x3df00000
 80011bc:	41f00000 	.word	0x41f00000

080011c0 <CAN_Transmit>:
	return crc;
}

void CAN_Transmit(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
        		const uint8_t aData[], uint32_t *pTxMailbox)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b084      	sub	sp, #16
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	60f8      	str	r0, [r7, #12]
 80011c8:	60b9      	str	r1, [r7, #8]
 80011ca:	607a      	str	r2, [r7, #4]
 80011cc:	603b      	str	r3, [r7, #0]
	HAL_CAN_AddTxMessage(hcan, pHeader, aData, pTxMailbox);
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	687a      	ldr	r2, [r7, #4]
 80011d2:	68b9      	ldr	r1, [r7, #8]
 80011d4:	68f8      	ldr	r0, [r7, #12]
 80011d6:	f001 fe2f 	bl	8002e38 <HAL_CAN_AddTxMessage>
}
 80011da:	bf00      	nop
 80011dc:	3710      	adds	r7, #16
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}

080011e2 <CANActuatorResponse>:
extern uint8_t PWM;
volatile uint8_t urgent_mode = 0;
extern uint32_t timeElapsed;

void CANActuatorResponse(CAN_HandleTypeDef *hcan, CANActuatorData* responseData)
{
 80011e2:	b580      	push	{r7, lr}
 80011e4:	b08c      	sub	sp, #48	; 0x30
 80011e6:	af00      	add	r7, sp, #0
 80011e8:	6078      	str	r0, [r7, #4]
 80011ea:	6039      	str	r1, [r7, #0]
	uint8_t CANTxResponse[CAN_DATA_LENGTH];
	CAN_TxHeaderTypeDef CANTxHeaderResponse;
	uint32_t CANTxMailboxesResponse = CAN_TX_MAILBOX1;
 80011ec:	2302      	movs	r3, #2
 80011ee:	60fb      	str	r3, [r7, #12]

	CANTxHeaderResponse.StdId 	= CAN_PROJECT_ACTUATOR_STDID;
 80011f0:	f240 7312 	movw	r3, #1810	; 0x712
 80011f4:	613b      	str	r3, [r7, #16]
	CANTxHeaderResponse.IDE 	= CAN_ID_STD;
 80011f6:	2300      	movs	r3, #0
 80011f8:	61bb      	str	r3, [r7, #24]
	CANTxHeaderResponse.RTR 	= CAN_RTR_DATA;
 80011fa:	2300      	movs	r3, #0
 80011fc:	61fb      	str	r3, [r7, #28]
	CANTxHeaderResponse.DLC 	= CAN_DATA_LENGTH;
 80011fe:	2308      	movs	r3, #8
 8001200:	623b      	str	r3, [r7, #32]

	CANTxResponse[CAN_DATA_SEQ_IDX] 			= (responseData->sequence >> 8) & 0xff;
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	881b      	ldrh	r3, [r3, #0]
 8001206:	0a1b      	lsrs	r3, r3, #8
 8001208:	b29b      	uxth	r3, r3
 800120a:	b2db      	uxtb	r3, r3
 800120c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	CANTxResponse[CAN_DATA_SEQ_IDX+1]			= (responseData->sequence) & 0xff;
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	881b      	ldrh	r3, [r3, #0]
 8001214:	b2db      	uxtb	r3, r3
 8001216:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	CANTxResponse[CAN_ACTUATOR_DATA_SPEED_IDX] 	= responseData->speed;
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	789b      	ldrb	r3, [r3, #2]
 800121e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	CANTxResponse[3]		= UNUSED_DATA;
 8001222:	2355      	movs	r3, #85	; 0x55
 8001224:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	CANTxResponse[4]		= UNUSED_DATA;
 8001228:	2355      	movs	r3, #85	; 0x55
 800122a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	CANTxResponse[4]		= UNUSED_DATA;
 800122e:	2355      	movs	r3, #85	; 0x55
 8001230:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	CANTxResponse[5]		= UNUSED_DATA;
 8001234:	2355      	movs	r3, #85	; 0x55
 8001236:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	CANTxResponse[6]		= UNUSED_DATA;
 800123a:	2355      	movs	r3, #85	; 0x55
 800123c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	CANTxResponse[7]		= UNUSED_DATA;
 8001240:	2355      	movs	r3, #85	; 0x55
 8001242:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	CAN_Transmit(hcan, &CANTxHeaderResponse, CANTxResponse, &CANTxMailboxesResponse);
 8001246:	f107 030c 	add.w	r3, r7, #12
 800124a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800124e:	f107 0110 	add.w	r1, r7, #16
 8001252:	6878      	ldr	r0, [r7, #4]
 8001254:	f7ff ffb4 	bl	80011c0 <CAN_Transmit>

}
 8001258:	bf00      	nop
 800125a:	3730      	adds	r7, #48	; 0x30
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}

08001260 <HAL_CAN_RxFifo1MsgPendingCallback>:

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b084      	sub	sp, #16
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(ACTUATOR_GPIO_PORT, LEDB_Pin);
 8001268:	2120      	movs	r1, #32
 800126a:	4817      	ldr	r0, [pc, #92]	; (80012c8 <HAL_CAN_RxFifo1MsgPendingCallback+0x68>)
 800126c:	f002 fcc6 	bl	8003bfc <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(ACTUATOR_GPIO_PORT, LEDR_Pin);
 8001270:	2108      	movs	r1, #8
 8001272:	4815      	ldr	r0, [pc, #84]	; (80012c8 <HAL_CAN_RxFifo1MsgPendingCallback+0x68>)
 8001274:	f002 fcc2 	bl	8003bfc <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(ACTUATOR_GPIO_PORT, LEDG_Pin);
 8001278:	2110      	movs	r1, #16
 800127a:	4813      	ldr	r0, [pc, #76]	; (80012c8 <HAL_CAN_RxFifo1MsgPendingCallback+0x68>)
 800127c:	f002 fcbe 	bl	8003bfc <HAL_GPIO_TogglePin>
	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &CANRxHeader, CANRxBuffer) != HAL_OK)
 8001280:	4b12      	ldr	r3, [pc, #72]	; (80012cc <HAL_CAN_RxFifo1MsgPendingCallback+0x6c>)
 8001282:	4a13      	ldr	r2, [pc, #76]	; (80012d0 <HAL_CAN_RxFifo1MsgPendingCallback+0x70>)
 8001284:	2101      	movs	r1, #1
 8001286:	6878      	ldr	r0, [r7, #4]
 8001288:	f001 fea5 	bl	8002fd6 <HAL_CAN_GetRxMessage>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <HAL_CAN_RxFifo1MsgPendingCallback+0x36>
	{
		Error_Handler();
 8001292:	f000 fcb1 	bl	8001bf8 <Error_Handler>
	}

	if (CANRxHeader.StdId == CAN_PROJECT_SENSOR_STDID)
 8001296:	4b0e      	ldr	r3, [pc, #56]	; (80012d0 <HAL_CAN_RxFifo1MsgPendingCallback+0x70>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f240 72a2 	movw	r2, #1954	; 0x7a2
 800129e:	4293      	cmp	r3, r2
 80012a0:	d10e      	bne.n	80012c0 <HAL_CAN_RxFifo1MsgPendingCallback+0x60>
	{
		CANDataRcvFlag = 1;
 80012a2:	4b0c      	ldr	r3, [pc, #48]	; (80012d4 <HAL_CAN_RxFifo1MsgPendingCallback+0x74>)
 80012a4:	2201      	movs	r2, #1
 80012a6:	701a      	strb	r2, [r3, #0]
		timeElapsed = 0;
 80012a8:	4b0b      	ldr	r3, [pc, #44]	; (80012d8 <HAL_CAN_RxFifo1MsgPendingCallback+0x78>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	601a      	str	r2, [r3, #0]
		CONTROL_PRIORITY priority = CANRxBuffer[CAN_SENSOR_DATA_PRI_IDX];
 80012ae:	4b07      	ldr	r3, [pc, #28]	; (80012cc <HAL_CAN_RxFifo1MsgPendingCallback+0x6c>)
 80012b0:	789b      	ldrb	r3, [r3, #2]
 80012b2:	73fb      	strb	r3, [r7, #15]
		if (priority == CONTROL_PRIOR_URGENT)
 80012b4:	7bfb      	ldrb	r3, [r7, #15]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d102      	bne.n	80012c0 <HAL_CAN_RxFifo1MsgPendingCallback+0x60>
		{
			urgent_mode = 1;
 80012ba:	4b08      	ldr	r3, [pc, #32]	; (80012dc <HAL_CAN_RxFifo1MsgPendingCallback+0x7c>)
 80012bc:	2201      	movs	r2, #1
 80012be:	701a      	strb	r2, [r3, #0]
		}
	}
}
 80012c0:	bf00      	nop
 80012c2:	3710      	adds	r7, #16
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	40010c00 	.word	0x40010c00
 80012cc:	20000228 	.word	0x20000228
 80012d0:	20000230 	.word	0x20000230
 80012d4:	2000024c 	.word	0x2000024c
 80012d8:	200004c8 	.word	0x200004c8
 80012dc:	2000024d 	.word	0x2000024d

080012e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b086      	sub	sp, #24
 80012e4:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012e6:	f001 fb3d 	bl	8002964 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012ea:	f000 f93d 	bl	8001568 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012ee:	f000 fbef 	bl	8001ad0 <MX_GPIO_Init>
  MX_I2C2_Init();
 80012f2:	f000 f9d5 	bl	80016a0 <MX_I2C2_Init>
  MX_SPI1_Init();
 80012f6:	f000 fa01 	bl	80016fc <MX_SPI1_Init>
  MX_TIM2_Init();
 80012fa:	f000 fac3 	bl	8001884 <MX_TIM2_Init>
  MX_TIM3_Init();
 80012fe:	f000 fb15 	bl	800192c <MX_TIM3_Init>
  MX_TIM4_Init();
 8001302:	f000 fb61 	bl	80019c8 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8001306:	f000 fbb9 	bl	8001a7c <MX_USART1_UART_Init>
  MX_CAN_Init();
 800130a:	f000 f973 	bl	80015f4 <MX_CAN_Init>
  MX_TIM1_Init();
 800130e:	f000 fa2b 	bl	8001768 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 8001312:	4881      	ldr	r0, [pc, #516]	; (8001518 <main+0x238>)
 8001314:	f003 fab4 	bl	8004880 <HAL_TIM_Base_Start_IT>
  if (HAL_CAN_Start(&hcan) != HAL_OK)
 8001318:	4880      	ldr	r0, [pc, #512]	; (800151c <main+0x23c>)
 800131a:	f001 fd49 	bl	8002db0 <HAL_CAN_Start>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d001      	beq.n	8001328 <main+0x48>
  {
	  Error_Handler();
 8001324:	f000 fc68 	bl	8001bf8 <Error_Handler>
  }
  HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO1_MSG_PENDING);
 8001328:	2110      	movs	r1, #16
 800132a:	487c      	ldr	r0, [pc, #496]	; (800151c <main+0x23c>)
 800132c:	f001 ff74 	bl	8003218 <HAL_CAN_ActivateNotification>

  startEncoder();
 8001330:	f000 fc70 	bl	8001c14 <startEncoder>
  motorInit(&motor1, &htim1, TIM_CHANNEL_1, TIM_CHANNEL_4, L_EN_GPIO_Port, L_EN_Pin, R_EN_GPIO_Port, R_EN_Pin);
 8001334:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001338:	9303      	str	r3, [sp, #12]
 800133a:	4b79      	ldr	r3, [pc, #484]	; (8001520 <main+0x240>)
 800133c:	9302      	str	r3, [sp, #8]
 800133e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001342:	9301      	str	r3, [sp, #4]
 8001344:	4b76      	ldr	r3, [pc, #472]	; (8001520 <main+0x240>)
 8001346:	9300      	str	r3, [sp, #0]
 8001348:	230c      	movs	r3, #12
 800134a:	2200      	movs	r2, #0
 800134c:	4975      	ldr	r1, [pc, #468]	; (8001524 <main+0x244>)
 800134e:	4876      	ldr	r0, [pc, #472]	; (8001528 <main+0x248>)
 8001350:	f000 fcb2 	bl	8001cb8 <motorInit>
  startMotor(&motor1);
 8001354:	4874      	ldr	r0, [pc, #464]	; (8001528 <main+0x248>)
 8001356:	f000 fd0b 	bl	8001d70 <startMotor>
  initServo();
 800135a:	f000 ff01 	bl	8002160 <initServo>
  printf("Actuator\n");
 800135e:	4873      	ldr	r0, [pc, #460]	; (800152c <main+0x24c>)
 8001360:	f005 fd54 	bl	8006e0c <puts>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	updateEncoder();
 8001364:	f000 fc60 	bl	8001c28 <updateEncoder>
	cur_speed = encoderInfo.speed;
 8001368:	4b71      	ldr	r3, [pc, #452]	; (8001530 <main+0x250>)
 800136a:	691b      	ldr	r3, [r3, #16]
 800136c:	4a71      	ldr	r2, [pc, #452]	; (8001534 <main+0x254>)
 800136e:	6013      	str	r3, [r2, #0]
	if (CANDataRcvFlag == 1 || timeElapsed >= 1000)
 8001370:	4b71      	ldr	r3, [pc, #452]	; (8001538 <main+0x258>)
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	2b01      	cmp	r3, #1
 8001376:	d004      	beq.n	8001382 <main+0xa2>
 8001378:	4b70      	ldr	r3, [pc, #448]	; (800153c <main+0x25c>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001380:	d3f0      	bcc.n	8001364 <main+0x84>
	{
		CANTxData.sequence++;
 8001382:	4b6f      	ldr	r3, [pc, #444]	; (8001540 <main+0x260>)
 8001384:	881b      	ldrh	r3, [r3, #0]
 8001386:	3301      	adds	r3, #1
 8001388:	b29a      	uxth	r2, r3
 800138a:	4b6d      	ldr	r3, [pc, #436]	; (8001540 <main+0x260>)
 800138c:	801a      	strh	r2, [r3, #0]
		CANTxData.speed = (uint8_t)cur_speed;
 800138e:	4b69      	ldr	r3, [pc, #420]	; (8001534 <main+0x254>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4618      	mov	r0, r3
 8001394:	f7ff febc 	bl	8001110 <__aeabi_f2uiz>
 8001398:	4603      	mov	r3, r0
 800139a:	b2da      	uxtb	r2, r3
 800139c:	4b68      	ldr	r3, [pc, #416]	; (8001540 <main+0x260>)
 800139e:	709a      	strb	r2, [r3, #2]
		des_speed = (float)CANRxBuffer[CAN_SENSOR_DATA_SPEED_IDX];
 80013a0:	4b68      	ldr	r3, [pc, #416]	; (8001544 <main+0x264>)
 80013a2:	78db      	ldrb	r3, [r3, #3]
 80013a4:	4618      	mov	r0, r3
 80013a6:	f7ff fc95 	bl	8000cd4 <__aeabi_ui2f>
 80013aa:	4603      	mov	r3, r0
 80013ac:	4a66      	ldr	r2, [pc, #408]	; (8001548 <main+0x268>)
 80013ae:	6013      	str	r3, [r2, #0]
		timeElapsed = 0;
 80013b0:	4b62      	ldr	r3, [pc, #392]	; (800153c <main+0x25c>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	601a      	str	r2, [r3, #0]
		CANDataRcvFlag = 0;
 80013b6:	4b60      	ldr	r3, [pc, #384]	; (8001538 <main+0x258>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	701a      	strb	r2, [r3, #0]
		cur_seq = CANRxBuffer[CAN_DATA_SEQ_IDX] << 8 |
 80013bc:	4b61      	ldr	r3, [pc, #388]	; (8001544 <main+0x264>)
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	021b      	lsls	r3, r3, #8
 80013c2:	b25a      	sxtb	r2, r3
					CANRxBuffer[CAN_DATA_SEQ_IDX+1];
 80013c4:	4b5f      	ldr	r3, [pc, #380]	; (8001544 <main+0x264>)
 80013c6:	785b      	ldrb	r3, [r3, #1]
 80013c8:	b25b      	sxtb	r3, r3
		cur_seq = CANRxBuffer[CAN_DATA_SEQ_IDX] << 8 |
 80013ca:	4313      	orrs	r3, r2
 80013cc:	b25b      	sxtb	r3, r3
 80013ce:	b2da      	uxtb	r2, r3
 80013d0:	4b5e      	ldr	r3, [pc, #376]	; (800154c <main+0x26c>)
 80013d2:	701a      	strb	r2, [r3, #0]
		uint8_t direction1 = CANRxBuffer[CAN_SENSOR_DATA_DIRECT1_IDX];
 80013d4:	4b5b      	ldr	r3, [pc, #364]	; (8001544 <main+0x264>)
 80013d6:	791b      	ldrb	r3, [r3, #4]
 80013d8:	71bb      	strb	r3, [r7, #6]
		uint8_t direction2 = CANRxBuffer[CAN_SENSOR_DATA_DIRECT2_IDX];
 80013da:	4b5a      	ldr	r3, [pc, #360]	; (8001544 <main+0x264>)
 80013dc:	795b      	ldrb	r3, [r3, #5]
 80013de:	717b      	strb	r3, [r7, #5]

		if (urgent_mode == 1)
 80013e0:	4b5b      	ldr	r3, [pc, #364]	; (8001550 <main+0x270>)
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	2b01      	cmp	r3, #1
 80013e6:	d110      	bne.n	800140a <main+0x12a>
		{
			if (cur_speed > CAN_SPEED_MIN)
 80013e8:	4b52      	ldr	r3, [pc, #328]	; (8001534 <main+0x254>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4959      	ldr	r1, [pc, #356]	; (8001554 <main+0x274>)
 80013ee:	4618      	mov	r0, r3
 80013f0:	f7ff fe84 	bl	80010fc <__aeabi_fcmpgt>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d003      	beq.n	8001402 <main+0x122>
			{
				stopMotor(&motor1);
 80013fa:	484b      	ldr	r0, [pc, #300]	; (8001528 <main+0x248>)
 80013fc:	f000 fce3 	bl	8001dc6 <stopMotor>
 8001400:	e078      	b.n	80014f4 <main+0x214>
			}
			else
			{
				urgent_mode = 0;
 8001402:	4b53      	ldr	r3, [pc, #332]	; (8001550 <main+0x270>)
 8001404:	2200      	movs	r2, #0
 8001406:	701a      	strb	r2, [r3, #0]
 8001408:	e074      	b.n	80014f4 <main+0x214>
			}
		}
		else
		{
			if (cur_seq == last_seq)
 800140a:	4b50      	ldr	r3, [pc, #320]	; (800154c <main+0x26c>)
 800140c:	781a      	ldrb	r2, [r3, #0]
 800140e:	4b52      	ldr	r3, [pc, #328]	; (8001558 <main+0x278>)
 8001410:	781b      	ldrb	r3, [r3, #0]
 8001412:	429a      	cmp	r2, r3
 8001414:	d103      	bne.n	800141e <main+0x13e>
			{
				urgent_mode = 1;
 8001416:	4b4e      	ldr	r3, [pc, #312]	; (8001550 <main+0x270>)
 8001418:	2201      	movs	r2, #1
 800141a:	701a      	strb	r2, [r3, #0]
 800141c:	e06a      	b.n	80014f4 <main+0x214>
			}
			else
			{
				// Hướng Motor
				des_speed = CANRxBuffer[CAN_SENSOR_DATA_SPEED_IDX];
 800141e:	4b49      	ldr	r3, [pc, #292]	; (8001544 <main+0x264>)
 8001420:	78db      	ldrb	r3, [r3, #3]
 8001422:	4618      	mov	r0, r3
 8001424:	f7ff fc56 	bl	8000cd4 <__aeabi_ui2f>
 8001428:	4603      	mov	r3, r0
 800142a:	4a47      	ldr	r2, [pc, #284]	; (8001548 <main+0x268>)
 800142c:	6013      	str	r3, [r2, #0]
				switch (direction1)
 800142e:	79bb      	ldrb	r3, [r7, #6]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d002      	beq.n	800143a <main+0x15a>
 8001434:	2b01      	cmp	r3, #1
 8001436:	d004      	beq.n	8001442 <main+0x162>
						des_speed = -des_speed;
						break;
					}
					default:
					{
						break;
 8001438:	e00d      	b.n	8001456 <main+0x176>
						backward = 0;
 800143a:	4b48      	ldr	r3, [pc, #288]	; (800155c <main+0x27c>)
 800143c:	2200      	movs	r2, #0
 800143e:	701a      	strb	r2, [r3, #0]
						break;
 8001440:	e009      	b.n	8001456 <main+0x176>
						backward = 1;
 8001442:	4b46      	ldr	r3, [pc, #280]	; (800155c <main+0x27c>)
 8001444:	2201      	movs	r2, #1
 8001446:	701a      	strb	r2, [r3, #0]
						des_speed = -des_speed;
 8001448:	4b3f      	ldr	r3, [pc, #252]	; (8001548 <main+0x268>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001450:	4a3d      	ldr	r2, [pc, #244]	; (8001548 <main+0x268>)
 8001452:	6013      	str	r3, [r2, #0]
						break;
 8001454:	bf00      	nop
					}
				}
				// Góc xoay
				switch (direction2)
 8001456:	797b      	ldrb	r3, [r7, #5]
 8001458:	2b02      	cmp	r3, #2
 800145a:	d00b      	beq.n	8001474 <main+0x194>
 800145c:	2b02      	cmp	r3, #2
 800145e:	dc0c      	bgt.n	800147a <main+0x19a>
 8001460:	2b00      	cmp	r3, #0
 8001462:	d004      	beq.n	800146e <main+0x18e>
 8001464:	2b01      	cmp	r3, #1
 8001466:	d108      	bne.n	800147a <main+0x19a>
				{
					case(CONTROL_DIR_RIGHT):
					{
						angle = 10;
 8001468:	230a      	movs	r3, #10
 800146a:	71fb      	strb	r3, [r7, #7]
						break;
 800146c:	e006      	b.n	800147c <main+0x19c>
					}
					case(CONTROL_DIR_LEFT):
					{
						angle = 80;
 800146e:	2350      	movs	r3, #80	; 0x50
 8001470:	71fb      	strb	r3, [r7, #7]
						break;
 8001472:	e003      	b.n	800147c <main+0x19c>
					}
					case(CONTROL_DIR_STRAIGHT):
					{
						angle = 50;
 8001474:	2332      	movs	r3, #50	; 0x32
 8001476:	71fb      	strb	r3, [r7, #7]
						break;
 8001478:	e000      	b.n	800147c <main+0x19c>
					}
					default:
					{
						break;
 800147a:	bf00      	nop
					}
				}
				setAngle(angle);
 800147c:	79fb      	ldrb	r3, [r7, #7]
 800147e:	4618      	mov	r0, r3
 8001480:	f000 fe98 	bl	80021b4 <setAngle>
				outPID = PID(des_speed, cur_speed);
 8001484:	4b30      	ldr	r3, [pc, #192]	; (8001548 <main+0x268>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a2a      	ldr	r2, [pc, #168]	; (8001534 <main+0x254>)
 800148a:	6812      	ldr	r2, [r2, #0]
 800148c:	4611      	mov	r1, r2
 800148e:	4618      	mov	r0, r3
 8001490:	f000 fd9e 	bl	8001fd0 <PID>
 8001494:	4603      	mov	r3, r0
 8001496:	4a32      	ldr	r2, [pc, #200]	; (8001560 <main+0x280>)
 8001498:	6013      	str	r3, [r2, #0]
				PWM = speedToPWM((float)(outPID < 0) ? -outPID : outPID);
 800149a:	4b31      	ldr	r3, [pc, #196]	; (8001560 <main+0x280>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f04f 0100 	mov.w	r1, #0
 80014a2:	4618      	mov	r0, r3
 80014a4:	f7ff fe0c 	bl	80010c0 <__aeabi_fcmplt>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d004      	beq.n	80014b8 <main+0x1d8>
 80014ae:	4b2c      	ldr	r3, [pc, #176]	; (8001560 <main+0x280>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80014b6:	e001      	b.n	80014bc <main+0x1dc>
 80014b8:	4b29      	ldr	r3, [pc, #164]	; (8001560 <main+0x280>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4618      	mov	r0, r3
 80014be:	f000 fc2f 	bl	8001d20 <speedToPWM>
 80014c2:	4603      	mov	r3, r0
 80014c4:	4618      	mov	r0, r3
 80014c6:	f7ff fe23 	bl	8001110 <__aeabi_f2uiz>
 80014ca:	4603      	mov	r3, r0
 80014cc:	b2da      	uxtb	r2, r3
 80014ce:	4b25      	ldr	r3, [pc, #148]	; (8001564 <main+0x284>)
 80014d0:	701a      	strb	r2, [r3, #0]
				if (backward == 1)
 80014d2:	4b22      	ldr	r3, [pc, #136]	; (800155c <main+0x27c>)
 80014d4:	781b      	ldrb	r3, [r3, #0]
 80014d6:	2b01      	cmp	r3, #1
 80014d8:	d106      	bne.n	80014e8 <main+0x208>
				{
					goReverse(&motor1, PWM);
 80014da:	4b22      	ldr	r3, [pc, #136]	; (8001564 <main+0x284>)
 80014dc:	781b      	ldrb	r3, [r3, #0]
 80014de:	4619      	mov	r1, r3
 80014e0:	4811      	ldr	r0, [pc, #68]	; (8001528 <main+0x248>)
 80014e2:	f000 fd1b 	bl	8001f1c <goReverse>
 80014e6:	e005      	b.n	80014f4 <main+0x214>
				}
				else
				{
					goForward(&motor1, PWM);
 80014e8:	4b1e      	ldr	r3, [pc, #120]	; (8001564 <main+0x284>)
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	4619      	mov	r1, r3
 80014ee:	480e      	ldr	r0, [pc, #56]	; (8001528 <main+0x248>)
 80014f0:	f000 fcbb 	bl	8001e6a <goForward>
				}
			}
		}
		CANTxData.speed = (uint8_t)cur_speed;
 80014f4:	4b0f      	ldr	r3, [pc, #60]	; (8001534 <main+0x254>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4618      	mov	r0, r3
 80014fa:	f7ff fe09 	bl	8001110 <__aeabi_f2uiz>
 80014fe:	4603      	mov	r3, r0
 8001500:	b2da      	uxtb	r2, r3
 8001502:	4b0f      	ldr	r3, [pc, #60]	; (8001540 <main+0x260>)
 8001504:	709a      	strb	r2, [r3, #2]
		last_seq = cur_seq;
 8001506:	4b11      	ldr	r3, [pc, #68]	; (800154c <main+0x26c>)
 8001508:	781a      	ldrb	r2, [r3, #0]
 800150a:	4b13      	ldr	r3, [pc, #76]	; (8001558 <main+0x278>)
 800150c:	701a      	strb	r2, [r3, #0]
		CANActuatorResponse(&hcan, &CANTxData);
 800150e:	490c      	ldr	r1, [pc, #48]	; (8001540 <main+0x260>)
 8001510:	4802      	ldr	r0, [pc, #8]	; (800151c <main+0x23c>)
 8001512:	f7ff fe66 	bl	80011e2 <CANActuatorResponse>
	updateEncoder();
 8001516:	e725      	b.n	8001364 <main+0x84>
 8001518:	200003b4 	.word	0x200003b4
 800151c:	20000250 	.word	0x20000250
 8001520:	40010c00 	.word	0x40010c00
 8001524:	20000324 	.word	0x20000324
 8001528:	20000490 	.word	0x20000490
 800152c:	0800a740 	.word	0x0800a740
 8001530:	200004a8 	.word	0x200004a8
 8001534:	20000034 	.word	0x20000034
 8001538:	2000024c 	.word	0x2000024c
 800153c:	200004c8 	.word	0x200004c8
 8001540:	20000000 	.word	0x20000000
 8001544:	20000228 	.word	0x20000228
 8001548:	20000030 	.word	0x20000030
 800154c:	2000048d 	.word	0x2000048d
 8001550:	2000024d 	.word	0x2000024d
 8001554:	40e00000 	.word	0x40e00000
 8001558:	2000048c 	.word	0x2000048c
 800155c:	200004bc 	.word	0x200004bc
 8001560:	200004c0 	.word	0x200004c0
 8001564:	200004bd 	.word	0x200004bd

08001568 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b090      	sub	sp, #64	; 0x40
 800156c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800156e:	f107 0318 	add.w	r3, r7, #24
 8001572:	2228      	movs	r2, #40	; 0x28
 8001574:	2100      	movs	r1, #0
 8001576:	4618      	mov	r0, r3
 8001578:	f005 fd48 	bl	800700c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800157c:	1d3b      	adds	r3, r7, #4
 800157e:	2200      	movs	r2, #0
 8001580:	601a      	str	r2, [r3, #0]
 8001582:	605a      	str	r2, [r3, #4]
 8001584:	609a      	str	r2, [r3, #8]
 8001586:	60da      	str	r2, [r3, #12]
 8001588:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800158a:	2301      	movs	r3, #1
 800158c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800158e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001592:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001594:	2300      	movs	r3, #0
 8001596:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001598:	2301      	movs	r3, #1
 800159a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800159c:	2302      	movs	r3, #2
 800159e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015a4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80015a6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80015aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015ac:	f107 0318 	add.w	r3, r7, #24
 80015b0:	4618      	mov	r0, r3
 80015b2:	f002 fc81 	bl	8003eb8 <HAL_RCC_OscConfig>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d001      	beq.n	80015c0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80015bc:	f000 fb1c 	bl	8001bf8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015c0:	230f      	movs	r3, #15
 80015c2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015c4:	2302      	movs	r3, #2
 80015c6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015c8:	2300      	movs	r3, #0
 80015ca:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80015cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015d0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015d2:	2300      	movs	r3, #0
 80015d4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80015d6:	1d3b      	adds	r3, r7, #4
 80015d8:	2102      	movs	r1, #2
 80015da:	4618      	mov	r0, r3
 80015dc:	f002 feee 	bl	80043bc <HAL_RCC_ClockConfig>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d001      	beq.n	80015ea <SystemClock_Config+0x82>
  {
    Error_Handler();
 80015e6:	f000 fb07 	bl	8001bf8 <Error_Handler>
  }
}
 80015ea:	bf00      	nop
 80015ec:	3740      	adds	r7, #64	; 0x40
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
	...

080015f4 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b08a      	sub	sp, #40	; 0x28
 80015f8:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 80015fa:	4b27      	ldr	r3, [pc, #156]	; (8001698 <MX_CAN_Init+0xa4>)
 80015fc:	4a27      	ldr	r2, [pc, #156]	; (800169c <MX_CAN_Init+0xa8>)
 80015fe:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 8001600:	4b25      	ldr	r3, [pc, #148]	; (8001698 <MX_CAN_Init+0xa4>)
 8001602:	2204      	movs	r2, #4
 8001604:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8001606:	4b24      	ldr	r3, [pc, #144]	; (8001698 <MX_CAN_Init+0xa4>)
 8001608:	2200      	movs	r2, #0
 800160a:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_2TQ;
 800160c:	4b22      	ldr	r3, [pc, #136]	; (8001698 <MX_CAN_Init+0xa4>)
 800160e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001612:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 8001614:	4b20      	ldr	r3, [pc, #128]	; (8001698 <MX_CAN_Init+0xa4>)
 8001616:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 800161a:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_4TQ;
 800161c:	4b1e      	ldr	r3, [pc, #120]	; (8001698 <MX_CAN_Init+0xa4>)
 800161e:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8001622:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8001624:	4b1c      	ldr	r3, [pc, #112]	; (8001698 <MX_CAN_Init+0xa4>)
 8001626:	2200      	movs	r2, #0
 8001628:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800162a:	4b1b      	ldr	r3, [pc, #108]	; (8001698 <MX_CAN_Init+0xa4>)
 800162c:	2200      	movs	r2, #0
 800162e:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8001630:	4b19      	ldr	r3, [pc, #100]	; (8001698 <MX_CAN_Init+0xa4>)
 8001632:	2200      	movs	r2, #0
 8001634:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8001636:	4b18      	ldr	r3, [pc, #96]	; (8001698 <MX_CAN_Init+0xa4>)
 8001638:	2200      	movs	r2, #0
 800163a:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800163c:	4b16      	ldr	r3, [pc, #88]	; (8001698 <MX_CAN_Init+0xa4>)
 800163e:	2200      	movs	r2, #0
 8001640:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8001642:	4b15      	ldr	r3, [pc, #84]	; (8001698 <MX_CAN_Init+0xa4>)
 8001644:	2200      	movs	r2, #0
 8001646:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8001648:	4813      	ldr	r0, [pc, #76]	; (8001698 <MX_CAN_Init+0xa4>)
 800164a:	f001 f9ed 	bl	8002a28 <HAL_CAN_Init>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d001      	beq.n	8001658 <MX_CAN_Init+0x64>
  {
    Error_Handler();
 8001654:	f000 fad0 	bl	8001bf8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  CAN_FilterTypeDef canfilterconfig;

  canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8001658:	2301      	movs	r3, #1
 800165a:	623b      	str	r3, [r7, #32]
  canfilterconfig.FilterBank = 12;  // which filter bank to use from the assigned ones
 800165c:	230c      	movs	r3, #12
 800165e:	617b      	str	r3, [r7, #20]
  canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO1;
 8001660:	2301      	movs	r3, #1
 8001662:	613b      	str	r3, [r7, #16]
  canfilterconfig.FilterIdHigh = CAN_PROJECT_SENSOR_STDID<<5;
 8001664:	f24f 4340 	movw	r3, #62528	; 0xf440
 8001668:	603b      	str	r3, [r7, #0]
  canfilterconfig.FilterIdLow = 0;
 800166a:	2300      	movs	r3, #0
 800166c:	607b      	str	r3, [r7, #4]
  canfilterconfig.FilterMaskIdHigh = CAN_PROJECT_SENSOR_STDID<<5;
 800166e:	f24f 4340 	movw	r3, #62528	; 0xf440
 8001672:	60bb      	str	r3, [r7, #8]
  canfilterconfig.FilterMaskIdLow = 0x0000;
 8001674:	2300      	movs	r3, #0
 8001676:	60fb      	str	r3, [r7, #12]
  canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8001678:	2300      	movs	r3, #0
 800167a:	61bb      	str	r3, [r7, #24]
  canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800167c:	2301      	movs	r3, #1
 800167e:	61fb      	str	r3, [r7, #28]
  canfilterconfig.SlaveStartFilterBank = 13;  // how many filters to assign to the CAN1 (master can)
 8001680:	230d      	movs	r3, #13
 8001682:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_CAN_ConfigFilter(&hcan, &canfilterconfig);
 8001684:	463b      	mov	r3, r7
 8001686:	4619      	mov	r1, r3
 8001688:	4803      	ldr	r0, [pc, #12]	; (8001698 <MX_CAN_Init+0xa4>)
 800168a:	f001 fac8 	bl	8002c1e <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN_Init 2 */

}
 800168e:	bf00      	nop
 8001690:	3728      	adds	r7, #40	; 0x28
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	20000250 	.word	0x20000250
 800169c:	40006400 	.word	0x40006400

080016a0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80016a4:	4b12      	ldr	r3, [pc, #72]	; (80016f0 <MX_I2C2_Init+0x50>)
 80016a6:	4a13      	ldr	r2, [pc, #76]	; (80016f4 <MX_I2C2_Init+0x54>)
 80016a8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80016aa:	4b11      	ldr	r3, [pc, #68]	; (80016f0 <MX_I2C2_Init+0x50>)
 80016ac:	4a12      	ldr	r2, [pc, #72]	; (80016f8 <MX_I2C2_Init+0x58>)
 80016ae:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80016b0:	4b0f      	ldr	r3, [pc, #60]	; (80016f0 <MX_I2C2_Init+0x50>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80016b6:	4b0e      	ldr	r3, [pc, #56]	; (80016f0 <MX_I2C2_Init+0x50>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016bc:	4b0c      	ldr	r3, [pc, #48]	; (80016f0 <MX_I2C2_Init+0x50>)
 80016be:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80016c2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016c4:	4b0a      	ldr	r3, [pc, #40]	; (80016f0 <MX_I2C2_Init+0x50>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80016ca:	4b09      	ldr	r3, [pc, #36]	; (80016f0 <MX_I2C2_Init+0x50>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016d0:	4b07      	ldr	r3, [pc, #28]	; (80016f0 <MX_I2C2_Init+0x50>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016d6:	4b06      	ldr	r3, [pc, #24]	; (80016f0 <MX_I2C2_Init+0x50>)
 80016d8:	2200      	movs	r2, #0
 80016da:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80016dc:	4804      	ldr	r0, [pc, #16]	; (80016f0 <MX_I2C2_Init+0x50>)
 80016de:	f002 faa7 	bl	8003c30 <HAL_I2C_Init>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d001      	beq.n	80016ec <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80016e8:	f000 fa86 	bl	8001bf8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80016ec:	bf00      	nop
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	20000278 	.word	0x20000278
 80016f4:	40005800 	.word	0x40005800
 80016f8:	000186a0 	.word	0x000186a0

080016fc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001700:	4b17      	ldr	r3, [pc, #92]	; (8001760 <MX_SPI1_Init+0x64>)
 8001702:	4a18      	ldr	r2, [pc, #96]	; (8001764 <MX_SPI1_Init+0x68>)
 8001704:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001706:	4b16      	ldr	r3, [pc, #88]	; (8001760 <MX_SPI1_Init+0x64>)
 8001708:	f44f 7282 	mov.w	r2, #260	; 0x104
 800170c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800170e:	4b14      	ldr	r3, [pc, #80]	; (8001760 <MX_SPI1_Init+0x64>)
 8001710:	2200      	movs	r2, #0
 8001712:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001714:	4b12      	ldr	r3, [pc, #72]	; (8001760 <MX_SPI1_Init+0x64>)
 8001716:	2200      	movs	r2, #0
 8001718:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800171a:	4b11      	ldr	r3, [pc, #68]	; (8001760 <MX_SPI1_Init+0x64>)
 800171c:	2200      	movs	r2, #0
 800171e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001720:	4b0f      	ldr	r3, [pc, #60]	; (8001760 <MX_SPI1_Init+0x64>)
 8001722:	2200      	movs	r2, #0
 8001724:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001726:	4b0e      	ldr	r3, [pc, #56]	; (8001760 <MX_SPI1_Init+0x64>)
 8001728:	f44f 7200 	mov.w	r2, #512	; 0x200
 800172c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800172e:	4b0c      	ldr	r3, [pc, #48]	; (8001760 <MX_SPI1_Init+0x64>)
 8001730:	2208      	movs	r2, #8
 8001732:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001734:	4b0a      	ldr	r3, [pc, #40]	; (8001760 <MX_SPI1_Init+0x64>)
 8001736:	2200      	movs	r2, #0
 8001738:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800173a:	4b09      	ldr	r3, [pc, #36]	; (8001760 <MX_SPI1_Init+0x64>)
 800173c:	2200      	movs	r2, #0
 800173e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001740:	4b07      	ldr	r3, [pc, #28]	; (8001760 <MX_SPI1_Init+0x64>)
 8001742:	2200      	movs	r2, #0
 8001744:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001746:	4b06      	ldr	r3, [pc, #24]	; (8001760 <MX_SPI1_Init+0x64>)
 8001748:	220a      	movs	r2, #10
 800174a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800174c:	4804      	ldr	r0, [pc, #16]	; (8001760 <MX_SPI1_Init+0x64>)
 800174e:	f002 ffc3 	bl	80046d8 <HAL_SPI_Init>
 8001752:	4603      	mov	r3, r0
 8001754:	2b00      	cmp	r3, #0
 8001756:	d001      	beq.n	800175c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001758:	f000 fa4e 	bl	8001bf8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800175c:	bf00      	nop
 800175e:	bd80      	pop	{r7, pc}
 8001760:	200002cc 	.word	0x200002cc
 8001764:	40013000 	.word	0x40013000

08001768 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b092      	sub	sp, #72	; 0x48
 800176c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800176e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001772:	2200      	movs	r2, #0
 8001774:	601a      	str	r2, [r3, #0]
 8001776:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001778:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800177c:	2200      	movs	r2, #0
 800177e:	601a      	str	r2, [r3, #0]
 8001780:	605a      	str	r2, [r3, #4]
 8001782:	609a      	str	r2, [r3, #8]
 8001784:	60da      	str	r2, [r3, #12]
 8001786:	611a      	str	r2, [r3, #16]
 8001788:	615a      	str	r2, [r3, #20]
 800178a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800178c:	1d3b      	adds	r3, r7, #4
 800178e:	2220      	movs	r2, #32
 8001790:	2100      	movs	r1, #0
 8001792:	4618      	mov	r0, r3
 8001794:	f005 fc3a 	bl	800700c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001798:	4b38      	ldr	r3, [pc, #224]	; (800187c <MX_TIM1_Init+0x114>)
 800179a:	4a39      	ldr	r2, [pc, #228]	; (8001880 <MX_TIM1_Init+0x118>)
 800179c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 15;
 800179e:	4b37      	ldr	r3, [pc, #220]	; (800187c <MX_TIM1_Init+0x114>)
 80017a0:	220f      	movs	r2, #15
 80017a2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017a4:	4b35      	ldr	r3, [pc, #212]	; (800187c <MX_TIM1_Init+0x114>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 80017aa:	4b34      	ldr	r3, [pc, #208]	; (800187c <MX_TIM1_Init+0x114>)
 80017ac:	2263      	movs	r2, #99	; 0x63
 80017ae:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017b0:	4b32      	ldr	r3, [pc, #200]	; (800187c <MX_TIM1_Init+0x114>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80017b6:	4b31      	ldr	r3, [pc, #196]	; (800187c <MX_TIM1_Init+0x114>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017bc:	4b2f      	ldr	r3, [pc, #188]	; (800187c <MX_TIM1_Init+0x114>)
 80017be:	2200      	movs	r2, #0
 80017c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80017c2:	482e      	ldr	r0, [pc, #184]	; (800187c <MX_TIM1_Init+0x114>)
 80017c4:	f003 f8ae 	bl	8004924 <HAL_TIM_PWM_Init>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d001      	beq.n	80017d2 <MX_TIM1_Init+0x6a>
  {
    Error_Handler();
 80017ce:	f000 fa13 	bl	8001bf8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017d2:	2300      	movs	r3, #0
 80017d4:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017d6:	2300      	movs	r3, #0
 80017d8:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80017da:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80017de:	4619      	mov	r1, r3
 80017e0:	4826      	ldr	r0, [pc, #152]	; (800187c <MX_TIM1_Init+0x114>)
 80017e2:	f004 f901 	bl	80059e8 <HAL_TIMEx_MasterConfigSynchronization>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d001      	beq.n	80017f0 <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 80017ec:	f000 fa04 	bl	8001bf8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017f0:	2360      	movs	r3, #96	; 0x60
 80017f2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80017f4:	2300      	movs	r3, #0
 80017f6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017f8:	2300      	movs	r3, #0
 80017fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80017fc:	2300      	movs	r3, #0
 80017fe:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001800:	2300      	movs	r3, #0
 8001802:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001804:	2300      	movs	r3, #0
 8001806:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001808:	2300      	movs	r3, #0
 800180a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800180c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001810:	2200      	movs	r2, #0
 8001812:	4619      	mov	r1, r3
 8001814:	4819      	ldr	r0, [pc, #100]	; (800187c <MX_TIM1_Init+0x114>)
 8001816:	f003 fc9f 	bl	8005158 <HAL_TIM_PWM_ConfigChannel>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d001      	beq.n	8001824 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 8001820:	f000 f9ea 	bl	8001bf8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001824:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001828:	220c      	movs	r2, #12
 800182a:	4619      	mov	r1, r3
 800182c:	4813      	ldr	r0, [pc, #76]	; (800187c <MX_TIM1_Init+0x114>)
 800182e:	f003 fc93 	bl	8005158 <HAL_TIM_PWM_ConfigChannel>
 8001832:	4603      	mov	r3, r0
 8001834:	2b00      	cmp	r3, #0
 8001836:	d001      	beq.n	800183c <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 8001838:	f000 f9de 	bl	8001bf8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800183c:	2300      	movs	r3, #0
 800183e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001840:	2300      	movs	r3, #0
 8001842:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001844:	2300      	movs	r3, #0
 8001846:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001848:	2300      	movs	r3, #0
 800184a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800184c:	2300      	movs	r3, #0
 800184e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001850:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001854:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001856:	2300      	movs	r3, #0
 8001858:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800185a:	1d3b      	adds	r3, r7, #4
 800185c:	4619      	mov	r1, r3
 800185e:	4807      	ldr	r0, [pc, #28]	; (800187c <MX_TIM1_Init+0x114>)
 8001860:	f004 f920 	bl	8005aa4 <HAL_TIMEx_ConfigBreakDeadTime>
 8001864:	4603      	mov	r3, r0
 8001866:	2b00      	cmp	r3, #0
 8001868:	d001      	beq.n	800186e <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 800186a:	f000 f9c5 	bl	8001bf8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800186e:	4803      	ldr	r0, [pc, #12]	; (800187c <MX_TIM1_Init+0x114>)
 8001870:	f000 fe6a 	bl	8002548 <HAL_TIM_MspPostInit>

}
 8001874:	bf00      	nop
 8001876:	3748      	adds	r7, #72	; 0x48
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}
 800187c:	20000324 	.word	0x20000324
 8001880:	40012c00 	.word	0x40012c00

08001884 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b08c      	sub	sp, #48	; 0x30
 8001888:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800188a:	f107 030c 	add.w	r3, r7, #12
 800188e:	2224      	movs	r2, #36	; 0x24
 8001890:	2100      	movs	r1, #0
 8001892:	4618      	mov	r0, r3
 8001894:	f005 fbba 	bl	800700c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001898:	1d3b      	adds	r3, r7, #4
 800189a:	2200      	movs	r2, #0
 800189c:	601a      	str	r2, [r3, #0]
 800189e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80018a0:	4b21      	ldr	r3, [pc, #132]	; (8001928 <MX_TIM2_Init+0xa4>)
 80018a2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80018a6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80018a8:	4b1f      	ldr	r3, [pc, #124]	; (8001928 <MX_TIM2_Init+0xa4>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018ae:	4b1e      	ldr	r3, [pc, #120]	; (8001928 <MX_TIM2_Init+0xa4>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80018b4:	4b1c      	ldr	r3, [pc, #112]	; (8001928 <MX_TIM2_Init+0xa4>)
 80018b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80018ba:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018bc:	4b1a      	ldr	r3, [pc, #104]	; (8001928 <MX_TIM2_Init+0xa4>)
 80018be:	2200      	movs	r2, #0
 80018c0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018c2:	4b19      	ldr	r3, [pc, #100]	; (8001928 <MX_TIM2_Init+0xa4>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80018c8:	2301      	movs	r3, #1
 80018ca:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80018cc:	2300      	movs	r3, #0
 80018ce:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80018d0:	2301      	movs	r3, #1
 80018d2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80018d4:	2300      	movs	r3, #0
 80018d6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80018d8:	2300      	movs	r3, #0
 80018da:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80018dc:	2300      	movs	r3, #0
 80018de:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80018e0:	2301      	movs	r3, #1
 80018e2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80018e4:	2300      	movs	r3, #0
 80018e6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80018e8:	2300      	movs	r3, #0
 80018ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80018ec:	f107 030c 	add.w	r3, r7, #12
 80018f0:	4619      	mov	r1, r3
 80018f2:	480d      	ldr	r0, [pc, #52]	; (8001928 <MX_TIM2_Init+0xa4>)
 80018f4:	f003 f9f8 	bl	8004ce8 <HAL_TIM_Encoder_Init>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d001      	beq.n	8001902 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80018fe:	f000 f97b 	bl	8001bf8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001902:	2300      	movs	r3, #0
 8001904:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001906:	2300      	movs	r3, #0
 8001908:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800190a:	1d3b      	adds	r3, r7, #4
 800190c:	4619      	mov	r1, r3
 800190e:	4806      	ldr	r0, [pc, #24]	; (8001928 <MX_TIM2_Init+0xa4>)
 8001910:	f004 f86a 	bl	80059e8 <HAL_TIMEx_MasterConfigSynchronization>
 8001914:	4603      	mov	r3, r0
 8001916:	2b00      	cmp	r3, #0
 8001918:	d001      	beq.n	800191e <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800191a:	f000 f96d 	bl	8001bf8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800191e:	bf00      	nop
 8001920:	3730      	adds	r7, #48	; 0x30
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	2000036c 	.word	0x2000036c

0800192c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b086      	sub	sp, #24
 8001930:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001932:	f107 0308 	add.w	r3, r7, #8
 8001936:	2200      	movs	r2, #0
 8001938:	601a      	str	r2, [r3, #0]
 800193a:	605a      	str	r2, [r3, #4]
 800193c:	609a      	str	r2, [r3, #8]
 800193e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001940:	463b      	mov	r3, r7
 8001942:	2200      	movs	r2, #0
 8001944:	601a      	str	r2, [r3, #0]
 8001946:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001948:	4b1d      	ldr	r3, [pc, #116]	; (80019c0 <MX_TIM3_Init+0x94>)
 800194a:	4a1e      	ldr	r2, [pc, #120]	; (80019c4 <MX_TIM3_Init+0x98>)
 800194c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 35999;
 800194e:	4b1c      	ldr	r3, [pc, #112]	; (80019c0 <MX_TIM3_Init+0x94>)
 8001950:	f648 429f 	movw	r2, #35999	; 0x8c9f
 8001954:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001956:	4b1a      	ldr	r3, [pc, #104]	; (80019c0 <MX_TIM3_Init+0x94>)
 8001958:	2200      	movs	r2, #0
 800195a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 199;
 800195c:	4b18      	ldr	r3, [pc, #96]	; (80019c0 <MX_TIM3_Init+0x94>)
 800195e:	22c7      	movs	r2, #199	; 0xc7
 8001960:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001962:	4b17      	ldr	r3, [pc, #92]	; (80019c0 <MX_TIM3_Init+0x94>)
 8001964:	2200      	movs	r2, #0
 8001966:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001968:	4b15      	ldr	r3, [pc, #84]	; (80019c0 <MX_TIM3_Init+0x94>)
 800196a:	2200      	movs	r2, #0
 800196c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800196e:	4814      	ldr	r0, [pc, #80]	; (80019c0 <MX_TIM3_Init+0x94>)
 8001970:	f002 ff36 	bl	80047e0 <HAL_TIM_Base_Init>
 8001974:	4603      	mov	r3, r0
 8001976:	2b00      	cmp	r3, #0
 8001978:	d001      	beq.n	800197e <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800197a:	f000 f93d 	bl	8001bf8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800197e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001982:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001984:	f107 0308 	add.w	r3, r7, #8
 8001988:	4619      	mov	r1, r3
 800198a:	480d      	ldr	r0, [pc, #52]	; (80019c0 <MX_TIM3_Init+0x94>)
 800198c:	f003 fca6 	bl	80052dc <HAL_TIM_ConfigClockSource>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	d001      	beq.n	800199a <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8001996:	f000 f92f 	bl	8001bf8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800199a:	2300      	movs	r3, #0
 800199c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800199e:	2300      	movs	r3, #0
 80019a0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80019a2:	463b      	mov	r3, r7
 80019a4:	4619      	mov	r1, r3
 80019a6:	4806      	ldr	r0, [pc, #24]	; (80019c0 <MX_TIM3_Init+0x94>)
 80019a8:	f004 f81e 	bl	80059e8 <HAL_TIMEx_MasterConfigSynchronization>
 80019ac:	4603      	mov	r3, r0
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d001      	beq.n	80019b6 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80019b2:	f000 f921 	bl	8001bf8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80019b6:	bf00      	nop
 80019b8:	3718      	adds	r7, #24
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	200003b4 	.word	0x200003b4
 80019c4:	40000400 	.word	0x40000400

080019c8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b08a      	sub	sp, #40	; 0x28
 80019cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019ce:	f107 0320 	add.w	r3, r7, #32
 80019d2:	2200      	movs	r2, #0
 80019d4:	601a      	str	r2, [r3, #0]
 80019d6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80019d8:	1d3b      	adds	r3, r7, #4
 80019da:	2200      	movs	r2, #0
 80019dc:	601a      	str	r2, [r3, #0]
 80019de:	605a      	str	r2, [r3, #4]
 80019e0:	609a      	str	r2, [r3, #8]
 80019e2:	60da      	str	r2, [r3, #12]
 80019e4:	611a      	str	r2, [r3, #16]
 80019e6:	615a      	str	r2, [r3, #20]
 80019e8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80019ea:	4b22      	ldr	r3, [pc, #136]	; (8001a74 <MX_TIM4_Init+0xac>)
 80019ec:	4a22      	ldr	r2, [pc, #136]	; (8001a78 <MX_TIM4_Init+0xb0>)
 80019ee:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 719;
 80019f0:	4b20      	ldr	r3, [pc, #128]	; (8001a74 <MX_TIM4_Init+0xac>)
 80019f2:	f240 22cf 	movw	r2, #719	; 0x2cf
 80019f6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019f8:	4b1e      	ldr	r3, [pc, #120]	; (8001a74 <MX_TIM4_Init+0xac>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1999;
 80019fe:	4b1d      	ldr	r3, [pc, #116]	; (8001a74 <MX_TIM4_Init+0xac>)
 8001a00:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8001a04:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a06:	4b1b      	ldr	r3, [pc, #108]	; (8001a74 <MX_TIM4_Init+0xac>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a0c:	4b19      	ldr	r3, [pc, #100]	; (8001a74 <MX_TIM4_Init+0xac>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001a12:	4818      	ldr	r0, [pc, #96]	; (8001a74 <MX_TIM4_Init+0xac>)
 8001a14:	f002 ff86 	bl	8004924 <HAL_TIM_PWM_Init>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d001      	beq.n	8001a22 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8001a1e:	f000 f8eb 	bl	8001bf8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a22:	2300      	movs	r3, #0
 8001a24:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a26:	2300      	movs	r3, #0
 8001a28:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001a2a:	f107 0320 	add.w	r3, r7, #32
 8001a2e:	4619      	mov	r1, r3
 8001a30:	4810      	ldr	r0, [pc, #64]	; (8001a74 <MX_TIM4_Init+0xac>)
 8001a32:	f003 ffd9 	bl	80059e8 <HAL_TIMEx_MasterConfigSynchronization>
 8001a36:	4603      	mov	r3, r0
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d001      	beq.n	8001a40 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8001a3c:	f000 f8dc 	bl	8001bf8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a40:	2360      	movs	r3, #96	; 0x60
 8001a42:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001a44:	2300      	movs	r3, #0
 8001a46:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a50:	1d3b      	adds	r3, r7, #4
 8001a52:	2200      	movs	r2, #0
 8001a54:	4619      	mov	r1, r3
 8001a56:	4807      	ldr	r0, [pc, #28]	; (8001a74 <MX_TIM4_Init+0xac>)
 8001a58:	f003 fb7e 	bl	8005158 <HAL_TIM_PWM_ConfigChannel>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d001      	beq.n	8001a66 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8001a62:	f000 f8c9 	bl	8001bf8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001a66:	4803      	ldr	r0, [pc, #12]	; (8001a74 <MX_TIM4_Init+0xac>)
 8001a68:	f000 fd6e 	bl	8002548 <HAL_TIM_MspPostInit>

}
 8001a6c:	bf00      	nop
 8001a6e:	3728      	adds	r7, #40	; 0x28
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	200003fc 	.word	0x200003fc
 8001a78:	40000800 	.word	0x40000800

08001a7c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001a80:	4b11      	ldr	r3, [pc, #68]	; (8001ac8 <MX_USART1_UART_Init+0x4c>)
 8001a82:	4a12      	ldr	r2, [pc, #72]	; (8001acc <MX_USART1_UART_Init+0x50>)
 8001a84:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001a86:	4b10      	ldr	r3, [pc, #64]	; (8001ac8 <MX_USART1_UART_Init+0x4c>)
 8001a88:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a8c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a8e:	4b0e      	ldr	r3, [pc, #56]	; (8001ac8 <MX_USART1_UART_Init+0x4c>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001a94:	4b0c      	ldr	r3, [pc, #48]	; (8001ac8 <MX_USART1_UART_Init+0x4c>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001a9a:	4b0b      	ldr	r3, [pc, #44]	; (8001ac8 <MX_USART1_UART_Init+0x4c>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001aa0:	4b09      	ldr	r3, [pc, #36]	; (8001ac8 <MX_USART1_UART_Init+0x4c>)
 8001aa2:	220c      	movs	r2, #12
 8001aa4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001aa6:	4b08      	ldr	r3, [pc, #32]	; (8001ac8 <MX_USART1_UART_Init+0x4c>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001aac:	4b06      	ldr	r3, [pc, #24]	; (8001ac8 <MX_USART1_UART_Init+0x4c>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001ab2:	4805      	ldr	r0, [pc, #20]	; (8001ac8 <MX_USART1_UART_Init+0x4c>)
 8001ab4:	f004 f859 	bl	8005b6a <HAL_UART_Init>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d001      	beq.n	8001ac2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001abe:	f000 f89b 	bl	8001bf8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001ac2:	bf00      	nop
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	20000444 	.word	0x20000444
 8001acc:	40013800 	.word	0x40013800

08001ad0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b088      	sub	sp, #32
 8001ad4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ad6:	f107 0310 	add.w	r3, r7, #16
 8001ada:	2200      	movs	r2, #0
 8001adc:	601a      	str	r2, [r3, #0]
 8001ade:	605a      	str	r2, [r3, #4]
 8001ae0:	609a      	str	r2, [r3, #8]
 8001ae2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ae4:	4b40      	ldr	r3, [pc, #256]	; (8001be8 <MX_GPIO_Init+0x118>)
 8001ae6:	699b      	ldr	r3, [r3, #24]
 8001ae8:	4a3f      	ldr	r2, [pc, #252]	; (8001be8 <MX_GPIO_Init+0x118>)
 8001aea:	f043 0310 	orr.w	r3, r3, #16
 8001aee:	6193      	str	r3, [r2, #24]
 8001af0:	4b3d      	ldr	r3, [pc, #244]	; (8001be8 <MX_GPIO_Init+0x118>)
 8001af2:	699b      	ldr	r3, [r3, #24]
 8001af4:	f003 0310 	and.w	r3, r3, #16
 8001af8:	60fb      	str	r3, [r7, #12]
 8001afa:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001afc:	4b3a      	ldr	r3, [pc, #232]	; (8001be8 <MX_GPIO_Init+0x118>)
 8001afe:	699b      	ldr	r3, [r3, #24]
 8001b00:	4a39      	ldr	r2, [pc, #228]	; (8001be8 <MX_GPIO_Init+0x118>)
 8001b02:	f043 0320 	orr.w	r3, r3, #32
 8001b06:	6193      	str	r3, [r2, #24]
 8001b08:	4b37      	ldr	r3, [pc, #220]	; (8001be8 <MX_GPIO_Init+0x118>)
 8001b0a:	699b      	ldr	r3, [r3, #24]
 8001b0c:	f003 0320 	and.w	r3, r3, #32
 8001b10:	60bb      	str	r3, [r7, #8]
 8001b12:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b14:	4b34      	ldr	r3, [pc, #208]	; (8001be8 <MX_GPIO_Init+0x118>)
 8001b16:	699b      	ldr	r3, [r3, #24]
 8001b18:	4a33      	ldr	r2, [pc, #204]	; (8001be8 <MX_GPIO_Init+0x118>)
 8001b1a:	f043 0304 	orr.w	r3, r3, #4
 8001b1e:	6193      	str	r3, [r2, #24]
 8001b20:	4b31      	ldr	r3, [pc, #196]	; (8001be8 <MX_GPIO_Init+0x118>)
 8001b22:	699b      	ldr	r3, [r3, #24]
 8001b24:	f003 0304 	and.w	r3, r3, #4
 8001b28:	607b      	str	r3, [r7, #4]
 8001b2a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b2c:	4b2e      	ldr	r3, [pc, #184]	; (8001be8 <MX_GPIO_Init+0x118>)
 8001b2e:	699b      	ldr	r3, [r3, #24]
 8001b30:	4a2d      	ldr	r2, [pc, #180]	; (8001be8 <MX_GPIO_Init+0x118>)
 8001b32:	f043 0308 	orr.w	r3, r3, #8
 8001b36:	6193      	str	r3, [r2, #24]
 8001b38:	4b2b      	ldr	r3, [pc, #172]	; (8001be8 <MX_GPIO_Init+0x118>)
 8001b3a:	699b      	ldr	r3, [r3, #24]
 8001b3c:	f003 0308 	and.w	r3, r3, #8
 8001b40:	603b      	str	r3, [r7, #0]
 8001b42:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001b44:	2200      	movs	r2, #0
 8001b46:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b4a:	4828      	ldr	r0, [pc, #160]	; (8001bec <MX_GPIO_Init+0x11c>)
 8001b4c:	f002 f83e 	bl	8003bcc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_SS_GPIO_Port, SPI_SS_Pin, GPIO_PIN_RESET);
 8001b50:	2200      	movs	r2, #0
 8001b52:	2110      	movs	r1, #16
 8001b54:	4826      	ldr	r0, [pc, #152]	; (8001bf0 <MX_GPIO_Init+0x120>)
 8001b56:	f002 f839 	bl	8003bcc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, R_EN_Pin|L_EN_Pin, GPIO_PIN_RESET);
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8001b60:	4824      	ldr	r0, [pc, #144]	; (8001bf4 <MX_GPIO_Init+0x124>)
 8001b62:	f002 f833 	bl	8003bcc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LEDR_Pin|LEDG_Pin|LEDB_Pin, GPIO_PIN_SET);
 8001b66:	2201      	movs	r2, #1
 8001b68:	2138      	movs	r1, #56	; 0x38
 8001b6a:	4822      	ldr	r0, [pc, #136]	; (8001bf4 <MX_GPIO_Init+0x124>)
 8001b6c:	f002 f82e 	bl	8003bcc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001b70:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b74:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b76:	2301      	movs	r3, #1
 8001b78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b7e:	2302      	movs	r3, #2
 8001b80:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b82:	f107 0310 	add.w	r3, r7, #16
 8001b86:	4619      	mov	r1, r3
 8001b88:	4818      	ldr	r0, [pc, #96]	; (8001bec <MX_GPIO_Init+0x11c>)
 8001b8a:	f001 fe9b 	bl	80038c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_SS_Pin */
  GPIO_InitStruct.Pin = SPI_SS_Pin;
 8001b8e:	2310      	movs	r3, #16
 8001b90:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b92:	2301      	movs	r3, #1
 8001b94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b96:	2300      	movs	r3, #0
 8001b98:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b9a:	2302      	movs	r3, #2
 8001b9c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SPI_SS_GPIO_Port, &GPIO_InitStruct);
 8001b9e:	f107 0310 	add.w	r3, r7, #16
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	4812      	ldr	r0, [pc, #72]	; (8001bf0 <MX_GPIO_Init+0x120>)
 8001ba6:	f001 fe8d 	bl	80038c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN1_Pin BTN2_Pin */
  GPIO_InitStruct.Pin = BTN1_Pin|BTN2_Pin;
 8001baa:	2303      	movs	r3, #3
 8001bac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bb6:	f107 0310 	add.w	r3, r7, #16
 8001bba:	4619      	mov	r1, r3
 8001bbc:	480d      	ldr	r0, [pc, #52]	; (8001bf4 <MX_GPIO_Init+0x124>)
 8001bbe:	f001 fe81 	bl	80038c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : R_EN_Pin L_EN_Pin LEDR_Pin LEDG_Pin
                           LEDB_Pin */
  GPIO_InitStruct.Pin = R_EN_Pin|L_EN_Pin|LEDR_Pin|LEDG_Pin
 8001bc2:	f24c 0338 	movw	r3, #49208	; 0xc038
 8001bc6:	613b      	str	r3, [r7, #16]
                          |LEDB_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bd0:	2302      	movs	r3, #2
 8001bd2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bd4:	f107 0310 	add.w	r3, r7, #16
 8001bd8:	4619      	mov	r1, r3
 8001bda:	4806      	ldr	r0, [pc, #24]	; (8001bf4 <MX_GPIO_Init+0x124>)
 8001bdc:	f001 fe72 	bl	80038c4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001be0:	bf00      	nop
 8001be2:	3720      	adds	r7, #32
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	40021000 	.word	0x40021000
 8001bec:	40011000 	.word	0x40011000
 8001bf0:	40010800 	.word	0x40010800
 8001bf4:	40010c00 	.word	0x40010c00

08001bf8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001bfc:	b672      	cpsid	i
}
 8001bfe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c00:	e7fe      	b.n	8001c00 <Error_Handler+0x8>

08001c02 <HAL_TIM_IC_CaptureCallback>:

extern TIM_HandleTypeDef htim2;
extern encoderMotor encoderInfo;

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001c02:	b480      	push	{r7}
 8001c04:	b083      	sub	sp, #12
 8001c06:	af00      	add	r7, sp, #0
 8001c08:	6078      	str	r0, [r7, #4]
//	counter = __HAL_TIM_GET_COUNTER(htim);
//
//	count = (int16_t)counter;
//
//	position = count/4;
}
 8001c0a:	bf00      	nop
 8001c0c:	370c      	adds	r7, #12
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bc80      	pop	{r7}
 8001c12:	4770      	bx	lr

08001c14 <startEncoder>:

void startEncoder()
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	af00      	add	r7, sp, #0
//	HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_ALL);
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8001c18:	213c      	movs	r1, #60	; 0x3c
 8001c1a:	4802      	ldr	r0, [pc, #8]	; (8001c24 <startEncoder+0x10>)
 8001c1c:	f003 f906 	bl	8004e2c <HAL_TIM_Encoder_Start>
}
 8001c20:	bf00      	nop
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	2000036c 	.word	0x2000036c

08001c28 <updateEncoder>:

void updateEncoder()
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	af00      	add	r7, sp, #0
	if (encoderInfo.timeIndex >= 100) //100 ms
 8001c2c:	4b1d      	ldr	r3, [pc, #116]	; (8001ca4 <updateEncoder+0x7c>)
 8001c2e:	689b      	ldr	r3, [r3, #8]
 8001c30:	2b63      	cmp	r3, #99	; 0x63
 8001c32:	dd35      	ble.n	8001ca0 <updateEncoder+0x78>
		{
			encoderInfo.encodeCnt = (int16_t)__HAL_TIM_GET_COUNTER(&htim2);
 8001c34:	4b1c      	ldr	r3, [pc, #112]	; (8001ca8 <updateEncoder+0x80>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c3a:	b21a      	sxth	r2, r3
 8001c3c:	4b19      	ldr	r3, [pc, #100]	; (8001ca4 <updateEncoder+0x7c>)
 8001c3e:	801a      	strh	r2, [r3, #0]
			encoderInfo.numRoundPerSec = ((-(encoderInfo.encodeCnt - encoderInfo.preEncoderCnt)*10)/encoderResolution);  // speed in cm/sec
 8001c40:	4b18      	ldr	r3, [pc, #96]	; (8001ca4 <updateEncoder+0x7c>)
 8001c42:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001c46:	461a      	mov	r2, r3
 8001c48:	4b16      	ldr	r3, [pc, #88]	; (8001ca4 <updateEncoder+0x7c>)
 8001c4a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c4e:	1ad2      	subs	r2, r2, r3
 8001c50:	4613      	mov	r3, r2
 8001c52:	009b      	lsls	r3, r3, #2
 8001c54:	4413      	add	r3, r2
 8001c56:	005b      	lsls	r3, r3, #1
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f7ff f83f 	bl	8000cdc <__aeabi_i2f>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	4912      	ldr	r1, [pc, #72]	; (8001cac <updateEncoder+0x84>)
 8001c62:	4618      	mov	r0, r3
 8001c64:	f7ff f942 	bl	8000eec <__aeabi_fdiv>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	461a      	mov	r2, r3
 8001c6c:	4b0d      	ldr	r3, [pc, #52]	; (8001ca4 <updateEncoder+0x7c>)
 8001c6e:	60da      	str	r2, [r3, #12]
#ifdef XeBu
			encoderInfo.speed = (float)encoderInfo.numRoundPerSec * CIRCUMFERENCE_OF_WHEEL;
#else
			encoderInfo.speed = - ((float)encoderInfo.numRoundPerSec * CIRCUMFERENCE_OF_WHEEL / 2.8f);
 8001c70:	4b0c      	ldr	r3, [pc, #48]	; (8001ca4 <updateEncoder+0x7c>)
 8001c72:	68db      	ldr	r3, [r3, #12]
 8001c74:	490e      	ldr	r1, [pc, #56]	; (8001cb0 <updateEncoder+0x88>)
 8001c76:	4618      	mov	r0, r3
 8001c78:	f7ff f884 	bl	8000d84 <__aeabi_fmul>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	490d      	ldr	r1, [pc, #52]	; (8001cb4 <updateEncoder+0x8c>)
 8001c80:	4618      	mov	r0, r3
 8001c82:	f7ff f933 	bl	8000eec <__aeabi_fdiv>
 8001c86:	4603      	mov	r3, r0
 8001c88:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001c8c:	4a05      	ldr	r2, [pc, #20]	; (8001ca4 <updateEncoder+0x7c>)
 8001c8e:	6113      	str	r3, [r2, #16]
#endif
			encoderInfo.preEncoderCnt = encoderInfo.encodeCnt;
 8001c90:	4b04      	ldr	r3, [pc, #16]	; (8001ca4 <updateEncoder+0x7c>)
 8001c92:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001c96:	4b03      	ldr	r3, [pc, #12]	; (8001ca4 <updateEncoder+0x7c>)
 8001c98:	805a      	strh	r2, [r3, #2]
			encoderInfo.timeIndex = 0;
 8001c9a:	4b02      	ldr	r3, [pc, #8]	; (8001ca4 <updateEncoder+0x7c>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	609a      	str	r2, [r3, #8]
		}
}
 8001ca0:	bf00      	nop
 8001ca2:	bd80      	pop	{r7, pc}
 8001ca4:	200004a8 	.word	0x200004a8
 8001ca8:	2000036c 	.word	0x2000036c
 8001cac:	44f8c000 	.word	0x44f8c000
 8001cb0:	41bc7edd 	.word	0x41bc7edd
 8001cb4:	40333333 	.word	0x40333333

08001cb8 <motorInit>:
						uint16_t				Timer_Channel_R,
						GPIO_TypeDef*			En_L_GPIOx,
						uint16_t				En_L_GPIO_Pin,
						GPIO_TypeDef*			En_R_GPIOx,
						uint16_t				En_R_GPIO_Pin)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b085      	sub	sp, #20
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	60f8      	str	r0, [r7, #12]
 8001cc0:	60b9      	str	r1, [r7, #8]
 8001cc2:	4611      	mov	r1, r2
 8001cc4:	461a      	mov	r2, r3
 8001cc6:	460b      	mov	r3, r1
 8001cc8:	80fb      	strh	r3, [r7, #6]
 8001cca:	4613      	mov	r3, r2
 8001ccc:	80bb      	strh	r3, [r7, #4]
	bts7960_config->Timer_Handle	= Timer_Handle;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	68ba      	ldr	r2, [r7, #8]
 8001cd2:	601a      	str	r2, [r3, #0]
	bts7960_config->Timer_Channel_L  	= Timer_Channel_L;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	88fa      	ldrh	r2, [r7, #6]
 8001cd8:	809a      	strh	r2, [r3, #4]
	bts7960_config->Timer_Channel_R  	= Timer_Channel_R;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	88ba      	ldrh	r2, [r7, #4]
 8001cde:	80da      	strh	r2, [r3, #6]

	bts7960_config->En_L_GPIOx		= En_L_GPIOx;
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	69ba      	ldr	r2, [r7, #24]
 8001ce4:	609a      	str	r2, [r3, #8]
	bts7960_config->En_L_GPIO_Pin	= En_L_GPIO_Pin;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	8bba      	ldrh	r2, [r7, #28]
 8001cea:	819a      	strh	r2, [r3, #12]

	bts7960_config->En_R_GPIOx		= En_R_GPIOx;
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	6a3a      	ldr	r2, [r7, #32]
 8001cf0:	611a      	str	r2, [r3, #16]
	bts7960_config->En_R_GPIO_Pin	= En_R_GPIO_Pin;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001cf6:	829a      	strh	r2, [r3, #20]
}
 8001cf8:	bf00      	nop
 8001cfa:	3714      	adds	r7, #20
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bc80      	pop	{r7}
 8001d00:	4770      	bx	lr

08001d02 <scalePWM>:

uint8_t scalePWM(uint8_t PWM)
{
 8001d02:	b480      	push	{r7}
 8001d04:	b083      	sub	sp, #12
 8001d06:	af00      	add	r7, sp, #0
 8001d08:	4603      	mov	r3, r0
 8001d0a:	71fb      	strb	r3, [r7, #7]
    return (PWM > 100) ? 100 : (PWM < 0) ? 0 : PWM;
 8001d0c:	79fb      	ldrb	r3, [r7, #7]
 8001d0e:	2b64      	cmp	r3, #100	; 0x64
 8001d10:	bf28      	it	cs
 8001d12:	2364      	movcs	r3, #100	; 0x64
 8001d14:	b2db      	uxtb	r3, r3
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	370c      	adds	r7, #12
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bc80      	pop	{r7}
 8001d1e:	4770      	bx	lr

08001d20 <speedToPWM>:

float speedToPWM (float velocity)
{
 8001d20:	b590      	push	{r4, r7, lr}
 8001d22:	b083      	sub	sp, #12
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
	#ifdef XeBu
		return (0.0014f * velocity * velocity  + 0.1236f * velocity + 16.496f);
	#else
		return (0.1871f * velocity * velocity  + 0.451f* velocity + 42.974f);
 8001d28:	490e      	ldr	r1, [pc, #56]	; (8001d64 <speedToPWM+0x44>)
 8001d2a:	6878      	ldr	r0, [r7, #4]
 8001d2c:	f7ff f82a 	bl	8000d84 <__aeabi_fmul>
 8001d30:	4603      	mov	r3, r0
 8001d32:	6879      	ldr	r1, [r7, #4]
 8001d34:	4618      	mov	r0, r3
 8001d36:	f7ff f825 	bl	8000d84 <__aeabi_fmul>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	461c      	mov	r4, r3
 8001d3e:	490a      	ldr	r1, [pc, #40]	; (8001d68 <speedToPWM+0x48>)
 8001d40:	6878      	ldr	r0, [r7, #4]
 8001d42:	f7ff f81f 	bl	8000d84 <__aeabi_fmul>
 8001d46:	4603      	mov	r3, r0
 8001d48:	4619      	mov	r1, r3
 8001d4a:	4620      	mov	r0, r4
 8001d4c:	f7fe ff12 	bl	8000b74 <__addsf3>
 8001d50:	4603      	mov	r3, r0
 8001d52:	4906      	ldr	r1, [pc, #24]	; (8001d6c <speedToPWM+0x4c>)
 8001d54:	4618      	mov	r0, r3
 8001d56:	f7fe ff0d 	bl	8000b74 <__addsf3>
 8001d5a:	4603      	mov	r3, r0
		// phương trình dựa trên PWM và vận tốc đo được
		// từ encoder khi xe chịu tải
	#endif
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	370c      	adds	r7, #12
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd90      	pop	{r4, r7, pc}
 8001d64:	3e3f9724 	.word	0x3e3f9724
 8001d68:	3ee6e979 	.word	0x3ee6e979
 8001d6c:	422be560 	.word	0x422be560

08001d70 <startMotor>:

void startMotor(motorConfig* bts7960_config)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b082      	sub	sp, #8
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
	bts7960_config->motorStatus.state = START;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	82da      	strh	r2, [r3, #22]
	HAL_GPIO_WritePin(bts7960_config->En_L_GPIOx, bts7960_config->En_L_GPIO_Pin, GPIO_PIN_SET);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6898      	ldr	r0, [r3, #8]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	899b      	ldrh	r3, [r3, #12]
 8001d86:	2201      	movs	r2, #1
 8001d88:	4619      	mov	r1, r3
 8001d8a:	f001 ff1f 	bl	8003bcc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(bts7960_config->En_R_GPIOx, bts7960_config->En_R_GPIO_Pin, GPIO_PIN_SET);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6918      	ldr	r0, [r3, #16]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	8a9b      	ldrh	r3, [r3, #20]
 8001d96:	2201      	movs	r2, #1
 8001d98:	4619      	mov	r1, r3
 8001d9a:	f001 ff17 	bl	8003bcc <HAL_GPIO_WritePin>
	HAL_TIM_PWM_Start_IT(bts7960_config->Timer_Handle, bts7960_config->Timer_Channel_L);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681a      	ldr	r2, [r3, #0]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	889b      	ldrh	r3, [r3, #4]
 8001da6:	4619      	mov	r1, r3
 8001da8:	4610      	mov	r0, r2
 8001daa:	f002 fead 	bl	8004b08 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(bts7960_config->Timer_Handle, bts7960_config->Timer_Channel_R);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681a      	ldr	r2, [r3, #0]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	88db      	ldrh	r3, [r3, #6]
 8001db6:	4619      	mov	r1, r3
 8001db8:	4610      	mov	r0, r2
 8001dba:	f002 fea5 	bl	8004b08 <HAL_TIM_PWM_Start_IT>
}
 8001dbe:	bf00      	nop
 8001dc0:	3708      	adds	r7, #8
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}

08001dc6 <stopMotor>:
	HAL_TIM_PWM_Stop_IT(bts7960_config->Timer_Handle, bts7960_config->Timer_Channel_L);
	HAL_TIM_PWM_Stop_IT(bts7960_config->Timer_Handle, bts7960_config->Timer_Channel_R);
}

void stopMotor(motorConfig* bts7960_config)
{
 8001dc6:	b480      	push	{r7}
 8001dc8:	b083      	sub	sp, #12
 8001dca:	af00      	add	r7, sp, #0
 8001dcc:	6078      	str	r0, [r7, #4]
	bts7960_config->motorStatus.state = STOP;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	82da      	strh	r2, [r3, #22]
	__HAL_TIM_SET_COMPARE(bts7960_config->Timer_Handle, bts7960_config->Timer_Channel_L, 1);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	889b      	ldrh	r3, [r3, #4]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d105      	bne.n	8001de8 <stopMotor+0x22>
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	2201      	movs	r2, #1
 8001de4:	635a      	str	r2, [r3, #52]	; 0x34
 8001de6:	e018      	b.n	8001e1a <stopMotor+0x54>
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	889b      	ldrh	r3, [r3, #4]
 8001dec:	2b04      	cmp	r3, #4
 8001dee:	d105      	bne.n	8001dfc <stopMotor+0x36>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	681a      	ldr	r2, [r3, #0]
 8001df6:	2301      	movs	r3, #1
 8001df8:	6393      	str	r3, [r2, #56]	; 0x38
 8001dfa:	e00e      	b.n	8001e1a <stopMotor+0x54>
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	889b      	ldrh	r3, [r3, #4]
 8001e00:	2b08      	cmp	r3, #8
 8001e02:	d105      	bne.n	8001e10 <stopMotor+0x4a>
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	681a      	ldr	r2, [r3, #0]
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	63d3      	str	r3, [r2, #60]	; 0x3c
 8001e0e:	e004      	b.n	8001e1a <stopMotor+0x54>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	681a      	ldr	r2, [r3, #0]
 8001e16:	2301      	movs	r3, #1
 8001e18:	6413      	str	r3, [r2, #64]	; 0x40
	__HAL_TIM_SET_COMPARE(bts7960_config->Timer_Handle, bts7960_config->Timer_Channel_R, 1);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	88db      	ldrh	r3, [r3, #6]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d105      	bne.n	8001e2e <stopMotor+0x68>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	2201      	movs	r2, #1
 8001e2a:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001e2c:	e018      	b.n	8001e60 <stopMotor+0x9a>
	__HAL_TIM_SET_COMPARE(bts7960_config->Timer_Handle, bts7960_config->Timer_Channel_R, 1);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	88db      	ldrh	r3, [r3, #6]
 8001e32:	2b04      	cmp	r3, #4
 8001e34:	d105      	bne.n	8001e42 <stopMotor+0x7c>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001e40:	e00e      	b.n	8001e60 <stopMotor+0x9a>
	__HAL_TIM_SET_COMPARE(bts7960_config->Timer_Handle, bts7960_config->Timer_Channel_R, 1);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	88db      	ldrh	r3, [r3, #6]
 8001e46:	2b08      	cmp	r3, #8
 8001e48:	d105      	bne.n	8001e56 <stopMotor+0x90>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	2301      	movs	r3, #1
 8001e52:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8001e54:	e004      	b.n	8001e60 <stopMotor+0x9a>
	__HAL_TIM_SET_COMPARE(bts7960_config->Timer_Handle, bts7960_config->Timer_Channel_R, 1);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001e60:	bf00      	nop
 8001e62:	370c      	adds	r7, #12
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bc80      	pop	{r7}
 8001e68:	4770      	bx	lr

08001e6a <goForward>:

void goForward(motorConfig* bts7960_config, uint8_t PWM )
{
 8001e6a:	b580      	push	{r7, lr}
 8001e6c:	b082      	sub	sp, #8
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	6078      	str	r0, [r7, #4]
 8001e72:	460b      	mov	r3, r1
 8001e74:	70fb      	strb	r3, [r7, #3]
	bts7960_config->motorStatus.state = FORWARD;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2202      	movs	r2, #2
 8001e7a:	82da      	strh	r2, [r3, #22]
	PWM = scalePWM(PWM);
 8001e7c:	78fb      	ldrb	r3, [r7, #3]
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f7ff ff3f 	bl	8001d02 <scalePWM>
 8001e84:	4603      	mov	r3, r0
 8001e86:	70fb      	strb	r3, [r7, #3]
	__HAL_TIM_SET_COMPARE(bts7960_config->Timer_Handle, bts7960_config->Timer_Channel_L, 0);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	889b      	ldrh	r3, [r3, #4]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d105      	bne.n	8001e9c <goForward+0x32>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	2200      	movs	r2, #0
 8001e98:	635a      	str	r2, [r3, #52]	; 0x34
 8001e9a:	e018      	b.n	8001ece <goForward+0x64>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	889b      	ldrh	r3, [r3, #4]
 8001ea0:	2b04      	cmp	r3, #4
 8001ea2:	d105      	bne.n	8001eb0 <goForward+0x46>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	681a      	ldr	r2, [r3, #0]
 8001eaa:	2300      	movs	r3, #0
 8001eac:	6393      	str	r3, [r2, #56]	; 0x38
 8001eae:	e00e      	b.n	8001ece <goForward+0x64>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	889b      	ldrh	r3, [r3, #4]
 8001eb4:	2b08      	cmp	r3, #8
 8001eb6:	d105      	bne.n	8001ec4 <goForward+0x5a>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	681a      	ldr	r2, [r3, #0]
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	63d3      	str	r3, [r2, #60]	; 0x3c
 8001ec2:	e004      	b.n	8001ece <goForward+0x64>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	681a      	ldr	r2, [r3, #0]
 8001eca:	2300      	movs	r3, #0
 8001ecc:	6413      	str	r3, [r2, #64]	; 0x40
	__HAL_TIM_SET_COMPARE(bts7960_config->Timer_Handle, bts7960_config->Timer_Channel_R, PWM);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	88db      	ldrh	r3, [r3, #6]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d105      	bne.n	8001ee2 <goForward+0x78>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	78fa      	ldrb	r2, [r7, #3]
 8001ede:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001ee0:	e018      	b.n	8001f14 <goForward+0xaa>
	__HAL_TIM_SET_COMPARE(bts7960_config->Timer_Handle, bts7960_config->Timer_Channel_R, PWM);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	88db      	ldrh	r3, [r3, #6]
 8001ee6:	2b04      	cmp	r3, #4
 8001ee8:	d105      	bne.n	8001ef6 <goForward+0x8c>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	681a      	ldr	r2, [r3, #0]
 8001ef0:	78fb      	ldrb	r3, [r7, #3]
 8001ef2:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001ef4:	e00e      	b.n	8001f14 <goForward+0xaa>
	__HAL_TIM_SET_COMPARE(bts7960_config->Timer_Handle, bts7960_config->Timer_Channel_R, PWM);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	88db      	ldrh	r3, [r3, #6]
 8001efa:	2b08      	cmp	r3, #8
 8001efc:	d105      	bne.n	8001f0a <goForward+0xa0>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	681a      	ldr	r2, [r3, #0]
 8001f04:	78fb      	ldrb	r3, [r7, #3]
 8001f06:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8001f08:	e004      	b.n	8001f14 <goForward+0xaa>
	__HAL_TIM_SET_COMPARE(bts7960_config->Timer_Handle, bts7960_config->Timer_Channel_R, PWM);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	681a      	ldr	r2, [r3, #0]
 8001f10:	78fb      	ldrb	r3, [r7, #3]
 8001f12:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001f14:	bf00      	nop
 8001f16:	3708      	adds	r7, #8
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}

08001f1c <goReverse>:

void goReverse(motorConfig* bts7960_config, uint8_t PWM)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b082      	sub	sp, #8
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
 8001f24:	460b      	mov	r3, r1
 8001f26:	70fb      	strb	r3, [r7, #3]
	PWM = scalePWM(PWM);
 8001f28:	78fb      	ldrb	r3, [r7, #3]
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f7ff fee9 	bl	8001d02 <scalePWM>
 8001f30:	4603      	mov	r3, r0
 8001f32:	70fb      	strb	r3, [r7, #3]
	bts7960_config->motorStatus.state = REVERSE;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2203      	movs	r2, #3
 8001f38:	82da      	strh	r2, [r3, #22]
	__HAL_TIM_SET_COMPARE(bts7960_config->Timer_Handle, bts7960_config->Timer_Channel_L, PWM);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	889b      	ldrh	r3, [r3, #4]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d105      	bne.n	8001f4e <goReverse+0x32>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	78fa      	ldrb	r2, [r7, #3]
 8001f4a:	635a      	str	r2, [r3, #52]	; 0x34
 8001f4c:	e018      	b.n	8001f80 <goReverse+0x64>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	889b      	ldrh	r3, [r3, #4]
 8001f52:	2b04      	cmp	r3, #4
 8001f54:	d105      	bne.n	8001f62 <goReverse+0x46>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	78fb      	ldrb	r3, [r7, #3]
 8001f5e:	6393      	str	r3, [r2, #56]	; 0x38
 8001f60:	e00e      	b.n	8001f80 <goReverse+0x64>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	889b      	ldrh	r3, [r3, #4]
 8001f66:	2b08      	cmp	r3, #8
 8001f68:	d105      	bne.n	8001f76 <goReverse+0x5a>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	681a      	ldr	r2, [r3, #0]
 8001f70:	78fb      	ldrb	r3, [r7, #3]
 8001f72:	63d3      	str	r3, [r2, #60]	; 0x3c
 8001f74:	e004      	b.n	8001f80 <goReverse+0x64>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	78fb      	ldrb	r3, [r7, #3]
 8001f7e:	6413      	str	r3, [r2, #64]	; 0x40
	__HAL_TIM_SET_COMPARE(bts7960_config->Timer_Handle, bts7960_config->Timer_Channel_R, 0);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	88db      	ldrh	r3, [r3, #6]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d105      	bne.n	8001f94 <goReverse+0x78>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	2200      	movs	r2, #0
 8001f90:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001f92:	e018      	b.n	8001fc6 <goReverse+0xaa>
	__HAL_TIM_SET_COMPARE(bts7960_config->Timer_Handle, bts7960_config->Timer_Channel_R, 0);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	88db      	ldrh	r3, [r3, #6]
 8001f98:	2b04      	cmp	r3, #4
 8001f9a:	d105      	bne.n	8001fa8 <goReverse+0x8c>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001fa6:	e00e      	b.n	8001fc6 <goReverse+0xaa>
	__HAL_TIM_SET_COMPARE(bts7960_config->Timer_Handle, bts7960_config->Timer_Channel_R, 0);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	88db      	ldrh	r3, [r3, #6]
 8001fac:	2b08      	cmp	r3, #8
 8001fae:	d105      	bne.n	8001fbc <goReverse+0xa0>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	681a      	ldr	r2, [r3, #0]
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8001fba:	e004      	b.n	8001fc6 <goReverse+0xaa>
	__HAL_TIM_SET_COMPARE(bts7960_config->Timer_Handle, bts7960_config->Timer_Channel_R, 0);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	681a      	ldr	r2, [r3, #0]
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001fc6:	bf00      	nop
 8001fc8:	3708      	adds	r7, #8
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}
	...

08001fd0 <PID>:
#include "pid.h"
#include "motor.h"
extern PIDInfor pidInfor;

float PID(float refSpeed, float currSpeed)
{
 8001fd0:	b5b0      	push	{r4, r5, r7, lr}
 8001fd2:	b082      	sub	sp, #8
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
 8001fd8:	6039      	str	r1, [r7, #0]
	if (pidInfor.timeCountPID >= 100)
 8001fda:	4b5b      	ldr	r3, [pc, #364]	; (8002148 <PID+0x178>)
 8001fdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fde:	2b63      	cmp	r3, #99	; 0x63
 8001fe0:	f340 80ac 	ble.w	800213c <PID+0x16c>
	{
		pidInfor.error = refSpeed - currSpeed;
 8001fe4:	6839      	ldr	r1, [r7, #0]
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	f7fe fdc2 	bl	8000b70 <__aeabi_fsub>
 8001fec:	4603      	mov	r3, r0
 8001fee:	461a      	mov	r2, r3
 8001ff0:	4b55      	ldr	r3, [pc, #340]	; (8002148 <PID+0x178>)
 8001ff2:	615a      	str	r2, [r3, #20]
		pidInfor.currT = HAL_GetTick();
 8001ff4:	f000 fd0e 	bl	8002a14 <HAL_GetTick>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f7fe fe6a 	bl	8000cd4 <__aeabi_ui2f>
 8002000:	4603      	mov	r3, r0
 8002002:	4a51      	ldr	r2, [pc, #324]	; (8002148 <PID+0x178>)
 8002004:	6193      	str	r3, [r2, #24]
		pidInfor.deltaT = (pidInfor.currT - pidInfor.prevT) / 1000; // convert millisecond to second
 8002006:	4b50      	ldr	r3, [pc, #320]	; (8002148 <PID+0x178>)
 8002008:	699b      	ldr	r3, [r3, #24]
 800200a:	4a4f      	ldr	r2, [pc, #316]	; (8002148 <PID+0x178>)
 800200c:	69d2      	ldr	r2, [r2, #28]
 800200e:	4611      	mov	r1, r2
 8002010:	4618      	mov	r0, r3
 8002012:	f7fe fdad 	bl	8000b70 <__aeabi_fsub>
 8002016:	4603      	mov	r3, r0
 8002018:	494c      	ldr	r1, [pc, #304]	; (800214c <PID+0x17c>)
 800201a:	4618      	mov	r0, r3
 800201c:	f7fe ff66 	bl	8000eec <__aeabi_fdiv>
 8002020:	4603      	mov	r3, r0
 8002022:	461a      	mov	r2, r3
 8002024:	4b48      	ldr	r3, [pc, #288]	; (8002148 <PID+0x178>)
 8002026:	621a      	str	r2, [r3, #32]
		pidInfor.prevT = pidInfor.currT;
 8002028:	4b47      	ldr	r3, [pc, #284]	; (8002148 <PID+0x178>)
 800202a:	699b      	ldr	r3, [r3, #24]
 800202c:	4a46      	ldr	r2, [pc, #280]	; (8002148 <PID+0x178>)
 800202e:	61d3      	str	r3, [r2, #28]

		pidInfor.errorIntergral += pidInfor.error;
 8002030:	4b45      	ldr	r3, [pc, #276]	; (8002148 <PID+0x178>)
 8002032:	68db      	ldr	r3, [r3, #12]
 8002034:	4a44      	ldr	r2, [pc, #272]	; (8002148 <PID+0x178>)
 8002036:	6952      	ldr	r2, [r2, #20]
 8002038:	4611      	mov	r1, r2
 800203a:	4618      	mov	r0, r3
 800203c:	f7fe fd9a 	bl	8000b74 <__addsf3>
 8002040:	4603      	mov	r3, r0
 8002042:	461a      	mov	r2, r3
 8002044:	4b40      	ldr	r3, [pc, #256]	; (8002148 <PID+0x178>)
 8002046:	60da      	str	r2, [r3, #12]
		// Limit error Intergral
		if (pidInfor.errorIntergral > MAX_ERR_INTEGRAL)
 8002048:	4b3f      	ldr	r3, [pc, #252]	; (8002148 <PID+0x178>)
 800204a:	68db      	ldr	r3, [r3, #12]
 800204c:	4940      	ldr	r1, [pc, #256]	; (8002150 <PID+0x180>)
 800204e:	4618      	mov	r0, r3
 8002050:	f7ff f854 	bl	80010fc <__aeabi_fcmpgt>
 8002054:	4603      	mov	r3, r0
 8002056:	2b00      	cmp	r3, #0
 8002058:	d003      	beq.n	8002062 <PID+0x92>
		{
			pidInfor.errorIntergral = MAX_ERR_INTEGRAL;
 800205a:	4b3b      	ldr	r3, [pc, #236]	; (8002148 <PID+0x178>)
 800205c:	4a3c      	ldr	r2, [pc, #240]	; (8002150 <PID+0x180>)
 800205e:	60da      	str	r2, [r3, #12]
 8002060:	e00b      	b.n	800207a <PID+0xaa>
		}
		else if (pidInfor.errorIntergral < MIN_ERR_INTEGRAL)
 8002062:	4b39      	ldr	r3, [pc, #228]	; (8002148 <PID+0x178>)
 8002064:	68db      	ldr	r3, [r3, #12]
 8002066:	493b      	ldr	r1, [pc, #236]	; (8002154 <PID+0x184>)
 8002068:	4618      	mov	r0, r3
 800206a:	f7ff f829 	bl	80010c0 <__aeabi_fcmplt>
 800206e:	4603      	mov	r3, r0
 8002070:	2b00      	cmp	r3, #0
 8002072:	d002      	beq.n	800207a <PID+0xaa>
		{
			pidInfor.errorIntergral = MIN_ERR_INTEGRAL;
 8002074:	4b34      	ldr	r3, [pc, #208]	; (8002148 <PID+0x178>)
 8002076:	4a37      	ldr	r2, [pc, #220]	; (8002154 <PID+0x184>)
 8002078:	60da      	str	r2, [r3, #12]
		}
		// Calculate output PID
		pidInfor.outputPID = pidInfor.kp*pidInfor.error +
 800207a:	4b33      	ldr	r3, [pc, #204]	; (8002148 <PID+0x178>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a32      	ldr	r2, [pc, #200]	; (8002148 <PID+0x178>)
 8002080:	6952      	ldr	r2, [r2, #20]
 8002082:	4611      	mov	r1, r2
 8002084:	4618      	mov	r0, r3
 8002086:	f7fe fe7d 	bl	8000d84 <__aeabi_fmul>
 800208a:	4603      	mov	r3, r0
 800208c:	461c      	mov	r4, r3
							 pidInfor.ki*pidInfor.errorIntergral*pidInfor.deltaT +
 800208e:	4b2e      	ldr	r3, [pc, #184]	; (8002148 <PID+0x178>)
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	4a2d      	ldr	r2, [pc, #180]	; (8002148 <PID+0x178>)
 8002094:	68d2      	ldr	r2, [r2, #12]
 8002096:	4611      	mov	r1, r2
 8002098:	4618      	mov	r0, r3
 800209a:	f7fe fe73 	bl	8000d84 <__aeabi_fmul>
 800209e:	4603      	mov	r3, r0
 80020a0:	461a      	mov	r2, r3
 80020a2:	4b29      	ldr	r3, [pc, #164]	; (8002148 <PID+0x178>)
 80020a4:	6a1b      	ldr	r3, [r3, #32]
 80020a6:	4619      	mov	r1, r3
 80020a8:	4610      	mov	r0, r2
 80020aa:	f7fe fe6b 	bl	8000d84 <__aeabi_fmul>
 80020ae:	4603      	mov	r3, r0
		pidInfor.outputPID = pidInfor.kp*pidInfor.error +
 80020b0:	4619      	mov	r1, r3
 80020b2:	4620      	mov	r0, r4
 80020b4:	f7fe fd5e 	bl	8000b74 <__addsf3>
 80020b8:	4603      	mov	r3, r0
 80020ba:	461d      	mov	r5, r3
							 pidInfor.kd*(pidInfor.error - pidInfor.prevError)/pidInfor.deltaT;
 80020bc:	4b22      	ldr	r3, [pc, #136]	; (8002148 <PID+0x178>)
 80020be:	689c      	ldr	r4, [r3, #8]
 80020c0:	4b21      	ldr	r3, [pc, #132]	; (8002148 <PID+0x178>)
 80020c2:	695b      	ldr	r3, [r3, #20]
 80020c4:	4a20      	ldr	r2, [pc, #128]	; (8002148 <PID+0x178>)
 80020c6:	6912      	ldr	r2, [r2, #16]
 80020c8:	4611      	mov	r1, r2
 80020ca:	4618      	mov	r0, r3
 80020cc:	f7fe fd50 	bl	8000b70 <__aeabi_fsub>
 80020d0:	4603      	mov	r3, r0
 80020d2:	4619      	mov	r1, r3
 80020d4:	4620      	mov	r0, r4
 80020d6:	f7fe fe55 	bl	8000d84 <__aeabi_fmul>
 80020da:	4603      	mov	r3, r0
 80020dc:	461a      	mov	r2, r3
 80020de:	4b1a      	ldr	r3, [pc, #104]	; (8002148 <PID+0x178>)
 80020e0:	6a1b      	ldr	r3, [r3, #32]
 80020e2:	4619      	mov	r1, r3
 80020e4:	4610      	mov	r0, r2
 80020e6:	f7fe ff01 	bl	8000eec <__aeabi_fdiv>
 80020ea:	4603      	mov	r3, r0
							 pidInfor.ki*pidInfor.errorIntergral*pidInfor.deltaT +
 80020ec:	4619      	mov	r1, r3
 80020ee:	4628      	mov	r0, r5
 80020f0:	f7fe fd40 	bl	8000b74 <__addsf3>
 80020f4:	4603      	mov	r3, r0
 80020f6:	461a      	mov	r2, r3
		pidInfor.outputPID = pidInfor.kp*pidInfor.error +
 80020f8:	4b13      	ldr	r3, [pc, #76]	; (8002148 <PID+0x178>)
 80020fa:	625a      	str	r2, [r3, #36]	; 0x24
		// Limit output PID
		if (pidInfor.outputPID > MAX_OUTPUT_PID)
 80020fc:	4b12      	ldr	r3, [pc, #72]	; (8002148 <PID+0x178>)
 80020fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002100:	4915      	ldr	r1, [pc, #84]	; (8002158 <PID+0x188>)
 8002102:	4618      	mov	r0, r3
 8002104:	f7fe fffa 	bl	80010fc <__aeabi_fcmpgt>
 8002108:	4603      	mov	r3, r0
 800210a:	2b00      	cmp	r3, #0
 800210c:	d003      	beq.n	8002116 <PID+0x146>
		{
			pidInfor.outputPID = MAX_OUTPUT_PID;
 800210e:	4b0e      	ldr	r3, [pc, #56]	; (8002148 <PID+0x178>)
 8002110:	4a11      	ldr	r2, [pc, #68]	; (8002158 <PID+0x188>)
 8002112:	625a      	str	r2, [r3, #36]	; 0x24
 8002114:	e00b      	b.n	800212e <PID+0x15e>
		}
		else if (pidInfor.outputPID < MIN_OUTPUT_PID)
 8002116:	4b0c      	ldr	r3, [pc, #48]	; (8002148 <PID+0x178>)
 8002118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800211a:	4910      	ldr	r1, [pc, #64]	; (800215c <PID+0x18c>)
 800211c:	4618      	mov	r0, r3
 800211e:	f7fe ffcf 	bl	80010c0 <__aeabi_fcmplt>
 8002122:	4603      	mov	r3, r0
 8002124:	2b00      	cmp	r3, #0
 8002126:	d002      	beq.n	800212e <PID+0x15e>
		{
			pidInfor.outputPID = MIN_OUTPUT_PID;
 8002128:	4b07      	ldr	r3, [pc, #28]	; (8002148 <PID+0x178>)
 800212a:	4a0c      	ldr	r2, [pc, #48]	; (800215c <PID+0x18c>)
 800212c:	625a      	str	r2, [r3, #36]	; 0x24
		}
		pidInfor.prevError = pidInfor.error;
 800212e:	4b06      	ldr	r3, [pc, #24]	; (8002148 <PID+0x178>)
 8002130:	695b      	ldr	r3, [r3, #20]
 8002132:	4a05      	ldr	r2, [pc, #20]	; (8002148 <PID+0x178>)
 8002134:	6113      	str	r3, [r2, #16]
		pidInfor.timeCountPID = 0;
 8002136:	4b04      	ldr	r3, [pc, #16]	; (8002148 <PID+0x178>)
 8002138:	2200      	movs	r2, #0
 800213a:	629a      	str	r2, [r3, #40]	; 0x28
	}
	return pidInfor.outputPID;
 800213c:	4b02      	ldr	r3, [pc, #8]	; (8002148 <PID+0x178>)
 800213e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8002140:	4618      	mov	r0, r3
 8002142:	3708      	adds	r7, #8
 8002144:	46bd      	mov	sp, r7
 8002146:	bdb0      	pop	{r4, r5, r7, pc}
 8002148:	20000004 	.word	0x20000004
 800214c:	447a0000 	.word	0x447a0000
 8002150:	41200000 	.word	0x41200000
 8002154:	c1200000 	.word	0xc1200000
 8002158:	41a00000 	.word	0x41a00000
 800215c:	c1a00000 	.word	0xc1a00000

08002160 <initServo>:
#include "servo.h"

extern TIM_HandleTypeDef htim4;

void initServo()
{
 8002160:	b580      	push	{r7, lr}
 8002162:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8002164:	2100      	movs	r1, #0
 8002166:	4802      	ldr	r0, [pc, #8]	; (8002170 <initServo+0x10>)
 8002168:	f002 fc2c 	bl	80049c4 <HAL_TIM_PWM_Start>
}
 800216c:	bf00      	nop
 800216e:	bd80      	pop	{r7, pc}
 8002170:	200003fc 	.word	0x200003fc

08002174 <convertToPWM>:

uint8_t convertToPWM(uint8_t angle) {
 8002174:	b480      	push	{r7}
 8002176:	b083      	sub	sp, #12
 8002178:	af00      	add	r7, sp, #0
 800217a:	4603      	mov	r3, r0
 800217c:	71fb      	strb	r3, [r7, #7]
    if (angle <= 90) {
 800217e:	79fb      	ldrb	r3, [r7, #7]
 8002180:	2b5a      	cmp	r3, #90	; 0x5a
 8002182:	d80e      	bhi.n	80021a2 <convertToPWM+0x2e>
        return (uint8_t)((angle * (249 - 49)) / 90 + 49); // [0, 90] sang [99, 249]
 8002184:	79fb      	ldrb	r3, [r7, #7]
 8002186:	22c8      	movs	r2, #200	; 0xc8
 8002188:	fb02 f303 	mul.w	r3, r2, r3
 800218c:	4a08      	ldr	r2, [pc, #32]	; (80021b0 <convertToPWM+0x3c>)
 800218e:	fb82 1203 	smull	r1, r2, r2, r3
 8002192:	441a      	add	r2, r3
 8002194:	1192      	asrs	r2, r2, #6
 8002196:	17db      	asrs	r3, r3, #31
 8002198:	1ad3      	subs	r3, r2, r3
 800219a:	b2db      	uxtb	r3, r3
 800219c:	3331      	adds	r3, #49	; 0x31
 800219e:	b2db      	uxtb	r3, r3
 80021a0:	e000      	b.n	80021a4 <convertToPWM+0x30>
    } else {
        return 249;
 80021a2:	23f9      	movs	r3, #249	; 0xf9
    }
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	370c      	adds	r7, #12
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bc80      	pop	{r7}
 80021ac:	4770      	bx	lr
 80021ae:	bf00      	nop
 80021b0:	b60b60b7 	.word	0xb60b60b7

080021b4 <setAngle>:
    } else {
        return 0;
    }
}
void setAngle(uint8_t Angle)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b082      	sub	sp, #8
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	4603      	mov	r3, r0
 80021bc:	71fb      	strb	r3, [r7, #7]
	if (Angle < 0)
	{
		Angle = 0;
	}
	else if (Angle > 90)
 80021be:	79fb      	ldrb	r3, [r7, #7]
 80021c0:	2b5a      	cmp	r3, #90	; 0x5a
 80021c2:	d901      	bls.n	80021c8 <setAngle+0x14>
	{
		Angle = 90;
 80021c4:	235a      	movs	r3, #90	; 0x5a
 80021c6:	71fb      	strb	r3, [r7, #7]
	}

	htim4.Instance->CCR1 = convertToPWM(Angle);;
 80021c8:	79fb      	ldrb	r3, [r7, #7]
 80021ca:	4618      	mov	r0, r3
 80021cc:	f7ff ffd2 	bl	8002174 <convertToPWM>
 80021d0:	4603      	mov	r3, r0
 80021d2:	461a      	mov	r2, r3
 80021d4:	4b03      	ldr	r3, [pc, #12]	; (80021e4 <setAngle+0x30>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	635a      	str	r2, [r3, #52]	; 0x34
}
 80021da:	bf00      	nop
 80021dc:	3708      	adds	r7, #8
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop
 80021e4:	200003fc 	.word	0x200003fc

080021e8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b083      	sub	sp, #12
 80021ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80021ee:	4b0e      	ldr	r3, [pc, #56]	; (8002228 <HAL_MspInit+0x40>)
 80021f0:	699b      	ldr	r3, [r3, #24]
 80021f2:	4a0d      	ldr	r2, [pc, #52]	; (8002228 <HAL_MspInit+0x40>)
 80021f4:	f043 0301 	orr.w	r3, r3, #1
 80021f8:	6193      	str	r3, [r2, #24]
 80021fa:	4b0b      	ldr	r3, [pc, #44]	; (8002228 <HAL_MspInit+0x40>)
 80021fc:	699b      	ldr	r3, [r3, #24]
 80021fe:	f003 0301 	and.w	r3, r3, #1
 8002202:	607b      	str	r3, [r7, #4]
 8002204:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002206:	4b08      	ldr	r3, [pc, #32]	; (8002228 <HAL_MspInit+0x40>)
 8002208:	69db      	ldr	r3, [r3, #28]
 800220a:	4a07      	ldr	r2, [pc, #28]	; (8002228 <HAL_MspInit+0x40>)
 800220c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002210:	61d3      	str	r3, [r2, #28]
 8002212:	4b05      	ldr	r3, [pc, #20]	; (8002228 <HAL_MspInit+0x40>)
 8002214:	69db      	ldr	r3, [r3, #28]
 8002216:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800221a:	603b      	str	r3, [r7, #0]
 800221c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800221e:	bf00      	nop
 8002220:	370c      	adds	r7, #12
 8002222:	46bd      	mov	sp, r7
 8002224:	bc80      	pop	{r7}
 8002226:	4770      	bx	lr
 8002228:	40021000 	.word	0x40021000

0800222c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b08a      	sub	sp, #40	; 0x28
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002234:	f107 0314 	add.w	r3, r7, #20
 8002238:	2200      	movs	r2, #0
 800223a:	601a      	str	r2, [r3, #0]
 800223c:	605a      	str	r2, [r3, #4]
 800223e:	609a      	str	r2, [r3, #8]
 8002240:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a29      	ldr	r2, [pc, #164]	; (80022ec <HAL_CAN_MspInit+0xc0>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d14b      	bne.n	80022e4 <HAL_CAN_MspInit+0xb8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800224c:	4b28      	ldr	r3, [pc, #160]	; (80022f0 <HAL_CAN_MspInit+0xc4>)
 800224e:	69db      	ldr	r3, [r3, #28]
 8002250:	4a27      	ldr	r2, [pc, #156]	; (80022f0 <HAL_CAN_MspInit+0xc4>)
 8002252:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002256:	61d3      	str	r3, [r2, #28]
 8002258:	4b25      	ldr	r3, [pc, #148]	; (80022f0 <HAL_CAN_MspInit+0xc4>)
 800225a:	69db      	ldr	r3, [r3, #28]
 800225c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002260:	613b      	str	r3, [r7, #16]
 8002262:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002264:	4b22      	ldr	r3, [pc, #136]	; (80022f0 <HAL_CAN_MspInit+0xc4>)
 8002266:	699b      	ldr	r3, [r3, #24]
 8002268:	4a21      	ldr	r2, [pc, #132]	; (80022f0 <HAL_CAN_MspInit+0xc4>)
 800226a:	f043 0308 	orr.w	r3, r3, #8
 800226e:	6193      	str	r3, [r2, #24]
 8002270:	4b1f      	ldr	r3, [pc, #124]	; (80022f0 <HAL_CAN_MspInit+0xc4>)
 8002272:	699b      	ldr	r3, [r3, #24]
 8002274:	f003 0308 	and.w	r3, r3, #8
 8002278:	60fb      	str	r3, [r7, #12]
 800227a:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800227c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002280:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002282:	2300      	movs	r3, #0
 8002284:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002286:	2300      	movs	r3, #0
 8002288:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800228a:	f107 0314 	add.w	r3, r7, #20
 800228e:	4619      	mov	r1, r3
 8002290:	4818      	ldr	r0, [pc, #96]	; (80022f4 <HAL_CAN_MspInit+0xc8>)
 8002292:	f001 fb17 	bl	80038c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002296:	f44f 7300 	mov.w	r3, #512	; 0x200
 800229a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800229c:	2302      	movs	r3, #2
 800229e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80022a0:	2303      	movs	r3, #3
 80022a2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022a4:	f107 0314 	add.w	r3, r7, #20
 80022a8:	4619      	mov	r1, r3
 80022aa:	4812      	ldr	r0, [pc, #72]	; (80022f4 <HAL_CAN_MspInit+0xc8>)
 80022ac:	f001 fb0a 	bl	80038c4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 80022b0:	4b11      	ldr	r3, [pc, #68]	; (80022f8 <HAL_CAN_MspInit+0xcc>)
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	627b      	str	r3, [r7, #36]	; 0x24
 80022b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b8:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 80022bc:	627b      	str	r3, [r7, #36]	; 0x24
 80022be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c0:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80022c4:	627b      	str	r3, [r7, #36]	; 0x24
 80022c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022cc:	627b      	str	r3, [r7, #36]	; 0x24
 80022ce:	4a0a      	ldr	r2, [pc, #40]	; (80022f8 <HAL_CAN_MspInit+0xcc>)
 80022d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d2:	6053      	str	r3, [r2, #4]

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 80022d4:	2200      	movs	r2, #0
 80022d6:	2100      	movs	r1, #0
 80022d8:	2015      	movs	r0, #21
 80022da:	f001 fabc 	bl	8003856 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 80022de:	2015      	movs	r0, #21
 80022e0:	f001 fad5 	bl	800388e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80022e4:	bf00      	nop
 80022e6:	3728      	adds	r7, #40	; 0x28
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}
 80022ec:	40006400 	.word	0x40006400
 80022f0:	40021000 	.word	0x40021000
 80022f4:	40010c00 	.word	0x40010c00
 80022f8:	40010000 	.word	0x40010000

080022fc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b088      	sub	sp, #32
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002304:	f107 0310 	add.w	r3, r7, #16
 8002308:	2200      	movs	r2, #0
 800230a:	601a      	str	r2, [r3, #0]
 800230c:	605a      	str	r2, [r3, #4]
 800230e:	609a      	str	r2, [r3, #8]
 8002310:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a16      	ldr	r2, [pc, #88]	; (8002370 <HAL_I2C_MspInit+0x74>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d124      	bne.n	8002366 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800231c:	4b15      	ldr	r3, [pc, #84]	; (8002374 <HAL_I2C_MspInit+0x78>)
 800231e:	699b      	ldr	r3, [r3, #24]
 8002320:	4a14      	ldr	r2, [pc, #80]	; (8002374 <HAL_I2C_MspInit+0x78>)
 8002322:	f043 0308 	orr.w	r3, r3, #8
 8002326:	6193      	str	r3, [r2, #24]
 8002328:	4b12      	ldr	r3, [pc, #72]	; (8002374 <HAL_I2C_MspInit+0x78>)
 800232a:	699b      	ldr	r3, [r3, #24]
 800232c:	f003 0308 	and.w	r3, r3, #8
 8002330:	60fb      	str	r3, [r7, #12]
 8002332:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002334:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002338:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800233a:	2312      	movs	r3, #18
 800233c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800233e:	2303      	movs	r3, #3
 8002340:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002342:	f107 0310 	add.w	r3, r7, #16
 8002346:	4619      	mov	r1, r3
 8002348:	480b      	ldr	r0, [pc, #44]	; (8002378 <HAL_I2C_MspInit+0x7c>)
 800234a:	f001 fabb 	bl	80038c4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800234e:	4b09      	ldr	r3, [pc, #36]	; (8002374 <HAL_I2C_MspInit+0x78>)
 8002350:	69db      	ldr	r3, [r3, #28]
 8002352:	4a08      	ldr	r2, [pc, #32]	; (8002374 <HAL_I2C_MspInit+0x78>)
 8002354:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002358:	61d3      	str	r3, [r2, #28]
 800235a:	4b06      	ldr	r3, [pc, #24]	; (8002374 <HAL_I2C_MspInit+0x78>)
 800235c:	69db      	ldr	r3, [r3, #28]
 800235e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002362:	60bb      	str	r3, [r7, #8]
 8002364:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002366:	bf00      	nop
 8002368:	3720      	adds	r7, #32
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}
 800236e:	bf00      	nop
 8002370:	40005800 	.word	0x40005800
 8002374:	40021000 	.word	0x40021000
 8002378:	40010c00 	.word	0x40010c00

0800237c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b088      	sub	sp, #32
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002384:	f107 0310 	add.w	r3, r7, #16
 8002388:	2200      	movs	r2, #0
 800238a:	601a      	str	r2, [r3, #0]
 800238c:	605a      	str	r2, [r3, #4]
 800238e:	609a      	str	r2, [r3, #8]
 8002390:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a1b      	ldr	r2, [pc, #108]	; (8002404 <HAL_SPI_MspInit+0x88>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d12f      	bne.n	80023fc <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800239c:	4b1a      	ldr	r3, [pc, #104]	; (8002408 <HAL_SPI_MspInit+0x8c>)
 800239e:	699b      	ldr	r3, [r3, #24]
 80023a0:	4a19      	ldr	r2, [pc, #100]	; (8002408 <HAL_SPI_MspInit+0x8c>)
 80023a2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80023a6:	6193      	str	r3, [r2, #24]
 80023a8:	4b17      	ldr	r3, [pc, #92]	; (8002408 <HAL_SPI_MspInit+0x8c>)
 80023aa:	699b      	ldr	r3, [r3, #24]
 80023ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023b0:	60fb      	str	r3, [r7, #12]
 80023b2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023b4:	4b14      	ldr	r3, [pc, #80]	; (8002408 <HAL_SPI_MspInit+0x8c>)
 80023b6:	699b      	ldr	r3, [r3, #24]
 80023b8:	4a13      	ldr	r2, [pc, #76]	; (8002408 <HAL_SPI_MspInit+0x8c>)
 80023ba:	f043 0304 	orr.w	r3, r3, #4
 80023be:	6193      	str	r3, [r2, #24]
 80023c0:	4b11      	ldr	r3, [pc, #68]	; (8002408 <HAL_SPI_MspInit+0x8c>)
 80023c2:	699b      	ldr	r3, [r3, #24]
 80023c4:	f003 0304 	and.w	r3, r3, #4
 80023c8:	60bb      	str	r3, [r7, #8]
 80023ca:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80023cc:	23a0      	movs	r3, #160	; 0xa0
 80023ce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023d0:	2302      	movs	r3, #2
 80023d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80023d4:	2303      	movs	r3, #3
 80023d6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023d8:	f107 0310 	add.w	r3, r7, #16
 80023dc:	4619      	mov	r1, r3
 80023de:	480b      	ldr	r0, [pc, #44]	; (800240c <HAL_SPI_MspInit+0x90>)
 80023e0:	f001 fa70 	bl	80038c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80023e4:	2340      	movs	r3, #64	; 0x40
 80023e6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023e8:	2300      	movs	r3, #0
 80023ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ec:	2300      	movs	r3, #0
 80023ee:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023f0:	f107 0310 	add.w	r3, r7, #16
 80023f4:	4619      	mov	r1, r3
 80023f6:	4805      	ldr	r0, [pc, #20]	; (800240c <HAL_SPI_MspInit+0x90>)
 80023f8:	f001 fa64 	bl	80038c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80023fc:	bf00      	nop
 80023fe:	3720      	adds	r7, #32
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}
 8002404:	40013000 	.word	0x40013000
 8002408:	40021000 	.word	0x40021000
 800240c:	40010800 	.word	0x40010800

08002410 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002410:	b480      	push	{r7}
 8002412:	b085      	sub	sp, #20
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a12      	ldr	r2, [pc, #72]	; (8002468 <HAL_TIM_PWM_MspInit+0x58>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d10c      	bne.n	800243c <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002422:	4b12      	ldr	r3, [pc, #72]	; (800246c <HAL_TIM_PWM_MspInit+0x5c>)
 8002424:	699b      	ldr	r3, [r3, #24]
 8002426:	4a11      	ldr	r2, [pc, #68]	; (800246c <HAL_TIM_PWM_MspInit+0x5c>)
 8002428:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800242c:	6193      	str	r3, [r2, #24]
 800242e:	4b0f      	ldr	r3, [pc, #60]	; (800246c <HAL_TIM_PWM_MspInit+0x5c>)
 8002430:	699b      	ldr	r3, [r3, #24]
 8002432:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002436:	60fb      	str	r3, [r7, #12]
 8002438:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800243a:	e010      	b.n	800245e <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM4)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a0b      	ldr	r2, [pc, #44]	; (8002470 <HAL_TIM_PWM_MspInit+0x60>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d10b      	bne.n	800245e <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002446:	4b09      	ldr	r3, [pc, #36]	; (800246c <HAL_TIM_PWM_MspInit+0x5c>)
 8002448:	69db      	ldr	r3, [r3, #28]
 800244a:	4a08      	ldr	r2, [pc, #32]	; (800246c <HAL_TIM_PWM_MspInit+0x5c>)
 800244c:	f043 0304 	orr.w	r3, r3, #4
 8002450:	61d3      	str	r3, [r2, #28]
 8002452:	4b06      	ldr	r3, [pc, #24]	; (800246c <HAL_TIM_PWM_MspInit+0x5c>)
 8002454:	69db      	ldr	r3, [r3, #28]
 8002456:	f003 0304 	and.w	r3, r3, #4
 800245a:	60bb      	str	r3, [r7, #8]
 800245c:	68bb      	ldr	r3, [r7, #8]
}
 800245e:	bf00      	nop
 8002460:	3714      	adds	r7, #20
 8002462:	46bd      	mov	sp, r7
 8002464:	bc80      	pop	{r7}
 8002466:	4770      	bx	lr
 8002468:	40012c00 	.word	0x40012c00
 800246c:	40021000 	.word	0x40021000
 8002470:	40000800 	.word	0x40000800

08002474 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b088      	sub	sp, #32
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800247c:	f107 0310 	add.w	r3, r7, #16
 8002480:	2200      	movs	r2, #0
 8002482:	601a      	str	r2, [r3, #0]
 8002484:	605a      	str	r2, [r3, #4]
 8002486:	609a      	str	r2, [r3, #8]
 8002488:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM2)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002492:	d12b      	bne.n	80024ec <HAL_TIM_Encoder_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002494:	4b17      	ldr	r3, [pc, #92]	; (80024f4 <HAL_TIM_Encoder_MspInit+0x80>)
 8002496:	69db      	ldr	r3, [r3, #28]
 8002498:	4a16      	ldr	r2, [pc, #88]	; (80024f4 <HAL_TIM_Encoder_MspInit+0x80>)
 800249a:	f043 0301 	orr.w	r3, r3, #1
 800249e:	61d3      	str	r3, [r2, #28]
 80024a0:	4b14      	ldr	r3, [pc, #80]	; (80024f4 <HAL_TIM_Encoder_MspInit+0x80>)
 80024a2:	69db      	ldr	r3, [r3, #28]
 80024a4:	f003 0301 	and.w	r3, r3, #1
 80024a8:	60fb      	str	r3, [r7, #12]
 80024aa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024ac:	4b11      	ldr	r3, [pc, #68]	; (80024f4 <HAL_TIM_Encoder_MspInit+0x80>)
 80024ae:	699b      	ldr	r3, [r3, #24]
 80024b0:	4a10      	ldr	r2, [pc, #64]	; (80024f4 <HAL_TIM_Encoder_MspInit+0x80>)
 80024b2:	f043 0304 	orr.w	r3, r3, #4
 80024b6:	6193      	str	r3, [r2, #24]
 80024b8:	4b0e      	ldr	r3, [pc, #56]	; (80024f4 <HAL_TIM_Encoder_MspInit+0x80>)
 80024ba:	699b      	ldr	r3, [r3, #24]
 80024bc:	f003 0304 	and.w	r3, r3, #4
 80024c0:	60bb      	str	r3, [r7, #8]
 80024c2:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80024c4:	2303      	movs	r3, #3
 80024c6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024c8:	2300      	movs	r3, #0
 80024ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024cc:	2300      	movs	r3, #0
 80024ce:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024d0:	f107 0310 	add.w	r3, r7, #16
 80024d4:	4619      	mov	r1, r3
 80024d6:	4808      	ldr	r0, [pc, #32]	; (80024f8 <HAL_TIM_Encoder_MspInit+0x84>)
 80024d8:	f001 f9f4 	bl	80038c4 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80024dc:	2200      	movs	r2, #0
 80024de:	2100      	movs	r1, #0
 80024e0:	201c      	movs	r0, #28
 80024e2:	f001 f9b8 	bl	8003856 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80024e6:	201c      	movs	r0, #28
 80024e8:	f001 f9d1 	bl	800388e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80024ec:	bf00      	nop
 80024ee:	3720      	adds	r7, #32
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bd80      	pop	{r7, pc}
 80024f4:	40021000 	.word	0x40021000
 80024f8:	40010800 	.word	0x40010800

080024fc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b084      	sub	sp, #16
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a0d      	ldr	r2, [pc, #52]	; (8002540 <HAL_TIM_Base_MspInit+0x44>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d113      	bne.n	8002536 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800250e:	4b0d      	ldr	r3, [pc, #52]	; (8002544 <HAL_TIM_Base_MspInit+0x48>)
 8002510:	69db      	ldr	r3, [r3, #28]
 8002512:	4a0c      	ldr	r2, [pc, #48]	; (8002544 <HAL_TIM_Base_MspInit+0x48>)
 8002514:	f043 0302 	orr.w	r3, r3, #2
 8002518:	61d3      	str	r3, [r2, #28]
 800251a:	4b0a      	ldr	r3, [pc, #40]	; (8002544 <HAL_TIM_Base_MspInit+0x48>)
 800251c:	69db      	ldr	r3, [r3, #28]
 800251e:	f003 0302 	and.w	r3, r3, #2
 8002522:	60fb      	str	r3, [r7, #12]
 8002524:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002526:	2200      	movs	r2, #0
 8002528:	2100      	movs	r1, #0
 800252a:	201d      	movs	r0, #29
 800252c:	f001 f993 	bl	8003856 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002530:	201d      	movs	r0, #29
 8002532:	f001 f9ac 	bl	800388e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002536:	bf00      	nop
 8002538:	3710      	adds	r7, #16
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}
 800253e:	bf00      	nop
 8002540:	40000400 	.word	0x40000400
 8002544:	40021000 	.word	0x40021000

08002548 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b088      	sub	sp, #32
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002550:	f107 0310 	add.w	r3, r7, #16
 8002554:	2200      	movs	r2, #0
 8002556:	601a      	str	r2, [r3, #0]
 8002558:	605a      	str	r2, [r3, #4]
 800255a:	609a      	str	r2, [r3, #8]
 800255c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a1f      	ldr	r2, [pc, #124]	; (80025e0 <HAL_TIM_MspPostInit+0x98>)
 8002564:	4293      	cmp	r3, r2
 8002566:	d119      	bne.n	800259c <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002568:	4b1e      	ldr	r3, [pc, #120]	; (80025e4 <HAL_TIM_MspPostInit+0x9c>)
 800256a:	699b      	ldr	r3, [r3, #24]
 800256c:	4a1d      	ldr	r2, [pc, #116]	; (80025e4 <HAL_TIM_MspPostInit+0x9c>)
 800256e:	f043 0304 	orr.w	r3, r3, #4
 8002572:	6193      	str	r3, [r2, #24]
 8002574:	4b1b      	ldr	r3, [pc, #108]	; (80025e4 <HAL_TIM_MspPostInit+0x9c>)
 8002576:	699b      	ldr	r3, [r3, #24]
 8002578:	f003 0304 	and.w	r3, r3, #4
 800257c:	60fb      	str	r3, [r7, #12]
 800257e:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = L_PWM_Pin|R_PWM_Pin;
 8002580:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8002584:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002586:	2302      	movs	r3, #2
 8002588:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800258a:	2302      	movs	r3, #2
 800258c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800258e:	f107 0310 	add.w	r3, r7, #16
 8002592:	4619      	mov	r1, r3
 8002594:	4814      	ldr	r0, [pc, #80]	; (80025e8 <HAL_TIM_MspPostInit+0xa0>)
 8002596:	f001 f995 	bl	80038c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800259a:	e01c      	b.n	80025d6 <HAL_TIM_MspPostInit+0x8e>
  else if(htim->Instance==TIM4)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a12      	ldr	r2, [pc, #72]	; (80025ec <HAL_TIM_MspPostInit+0xa4>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d117      	bne.n	80025d6 <HAL_TIM_MspPostInit+0x8e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025a6:	4b0f      	ldr	r3, [pc, #60]	; (80025e4 <HAL_TIM_MspPostInit+0x9c>)
 80025a8:	699b      	ldr	r3, [r3, #24]
 80025aa:	4a0e      	ldr	r2, [pc, #56]	; (80025e4 <HAL_TIM_MspPostInit+0x9c>)
 80025ac:	f043 0308 	orr.w	r3, r3, #8
 80025b0:	6193      	str	r3, [r2, #24]
 80025b2:	4b0c      	ldr	r3, [pc, #48]	; (80025e4 <HAL_TIM_MspPostInit+0x9c>)
 80025b4:	699b      	ldr	r3, [r3, #24]
 80025b6:	f003 0308 	and.w	r3, r3, #8
 80025ba:	60bb      	str	r3, [r7, #8]
 80025bc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80025be:	2340      	movs	r3, #64	; 0x40
 80025c0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025c2:	2302      	movs	r3, #2
 80025c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025c6:	2302      	movs	r3, #2
 80025c8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025ca:	f107 0310 	add.w	r3, r7, #16
 80025ce:	4619      	mov	r1, r3
 80025d0:	4807      	ldr	r0, [pc, #28]	; (80025f0 <HAL_TIM_MspPostInit+0xa8>)
 80025d2:	f001 f977 	bl	80038c4 <HAL_GPIO_Init>
}
 80025d6:	bf00      	nop
 80025d8:	3720      	adds	r7, #32
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}
 80025de:	bf00      	nop
 80025e0:	40012c00 	.word	0x40012c00
 80025e4:	40021000 	.word	0x40021000
 80025e8:	40010800 	.word	0x40010800
 80025ec:	40000800 	.word	0x40000800
 80025f0:	40010c00 	.word	0x40010c00

080025f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b088      	sub	sp, #32
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025fc:	f107 0310 	add.w	r3, r7, #16
 8002600:	2200      	movs	r2, #0
 8002602:	601a      	str	r2, [r3, #0]
 8002604:	605a      	str	r2, [r3, #4]
 8002606:	609a      	str	r2, [r3, #8]
 8002608:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a1c      	ldr	r2, [pc, #112]	; (8002680 <HAL_UART_MspInit+0x8c>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d131      	bne.n	8002678 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002614:	4b1b      	ldr	r3, [pc, #108]	; (8002684 <HAL_UART_MspInit+0x90>)
 8002616:	699b      	ldr	r3, [r3, #24]
 8002618:	4a1a      	ldr	r2, [pc, #104]	; (8002684 <HAL_UART_MspInit+0x90>)
 800261a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800261e:	6193      	str	r3, [r2, #24]
 8002620:	4b18      	ldr	r3, [pc, #96]	; (8002684 <HAL_UART_MspInit+0x90>)
 8002622:	699b      	ldr	r3, [r3, #24]
 8002624:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002628:	60fb      	str	r3, [r7, #12]
 800262a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800262c:	4b15      	ldr	r3, [pc, #84]	; (8002684 <HAL_UART_MspInit+0x90>)
 800262e:	699b      	ldr	r3, [r3, #24]
 8002630:	4a14      	ldr	r2, [pc, #80]	; (8002684 <HAL_UART_MspInit+0x90>)
 8002632:	f043 0304 	orr.w	r3, r3, #4
 8002636:	6193      	str	r3, [r2, #24]
 8002638:	4b12      	ldr	r3, [pc, #72]	; (8002684 <HAL_UART_MspInit+0x90>)
 800263a:	699b      	ldr	r3, [r3, #24]
 800263c:	f003 0304 	and.w	r3, r3, #4
 8002640:	60bb      	str	r3, [r7, #8]
 8002642:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002644:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002648:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800264a:	2302      	movs	r3, #2
 800264c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800264e:	2303      	movs	r3, #3
 8002650:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002652:	f107 0310 	add.w	r3, r7, #16
 8002656:	4619      	mov	r1, r3
 8002658:	480b      	ldr	r0, [pc, #44]	; (8002688 <HAL_UART_MspInit+0x94>)
 800265a:	f001 f933 	bl	80038c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800265e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002662:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002664:	2300      	movs	r3, #0
 8002666:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002668:	2300      	movs	r3, #0
 800266a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800266c:	f107 0310 	add.w	r3, r7, #16
 8002670:	4619      	mov	r1, r3
 8002672:	4805      	ldr	r0, [pc, #20]	; (8002688 <HAL_UART_MspInit+0x94>)
 8002674:	f001 f926 	bl	80038c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002678:	bf00      	nop
 800267a:	3720      	adds	r7, #32
 800267c:	46bd      	mov	sp, r7
 800267e:	bd80      	pop	{r7, pc}
 8002680:	40013800 	.word	0x40013800
 8002684:	40021000 	.word	0x40021000
 8002688:	40010800 	.word	0x40010800

0800268c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800268c:	b480      	push	{r7}
 800268e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002690:	e7fe      	b.n	8002690 <NMI_Handler+0x4>

08002692 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002692:	b480      	push	{r7}
 8002694:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002696:	e7fe      	b.n	8002696 <HardFault_Handler+0x4>

08002698 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002698:	b480      	push	{r7}
 800269a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800269c:	e7fe      	b.n	800269c <MemManage_Handler+0x4>

0800269e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800269e:	b480      	push	{r7}
 80026a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80026a2:	e7fe      	b.n	80026a2 <BusFault_Handler+0x4>

080026a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80026a4:	b480      	push	{r7}
 80026a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80026a8:	e7fe      	b.n	80026a8 <UsageFault_Handler+0x4>

080026aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80026aa:	b480      	push	{r7}
 80026ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80026ae:	bf00      	nop
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bc80      	pop	{r7}
 80026b4:	4770      	bx	lr

080026b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80026b6:	b480      	push	{r7}
 80026b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80026ba:	bf00      	nop
 80026bc:	46bd      	mov	sp, r7
 80026be:	bc80      	pop	{r7}
 80026c0:	4770      	bx	lr

080026c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80026c2:	b480      	push	{r7}
 80026c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80026c6:	bf00      	nop
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bc80      	pop	{r7}
 80026cc:	4770      	bx	lr
	...

080026d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80026d4:	f000 f98c 	bl	80029f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  encoderInfo.timeIndex++;
 80026d8:	4b05      	ldr	r3, [pc, #20]	; (80026f0 <SysTick_Handler+0x20>)
 80026da:	689b      	ldr	r3, [r3, #8]
 80026dc:	3301      	adds	r3, #1
 80026de:	4a04      	ldr	r2, [pc, #16]	; (80026f0 <SysTick_Handler+0x20>)
 80026e0:	6093      	str	r3, [r2, #8]
  pidInfor.timeCountPID++;
 80026e2:	4b04      	ldr	r3, [pc, #16]	; (80026f4 <SysTick_Handler+0x24>)
 80026e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026e6:	3301      	adds	r3, #1
 80026e8:	4a02      	ldr	r2, [pc, #8]	; (80026f4 <SysTick_Handler+0x24>)
 80026ea:	6293      	str	r3, [r2, #40]	; 0x28

//  encoderInfo.encodeCnt = (int16_t)__HAL_TIM_GET_COUNTER(&htim2);

  /* USER CODE END SysTick_IRQn 1 */
}
 80026ec:	bf00      	nop
 80026ee:	bd80      	pop	{r7, pc}
 80026f0:	200004a8 	.word	0x200004a8
 80026f4:	20000004 	.word	0x20000004

080026f8 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80026fc:	4802      	ldr	r0, [pc, #8]	; (8002708 <CAN1_RX1_IRQHandler+0x10>)
 80026fe:	f000 fdb0 	bl	8003262 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8002702:	bf00      	nop
 8002704:	bd80      	pop	{r7, pc}
 8002706:	bf00      	nop
 8002708:	20000250 	.word	0x20000250

0800270c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002710:	4802      	ldr	r0, [pc, #8]	; (800271c <TIM2_IRQHandler+0x10>)
 8002712:	f002 fc19 	bl	8004f48 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002716:	bf00      	nop
 8002718:	bd80      	pop	{r7, pc}
 800271a:	bf00      	nop
 800271c:	2000036c 	.word	0x2000036c

08002720 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002724:	4802      	ldr	r0, [pc, #8]	; (8002730 <TIM3_IRQHandler+0x10>)
 8002726:	f002 fc0f 	bl	8004f48 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800272a:	bf00      	nop
 800272c:	bd80      	pop	{r7, pc}
 800272e:	bf00      	nop
 8002730:	200003b4 	.word	0x200003b4

08002734 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002734:	b480      	push	{r7}
 8002736:	af00      	add	r7, sp, #0
  return 1;
 8002738:	2301      	movs	r3, #1
}
 800273a:	4618      	mov	r0, r3
 800273c:	46bd      	mov	sp, r7
 800273e:	bc80      	pop	{r7}
 8002740:	4770      	bx	lr

08002742 <_kill>:

int _kill(int pid, int sig)
{
 8002742:	b580      	push	{r7, lr}
 8002744:	b082      	sub	sp, #8
 8002746:	af00      	add	r7, sp, #0
 8002748:	6078      	str	r0, [r7, #4]
 800274a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800274c:	f004 fcb0 	bl	80070b0 <__errno>
 8002750:	4603      	mov	r3, r0
 8002752:	2216      	movs	r2, #22
 8002754:	601a      	str	r2, [r3, #0]
  return -1;
 8002756:	f04f 33ff 	mov.w	r3, #4294967295
}
 800275a:	4618      	mov	r0, r3
 800275c:	3708      	adds	r7, #8
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}

08002762 <_exit>:

void _exit (int status)
{
 8002762:	b580      	push	{r7, lr}
 8002764:	b082      	sub	sp, #8
 8002766:	af00      	add	r7, sp, #0
 8002768:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800276a:	f04f 31ff 	mov.w	r1, #4294967295
 800276e:	6878      	ldr	r0, [r7, #4]
 8002770:	f7ff ffe7 	bl	8002742 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002774:	e7fe      	b.n	8002774 <_exit+0x12>

08002776 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002776:	b580      	push	{r7, lr}
 8002778:	b086      	sub	sp, #24
 800277a:	af00      	add	r7, sp, #0
 800277c:	60f8      	str	r0, [r7, #12]
 800277e:	60b9      	str	r1, [r7, #8]
 8002780:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002782:	2300      	movs	r3, #0
 8002784:	617b      	str	r3, [r7, #20]
 8002786:	e00a      	b.n	800279e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002788:	f3af 8000 	nop.w
 800278c:	4601      	mov	r1, r0
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	1c5a      	adds	r2, r3, #1
 8002792:	60ba      	str	r2, [r7, #8]
 8002794:	b2ca      	uxtb	r2, r1
 8002796:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	3301      	adds	r3, #1
 800279c:	617b      	str	r3, [r7, #20]
 800279e:	697a      	ldr	r2, [r7, #20]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	429a      	cmp	r2, r3
 80027a4:	dbf0      	blt.n	8002788 <_read+0x12>
  }

  return len;
 80027a6:	687b      	ldr	r3, [r7, #4]
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	3718      	adds	r7, #24
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}

080027b0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b086      	sub	sp, #24
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	60f8      	str	r0, [r7, #12]
 80027b8:	60b9      	str	r1, [r7, #8]
 80027ba:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027bc:	2300      	movs	r3, #0
 80027be:	617b      	str	r3, [r7, #20]
 80027c0:	e009      	b.n	80027d6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80027c2:	68bb      	ldr	r3, [r7, #8]
 80027c4:	1c5a      	adds	r2, r3, #1
 80027c6:	60ba      	str	r2, [r7, #8]
 80027c8:	781b      	ldrb	r3, [r3, #0]
 80027ca:	4618      	mov	r0, r3
 80027cc:	f000 f892 	bl	80028f4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	3301      	adds	r3, #1
 80027d4:	617b      	str	r3, [r7, #20]
 80027d6:	697a      	ldr	r2, [r7, #20]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	429a      	cmp	r2, r3
 80027dc:	dbf1      	blt.n	80027c2 <_write+0x12>
  }
  return len;
 80027de:	687b      	ldr	r3, [r7, #4]
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	3718      	adds	r7, #24
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}

080027e8 <_close>:

int _close(int file)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b083      	sub	sp, #12
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80027f0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	370c      	adds	r7, #12
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bc80      	pop	{r7}
 80027fc:	4770      	bx	lr

080027fe <_fstat>:


int _fstat(int file, struct stat *st)
{
 80027fe:	b480      	push	{r7}
 8002800:	b083      	sub	sp, #12
 8002802:	af00      	add	r7, sp, #0
 8002804:	6078      	str	r0, [r7, #4]
 8002806:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800280e:	605a      	str	r2, [r3, #4]
  return 0;
 8002810:	2300      	movs	r3, #0
}
 8002812:	4618      	mov	r0, r3
 8002814:	370c      	adds	r7, #12
 8002816:	46bd      	mov	sp, r7
 8002818:	bc80      	pop	{r7}
 800281a:	4770      	bx	lr

0800281c <_isatty>:

int _isatty(int file)
{
 800281c:	b480      	push	{r7}
 800281e:	b083      	sub	sp, #12
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002824:	2301      	movs	r3, #1
}
 8002826:	4618      	mov	r0, r3
 8002828:	370c      	adds	r7, #12
 800282a:	46bd      	mov	sp, r7
 800282c:	bc80      	pop	{r7}
 800282e:	4770      	bx	lr

08002830 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002830:	b480      	push	{r7}
 8002832:	b085      	sub	sp, #20
 8002834:	af00      	add	r7, sp, #0
 8002836:	60f8      	str	r0, [r7, #12]
 8002838:	60b9      	str	r1, [r7, #8]
 800283a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800283c:	2300      	movs	r3, #0
}
 800283e:	4618      	mov	r0, r3
 8002840:	3714      	adds	r7, #20
 8002842:	46bd      	mov	sp, r7
 8002844:	bc80      	pop	{r7}
 8002846:	4770      	bx	lr

08002848 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b086      	sub	sp, #24
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002850:	4a14      	ldr	r2, [pc, #80]	; (80028a4 <_sbrk+0x5c>)
 8002852:	4b15      	ldr	r3, [pc, #84]	; (80028a8 <_sbrk+0x60>)
 8002854:	1ad3      	subs	r3, r2, r3
 8002856:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800285c:	4b13      	ldr	r3, [pc, #76]	; (80028ac <_sbrk+0x64>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d102      	bne.n	800286a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002864:	4b11      	ldr	r3, [pc, #68]	; (80028ac <_sbrk+0x64>)
 8002866:	4a12      	ldr	r2, [pc, #72]	; (80028b0 <_sbrk+0x68>)
 8002868:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800286a:	4b10      	ldr	r3, [pc, #64]	; (80028ac <_sbrk+0x64>)
 800286c:	681a      	ldr	r2, [r3, #0]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	4413      	add	r3, r2
 8002872:	693a      	ldr	r2, [r7, #16]
 8002874:	429a      	cmp	r2, r3
 8002876:	d207      	bcs.n	8002888 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002878:	f004 fc1a 	bl	80070b0 <__errno>
 800287c:	4603      	mov	r3, r0
 800287e:	220c      	movs	r2, #12
 8002880:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002882:	f04f 33ff 	mov.w	r3, #4294967295
 8002886:	e009      	b.n	800289c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002888:	4b08      	ldr	r3, [pc, #32]	; (80028ac <_sbrk+0x64>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800288e:	4b07      	ldr	r3, [pc, #28]	; (80028ac <_sbrk+0x64>)
 8002890:	681a      	ldr	r2, [r3, #0]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	4413      	add	r3, r2
 8002896:	4a05      	ldr	r2, [pc, #20]	; (80028ac <_sbrk+0x64>)
 8002898:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800289a:	68fb      	ldr	r3, [r7, #12]
}
 800289c:	4618      	mov	r0, r3
 800289e:	3718      	adds	r7, #24
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd80      	pop	{r7, pc}
 80028a4:	20005000 	.word	0x20005000
 80028a8:	00000400 	.word	0x00000400
 80028ac:	200004c4 	.word	0x200004c4
 80028b0:	20000620 	.word	0x20000620

080028b4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80028b4:	b480      	push	{r7}
 80028b6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80028b8:	bf00      	nop
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bc80      	pop	{r7}
 80028be:	4770      	bx	lr

080028c0 <HAL_TIM_PeriodElapsedCallback>:
/**
 * @brief Timer ISR
 * @param htim Timer_HandleTypeDef pointer
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b083      	sub	sp, #12
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
	if (htim->Instance == htim3.Instance)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681a      	ldr	r2, [r3, #0]
 80028cc:	4b07      	ldr	r3, [pc, #28]	; (80028ec <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	429a      	cmp	r2, r3
 80028d2:	d105      	bne.n	80028e0 <HAL_TIM_PeriodElapsedCallback+0x20>
	{
		timeElapsed += 100;
 80028d4:	4b06      	ldr	r3, [pc, #24]	; (80028f0 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	3364      	adds	r3, #100	; 0x64
 80028da:	4a05      	ldr	r2, [pc, #20]	; (80028f0 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80028dc:	6013      	str	r3, [r2, #0]
	}
	else
	{
		__NOP();
	}
}
 80028de:	e000      	b.n	80028e2 <HAL_TIM_PeriodElapsedCallback+0x22>
		__NOP();
 80028e0:	bf00      	nop
}
 80028e2:	bf00      	nop
 80028e4:	370c      	adds	r7, #12
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bc80      	pop	{r7}
 80028ea:	4770      	bx	lr
 80028ec:	200003b4 	.word	0x200003b4
 80028f0:	200004c8 	.word	0x200004c8

080028f4 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b082      	sub	sp, #8
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80028fc:	1d39      	adds	r1, r7, #4
 80028fe:	f04f 33ff 	mov.w	r3, #4294967295
 8002902:	2201      	movs	r2, #1
 8002904:	4803      	ldr	r0, [pc, #12]	; (8002914 <__io_putchar+0x20>)
 8002906:	f003 f980 	bl	8005c0a <HAL_UART_Transmit>
	return ch;
 800290a:	687b      	ldr	r3, [r7, #4]
}
 800290c:	4618      	mov	r0, r3
 800290e:	3708      	adds	r7, #8
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}
 8002914:	20000444 	.word	0x20000444

08002918 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002918:	f7ff ffcc 	bl	80028b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800291c:	480b      	ldr	r0, [pc, #44]	; (800294c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800291e:	490c      	ldr	r1, [pc, #48]	; (8002950 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002920:	4a0c      	ldr	r2, [pc, #48]	; (8002954 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002922:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002924:	e002      	b.n	800292c <LoopCopyDataInit>

08002926 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002926:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002928:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800292a:	3304      	adds	r3, #4

0800292c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800292c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800292e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002930:	d3f9      	bcc.n	8002926 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002932:	4a09      	ldr	r2, [pc, #36]	; (8002958 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002934:	4c09      	ldr	r4, [pc, #36]	; (800295c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002936:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002938:	e001      	b.n	800293e <LoopFillZerobss>

0800293a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800293a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800293c:	3204      	adds	r2, #4

0800293e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800293e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002940:	d3fb      	bcc.n	800293a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002942:	f004 fbbb 	bl	80070bc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002946:	f7fe fccb 	bl	80012e0 <main>
  bx lr
 800294a:	4770      	bx	lr
  ldr r0, =_sdata
 800294c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002950:	2000020c 	.word	0x2000020c
  ldr r2, =_sidata
 8002954:	0800abac 	.word	0x0800abac
  ldr r2, =_sbss
 8002958:	2000020c 	.word	0x2000020c
  ldr r4, =_ebss
 800295c:	2000061c 	.word	0x2000061c

08002960 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002960:	e7fe      	b.n	8002960 <ADC1_2_IRQHandler>
	...

08002964 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002968:	4b08      	ldr	r3, [pc, #32]	; (800298c <HAL_Init+0x28>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a07      	ldr	r2, [pc, #28]	; (800298c <HAL_Init+0x28>)
 800296e:	f043 0310 	orr.w	r3, r3, #16
 8002972:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002974:	2003      	movs	r0, #3
 8002976:	f000 ff63 	bl	8003840 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800297a:	200f      	movs	r0, #15
 800297c:	f000 f808 	bl	8002990 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002980:	f7ff fc32 	bl	80021e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002984:	2300      	movs	r3, #0
}
 8002986:	4618      	mov	r0, r3
 8002988:	bd80      	pop	{r7, pc}
 800298a:	bf00      	nop
 800298c:	40022000 	.word	0x40022000

08002990 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b082      	sub	sp, #8
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002998:	4b12      	ldr	r3, [pc, #72]	; (80029e4 <HAL_InitTick+0x54>)
 800299a:	681a      	ldr	r2, [r3, #0]
 800299c:	4b12      	ldr	r3, [pc, #72]	; (80029e8 <HAL_InitTick+0x58>)
 800299e:	781b      	ldrb	r3, [r3, #0]
 80029a0:	4619      	mov	r1, r3
 80029a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80029a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80029aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80029ae:	4618      	mov	r0, r3
 80029b0:	f000 ff7b 	bl	80038aa <HAL_SYSTICK_Config>
 80029b4:	4603      	mov	r3, r0
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d001      	beq.n	80029be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	e00e      	b.n	80029dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2b0f      	cmp	r3, #15
 80029c2:	d80a      	bhi.n	80029da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80029c4:	2200      	movs	r2, #0
 80029c6:	6879      	ldr	r1, [r7, #4]
 80029c8:	f04f 30ff 	mov.w	r0, #4294967295
 80029cc:	f000 ff43 	bl	8003856 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80029d0:	4a06      	ldr	r2, [pc, #24]	; (80029ec <HAL_InitTick+0x5c>)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80029d6:	2300      	movs	r3, #0
 80029d8:	e000      	b.n	80029dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
}
 80029dc:	4618      	mov	r0, r3
 80029de:	3708      	adds	r7, #8
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}
 80029e4:	20000038 	.word	0x20000038
 80029e8:	20000040 	.word	0x20000040
 80029ec:	2000003c 	.word	0x2000003c

080029f0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80029f0:	b480      	push	{r7}
 80029f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80029f4:	4b05      	ldr	r3, [pc, #20]	; (8002a0c <HAL_IncTick+0x1c>)
 80029f6:	781b      	ldrb	r3, [r3, #0]
 80029f8:	461a      	mov	r2, r3
 80029fa:	4b05      	ldr	r3, [pc, #20]	; (8002a10 <HAL_IncTick+0x20>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4413      	add	r3, r2
 8002a00:	4a03      	ldr	r2, [pc, #12]	; (8002a10 <HAL_IncTick+0x20>)
 8002a02:	6013      	str	r3, [r2, #0]
}
 8002a04:	bf00      	nop
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bc80      	pop	{r7}
 8002a0a:	4770      	bx	lr
 8002a0c:	20000040 	.word	0x20000040
 8002a10:	200004cc 	.word	0x200004cc

08002a14 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a14:	b480      	push	{r7}
 8002a16:	af00      	add	r7, sp, #0
  return uwTick;
 8002a18:	4b02      	ldr	r3, [pc, #8]	; (8002a24 <HAL_GetTick+0x10>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bc80      	pop	{r7}
 8002a22:	4770      	bx	lr
 8002a24:	200004cc 	.word	0x200004cc

08002a28 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b084      	sub	sp, #16
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d101      	bne.n	8002a3a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	e0ed      	b.n	8002c16 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a40:	b2db      	uxtb	r3, r3
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d102      	bne.n	8002a4c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002a46:	6878      	ldr	r0, [r7, #4]
 8002a48:	f7ff fbf0 	bl	800222c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	681a      	ldr	r2, [r3, #0]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f042 0201 	orr.w	r2, r2, #1
 8002a5a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002a5c:	f7ff ffda 	bl	8002a14 <HAL_GetTick>
 8002a60:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002a62:	e012      	b.n	8002a8a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002a64:	f7ff ffd6 	bl	8002a14 <HAL_GetTick>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	1ad3      	subs	r3, r2, r3
 8002a6e:	2b0a      	cmp	r3, #10
 8002a70:	d90b      	bls.n	8002a8a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a76:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2205      	movs	r2, #5
 8002a82:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	e0c5      	b.n	8002c16 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	f003 0301 	and.w	r3, r3, #1
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d0e5      	beq.n	8002a64 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	681a      	ldr	r2, [r3, #0]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f022 0202 	bic.w	r2, r2, #2
 8002aa6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002aa8:	f7ff ffb4 	bl	8002a14 <HAL_GetTick>
 8002aac:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002aae:	e012      	b.n	8002ad6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002ab0:	f7ff ffb0 	bl	8002a14 <HAL_GetTick>
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	1ad3      	subs	r3, r2, r3
 8002aba:	2b0a      	cmp	r3, #10
 8002abc:	d90b      	bls.n	8002ad6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ac2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2205      	movs	r2, #5
 8002ace:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e09f      	b.n	8002c16 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	f003 0302 	and.w	r3, r3, #2
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d1e5      	bne.n	8002ab0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	7e1b      	ldrb	r3, [r3, #24]
 8002ae8:	2b01      	cmp	r3, #1
 8002aea:	d108      	bne.n	8002afe <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002afa:	601a      	str	r2, [r3, #0]
 8002afc:	e007      	b.n	8002b0e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	681a      	ldr	r2, [r3, #0]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b0c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	7e5b      	ldrb	r3, [r3, #25]
 8002b12:	2b01      	cmp	r3, #1
 8002b14:	d108      	bne.n	8002b28 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b24:	601a      	str	r2, [r3, #0]
 8002b26:	e007      	b.n	8002b38 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	681a      	ldr	r2, [r3, #0]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b36:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	7e9b      	ldrb	r3, [r3, #26]
 8002b3c:	2b01      	cmp	r3, #1
 8002b3e:	d108      	bne.n	8002b52 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	681a      	ldr	r2, [r3, #0]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f042 0220 	orr.w	r2, r2, #32
 8002b4e:	601a      	str	r2, [r3, #0]
 8002b50:	e007      	b.n	8002b62 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	681a      	ldr	r2, [r3, #0]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f022 0220 	bic.w	r2, r2, #32
 8002b60:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	7edb      	ldrb	r3, [r3, #27]
 8002b66:	2b01      	cmp	r3, #1
 8002b68:	d108      	bne.n	8002b7c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f022 0210 	bic.w	r2, r2, #16
 8002b78:	601a      	str	r2, [r3, #0]
 8002b7a:	e007      	b.n	8002b8c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f042 0210 	orr.w	r2, r2, #16
 8002b8a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	7f1b      	ldrb	r3, [r3, #28]
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d108      	bne.n	8002ba6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	681a      	ldr	r2, [r3, #0]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f042 0208 	orr.w	r2, r2, #8
 8002ba2:	601a      	str	r2, [r3, #0]
 8002ba4:	e007      	b.n	8002bb6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	681a      	ldr	r2, [r3, #0]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f022 0208 	bic.w	r2, r2, #8
 8002bb4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	7f5b      	ldrb	r3, [r3, #29]
 8002bba:	2b01      	cmp	r3, #1
 8002bbc:	d108      	bne.n	8002bd0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	681a      	ldr	r2, [r3, #0]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f042 0204 	orr.w	r2, r2, #4
 8002bcc:	601a      	str	r2, [r3, #0]
 8002bce:	e007      	b.n	8002be0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	681a      	ldr	r2, [r3, #0]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f022 0204 	bic.w	r2, r2, #4
 8002bde:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	689a      	ldr	r2, [r3, #8]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	68db      	ldr	r3, [r3, #12]
 8002be8:	431a      	orrs	r2, r3
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	691b      	ldr	r3, [r3, #16]
 8002bee:	431a      	orrs	r2, r3
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	695b      	ldr	r3, [r3, #20]
 8002bf4:	ea42 0103 	orr.w	r1, r2, r3
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	1e5a      	subs	r2, r3, #1
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	430a      	orrs	r2, r1
 8002c04:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2201      	movs	r2, #1
 8002c10:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002c14:	2300      	movs	r3, #0
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	3710      	adds	r7, #16
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}

08002c1e <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8002c1e:	b480      	push	{r7}
 8002c20:	b087      	sub	sp, #28
 8002c22:	af00      	add	r7, sp, #0
 8002c24:	6078      	str	r0, [r7, #4]
 8002c26:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c34:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002c36:	7cfb      	ldrb	r3, [r7, #19]
 8002c38:	2b01      	cmp	r3, #1
 8002c3a:	d003      	beq.n	8002c44 <HAL_CAN_ConfigFilter+0x26>
 8002c3c:	7cfb      	ldrb	r3, [r7, #19]
 8002c3e:	2b02      	cmp	r3, #2
 8002c40:	f040 80aa 	bne.w	8002d98 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002c4a:	f043 0201 	orr.w	r2, r3, #1
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	695b      	ldr	r3, [r3, #20]
 8002c58:	f003 031f 	and.w	r3, r3, #31
 8002c5c:	2201      	movs	r2, #1
 8002c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c62:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	43db      	mvns	r3, r3
 8002c6e:	401a      	ands	r2, r3
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	69db      	ldr	r3, [r3, #28]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d123      	bne.n	8002cc6 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	43db      	mvns	r3, r3
 8002c88:	401a      	ands	r2, r3
 8002c8a:	697b      	ldr	r3, [r7, #20]
 8002c8c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	68db      	ldr	r3, [r3, #12]
 8002c94:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002c9c:	683a      	ldr	r2, [r7, #0]
 8002c9e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002ca0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002ca2:	697b      	ldr	r3, [r7, #20]
 8002ca4:	3248      	adds	r2, #72	; 0x48
 8002ca6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002cba:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002cbc:	6979      	ldr	r1, [r7, #20]
 8002cbe:	3348      	adds	r3, #72	; 0x48
 8002cc0:	00db      	lsls	r3, r3, #3
 8002cc2:	440b      	add	r3, r1
 8002cc4:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	69db      	ldr	r3, [r3, #28]
 8002cca:	2b01      	cmp	r3, #1
 8002ccc:	d122      	bne.n	8002d14 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	431a      	orrs	r2, r3
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002cea:	683a      	ldr	r2, [r7, #0]
 8002cec:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002cee:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	3248      	adds	r2, #72	; 0x48
 8002cf4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	689b      	ldr	r3, [r3, #8]
 8002cfc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	68db      	ldr	r3, [r3, #12]
 8002d02:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002d08:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002d0a:	6979      	ldr	r1, [r7, #20]
 8002d0c:	3348      	adds	r3, #72	; 0x48
 8002d0e:	00db      	lsls	r3, r3, #3
 8002d10:	440b      	add	r3, r1
 8002d12:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	699b      	ldr	r3, [r3, #24]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d109      	bne.n	8002d30 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	43db      	mvns	r3, r3
 8002d26:	401a      	ands	r2, r3
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002d2e:	e007      	b.n	8002d40 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	431a      	orrs	r2, r3
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	691b      	ldr	r3, [r3, #16]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d109      	bne.n	8002d5c <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	43db      	mvns	r3, r3
 8002d52:	401a      	ands	r2, r3
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8002d5a:	e007      	b.n	8002d6c <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	431a      	orrs	r2, r3
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	6a1b      	ldr	r3, [r3, #32]
 8002d70:	2b01      	cmp	r3, #1
 8002d72:	d107      	bne.n	8002d84 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	431a      	orrs	r2, r3
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002d8a:	f023 0201 	bic.w	r2, r3, #1
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002d94:	2300      	movs	r3, #0
 8002d96:	e006      	b.n	8002da6 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d9c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002da4:	2301      	movs	r3, #1
  }
}
 8002da6:	4618      	mov	r0, r3
 8002da8:	371c      	adds	r7, #28
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bc80      	pop	{r7}
 8002dae:	4770      	bx	lr

08002db0 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b084      	sub	sp, #16
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002dbe:	b2db      	uxtb	r3, r3
 8002dc0:	2b01      	cmp	r3, #1
 8002dc2:	d12e      	bne.n	8002e22 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2202      	movs	r2, #2
 8002dc8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	681a      	ldr	r2, [r3, #0]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f022 0201 	bic.w	r2, r2, #1
 8002dda:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002ddc:	f7ff fe1a 	bl	8002a14 <HAL_GetTick>
 8002de0:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002de2:	e012      	b.n	8002e0a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002de4:	f7ff fe16 	bl	8002a14 <HAL_GetTick>
 8002de8:	4602      	mov	r2, r0
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	1ad3      	subs	r3, r2, r3
 8002dee:	2b0a      	cmp	r3, #10
 8002df0:	d90b      	bls.n	8002e0a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2205      	movs	r2, #5
 8002e02:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	e012      	b.n	8002e30 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	f003 0301 	and.w	r3, r3, #1
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d1e5      	bne.n	8002de4 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	e006      	b.n	8002e30 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e26:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
  }
}
 8002e30:	4618      	mov	r0, r3
 8002e32:	3710      	adds	r7, #16
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bd80      	pop	{r7, pc}

08002e38 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b089      	sub	sp, #36	; 0x24
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	60f8      	str	r0, [r7, #12]
 8002e40:	60b9      	str	r1, [r7, #8]
 8002e42:	607a      	str	r2, [r7, #4]
 8002e44:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e4c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	689b      	ldr	r3, [r3, #8]
 8002e54:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002e56:	7ffb      	ldrb	r3, [r7, #31]
 8002e58:	2b01      	cmp	r3, #1
 8002e5a:	d003      	beq.n	8002e64 <HAL_CAN_AddTxMessage+0x2c>
 8002e5c:	7ffb      	ldrb	r3, [r7, #31]
 8002e5e:	2b02      	cmp	r3, #2
 8002e60:	f040 80ad 	bne.w	8002fbe <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002e64:	69bb      	ldr	r3, [r7, #24]
 8002e66:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d10a      	bne.n	8002e84 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002e6e:	69bb      	ldr	r3, [r7, #24]
 8002e70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d105      	bne.n	8002e84 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002e78:	69bb      	ldr	r3, [r7, #24]
 8002e7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	f000 8095 	beq.w	8002fae <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002e84:	69bb      	ldr	r3, [r7, #24]
 8002e86:	0e1b      	lsrs	r3, r3, #24
 8002e88:	f003 0303 	and.w	r3, r3, #3
 8002e8c:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002e8e:	2201      	movs	r2, #1
 8002e90:	697b      	ldr	r3, [r7, #20]
 8002e92:	409a      	lsls	r2, r3
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	689b      	ldr	r3, [r3, #8]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d10d      	bne.n	8002ebc <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002eaa:	68f9      	ldr	r1, [r7, #12]
 8002eac:	6809      	ldr	r1, [r1, #0]
 8002eae:	431a      	orrs	r2, r3
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	3318      	adds	r3, #24
 8002eb4:	011b      	lsls	r3, r3, #4
 8002eb6:	440b      	add	r3, r1
 8002eb8:	601a      	str	r2, [r3, #0]
 8002eba:	e00f      	b.n	8002edc <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002ec2:	68bb      	ldr	r3, [r7, #8]
 8002ec4:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002ec6:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002ecc:	68f9      	ldr	r1, [r7, #12]
 8002ece:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002ed0:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	3318      	adds	r3, #24
 8002ed6:	011b      	lsls	r3, r3, #4
 8002ed8:	440b      	add	r3, r1
 8002eda:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	6819      	ldr	r1, [r3, #0]
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	691a      	ldr	r2, [r3, #16]
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	3318      	adds	r3, #24
 8002ee8:	011b      	lsls	r3, r3, #4
 8002eea:	440b      	add	r3, r1
 8002eec:	3304      	adds	r3, #4
 8002eee:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	7d1b      	ldrb	r3, [r3, #20]
 8002ef4:	2b01      	cmp	r3, #1
 8002ef6:	d111      	bne.n	8002f1c <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	3318      	adds	r3, #24
 8002f00:	011b      	lsls	r3, r3, #4
 8002f02:	4413      	add	r3, r2
 8002f04:	3304      	adds	r3, #4
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	68fa      	ldr	r2, [r7, #12]
 8002f0a:	6811      	ldr	r1, [r2, #0]
 8002f0c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	3318      	adds	r3, #24
 8002f14:	011b      	lsls	r3, r3, #4
 8002f16:	440b      	add	r3, r1
 8002f18:	3304      	adds	r3, #4
 8002f1a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	3307      	adds	r3, #7
 8002f20:	781b      	ldrb	r3, [r3, #0]
 8002f22:	061a      	lsls	r2, r3, #24
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	3306      	adds	r3, #6
 8002f28:	781b      	ldrb	r3, [r3, #0]
 8002f2a:	041b      	lsls	r3, r3, #16
 8002f2c:	431a      	orrs	r2, r3
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	3305      	adds	r3, #5
 8002f32:	781b      	ldrb	r3, [r3, #0]
 8002f34:	021b      	lsls	r3, r3, #8
 8002f36:	4313      	orrs	r3, r2
 8002f38:	687a      	ldr	r2, [r7, #4]
 8002f3a:	3204      	adds	r2, #4
 8002f3c:	7812      	ldrb	r2, [r2, #0]
 8002f3e:	4610      	mov	r0, r2
 8002f40:	68fa      	ldr	r2, [r7, #12]
 8002f42:	6811      	ldr	r1, [r2, #0]
 8002f44:	ea43 0200 	orr.w	r2, r3, r0
 8002f48:	697b      	ldr	r3, [r7, #20]
 8002f4a:	011b      	lsls	r3, r3, #4
 8002f4c:	440b      	add	r3, r1
 8002f4e:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8002f52:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	3303      	adds	r3, #3
 8002f58:	781b      	ldrb	r3, [r3, #0]
 8002f5a:	061a      	lsls	r2, r3, #24
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	3302      	adds	r3, #2
 8002f60:	781b      	ldrb	r3, [r3, #0]
 8002f62:	041b      	lsls	r3, r3, #16
 8002f64:	431a      	orrs	r2, r3
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	3301      	adds	r3, #1
 8002f6a:	781b      	ldrb	r3, [r3, #0]
 8002f6c:	021b      	lsls	r3, r3, #8
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	687a      	ldr	r2, [r7, #4]
 8002f72:	7812      	ldrb	r2, [r2, #0]
 8002f74:	4610      	mov	r0, r2
 8002f76:	68fa      	ldr	r2, [r7, #12]
 8002f78:	6811      	ldr	r1, [r2, #0]
 8002f7a:	ea43 0200 	orr.w	r2, r3, r0
 8002f7e:	697b      	ldr	r3, [r7, #20]
 8002f80:	011b      	lsls	r3, r3, #4
 8002f82:	440b      	add	r3, r1
 8002f84:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002f88:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681a      	ldr	r2, [r3, #0]
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	3318      	adds	r3, #24
 8002f92:	011b      	lsls	r3, r3, #4
 8002f94:	4413      	add	r3, r2
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	68fa      	ldr	r2, [r7, #12]
 8002f9a:	6811      	ldr	r1, [r2, #0]
 8002f9c:	f043 0201 	orr.w	r2, r3, #1
 8002fa0:	697b      	ldr	r3, [r7, #20]
 8002fa2:	3318      	adds	r3, #24
 8002fa4:	011b      	lsls	r3, r3, #4
 8002fa6:	440b      	add	r3, r1
 8002fa8:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002faa:	2300      	movs	r3, #0
 8002fac:	e00e      	b.n	8002fcc <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e006      	b.n	8002fcc <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
  }
}
 8002fcc:	4618      	mov	r0, r3
 8002fce:	3724      	adds	r7, #36	; 0x24
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bc80      	pop	{r7}
 8002fd4:	4770      	bx	lr

08002fd6 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002fd6:	b480      	push	{r7}
 8002fd8:	b087      	sub	sp, #28
 8002fda:	af00      	add	r7, sp, #0
 8002fdc:	60f8      	str	r0, [r7, #12]
 8002fde:	60b9      	str	r1, [r7, #8]
 8002fe0:	607a      	str	r2, [r7, #4]
 8002fe2:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002fea:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002fec:	7dfb      	ldrb	r3, [r7, #23]
 8002fee:	2b01      	cmp	r3, #1
 8002ff0:	d003      	beq.n	8002ffa <HAL_CAN_GetRxMessage+0x24>
 8002ff2:	7dfb      	ldrb	r3, [r7, #23]
 8002ff4:	2b02      	cmp	r3, #2
 8002ff6:	f040 8103 	bne.w	8003200 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d10e      	bne.n	800301e <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	68db      	ldr	r3, [r3, #12]
 8003006:	f003 0303 	and.w	r3, r3, #3
 800300a:	2b00      	cmp	r3, #0
 800300c:	d116      	bne.n	800303c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003012:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	e0f7      	b.n	800320e <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	691b      	ldr	r3, [r3, #16]
 8003024:	f003 0303 	and.w	r3, r3, #3
 8003028:	2b00      	cmp	r3, #0
 800302a:	d107      	bne.n	800303c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003030:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003038:	2301      	movs	r3, #1
 800303a:	e0e8      	b.n	800320e <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681a      	ldr	r2, [r3, #0]
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	331b      	adds	r3, #27
 8003044:	011b      	lsls	r3, r3, #4
 8003046:	4413      	add	r3, r2
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f003 0204 	and.w	r2, r3, #4
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d10c      	bne.n	8003074 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681a      	ldr	r2, [r3, #0]
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	331b      	adds	r3, #27
 8003062:	011b      	lsls	r3, r3, #4
 8003064:	4413      	add	r3, r2
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	0d5b      	lsrs	r3, r3, #21
 800306a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	601a      	str	r2, [r3, #0]
 8003072:	e00b      	b.n	800308c <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681a      	ldr	r2, [r3, #0]
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	331b      	adds	r3, #27
 800307c:	011b      	lsls	r3, r3, #4
 800307e:	4413      	add	r3, r2
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	08db      	lsrs	r3, r3, #3
 8003084:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681a      	ldr	r2, [r3, #0]
 8003090:	68bb      	ldr	r3, [r7, #8]
 8003092:	331b      	adds	r3, #27
 8003094:	011b      	lsls	r3, r3, #4
 8003096:	4413      	add	r3, r2
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f003 0202 	and.w	r2, r3, #2
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681a      	ldr	r2, [r3, #0]
 80030a6:	68bb      	ldr	r3, [r7, #8]
 80030a8:	331b      	adds	r3, #27
 80030aa:	011b      	lsls	r3, r3, #4
 80030ac:	4413      	add	r3, r2
 80030ae:	3304      	adds	r3, #4
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f003 0308 	and.w	r3, r3, #8
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d003      	beq.n	80030c2 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2208      	movs	r2, #8
 80030be:	611a      	str	r2, [r3, #16]
 80030c0:	e00b      	b.n	80030da <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681a      	ldr	r2, [r3, #0]
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	331b      	adds	r3, #27
 80030ca:	011b      	lsls	r3, r3, #4
 80030cc:	4413      	add	r3, r2
 80030ce:	3304      	adds	r3, #4
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f003 020f 	and.w	r2, r3, #15
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681a      	ldr	r2, [r3, #0]
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	331b      	adds	r3, #27
 80030e2:	011b      	lsls	r3, r3, #4
 80030e4:	4413      	add	r3, r2
 80030e6:	3304      	adds	r3, #4
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	0a1b      	lsrs	r3, r3, #8
 80030ec:	b2da      	uxtb	r2, r3
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681a      	ldr	r2, [r3, #0]
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	331b      	adds	r3, #27
 80030fa:	011b      	lsls	r3, r3, #4
 80030fc:	4413      	add	r3, r2
 80030fe:	3304      	adds	r3, #4
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	0c1b      	lsrs	r3, r3, #16
 8003104:	b29a      	uxth	r2, r3
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681a      	ldr	r2, [r3, #0]
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	011b      	lsls	r3, r3, #4
 8003112:	4413      	add	r3, r2
 8003114:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	b2da      	uxtb	r2, r3
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681a      	ldr	r2, [r3, #0]
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	011b      	lsls	r3, r3, #4
 8003128:	4413      	add	r3, r2
 800312a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	0a1a      	lsrs	r2, r3, #8
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	3301      	adds	r3, #1
 8003136:	b2d2      	uxtb	r2, r2
 8003138:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681a      	ldr	r2, [r3, #0]
 800313e:	68bb      	ldr	r3, [r7, #8]
 8003140:	011b      	lsls	r3, r3, #4
 8003142:	4413      	add	r3, r2
 8003144:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	0c1a      	lsrs	r2, r3, #16
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	3302      	adds	r3, #2
 8003150:	b2d2      	uxtb	r2, r2
 8003152:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681a      	ldr	r2, [r3, #0]
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	011b      	lsls	r3, r3, #4
 800315c:	4413      	add	r3, r2
 800315e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	0e1a      	lsrs	r2, r3, #24
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	3303      	adds	r3, #3
 800316a:	b2d2      	uxtb	r2, r2
 800316c:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681a      	ldr	r2, [r3, #0]
 8003172:	68bb      	ldr	r3, [r7, #8]
 8003174:	011b      	lsls	r3, r3, #4
 8003176:	4413      	add	r3, r2
 8003178:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800317c:	681a      	ldr	r2, [r3, #0]
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	3304      	adds	r3, #4
 8003182:	b2d2      	uxtb	r2, r2
 8003184:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681a      	ldr	r2, [r3, #0]
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	011b      	lsls	r3, r3, #4
 800318e:	4413      	add	r3, r2
 8003190:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	0a1a      	lsrs	r2, r3, #8
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	3305      	adds	r3, #5
 800319c:	b2d2      	uxtb	r2, r2
 800319e:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681a      	ldr	r2, [r3, #0]
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	011b      	lsls	r3, r3, #4
 80031a8:	4413      	add	r3, r2
 80031aa:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	0c1a      	lsrs	r2, r3, #16
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	3306      	adds	r3, #6
 80031b6:	b2d2      	uxtb	r2, r2
 80031b8:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681a      	ldr	r2, [r3, #0]
 80031be:	68bb      	ldr	r3, [r7, #8]
 80031c0:	011b      	lsls	r3, r3, #4
 80031c2:	4413      	add	r3, r2
 80031c4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	0e1a      	lsrs	r2, r3, #24
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	3307      	adds	r3, #7
 80031d0:	b2d2      	uxtb	r2, r2
 80031d2:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d108      	bne.n	80031ec <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	68da      	ldr	r2, [r3, #12]
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f042 0220 	orr.w	r2, r2, #32
 80031e8:	60da      	str	r2, [r3, #12]
 80031ea:	e007      	b.n	80031fc <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	691a      	ldr	r2, [r3, #16]
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f042 0220 	orr.w	r2, r2, #32
 80031fa:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80031fc:	2300      	movs	r3, #0
 80031fe:	e006      	b.n	800320e <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003204:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800320c:	2301      	movs	r3, #1
  }
}
 800320e:	4618      	mov	r0, r3
 8003210:	371c      	adds	r7, #28
 8003212:	46bd      	mov	sp, r7
 8003214:	bc80      	pop	{r7}
 8003216:	4770      	bx	lr

08003218 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8003218:	b480      	push	{r7}
 800321a:	b085      	sub	sp, #20
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
 8003220:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003228:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800322a:	7bfb      	ldrb	r3, [r7, #15]
 800322c:	2b01      	cmp	r3, #1
 800322e:	d002      	beq.n	8003236 <HAL_CAN_ActivateNotification+0x1e>
 8003230:	7bfb      	ldrb	r3, [r7, #15]
 8003232:	2b02      	cmp	r3, #2
 8003234:	d109      	bne.n	800324a <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	6959      	ldr	r1, [r3, #20]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	683a      	ldr	r2, [r7, #0]
 8003242:	430a      	orrs	r2, r1
 8003244:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8003246:	2300      	movs	r3, #0
 8003248:	e006      	b.n	8003258 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800324e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003256:	2301      	movs	r3, #1
  }
}
 8003258:	4618      	mov	r0, r3
 800325a:	3714      	adds	r7, #20
 800325c:	46bd      	mov	sp, r7
 800325e:	bc80      	pop	{r7}
 8003260:	4770      	bx	lr

08003262 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003262:	b580      	push	{r7, lr}
 8003264:	b08a      	sub	sp, #40	; 0x28
 8003266:	af00      	add	r7, sp, #0
 8003268:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800326a:	2300      	movs	r3, #0
 800326c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	695b      	ldr	r3, [r3, #20]
 8003274:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	689b      	ldr	r3, [r3, #8]
 8003284:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	68db      	ldr	r3, [r3, #12]
 800328c:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	691b      	ldr	r3, [r3, #16]
 8003294:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	699b      	ldr	r3, [r3, #24]
 800329c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800329e:	6a3b      	ldr	r3, [r7, #32]
 80032a0:	f003 0301 	and.w	r3, r3, #1
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d07c      	beq.n	80033a2 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80032a8:	69bb      	ldr	r3, [r7, #24]
 80032aa:	f003 0301 	and.w	r3, r3, #1
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d023      	beq.n	80032fa <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	2201      	movs	r2, #1
 80032b8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80032ba:	69bb      	ldr	r3, [r7, #24]
 80032bc:	f003 0302 	and.w	r3, r3, #2
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d003      	beq.n	80032cc <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80032c4:	6878      	ldr	r0, [r7, #4]
 80032c6:	f000 f983 	bl	80035d0 <HAL_CAN_TxMailbox0CompleteCallback>
 80032ca:	e016      	b.n	80032fa <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80032cc:	69bb      	ldr	r3, [r7, #24]
 80032ce:	f003 0304 	and.w	r3, r3, #4
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d004      	beq.n	80032e0 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80032d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80032dc:	627b      	str	r3, [r7, #36]	; 0x24
 80032de:	e00c      	b.n	80032fa <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80032e0:	69bb      	ldr	r3, [r7, #24]
 80032e2:	f003 0308 	and.w	r3, r3, #8
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d004      	beq.n	80032f4 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80032ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80032f0:	627b      	str	r3, [r7, #36]	; 0x24
 80032f2:	e002      	b.n	80032fa <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80032f4:	6878      	ldr	r0, [r7, #4]
 80032f6:	f000 f986 	bl	8003606 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80032fa:	69bb      	ldr	r3, [r7, #24]
 80032fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003300:	2b00      	cmp	r3, #0
 8003302:	d024      	beq.n	800334e <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f44f 7280 	mov.w	r2, #256	; 0x100
 800330c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800330e:	69bb      	ldr	r3, [r7, #24]
 8003310:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003314:	2b00      	cmp	r3, #0
 8003316:	d003      	beq.n	8003320 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003318:	6878      	ldr	r0, [r7, #4]
 800331a:	f000 f962 	bl	80035e2 <HAL_CAN_TxMailbox1CompleteCallback>
 800331e:	e016      	b.n	800334e <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003320:	69bb      	ldr	r3, [r7, #24]
 8003322:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003326:	2b00      	cmp	r3, #0
 8003328:	d004      	beq.n	8003334 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800332a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800332c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003330:	627b      	str	r3, [r7, #36]	; 0x24
 8003332:	e00c      	b.n	800334e <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003334:	69bb      	ldr	r3, [r7, #24]
 8003336:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800333a:	2b00      	cmp	r3, #0
 800333c:	d004      	beq.n	8003348 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800333e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003340:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003344:	627b      	str	r3, [r7, #36]	; 0x24
 8003346:	e002      	b.n	800334e <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003348:	6878      	ldr	r0, [r7, #4]
 800334a:	f000 f965 	bl	8003618 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800334e:	69bb      	ldr	r3, [r7, #24]
 8003350:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003354:	2b00      	cmp	r3, #0
 8003356:	d024      	beq.n	80033a2 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003360:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003362:	69bb      	ldr	r3, [r7, #24]
 8003364:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003368:	2b00      	cmp	r3, #0
 800336a:	d003      	beq.n	8003374 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800336c:	6878      	ldr	r0, [r7, #4]
 800336e:	f000 f941 	bl	80035f4 <HAL_CAN_TxMailbox2CompleteCallback>
 8003372:	e016      	b.n	80033a2 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003374:	69bb      	ldr	r3, [r7, #24]
 8003376:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800337a:	2b00      	cmp	r3, #0
 800337c:	d004      	beq.n	8003388 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800337e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003380:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003384:	627b      	str	r3, [r7, #36]	; 0x24
 8003386:	e00c      	b.n	80033a2 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003388:	69bb      	ldr	r3, [r7, #24]
 800338a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800338e:	2b00      	cmp	r3, #0
 8003390:	d004      	beq.n	800339c <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003394:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003398:	627b      	str	r3, [r7, #36]	; 0x24
 800339a:	e002      	b.n	80033a2 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800339c:	6878      	ldr	r0, [r7, #4]
 800339e:	f000 f944 	bl	800362a <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80033a2:	6a3b      	ldr	r3, [r7, #32]
 80033a4:	f003 0308 	and.w	r3, r3, #8
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d00c      	beq.n	80033c6 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	f003 0310 	and.w	r3, r3, #16
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d007      	beq.n	80033c6 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80033b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80033bc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	2210      	movs	r2, #16
 80033c4:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80033c6:	6a3b      	ldr	r3, [r7, #32]
 80033c8:	f003 0304 	and.w	r3, r3, #4
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d00b      	beq.n	80033e8 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	f003 0308 	and.w	r3, r3, #8
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d006      	beq.n	80033e8 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	2208      	movs	r2, #8
 80033e0:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80033e2:	6878      	ldr	r0, [r7, #4]
 80033e4:	f000 f933 	bl	800364e <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80033e8:	6a3b      	ldr	r3, [r7, #32]
 80033ea:	f003 0302 	and.w	r3, r3, #2
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d009      	beq.n	8003406 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	68db      	ldr	r3, [r3, #12]
 80033f8:	f003 0303 	and.w	r3, r3, #3
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d002      	beq.n	8003406 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003400:	6878      	ldr	r0, [r7, #4]
 8003402:	f000 f91b 	bl	800363c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003406:	6a3b      	ldr	r3, [r7, #32]
 8003408:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800340c:	2b00      	cmp	r3, #0
 800340e:	d00c      	beq.n	800342a <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	f003 0310 	and.w	r3, r3, #16
 8003416:	2b00      	cmp	r3, #0
 8003418:	d007      	beq.n	800342a <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800341a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800341c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003420:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	2210      	movs	r2, #16
 8003428:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800342a:	6a3b      	ldr	r3, [r7, #32]
 800342c:	f003 0320 	and.w	r3, r3, #32
 8003430:	2b00      	cmp	r3, #0
 8003432:	d00b      	beq.n	800344c <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003434:	693b      	ldr	r3, [r7, #16]
 8003436:	f003 0308 	and.w	r3, r3, #8
 800343a:	2b00      	cmp	r3, #0
 800343c:	d006      	beq.n	800344c <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	2208      	movs	r2, #8
 8003444:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003446:	6878      	ldr	r0, [r7, #4]
 8003448:	f000 f90a 	bl	8003660 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800344c:	6a3b      	ldr	r3, [r7, #32]
 800344e:	f003 0310 	and.w	r3, r3, #16
 8003452:	2b00      	cmp	r3, #0
 8003454:	d009      	beq.n	800346a <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	691b      	ldr	r3, [r3, #16]
 800345c:	f003 0303 	and.w	r3, r3, #3
 8003460:	2b00      	cmp	r3, #0
 8003462:	d002      	beq.n	800346a <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003464:	6878      	ldr	r0, [r7, #4]
 8003466:	f7fd fefb 	bl	8001260 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800346a:	6a3b      	ldr	r3, [r7, #32]
 800346c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003470:	2b00      	cmp	r3, #0
 8003472:	d00b      	beq.n	800348c <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003474:	69fb      	ldr	r3, [r7, #28]
 8003476:	f003 0310 	and.w	r3, r3, #16
 800347a:	2b00      	cmp	r3, #0
 800347c:	d006      	beq.n	800348c <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	2210      	movs	r2, #16
 8003484:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003486:	6878      	ldr	r0, [r7, #4]
 8003488:	f000 f8f3 	bl	8003672 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800348c:	6a3b      	ldr	r3, [r7, #32]
 800348e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003492:	2b00      	cmp	r3, #0
 8003494:	d00b      	beq.n	80034ae <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003496:	69fb      	ldr	r3, [r7, #28]
 8003498:	f003 0308 	and.w	r3, r3, #8
 800349c:	2b00      	cmp	r3, #0
 800349e:	d006      	beq.n	80034ae <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	2208      	movs	r2, #8
 80034a6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80034a8:	6878      	ldr	r0, [r7, #4]
 80034aa:	f000 f8eb 	bl	8003684 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80034ae:	6a3b      	ldr	r3, [r7, #32]
 80034b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d07b      	beq.n	80035b0 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80034b8:	69fb      	ldr	r3, [r7, #28]
 80034ba:	f003 0304 	and.w	r3, r3, #4
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d072      	beq.n	80035a8 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80034c2:	6a3b      	ldr	r3, [r7, #32]
 80034c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d008      	beq.n	80034de <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d003      	beq.n	80034de <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80034d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d8:	f043 0301 	orr.w	r3, r3, #1
 80034dc:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80034de:	6a3b      	ldr	r3, [r7, #32]
 80034e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d008      	beq.n	80034fa <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d003      	beq.n	80034fa <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80034f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f4:	f043 0302 	orr.w	r3, r3, #2
 80034f8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80034fa:	6a3b      	ldr	r3, [r7, #32]
 80034fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003500:	2b00      	cmp	r3, #0
 8003502:	d008      	beq.n	8003516 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800350a:	2b00      	cmp	r3, #0
 800350c:	d003      	beq.n	8003516 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800350e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003510:	f043 0304 	orr.w	r3, r3, #4
 8003514:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003516:	6a3b      	ldr	r3, [r7, #32]
 8003518:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800351c:	2b00      	cmp	r3, #0
 800351e:	d043      	beq.n	80035a8 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003526:	2b00      	cmp	r3, #0
 8003528:	d03e      	beq.n	80035a8 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003530:	2b60      	cmp	r3, #96	; 0x60
 8003532:	d02b      	beq.n	800358c <HAL_CAN_IRQHandler+0x32a>
 8003534:	2b60      	cmp	r3, #96	; 0x60
 8003536:	d82e      	bhi.n	8003596 <HAL_CAN_IRQHandler+0x334>
 8003538:	2b50      	cmp	r3, #80	; 0x50
 800353a:	d022      	beq.n	8003582 <HAL_CAN_IRQHandler+0x320>
 800353c:	2b50      	cmp	r3, #80	; 0x50
 800353e:	d82a      	bhi.n	8003596 <HAL_CAN_IRQHandler+0x334>
 8003540:	2b40      	cmp	r3, #64	; 0x40
 8003542:	d019      	beq.n	8003578 <HAL_CAN_IRQHandler+0x316>
 8003544:	2b40      	cmp	r3, #64	; 0x40
 8003546:	d826      	bhi.n	8003596 <HAL_CAN_IRQHandler+0x334>
 8003548:	2b30      	cmp	r3, #48	; 0x30
 800354a:	d010      	beq.n	800356e <HAL_CAN_IRQHandler+0x30c>
 800354c:	2b30      	cmp	r3, #48	; 0x30
 800354e:	d822      	bhi.n	8003596 <HAL_CAN_IRQHandler+0x334>
 8003550:	2b10      	cmp	r3, #16
 8003552:	d002      	beq.n	800355a <HAL_CAN_IRQHandler+0x2f8>
 8003554:	2b20      	cmp	r3, #32
 8003556:	d005      	beq.n	8003564 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003558:	e01d      	b.n	8003596 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800355a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800355c:	f043 0308 	orr.w	r3, r3, #8
 8003560:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003562:	e019      	b.n	8003598 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003566:	f043 0310 	orr.w	r3, r3, #16
 800356a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800356c:	e014      	b.n	8003598 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800356e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003570:	f043 0320 	orr.w	r3, r3, #32
 8003574:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003576:	e00f      	b.n	8003598 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800357a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800357e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003580:	e00a      	b.n	8003598 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003584:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003588:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800358a:	e005      	b.n	8003598 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800358c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800358e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003592:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003594:	e000      	b.n	8003598 <HAL_CAN_IRQHandler+0x336>
            break;
 8003596:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	699a      	ldr	r2, [r3, #24]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80035a6:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	2204      	movs	r2, #4
 80035ae:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80035b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d008      	beq.n	80035c8 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80035ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035bc:	431a      	orrs	r2, r3
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80035c2:	6878      	ldr	r0, [r7, #4]
 80035c4:	f000 f867 	bl	8003696 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80035c8:	bf00      	nop
 80035ca:	3728      	adds	r7, #40	; 0x28
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}

080035d0 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80035d0:	b480      	push	{r7}
 80035d2:	b083      	sub	sp, #12
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80035d8:	bf00      	nop
 80035da:	370c      	adds	r7, #12
 80035dc:	46bd      	mov	sp, r7
 80035de:	bc80      	pop	{r7}
 80035e0:	4770      	bx	lr

080035e2 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80035e2:	b480      	push	{r7}
 80035e4:	b083      	sub	sp, #12
 80035e6:	af00      	add	r7, sp, #0
 80035e8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80035ea:	bf00      	nop
 80035ec:	370c      	adds	r7, #12
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bc80      	pop	{r7}
 80035f2:	4770      	bx	lr

080035f4 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b083      	sub	sp, #12
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80035fc:	bf00      	nop
 80035fe:	370c      	adds	r7, #12
 8003600:	46bd      	mov	sp, r7
 8003602:	bc80      	pop	{r7}
 8003604:	4770      	bx	lr

08003606 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003606:	b480      	push	{r7}
 8003608:	b083      	sub	sp, #12
 800360a:	af00      	add	r7, sp, #0
 800360c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800360e:	bf00      	nop
 8003610:	370c      	adds	r7, #12
 8003612:	46bd      	mov	sp, r7
 8003614:	bc80      	pop	{r7}
 8003616:	4770      	bx	lr

08003618 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003618:	b480      	push	{r7}
 800361a:	b083      	sub	sp, #12
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003620:	bf00      	nop
 8003622:	370c      	adds	r7, #12
 8003624:	46bd      	mov	sp, r7
 8003626:	bc80      	pop	{r7}
 8003628:	4770      	bx	lr

0800362a <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800362a:	b480      	push	{r7}
 800362c:	b083      	sub	sp, #12
 800362e:	af00      	add	r7, sp, #0
 8003630:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003632:	bf00      	nop
 8003634:	370c      	adds	r7, #12
 8003636:	46bd      	mov	sp, r7
 8003638:	bc80      	pop	{r7}
 800363a:	4770      	bx	lr

0800363c <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800363c:	b480      	push	{r7}
 800363e:	b083      	sub	sp, #12
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8003644:	bf00      	nop
 8003646:	370c      	adds	r7, #12
 8003648:	46bd      	mov	sp, r7
 800364a:	bc80      	pop	{r7}
 800364c:	4770      	bx	lr

0800364e <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800364e:	b480      	push	{r7}
 8003650:	b083      	sub	sp, #12
 8003652:	af00      	add	r7, sp, #0
 8003654:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003656:	bf00      	nop
 8003658:	370c      	adds	r7, #12
 800365a:	46bd      	mov	sp, r7
 800365c:	bc80      	pop	{r7}
 800365e:	4770      	bx	lr

08003660 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003660:	b480      	push	{r7}
 8003662:	b083      	sub	sp, #12
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003668:	bf00      	nop
 800366a:	370c      	adds	r7, #12
 800366c:	46bd      	mov	sp, r7
 800366e:	bc80      	pop	{r7}
 8003670:	4770      	bx	lr

08003672 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003672:	b480      	push	{r7}
 8003674:	b083      	sub	sp, #12
 8003676:	af00      	add	r7, sp, #0
 8003678:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800367a:	bf00      	nop
 800367c:	370c      	adds	r7, #12
 800367e:	46bd      	mov	sp, r7
 8003680:	bc80      	pop	{r7}
 8003682:	4770      	bx	lr

08003684 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003684:	b480      	push	{r7}
 8003686:	b083      	sub	sp, #12
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800368c:	bf00      	nop
 800368e:	370c      	adds	r7, #12
 8003690:	46bd      	mov	sp, r7
 8003692:	bc80      	pop	{r7}
 8003694:	4770      	bx	lr

08003696 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003696:	b480      	push	{r7}
 8003698:	b083      	sub	sp, #12
 800369a:	af00      	add	r7, sp, #0
 800369c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800369e:	bf00      	nop
 80036a0:	370c      	adds	r7, #12
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bc80      	pop	{r7}
 80036a6:	4770      	bx	lr

080036a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036a8:	b480      	push	{r7}
 80036aa:	b085      	sub	sp, #20
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	f003 0307 	and.w	r3, r3, #7
 80036b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80036b8:	4b0c      	ldr	r3, [pc, #48]	; (80036ec <__NVIC_SetPriorityGrouping+0x44>)
 80036ba:	68db      	ldr	r3, [r3, #12]
 80036bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80036be:	68ba      	ldr	r2, [r7, #8]
 80036c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80036c4:	4013      	ands	r3, r2
 80036c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80036d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80036d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80036da:	4a04      	ldr	r2, [pc, #16]	; (80036ec <__NVIC_SetPriorityGrouping+0x44>)
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	60d3      	str	r3, [r2, #12]
}
 80036e0:	bf00      	nop
 80036e2:	3714      	adds	r7, #20
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bc80      	pop	{r7}
 80036e8:	4770      	bx	lr
 80036ea:	bf00      	nop
 80036ec:	e000ed00 	.word	0xe000ed00

080036f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80036f0:	b480      	push	{r7}
 80036f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80036f4:	4b04      	ldr	r3, [pc, #16]	; (8003708 <__NVIC_GetPriorityGrouping+0x18>)
 80036f6:	68db      	ldr	r3, [r3, #12]
 80036f8:	0a1b      	lsrs	r3, r3, #8
 80036fa:	f003 0307 	and.w	r3, r3, #7
}
 80036fe:	4618      	mov	r0, r3
 8003700:	46bd      	mov	sp, r7
 8003702:	bc80      	pop	{r7}
 8003704:	4770      	bx	lr
 8003706:	bf00      	nop
 8003708:	e000ed00 	.word	0xe000ed00

0800370c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800370c:	b480      	push	{r7}
 800370e:	b083      	sub	sp, #12
 8003710:	af00      	add	r7, sp, #0
 8003712:	4603      	mov	r3, r0
 8003714:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003716:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800371a:	2b00      	cmp	r3, #0
 800371c:	db0b      	blt.n	8003736 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800371e:	79fb      	ldrb	r3, [r7, #7]
 8003720:	f003 021f 	and.w	r2, r3, #31
 8003724:	4906      	ldr	r1, [pc, #24]	; (8003740 <__NVIC_EnableIRQ+0x34>)
 8003726:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800372a:	095b      	lsrs	r3, r3, #5
 800372c:	2001      	movs	r0, #1
 800372e:	fa00 f202 	lsl.w	r2, r0, r2
 8003732:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003736:	bf00      	nop
 8003738:	370c      	adds	r7, #12
 800373a:	46bd      	mov	sp, r7
 800373c:	bc80      	pop	{r7}
 800373e:	4770      	bx	lr
 8003740:	e000e100 	.word	0xe000e100

08003744 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003744:	b480      	push	{r7}
 8003746:	b083      	sub	sp, #12
 8003748:	af00      	add	r7, sp, #0
 800374a:	4603      	mov	r3, r0
 800374c:	6039      	str	r1, [r7, #0]
 800374e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003750:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003754:	2b00      	cmp	r3, #0
 8003756:	db0a      	blt.n	800376e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	b2da      	uxtb	r2, r3
 800375c:	490c      	ldr	r1, [pc, #48]	; (8003790 <__NVIC_SetPriority+0x4c>)
 800375e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003762:	0112      	lsls	r2, r2, #4
 8003764:	b2d2      	uxtb	r2, r2
 8003766:	440b      	add	r3, r1
 8003768:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800376c:	e00a      	b.n	8003784 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	b2da      	uxtb	r2, r3
 8003772:	4908      	ldr	r1, [pc, #32]	; (8003794 <__NVIC_SetPriority+0x50>)
 8003774:	79fb      	ldrb	r3, [r7, #7]
 8003776:	f003 030f 	and.w	r3, r3, #15
 800377a:	3b04      	subs	r3, #4
 800377c:	0112      	lsls	r2, r2, #4
 800377e:	b2d2      	uxtb	r2, r2
 8003780:	440b      	add	r3, r1
 8003782:	761a      	strb	r2, [r3, #24]
}
 8003784:	bf00      	nop
 8003786:	370c      	adds	r7, #12
 8003788:	46bd      	mov	sp, r7
 800378a:	bc80      	pop	{r7}
 800378c:	4770      	bx	lr
 800378e:	bf00      	nop
 8003790:	e000e100 	.word	0xe000e100
 8003794:	e000ed00 	.word	0xe000ed00

08003798 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003798:	b480      	push	{r7}
 800379a:	b089      	sub	sp, #36	; 0x24
 800379c:	af00      	add	r7, sp, #0
 800379e:	60f8      	str	r0, [r7, #12]
 80037a0:	60b9      	str	r1, [r7, #8]
 80037a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	f003 0307 	and.w	r3, r3, #7
 80037aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80037ac:	69fb      	ldr	r3, [r7, #28]
 80037ae:	f1c3 0307 	rsb	r3, r3, #7
 80037b2:	2b04      	cmp	r3, #4
 80037b4:	bf28      	it	cs
 80037b6:	2304      	movcs	r3, #4
 80037b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80037ba:	69fb      	ldr	r3, [r7, #28]
 80037bc:	3304      	adds	r3, #4
 80037be:	2b06      	cmp	r3, #6
 80037c0:	d902      	bls.n	80037c8 <NVIC_EncodePriority+0x30>
 80037c2:	69fb      	ldr	r3, [r7, #28]
 80037c4:	3b03      	subs	r3, #3
 80037c6:	e000      	b.n	80037ca <NVIC_EncodePriority+0x32>
 80037c8:	2300      	movs	r3, #0
 80037ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037cc:	f04f 32ff 	mov.w	r2, #4294967295
 80037d0:	69bb      	ldr	r3, [r7, #24]
 80037d2:	fa02 f303 	lsl.w	r3, r2, r3
 80037d6:	43da      	mvns	r2, r3
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	401a      	ands	r2, r3
 80037dc:	697b      	ldr	r3, [r7, #20]
 80037de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80037e0:	f04f 31ff 	mov.w	r1, #4294967295
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	fa01 f303 	lsl.w	r3, r1, r3
 80037ea:	43d9      	mvns	r1, r3
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037f0:	4313      	orrs	r3, r2
         );
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	3724      	adds	r7, #36	; 0x24
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bc80      	pop	{r7}
 80037fa:	4770      	bx	lr

080037fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b082      	sub	sp, #8
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	3b01      	subs	r3, #1
 8003808:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800380c:	d301      	bcc.n	8003812 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800380e:	2301      	movs	r3, #1
 8003810:	e00f      	b.n	8003832 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003812:	4a0a      	ldr	r2, [pc, #40]	; (800383c <SysTick_Config+0x40>)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	3b01      	subs	r3, #1
 8003818:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800381a:	210f      	movs	r1, #15
 800381c:	f04f 30ff 	mov.w	r0, #4294967295
 8003820:	f7ff ff90 	bl	8003744 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003824:	4b05      	ldr	r3, [pc, #20]	; (800383c <SysTick_Config+0x40>)
 8003826:	2200      	movs	r2, #0
 8003828:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800382a:	4b04      	ldr	r3, [pc, #16]	; (800383c <SysTick_Config+0x40>)
 800382c:	2207      	movs	r2, #7
 800382e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003830:	2300      	movs	r3, #0
}
 8003832:	4618      	mov	r0, r3
 8003834:	3708      	adds	r7, #8
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}
 800383a:	bf00      	nop
 800383c:	e000e010 	.word	0xe000e010

08003840 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b082      	sub	sp, #8
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003848:	6878      	ldr	r0, [r7, #4]
 800384a:	f7ff ff2d 	bl	80036a8 <__NVIC_SetPriorityGrouping>
}
 800384e:	bf00      	nop
 8003850:	3708      	adds	r7, #8
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}

08003856 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003856:	b580      	push	{r7, lr}
 8003858:	b086      	sub	sp, #24
 800385a:	af00      	add	r7, sp, #0
 800385c:	4603      	mov	r3, r0
 800385e:	60b9      	str	r1, [r7, #8]
 8003860:	607a      	str	r2, [r7, #4]
 8003862:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003864:	2300      	movs	r3, #0
 8003866:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003868:	f7ff ff42 	bl	80036f0 <__NVIC_GetPriorityGrouping>
 800386c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800386e:	687a      	ldr	r2, [r7, #4]
 8003870:	68b9      	ldr	r1, [r7, #8]
 8003872:	6978      	ldr	r0, [r7, #20]
 8003874:	f7ff ff90 	bl	8003798 <NVIC_EncodePriority>
 8003878:	4602      	mov	r2, r0
 800387a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800387e:	4611      	mov	r1, r2
 8003880:	4618      	mov	r0, r3
 8003882:	f7ff ff5f 	bl	8003744 <__NVIC_SetPriority>
}
 8003886:	bf00      	nop
 8003888:	3718      	adds	r7, #24
 800388a:	46bd      	mov	sp, r7
 800388c:	bd80      	pop	{r7, pc}

0800388e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800388e:	b580      	push	{r7, lr}
 8003890:	b082      	sub	sp, #8
 8003892:	af00      	add	r7, sp, #0
 8003894:	4603      	mov	r3, r0
 8003896:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003898:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800389c:	4618      	mov	r0, r3
 800389e:	f7ff ff35 	bl	800370c <__NVIC_EnableIRQ>
}
 80038a2:	bf00      	nop
 80038a4:	3708      	adds	r7, #8
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}

080038aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80038aa:	b580      	push	{r7, lr}
 80038ac:	b082      	sub	sp, #8
 80038ae:	af00      	add	r7, sp, #0
 80038b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80038b2:	6878      	ldr	r0, [r7, #4]
 80038b4:	f7ff ffa2 	bl	80037fc <SysTick_Config>
 80038b8:	4603      	mov	r3, r0
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	3708      	adds	r7, #8
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}
	...

080038c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80038c4:	b480      	push	{r7}
 80038c6:	b08b      	sub	sp, #44	; 0x2c
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
 80038cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80038ce:	2300      	movs	r3, #0
 80038d0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80038d2:	2300      	movs	r3, #0
 80038d4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80038d6:	e169      	b.n	8003bac <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80038d8:	2201      	movs	r2, #1
 80038da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038dc:	fa02 f303 	lsl.w	r3, r2, r3
 80038e0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	69fa      	ldr	r2, [r7, #28]
 80038e8:	4013      	ands	r3, r2
 80038ea:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80038ec:	69ba      	ldr	r2, [r7, #24]
 80038ee:	69fb      	ldr	r3, [r7, #28]
 80038f0:	429a      	cmp	r2, r3
 80038f2:	f040 8158 	bne.w	8003ba6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	4a9a      	ldr	r2, [pc, #616]	; (8003b64 <HAL_GPIO_Init+0x2a0>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d05e      	beq.n	80039be <HAL_GPIO_Init+0xfa>
 8003900:	4a98      	ldr	r2, [pc, #608]	; (8003b64 <HAL_GPIO_Init+0x2a0>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d875      	bhi.n	80039f2 <HAL_GPIO_Init+0x12e>
 8003906:	4a98      	ldr	r2, [pc, #608]	; (8003b68 <HAL_GPIO_Init+0x2a4>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d058      	beq.n	80039be <HAL_GPIO_Init+0xfa>
 800390c:	4a96      	ldr	r2, [pc, #600]	; (8003b68 <HAL_GPIO_Init+0x2a4>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d86f      	bhi.n	80039f2 <HAL_GPIO_Init+0x12e>
 8003912:	4a96      	ldr	r2, [pc, #600]	; (8003b6c <HAL_GPIO_Init+0x2a8>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d052      	beq.n	80039be <HAL_GPIO_Init+0xfa>
 8003918:	4a94      	ldr	r2, [pc, #592]	; (8003b6c <HAL_GPIO_Init+0x2a8>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d869      	bhi.n	80039f2 <HAL_GPIO_Init+0x12e>
 800391e:	4a94      	ldr	r2, [pc, #592]	; (8003b70 <HAL_GPIO_Init+0x2ac>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d04c      	beq.n	80039be <HAL_GPIO_Init+0xfa>
 8003924:	4a92      	ldr	r2, [pc, #584]	; (8003b70 <HAL_GPIO_Init+0x2ac>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d863      	bhi.n	80039f2 <HAL_GPIO_Init+0x12e>
 800392a:	4a92      	ldr	r2, [pc, #584]	; (8003b74 <HAL_GPIO_Init+0x2b0>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d046      	beq.n	80039be <HAL_GPIO_Init+0xfa>
 8003930:	4a90      	ldr	r2, [pc, #576]	; (8003b74 <HAL_GPIO_Init+0x2b0>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d85d      	bhi.n	80039f2 <HAL_GPIO_Init+0x12e>
 8003936:	2b12      	cmp	r3, #18
 8003938:	d82a      	bhi.n	8003990 <HAL_GPIO_Init+0xcc>
 800393a:	2b12      	cmp	r3, #18
 800393c:	d859      	bhi.n	80039f2 <HAL_GPIO_Init+0x12e>
 800393e:	a201      	add	r2, pc, #4	; (adr r2, 8003944 <HAL_GPIO_Init+0x80>)
 8003940:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003944:	080039bf 	.word	0x080039bf
 8003948:	08003999 	.word	0x08003999
 800394c:	080039ab 	.word	0x080039ab
 8003950:	080039ed 	.word	0x080039ed
 8003954:	080039f3 	.word	0x080039f3
 8003958:	080039f3 	.word	0x080039f3
 800395c:	080039f3 	.word	0x080039f3
 8003960:	080039f3 	.word	0x080039f3
 8003964:	080039f3 	.word	0x080039f3
 8003968:	080039f3 	.word	0x080039f3
 800396c:	080039f3 	.word	0x080039f3
 8003970:	080039f3 	.word	0x080039f3
 8003974:	080039f3 	.word	0x080039f3
 8003978:	080039f3 	.word	0x080039f3
 800397c:	080039f3 	.word	0x080039f3
 8003980:	080039f3 	.word	0x080039f3
 8003984:	080039f3 	.word	0x080039f3
 8003988:	080039a1 	.word	0x080039a1
 800398c:	080039b5 	.word	0x080039b5
 8003990:	4a79      	ldr	r2, [pc, #484]	; (8003b78 <HAL_GPIO_Init+0x2b4>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d013      	beq.n	80039be <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003996:	e02c      	b.n	80039f2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	68db      	ldr	r3, [r3, #12]
 800399c:	623b      	str	r3, [r7, #32]
          break;
 800399e:	e029      	b.n	80039f4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	68db      	ldr	r3, [r3, #12]
 80039a4:	3304      	adds	r3, #4
 80039a6:	623b      	str	r3, [r7, #32]
          break;
 80039a8:	e024      	b.n	80039f4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	68db      	ldr	r3, [r3, #12]
 80039ae:	3308      	adds	r3, #8
 80039b0:	623b      	str	r3, [r7, #32]
          break;
 80039b2:	e01f      	b.n	80039f4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	68db      	ldr	r3, [r3, #12]
 80039b8:	330c      	adds	r3, #12
 80039ba:	623b      	str	r3, [r7, #32]
          break;
 80039bc:	e01a      	b.n	80039f4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d102      	bne.n	80039cc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80039c6:	2304      	movs	r3, #4
 80039c8:	623b      	str	r3, [r7, #32]
          break;
 80039ca:	e013      	b.n	80039f4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	689b      	ldr	r3, [r3, #8]
 80039d0:	2b01      	cmp	r3, #1
 80039d2:	d105      	bne.n	80039e0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80039d4:	2308      	movs	r3, #8
 80039d6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	69fa      	ldr	r2, [r7, #28]
 80039dc:	611a      	str	r2, [r3, #16]
          break;
 80039de:	e009      	b.n	80039f4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80039e0:	2308      	movs	r3, #8
 80039e2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	69fa      	ldr	r2, [r7, #28]
 80039e8:	615a      	str	r2, [r3, #20]
          break;
 80039ea:	e003      	b.n	80039f4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80039ec:	2300      	movs	r3, #0
 80039ee:	623b      	str	r3, [r7, #32]
          break;
 80039f0:	e000      	b.n	80039f4 <HAL_GPIO_Init+0x130>
          break;
 80039f2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80039f4:	69bb      	ldr	r3, [r7, #24]
 80039f6:	2bff      	cmp	r3, #255	; 0xff
 80039f8:	d801      	bhi.n	80039fe <HAL_GPIO_Init+0x13a>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	e001      	b.n	8003a02 <HAL_GPIO_Init+0x13e>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	3304      	adds	r3, #4
 8003a02:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003a04:	69bb      	ldr	r3, [r7, #24]
 8003a06:	2bff      	cmp	r3, #255	; 0xff
 8003a08:	d802      	bhi.n	8003a10 <HAL_GPIO_Init+0x14c>
 8003a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a0c:	009b      	lsls	r3, r3, #2
 8003a0e:	e002      	b.n	8003a16 <HAL_GPIO_Init+0x152>
 8003a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a12:	3b08      	subs	r3, #8
 8003a14:	009b      	lsls	r3, r3, #2
 8003a16:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003a18:	697b      	ldr	r3, [r7, #20]
 8003a1a:	681a      	ldr	r2, [r3, #0]
 8003a1c:	210f      	movs	r1, #15
 8003a1e:	693b      	ldr	r3, [r7, #16]
 8003a20:	fa01 f303 	lsl.w	r3, r1, r3
 8003a24:	43db      	mvns	r3, r3
 8003a26:	401a      	ands	r2, r3
 8003a28:	6a39      	ldr	r1, [r7, #32]
 8003a2a:	693b      	ldr	r3, [r7, #16]
 8003a2c:	fa01 f303 	lsl.w	r3, r1, r3
 8003a30:	431a      	orrs	r2, r3
 8003a32:	697b      	ldr	r3, [r7, #20]
 8003a34:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	f000 80b1 	beq.w	8003ba6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003a44:	4b4d      	ldr	r3, [pc, #308]	; (8003b7c <HAL_GPIO_Init+0x2b8>)
 8003a46:	699b      	ldr	r3, [r3, #24]
 8003a48:	4a4c      	ldr	r2, [pc, #304]	; (8003b7c <HAL_GPIO_Init+0x2b8>)
 8003a4a:	f043 0301 	orr.w	r3, r3, #1
 8003a4e:	6193      	str	r3, [r2, #24]
 8003a50:	4b4a      	ldr	r3, [pc, #296]	; (8003b7c <HAL_GPIO_Init+0x2b8>)
 8003a52:	699b      	ldr	r3, [r3, #24]
 8003a54:	f003 0301 	and.w	r3, r3, #1
 8003a58:	60bb      	str	r3, [r7, #8]
 8003a5a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003a5c:	4a48      	ldr	r2, [pc, #288]	; (8003b80 <HAL_GPIO_Init+0x2bc>)
 8003a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a60:	089b      	lsrs	r3, r3, #2
 8003a62:	3302      	adds	r3, #2
 8003a64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a68:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a6c:	f003 0303 	and.w	r3, r3, #3
 8003a70:	009b      	lsls	r3, r3, #2
 8003a72:	220f      	movs	r2, #15
 8003a74:	fa02 f303 	lsl.w	r3, r2, r3
 8003a78:	43db      	mvns	r3, r3
 8003a7a:	68fa      	ldr	r2, [r7, #12]
 8003a7c:	4013      	ands	r3, r2
 8003a7e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	4a40      	ldr	r2, [pc, #256]	; (8003b84 <HAL_GPIO_Init+0x2c0>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d013      	beq.n	8003ab0 <HAL_GPIO_Init+0x1ec>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	4a3f      	ldr	r2, [pc, #252]	; (8003b88 <HAL_GPIO_Init+0x2c4>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d00d      	beq.n	8003aac <HAL_GPIO_Init+0x1e8>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	4a3e      	ldr	r2, [pc, #248]	; (8003b8c <HAL_GPIO_Init+0x2c8>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d007      	beq.n	8003aa8 <HAL_GPIO_Init+0x1e4>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	4a3d      	ldr	r2, [pc, #244]	; (8003b90 <HAL_GPIO_Init+0x2cc>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d101      	bne.n	8003aa4 <HAL_GPIO_Init+0x1e0>
 8003aa0:	2303      	movs	r3, #3
 8003aa2:	e006      	b.n	8003ab2 <HAL_GPIO_Init+0x1ee>
 8003aa4:	2304      	movs	r3, #4
 8003aa6:	e004      	b.n	8003ab2 <HAL_GPIO_Init+0x1ee>
 8003aa8:	2302      	movs	r3, #2
 8003aaa:	e002      	b.n	8003ab2 <HAL_GPIO_Init+0x1ee>
 8003aac:	2301      	movs	r3, #1
 8003aae:	e000      	b.n	8003ab2 <HAL_GPIO_Init+0x1ee>
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ab4:	f002 0203 	and.w	r2, r2, #3
 8003ab8:	0092      	lsls	r2, r2, #2
 8003aba:	4093      	lsls	r3, r2
 8003abc:	68fa      	ldr	r2, [r7, #12]
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003ac2:	492f      	ldr	r1, [pc, #188]	; (8003b80 <HAL_GPIO_Init+0x2bc>)
 8003ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac6:	089b      	lsrs	r3, r3, #2
 8003ac8:	3302      	adds	r3, #2
 8003aca:	68fa      	ldr	r2, [r7, #12]
 8003acc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d006      	beq.n	8003aea <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003adc:	4b2d      	ldr	r3, [pc, #180]	; (8003b94 <HAL_GPIO_Init+0x2d0>)
 8003ade:	689a      	ldr	r2, [r3, #8]
 8003ae0:	492c      	ldr	r1, [pc, #176]	; (8003b94 <HAL_GPIO_Init+0x2d0>)
 8003ae2:	69bb      	ldr	r3, [r7, #24]
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	608b      	str	r3, [r1, #8]
 8003ae8:	e006      	b.n	8003af8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003aea:	4b2a      	ldr	r3, [pc, #168]	; (8003b94 <HAL_GPIO_Init+0x2d0>)
 8003aec:	689a      	ldr	r2, [r3, #8]
 8003aee:	69bb      	ldr	r3, [r7, #24]
 8003af0:	43db      	mvns	r3, r3
 8003af2:	4928      	ldr	r1, [pc, #160]	; (8003b94 <HAL_GPIO_Init+0x2d0>)
 8003af4:	4013      	ands	r3, r2
 8003af6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d006      	beq.n	8003b12 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003b04:	4b23      	ldr	r3, [pc, #140]	; (8003b94 <HAL_GPIO_Init+0x2d0>)
 8003b06:	68da      	ldr	r2, [r3, #12]
 8003b08:	4922      	ldr	r1, [pc, #136]	; (8003b94 <HAL_GPIO_Init+0x2d0>)
 8003b0a:	69bb      	ldr	r3, [r7, #24]
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	60cb      	str	r3, [r1, #12]
 8003b10:	e006      	b.n	8003b20 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003b12:	4b20      	ldr	r3, [pc, #128]	; (8003b94 <HAL_GPIO_Init+0x2d0>)
 8003b14:	68da      	ldr	r2, [r3, #12]
 8003b16:	69bb      	ldr	r3, [r7, #24]
 8003b18:	43db      	mvns	r3, r3
 8003b1a:	491e      	ldr	r1, [pc, #120]	; (8003b94 <HAL_GPIO_Init+0x2d0>)
 8003b1c:	4013      	ands	r3, r2
 8003b1e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d006      	beq.n	8003b3a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003b2c:	4b19      	ldr	r3, [pc, #100]	; (8003b94 <HAL_GPIO_Init+0x2d0>)
 8003b2e:	685a      	ldr	r2, [r3, #4]
 8003b30:	4918      	ldr	r1, [pc, #96]	; (8003b94 <HAL_GPIO_Init+0x2d0>)
 8003b32:	69bb      	ldr	r3, [r7, #24]
 8003b34:	4313      	orrs	r3, r2
 8003b36:	604b      	str	r3, [r1, #4]
 8003b38:	e006      	b.n	8003b48 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003b3a:	4b16      	ldr	r3, [pc, #88]	; (8003b94 <HAL_GPIO_Init+0x2d0>)
 8003b3c:	685a      	ldr	r2, [r3, #4]
 8003b3e:	69bb      	ldr	r3, [r7, #24]
 8003b40:	43db      	mvns	r3, r3
 8003b42:	4914      	ldr	r1, [pc, #80]	; (8003b94 <HAL_GPIO_Init+0x2d0>)
 8003b44:	4013      	ands	r3, r2
 8003b46:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d021      	beq.n	8003b98 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003b54:	4b0f      	ldr	r3, [pc, #60]	; (8003b94 <HAL_GPIO_Init+0x2d0>)
 8003b56:	681a      	ldr	r2, [r3, #0]
 8003b58:	490e      	ldr	r1, [pc, #56]	; (8003b94 <HAL_GPIO_Init+0x2d0>)
 8003b5a:	69bb      	ldr	r3, [r7, #24]
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	600b      	str	r3, [r1, #0]
 8003b60:	e021      	b.n	8003ba6 <HAL_GPIO_Init+0x2e2>
 8003b62:	bf00      	nop
 8003b64:	10320000 	.word	0x10320000
 8003b68:	10310000 	.word	0x10310000
 8003b6c:	10220000 	.word	0x10220000
 8003b70:	10210000 	.word	0x10210000
 8003b74:	10120000 	.word	0x10120000
 8003b78:	10110000 	.word	0x10110000
 8003b7c:	40021000 	.word	0x40021000
 8003b80:	40010000 	.word	0x40010000
 8003b84:	40010800 	.word	0x40010800
 8003b88:	40010c00 	.word	0x40010c00
 8003b8c:	40011000 	.word	0x40011000
 8003b90:	40011400 	.word	0x40011400
 8003b94:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003b98:	4b0b      	ldr	r3, [pc, #44]	; (8003bc8 <HAL_GPIO_Init+0x304>)
 8003b9a:	681a      	ldr	r2, [r3, #0]
 8003b9c:	69bb      	ldr	r3, [r7, #24]
 8003b9e:	43db      	mvns	r3, r3
 8003ba0:	4909      	ldr	r1, [pc, #36]	; (8003bc8 <HAL_GPIO_Init+0x304>)
 8003ba2:	4013      	ands	r3, r2
 8003ba4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba8:	3301      	adds	r3, #1
 8003baa:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	681a      	ldr	r2, [r3, #0]
 8003bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb2:	fa22 f303 	lsr.w	r3, r2, r3
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	f47f ae8e 	bne.w	80038d8 <HAL_GPIO_Init+0x14>
  }
}
 8003bbc:	bf00      	nop
 8003bbe:	bf00      	nop
 8003bc0:	372c      	adds	r7, #44	; 0x2c
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bc80      	pop	{r7}
 8003bc6:	4770      	bx	lr
 8003bc8:	40010400 	.word	0x40010400

08003bcc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b083      	sub	sp, #12
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
 8003bd4:	460b      	mov	r3, r1
 8003bd6:	807b      	strh	r3, [r7, #2]
 8003bd8:	4613      	mov	r3, r2
 8003bda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003bdc:	787b      	ldrb	r3, [r7, #1]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d003      	beq.n	8003bea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003be2:	887a      	ldrh	r2, [r7, #2]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003be8:	e003      	b.n	8003bf2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003bea:	887b      	ldrh	r3, [r7, #2]
 8003bec:	041a      	lsls	r2, r3, #16
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	611a      	str	r2, [r3, #16]
}
 8003bf2:	bf00      	nop
 8003bf4:	370c      	adds	r7, #12
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bc80      	pop	{r7}
 8003bfa:	4770      	bx	lr

08003bfc <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b085      	sub	sp, #20
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
 8003c04:	460b      	mov	r3, r1
 8003c06:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	68db      	ldr	r3, [r3, #12]
 8003c0c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003c0e:	887a      	ldrh	r2, [r7, #2]
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	4013      	ands	r3, r2
 8003c14:	041a      	lsls	r2, r3, #16
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	43d9      	mvns	r1, r3
 8003c1a:	887b      	ldrh	r3, [r7, #2]
 8003c1c:	400b      	ands	r3, r1
 8003c1e:	431a      	orrs	r2, r3
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	611a      	str	r2, [r3, #16]
}
 8003c24:	bf00      	nop
 8003c26:	3714      	adds	r7, #20
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bc80      	pop	{r7}
 8003c2c:	4770      	bx	lr
	...

08003c30 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b084      	sub	sp, #16
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d101      	bne.n	8003c42 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	e12b      	b.n	8003e9a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c48:	b2db      	uxtb	r3, r3
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d106      	bne.n	8003c5c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2200      	movs	r2, #0
 8003c52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003c56:	6878      	ldr	r0, [r7, #4]
 8003c58:	f7fe fb50 	bl	80022fc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2224      	movs	r2, #36	; 0x24
 8003c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	681a      	ldr	r2, [r3, #0]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f022 0201 	bic.w	r2, r2, #1
 8003c72:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	681a      	ldr	r2, [r3, #0]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003c82:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	681a      	ldr	r2, [r3, #0]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003c92:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003c94:	f000 fcda 	bl	800464c <HAL_RCC_GetPCLK1Freq>
 8003c98:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	4a81      	ldr	r2, [pc, #516]	; (8003ea4 <HAL_I2C_Init+0x274>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d807      	bhi.n	8003cb4 <HAL_I2C_Init+0x84>
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	4a80      	ldr	r2, [pc, #512]	; (8003ea8 <HAL_I2C_Init+0x278>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	bf94      	ite	ls
 8003cac:	2301      	movls	r3, #1
 8003cae:	2300      	movhi	r3, #0
 8003cb0:	b2db      	uxtb	r3, r3
 8003cb2:	e006      	b.n	8003cc2 <HAL_I2C_Init+0x92>
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	4a7d      	ldr	r2, [pc, #500]	; (8003eac <HAL_I2C_Init+0x27c>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	bf94      	ite	ls
 8003cbc:	2301      	movls	r3, #1
 8003cbe:	2300      	movhi	r3, #0
 8003cc0:	b2db      	uxtb	r3, r3
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d001      	beq.n	8003cca <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	e0e7      	b.n	8003e9a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	4a78      	ldr	r2, [pc, #480]	; (8003eb0 <HAL_I2C_Init+0x280>)
 8003cce:	fba2 2303 	umull	r2, r3, r2, r3
 8003cd2:	0c9b      	lsrs	r3, r3, #18
 8003cd4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	68ba      	ldr	r2, [r7, #8]
 8003ce6:	430a      	orrs	r2, r1
 8003ce8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	6a1b      	ldr	r3, [r3, #32]
 8003cf0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	4a6a      	ldr	r2, [pc, #424]	; (8003ea4 <HAL_I2C_Init+0x274>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d802      	bhi.n	8003d04 <HAL_I2C_Init+0xd4>
 8003cfe:	68bb      	ldr	r3, [r7, #8]
 8003d00:	3301      	adds	r3, #1
 8003d02:	e009      	b.n	8003d18 <HAL_I2C_Init+0xe8>
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003d0a:	fb02 f303 	mul.w	r3, r2, r3
 8003d0e:	4a69      	ldr	r2, [pc, #420]	; (8003eb4 <HAL_I2C_Init+0x284>)
 8003d10:	fba2 2303 	umull	r2, r3, r2, r3
 8003d14:	099b      	lsrs	r3, r3, #6
 8003d16:	3301      	adds	r3, #1
 8003d18:	687a      	ldr	r2, [r7, #4]
 8003d1a:	6812      	ldr	r2, [r2, #0]
 8003d1c:	430b      	orrs	r3, r1
 8003d1e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	69db      	ldr	r3, [r3, #28]
 8003d26:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003d2a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	495c      	ldr	r1, [pc, #368]	; (8003ea4 <HAL_I2C_Init+0x274>)
 8003d34:	428b      	cmp	r3, r1
 8003d36:	d819      	bhi.n	8003d6c <HAL_I2C_Init+0x13c>
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	1e59      	subs	r1, r3, #1
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	005b      	lsls	r3, r3, #1
 8003d42:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d46:	1c59      	adds	r1, r3, #1
 8003d48:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003d4c:	400b      	ands	r3, r1
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d00a      	beq.n	8003d68 <HAL_I2C_Init+0x138>
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	1e59      	subs	r1, r3, #1
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	005b      	lsls	r3, r3, #1
 8003d5c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d60:	3301      	adds	r3, #1
 8003d62:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d66:	e051      	b.n	8003e0c <HAL_I2C_Init+0x1dc>
 8003d68:	2304      	movs	r3, #4
 8003d6a:	e04f      	b.n	8003e0c <HAL_I2C_Init+0x1dc>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	689b      	ldr	r3, [r3, #8]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d111      	bne.n	8003d98 <HAL_I2C_Init+0x168>
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	1e58      	subs	r0, r3, #1
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6859      	ldr	r1, [r3, #4]
 8003d7c:	460b      	mov	r3, r1
 8003d7e:	005b      	lsls	r3, r3, #1
 8003d80:	440b      	add	r3, r1
 8003d82:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d86:	3301      	adds	r3, #1
 8003d88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	bf0c      	ite	eq
 8003d90:	2301      	moveq	r3, #1
 8003d92:	2300      	movne	r3, #0
 8003d94:	b2db      	uxtb	r3, r3
 8003d96:	e012      	b.n	8003dbe <HAL_I2C_Init+0x18e>
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	1e58      	subs	r0, r3, #1
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6859      	ldr	r1, [r3, #4]
 8003da0:	460b      	mov	r3, r1
 8003da2:	009b      	lsls	r3, r3, #2
 8003da4:	440b      	add	r3, r1
 8003da6:	0099      	lsls	r1, r3, #2
 8003da8:	440b      	add	r3, r1
 8003daa:	fbb0 f3f3 	udiv	r3, r0, r3
 8003dae:	3301      	adds	r3, #1
 8003db0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	bf0c      	ite	eq
 8003db8:	2301      	moveq	r3, #1
 8003dba:	2300      	movne	r3, #0
 8003dbc:	b2db      	uxtb	r3, r3
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d001      	beq.n	8003dc6 <HAL_I2C_Init+0x196>
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	e022      	b.n	8003e0c <HAL_I2C_Init+0x1dc>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d10e      	bne.n	8003dec <HAL_I2C_Init+0x1bc>
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	1e58      	subs	r0, r3, #1
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6859      	ldr	r1, [r3, #4]
 8003dd6:	460b      	mov	r3, r1
 8003dd8:	005b      	lsls	r3, r3, #1
 8003dda:	440b      	add	r3, r1
 8003ddc:	fbb0 f3f3 	udiv	r3, r0, r3
 8003de0:	3301      	adds	r3, #1
 8003de2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003de6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003dea:	e00f      	b.n	8003e0c <HAL_I2C_Init+0x1dc>
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	1e58      	subs	r0, r3, #1
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6859      	ldr	r1, [r3, #4]
 8003df4:	460b      	mov	r3, r1
 8003df6:	009b      	lsls	r3, r3, #2
 8003df8:	440b      	add	r3, r1
 8003dfa:	0099      	lsls	r1, r3, #2
 8003dfc:	440b      	add	r3, r1
 8003dfe:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e02:	3301      	adds	r3, #1
 8003e04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e08:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003e0c:	6879      	ldr	r1, [r7, #4]
 8003e0e:	6809      	ldr	r1, [r1, #0]
 8003e10:	4313      	orrs	r3, r2
 8003e12:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	69da      	ldr	r2, [r3, #28]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6a1b      	ldr	r3, [r3, #32]
 8003e26:	431a      	orrs	r2, r3
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	430a      	orrs	r2, r1
 8003e2e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	689b      	ldr	r3, [r3, #8]
 8003e36:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003e3a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003e3e:	687a      	ldr	r2, [r7, #4]
 8003e40:	6911      	ldr	r1, [r2, #16]
 8003e42:	687a      	ldr	r2, [r7, #4]
 8003e44:	68d2      	ldr	r2, [r2, #12]
 8003e46:	4311      	orrs	r1, r2
 8003e48:	687a      	ldr	r2, [r7, #4]
 8003e4a:	6812      	ldr	r2, [r2, #0]
 8003e4c:	430b      	orrs	r3, r1
 8003e4e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	68db      	ldr	r3, [r3, #12]
 8003e56:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	695a      	ldr	r2, [r3, #20]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	699b      	ldr	r3, [r3, #24]
 8003e62:	431a      	orrs	r2, r3
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	430a      	orrs	r2, r1
 8003e6a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	681a      	ldr	r2, [r3, #0]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f042 0201 	orr.w	r2, r2, #1
 8003e7a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2220      	movs	r2, #32
 8003e86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2200      	movs	r2, #0
 8003e94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003e98:	2300      	movs	r3, #0
}
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	3710      	adds	r7, #16
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bd80      	pop	{r7, pc}
 8003ea2:	bf00      	nop
 8003ea4:	000186a0 	.word	0x000186a0
 8003ea8:	001e847f 	.word	0x001e847f
 8003eac:	003d08ff 	.word	0x003d08ff
 8003eb0:	431bde83 	.word	0x431bde83
 8003eb4:	10624dd3 	.word	0x10624dd3

08003eb8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b086      	sub	sp, #24
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d101      	bne.n	8003eca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	e272      	b.n	80043b0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f003 0301 	and.w	r3, r3, #1
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	f000 8087 	beq.w	8003fe6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003ed8:	4b92      	ldr	r3, [pc, #584]	; (8004124 <HAL_RCC_OscConfig+0x26c>)
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	f003 030c 	and.w	r3, r3, #12
 8003ee0:	2b04      	cmp	r3, #4
 8003ee2:	d00c      	beq.n	8003efe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003ee4:	4b8f      	ldr	r3, [pc, #572]	; (8004124 <HAL_RCC_OscConfig+0x26c>)
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	f003 030c 	and.w	r3, r3, #12
 8003eec:	2b08      	cmp	r3, #8
 8003eee:	d112      	bne.n	8003f16 <HAL_RCC_OscConfig+0x5e>
 8003ef0:	4b8c      	ldr	r3, [pc, #560]	; (8004124 <HAL_RCC_OscConfig+0x26c>)
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ef8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003efc:	d10b      	bne.n	8003f16 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003efe:	4b89      	ldr	r3, [pc, #548]	; (8004124 <HAL_RCC_OscConfig+0x26c>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d06c      	beq.n	8003fe4 <HAL_RCC_OscConfig+0x12c>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d168      	bne.n	8003fe4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
 8003f14:	e24c      	b.n	80043b0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f1e:	d106      	bne.n	8003f2e <HAL_RCC_OscConfig+0x76>
 8003f20:	4b80      	ldr	r3, [pc, #512]	; (8004124 <HAL_RCC_OscConfig+0x26c>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a7f      	ldr	r2, [pc, #508]	; (8004124 <HAL_RCC_OscConfig+0x26c>)
 8003f26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f2a:	6013      	str	r3, [r2, #0]
 8003f2c:	e02e      	b.n	8003f8c <HAL_RCC_OscConfig+0xd4>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d10c      	bne.n	8003f50 <HAL_RCC_OscConfig+0x98>
 8003f36:	4b7b      	ldr	r3, [pc, #492]	; (8004124 <HAL_RCC_OscConfig+0x26c>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a7a      	ldr	r2, [pc, #488]	; (8004124 <HAL_RCC_OscConfig+0x26c>)
 8003f3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f40:	6013      	str	r3, [r2, #0]
 8003f42:	4b78      	ldr	r3, [pc, #480]	; (8004124 <HAL_RCC_OscConfig+0x26c>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4a77      	ldr	r2, [pc, #476]	; (8004124 <HAL_RCC_OscConfig+0x26c>)
 8003f48:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f4c:	6013      	str	r3, [r2, #0]
 8003f4e:	e01d      	b.n	8003f8c <HAL_RCC_OscConfig+0xd4>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f58:	d10c      	bne.n	8003f74 <HAL_RCC_OscConfig+0xbc>
 8003f5a:	4b72      	ldr	r3, [pc, #456]	; (8004124 <HAL_RCC_OscConfig+0x26c>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a71      	ldr	r2, [pc, #452]	; (8004124 <HAL_RCC_OscConfig+0x26c>)
 8003f60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f64:	6013      	str	r3, [r2, #0]
 8003f66:	4b6f      	ldr	r3, [pc, #444]	; (8004124 <HAL_RCC_OscConfig+0x26c>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4a6e      	ldr	r2, [pc, #440]	; (8004124 <HAL_RCC_OscConfig+0x26c>)
 8003f6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f70:	6013      	str	r3, [r2, #0]
 8003f72:	e00b      	b.n	8003f8c <HAL_RCC_OscConfig+0xd4>
 8003f74:	4b6b      	ldr	r3, [pc, #428]	; (8004124 <HAL_RCC_OscConfig+0x26c>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a6a      	ldr	r2, [pc, #424]	; (8004124 <HAL_RCC_OscConfig+0x26c>)
 8003f7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f7e:	6013      	str	r3, [r2, #0]
 8003f80:	4b68      	ldr	r3, [pc, #416]	; (8004124 <HAL_RCC_OscConfig+0x26c>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a67      	ldr	r2, [pc, #412]	; (8004124 <HAL_RCC_OscConfig+0x26c>)
 8003f86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f8a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d013      	beq.n	8003fbc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f94:	f7fe fd3e 	bl	8002a14 <HAL_GetTick>
 8003f98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f9a:	e008      	b.n	8003fae <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f9c:	f7fe fd3a 	bl	8002a14 <HAL_GetTick>
 8003fa0:	4602      	mov	r2, r0
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	1ad3      	subs	r3, r2, r3
 8003fa6:	2b64      	cmp	r3, #100	; 0x64
 8003fa8:	d901      	bls.n	8003fae <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003faa:	2303      	movs	r3, #3
 8003fac:	e200      	b.n	80043b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fae:	4b5d      	ldr	r3, [pc, #372]	; (8004124 <HAL_RCC_OscConfig+0x26c>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d0f0      	beq.n	8003f9c <HAL_RCC_OscConfig+0xe4>
 8003fba:	e014      	b.n	8003fe6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fbc:	f7fe fd2a 	bl	8002a14 <HAL_GetTick>
 8003fc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003fc2:	e008      	b.n	8003fd6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003fc4:	f7fe fd26 	bl	8002a14 <HAL_GetTick>
 8003fc8:	4602      	mov	r2, r0
 8003fca:	693b      	ldr	r3, [r7, #16]
 8003fcc:	1ad3      	subs	r3, r2, r3
 8003fce:	2b64      	cmp	r3, #100	; 0x64
 8003fd0:	d901      	bls.n	8003fd6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003fd2:	2303      	movs	r3, #3
 8003fd4:	e1ec      	b.n	80043b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003fd6:	4b53      	ldr	r3, [pc, #332]	; (8004124 <HAL_RCC_OscConfig+0x26c>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d1f0      	bne.n	8003fc4 <HAL_RCC_OscConfig+0x10c>
 8003fe2:	e000      	b.n	8003fe6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fe4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f003 0302 	and.w	r3, r3, #2
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d063      	beq.n	80040ba <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003ff2:	4b4c      	ldr	r3, [pc, #304]	; (8004124 <HAL_RCC_OscConfig+0x26c>)
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	f003 030c 	and.w	r3, r3, #12
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d00b      	beq.n	8004016 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003ffe:	4b49      	ldr	r3, [pc, #292]	; (8004124 <HAL_RCC_OscConfig+0x26c>)
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	f003 030c 	and.w	r3, r3, #12
 8004006:	2b08      	cmp	r3, #8
 8004008:	d11c      	bne.n	8004044 <HAL_RCC_OscConfig+0x18c>
 800400a:	4b46      	ldr	r3, [pc, #280]	; (8004124 <HAL_RCC_OscConfig+0x26c>)
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004012:	2b00      	cmp	r3, #0
 8004014:	d116      	bne.n	8004044 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004016:	4b43      	ldr	r3, [pc, #268]	; (8004124 <HAL_RCC_OscConfig+0x26c>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f003 0302 	and.w	r3, r3, #2
 800401e:	2b00      	cmp	r3, #0
 8004020:	d005      	beq.n	800402e <HAL_RCC_OscConfig+0x176>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	691b      	ldr	r3, [r3, #16]
 8004026:	2b01      	cmp	r3, #1
 8004028:	d001      	beq.n	800402e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800402a:	2301      	movs	r3, #1
 800402c:	e1c0      	b.n	80043b0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800402e:	4b3d      	ldr	r3, [pc, #244]	; (8004124 <HAL_RCC_OscConfig+0x26c>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	695b      	ldr	r3, [r3, #20]
 800403a:	00db      	lsls	r3, r3, #3
 800403c:	4939      	ldr	r1, [pc, #228]	; (8004124 <HAL_RCC_OscConfig+0x26c>)
 800403e:	4313      	orrs	r3, r2
 8004040:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004042:	e03a      	b.n	80040ba <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	691b      	ldr	r3, [r3, #16]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d020      	beq.n	800408e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800404c:	4b36      	ldr	r3, [pc, #216]	; (8004128 <HAL_RCC_OscConfig+0x270>)
 800404e:	2201      	movs	r2, #1
 8004050:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004052:	f7fe fcdf 	bl	8002a14 <HAL_GetTick>
 8004056:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004058:	e008      	b.n	800406c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800405a:	f7fe fcdb 	bl	8002a14 <HAL_GetTick>
 800405e:	4602      	mov	r2, r0
 8004060:	693b      	ldr	r3, [r7, #16]
 8004062:	1ad3      	subs	r3, r2, r3
 8004064:	2b02      	cmp	r3, #2
 8004066:	d901      	bls.n	800406c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004068:	2303      	movs	r3, #3
 800406a:	e1a1      	b.n	80043b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800406c:	4b2d      	ldr	r3, [pc, #180]	; (8004124 <HAL_RCC_OscConfig+0x26c>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f003 0302 	and.w	r3, r3, #2
 8004074:	2b00      	cmp	r3, #0
 8004076:	d0f0      	beq.n	800405a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004078:	4b2a      	ldr	r3, [pc, #168]	; (8004124 <HAL_RCC_OscConfig+0x26c>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	695b      	ldr	r3, [r3, #20]
 8004084:	00db      	lsls	r3, r3, #3
 8004086:	4927      	ldr	r1, [pc, #156]	; (8004124 <HAL_RCC_OscConfig+0x26c>)
 8004088:	4313      	orrs	r3, r2
 800408a:	600b      	str	r3, [r1, #0]
 800408c:	e015      	b.n	80040ba <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800408e:	4b26      	ldr	r3, [pc, #152]	; (8004128 <HAL_RCC_OscConfig+0x270>)
 8004090:	2200      	movs	r2, #0
 8004092:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004094:	f7fe fcbe 	bl	8002a14 <HAL_GetTick>
 8004098:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800409a:	e008      	b.n	80040ae <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800409c:	f7fe fcba 	bl	8002a14 <HAL_GetTick>
 80040a0:	4602      	mov	r2, r0
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	1ad3      	subs	r3, r2, r3
 80040a6:	2b02      	cmp	r3, #2
 80040a8:	d901      	bls.n	80040ae <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80040aa:	2303      	movs	r3, #3
 80040ac:	e180      	b.n	80043b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040ae:	4b1d      	ldr	r3, [pc, #116]	; (8004124 <HAL_RCC_OscConfig+0x26c>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f003 0302 	and.w	r3, r3, #2
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d1f0      	bne.n	800409c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f003 0308 	and.w	r3, r3, #8
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d03a      	beq.n	800413c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	699b      	ldr	r3, [r3, #24]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d019      	beq.n	8004102 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80040ce:	4b17      	ldr	r3, [pc, #92]	; (800412c <HAL_RCC_OscConfig+0x274>)
 80040d0:	2201      	movs	r2, #1
 80040d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040d4:	f7fe fc9e 	bl	8002a14 <HAL_GetTick>
 80040d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040da:	e008      	b.n	80040ee <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040dc:	f7fe fc9a 	bl	8002a14 <HAL_GetTick>
 80040e0:	4602      	mov	r2, r0
 80040e2:	693b      	ldr	r3, [r7, #16]
 80040e4:	1ad3      	subs	r3, r2, r3
 80040e6:	2b02      	cmp	r3, #2
 80040e8:	d901      	bls.n	80040ee <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80040ea:	2303      	movs	r3, #3
 80040ec:	e160      	b.n	80043b0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040ee:	4b0d      	ldr	r3, [pc, #52]	; (8004124 <HAL_RCC_OscConfig+0x26c>)
 80040f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f2:	f003 0302 	and.w	r3, r3, #2
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d0f0      	beq.n	80040dc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80040fa:	2001      	movs	r0, #1
 80040fc:	f000 face 	bl	800469c <RCC_Delay>
 8004100:	e01c      	b.n	800413c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004102:	4b0a      	ldr	r3, [pc, #40]	; (800412c <HAL_RCC_OscConfig+0x274>)
 8004104:	2200      	movs	r2, #0
 8004106:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004108:	f7fe fc84 	bl	8002a14 <HAL_GetTick>
 800410c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800410e:	e00f      	b.n	8004130 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004110:	f7fe fc80 	bl	8002a14 <HAL_GetTick>
 8004114:	4602      	mov	r2, r0
 8004116:	693b      	ldr	r3, [r7, #16]
 8004118:	1ad3      	subs	r3, r2, r3
 800411a:	2b02      	cmp	r3, #2
 800411c:	d908      	bls.n	8004130 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800411e:	2303      	movs	r3, #3
 8004120:	e146      	b.n	80043b0 <HAL_RCC_OscConfig+0x4f8>
 8004122:	bf00      	nop
 8004124:	40021000 	.word	0x40021000
 8004128:	42420000 	.word	0x42420000
 800412c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004130:	4b92      	ldr	r3, [pc, #584]	; (800437c <HAL_RCC_OscConfig+0x4c4>)
 8004132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004134:	f003 0302 	and.w	r3, r3, #2
 8004138:	2b00      	cmp	r3, #0
 800413a:	d1e9      	bne.n	8004110 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f003 0304 	and.w	r3, r3, #4
 8004144:	2b00      	cmp	r3, #0
 8004146:	f000 80a6 	beq.w	8004296 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800414a:	2300      	movs	r3, #0
 800414c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800414e:	4b8b      	ldr	r3, [pc, #556]	; (800437c <HAL_RCC_OscConfig+0x4c4>)
 8004150:	69db      	ldr	r3, [r3, #28]
 8004152:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004156:	2b00      	cmp	r3, #0
 8004158:	d10d      	bne.n	8004176 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800415a:	4b88      	ldr	r3, [pc, #544]	; (800437c <HAL_RCC_OscConfig+0x4c4>)
 800415c:	69db      	ldr	r3, [r3, #28]
 800415e:	4a87      	ldr	r2, [pc, #540]	; (800437c <HAL_RCC_OscConfig+0x4c4>)
 8004160:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004164:	61d3      	str	r3, [r2, #28]
 8004166:	4b85      	ldr	r3, [pc, #532]	; (800437c <HAL_RCC_OscConfig+0x4c4>)
 8004168:	69db      	ldr	r3, [r3, #28]
 800416a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800416e:	60bb      	str	r3, [r7, #8]
 8004170:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004172:	2301      	movs	r3, #1
 8004174:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004176:	4b82      	ldr	r3, [pc, #520]	; (8004380 <HAL_RCC_OscConfig+0x4c8>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800417e:	2b00      	cmp	r3, #0
 8004180:	d118      	bne.n	80041b4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004182:	4b7f      	ldr	r3, [pc, #508]	; (8004380 <HAL_RCC_OscConfig+0x4c8>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a7e      	ldr	r2, [pc, #504]	; (8004380 <HAL_RCC_OscConfig+0x4c8>)
 8004188:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800418c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800418e:	f7fe fc41 	bl	8002a14 <HAL_GetTick>
 8004192:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004194:	e008      	b.n	80041a8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004196:	f7fe fc3d 	bl	8002a14 <HAL_GetTick>
 800419a:	4602      	mov	r2, r0
 800419c:	693b      	ldr	r3, [r7, #16]
 800419e:	1ad3      	subs	r3, r2, r3
 80041a0:	2b64      	cmp	r3, #100	; 0x64
 80041a2:	d901      	bls.n	80041a8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80041a4:	2303      	movs	r3, #3
 80041a6:	e103      	b.n	80043b0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041a8:	4b75      	ldr	r3, [pc, #468]	; (8004380 <HAL_RCC_OscConfig+0x4c8>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d0f0      	beq.n	8004196 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	68db      	ldr	r3, [r3, #12]
 80041b8:	2b01      	cmp	r3, #1
 80041ba:	d106      	bne.n	80041ca <HAL_RCC_OscConfig+0x312>
 80041bc:	4b6f      	ldr	r3, [pc, #444]	; (800437c <HAL_RCC_OscConfig+0x4c4>)
 80041be:	6a1b      	ldr	r3, [r3, #32]
 80041c0:	4a6e      	ldr	r2, [pc, #440]	; (800437c <HAL_RCC_OscConfig+0x4c4>)
 80041c2:	f043 0301 	orr.w	r3, r3, #1
 80041c6:	6213      	str	r3, [r2, #32]
 80041c8:	e02d      	b.n	8004226 <HAL_RCC_OscConfig+0x36e>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	68db      	ldr	r3, [r3, #12]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d10c      	bne.n	80041ec <HAL_RCC_OscConfig+0x334>
 80041d2:	4b6a      	ldr	r3, [pc, #424]	; (800437c <HAL_RCC_OscConfig+0x4c4>)
 80041d4:	6a1b      	ldr	r3, [r3, #32]
 80041d6:	4a69      	ldr	r2, [pc, #420]	; (800437c <HAL_RCC_OscConfig+0x4c4>)
 80041d8:	f023 0301 	bic.w	r3, r3, #1
 80041dc:	6213      	str	r3, [r2, #32]
 80041de:	4b67      	ldr	r3, [pc, #412]	; (800437c <HAL_RCC_OscConfig+0x4c4>)
 80041e0:	6a1b      	ldr	r3, [r3, #32]
 80041e2:	4a66      	ldr	r2, [pc, #408]	; (800437c <HAL_RCC_OscConfig+0x4c4>)
 80041e4:	f023 0304 	bic.w	r3, r3, #4
 80041e8:	6213      	str	r3, [r2, #32]
 80041ea:	e01c      	b.n	8004226 <HAL_RCC_OscConfig+0x36e>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	68db      	ldr	r3, [r3, #12]
 80041f0:	2b05      	cmp	r3, #5
 80041f2:	d10c      	bne.n	800420e <HAL_RCC_OscConfig+0x356>
 80041f4:	4b61      	ldr	r3, [pc, #388]	; (800437c <HAL_RCC_OscConfig+0x4c4>)
 80041f6:	6a1b      	ldr	r3, [r3, #32]
 80041f8:	4a60      	ldr	r2, [pc, #384]	; (800437c <HAL_RCC_OscConfig+0x4c4>)
 80041fa:	f043 0304 	orr.w	r3, r3, #4
 80041fe:	6213      	str	r3, [r2, #32]
 8004200:	4b5e      	ldr	r3, [pc, #376]	; (800437c <HAL_RCC_OscConfig+0x4c4>)
 8004202:	6a1b      	ldr	r3, [r3, #32]
 8004204:	4a5d      	ldr	r2, [pc, #372]	; (800437c <HAL_RCC_OscConfig+0x4c4>)
 8004206:	f043 0301 	orr.w	r3, r3, #1
 800420a:	6213      	str	r3, [r2, #32]
 800420c:	e00b      	b.n	8004226 <HAL_RCC_OscConfig+0x36e>
 800420e:	4b5b      	ldr	r3, [pc, #364]	; (800437c <HAL_RCC_OscConfig+0x4c4>)
 8004210:	6a1b      	ldr	r3, [r3, #32]
 8004212:	4a5a      	ldr	r2, [pc, #360]	; (800437c <HAL_RCC_OscConfig+0x4c4>)
 8004214:	f023 0301 	bic.w	r3, r3, #1
 8004218:	6213      	str	r3, [r2, #32]
 800421a:	4b58      	ldr	r3, [pc, #352]	; (800437c <HAL_RCC_OscConfig+0x4c4>)
 800421c:	6a1b      	ldr	r3, [r3, #32]
 800421e:	4a57      	ldr	r2, [pc, #348]	; (800437c <HAL_RCC_OscConfig+0x4c4>)
 8004220:	f023 0304 	bic.w	r3, r3, #4
 8004224:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	68db      	ldr	r3, [r3, #12]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d015      	beq.n	800425a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800422e:	f7fe fbf1 	bl	8002a14 <HAL_GetTick>
 8004232:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004234:	e00a      	b.n	800424c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004236:	f7fe fbed 	bl	8002a14 <HAL_GetTick>
 800423a:	4602      	mov	r2, r0
 800423c:	693b      	ldr	r3, [r7, #16]
 800423e:	1ad3      	subs	r3, r2, r3
 8004240:	f241 3288 	movw	r2, #5000	; 0x1388
 8004244:	4293      	cmp	r3, r2
 8004246:	d901      	bls.n	800424c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004248:	2303      	movs	r3, #3
 800424a:	e0b1      	b.n	80043b0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800424c:	4b4b      	ldr	r3, [pc, #300]	; (800437c <HAL_RCC_OscConfig+0x4c4>)
 800424e:	6a1b      	ldr	r3, [r3, #32]
 8004250:	f003 0302 	and.w	r3, r3, #2
 8004254:	2b00      	cmp	r3, #0
 8004256:	d0ee      	beq.n	8004236 <HAL_RCC_OscConfig+0x37e>
 8004258:	e014      	b.n	8004284 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800425a:	f7fe fbdb 	bl	8002a14 <HAL_GetTick>
 800425e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004260:	e00a      	b.n	8004278 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004262:	f7fe fbd7 	bl	8002a14 <HAL_GetTick>
 8004266:	4602      	mov	r2, r0
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	1ad3      	subs	r3, r2, r3
 800426c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004270:	4293      	cmp	r3, r2
 8004272:	d901      	bls.n	8004278 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004274:	2303      	movs	r3, #3
 8004276:	e09b      	b.n	80043b0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004278:	4b40      	ldr	r3, [pc, #256]	; (800437c <HAL_RCC_OscConfig+0x4c4>)
 800427a:	6a1b      	ldr	r3, [r3, #32]
 800427c:	f003 0302 	and.w	r3, r3, #2
 8004280:	2b00      	cmp	r3, #0
 8004282:	d1ee      	bne.n	8004262 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004284:	7dfb      	ldrb	r3, [r7, #23]
 8004286:	2b01      	cmp	r3, #1
 8004288:	d105      	bne.n	8004296 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800428a:	4b3c      	ldr	r3, [pc, #240]	; (800437c <HAL_RCC_OscConfig+0x4c4>)
 800428c:	69db      	ldr	r3, [r3, #28]
 800428e:	4a3b      	ldr	r2, [pc, #236]	; (800437c <HAL_RCC_OscConfig+0x4c4>)
 8004290:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004294:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	69db      	ldr	r3, [r3, #28]
 800429a:	2b00      	cmp	r3, #0
 800429c:	f000 8087 	beq.w	80043ae <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80042a0:	4b36      	ldr	r3, [pc, #216]	; (800437c <HAL_RCC_OscConfig+0x4c4>)
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	f003 030c 	and.w	r3, r3, #12
 80042a8:	2b08      	cmp	r3, #8
 80042aa:	d061      	beq.n	8004370 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	69db      	ldr	r3, [r3, #28]
 80042b0:	2b02      	cmp	r3, #2
 80042b2:	d146      	bne.n	8004342 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042b4:	4b33      	ldr	r3, [pc, #204]	; (8004384 <HAL_RCC_OscConfig+0x4cc>)
 80042b6:	2200      	movs	r2, #0
 80042b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042ba:	f7fe fbab 	bl	8002a14 <HAL_GetTick>
 80042be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80042c0:	e008      	b.n	80042d4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042c2:	f7fe fba7 	bl	8002a14 <HAL_GetTick>
 80042c6:	4602      	mov	r2, r0
 80042c8:	693b      	ldr	r3, [r7, #16]
 80042ca:	1ad3      	subs	r3, r2, r3
 80042cc:	2b02      	cmp	r3, #2
 80042ce:	d901      	bls.n	80042d4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80042d0:	2303      	movs	r3, #3
 80042d2:	e06d      	b.n	80043b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80042d4:	4b29      	ldr	r3, [pc, #164]	; (800437c <HAL_RCC_OscConfig+0x4c4>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d1f0      	bne.n	80042c2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6a1b      	ldr	r3, [r3, #32]
 80042e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042e8:	d108      	bne.n	80042fc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80042ea:	4b24      	ldr	r3, [pc, #144]	; (800437c <HAL_RCC_OscConfig+0x4c4>)
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	689b      	ldr	r3, [r3, #8]
 80042f6:	4921      	ldr	r1, [pc, #132]	; (800437c <HAL_RCC_OscConfig+0x4c4>)
 80042f8:	4313      	orrs	r3, r2
 80042fa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80042fc:	4b1f      	ldr	r3, [pc, #124]	; (800437c <HAL_RCC_OscConfig+0x4c4>)
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6a19      	ldr	r1, [r3, #32]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800430c:	430b      	orrs	r3, r1
 800430e:	491b      	ldr	r1, [pc, #108]	; (800437c <HAL_RCC_OscConfig+0x4c4>)
 8004310:	4313      	orrs	r3, r2
 8004312:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004314:	4b1b      	ldr	r3, [pc, #108]	; (8004384 <HAL_RCC_OscConfig+0x4cc>)
 8004316:	2201      	movs	r2, #1
 8004318:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800431a:	f7fe fb7b 	bl	8002a14 <HAL_GetTick>
 800431e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004320:	e008      	b.n	8004334 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004322:	f7fe fb77 	bl	8002a14 <HAL_GetTick>
 8004326:	4602      	mov	r2, r0
 8004328:	693b      	ldr	r3, [r7, #16]
 800432a:	1ad3      	subs	r3, r2, r3
 800432c:	2b02      	cmp	r3, #2
 800432e:	d901      	bls.n	8004334 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004330:	2303      	movs	r3, #3
 8004332:	e03d      	b.n	80043b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004334:	4b11      	ldr	r3, [pc, #68]	; (800437c <HAL_RCC_OscConfig+0x4c4>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800433c:	2b00      	cmp	r3, #0
 800433e:	d0f0      	beq.n	8004322 <HAL_RCC_OscConfig+0x46a>
 8004340:	e035      	b.n	80043ae <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004342:	4b10      	ldr	r3, [pc, #64]	; (8004384 <HAL_RCC_OscConfig+0x4cc>)
 8004344:	2200      	movs	r2, #0
 8004346:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004348:	f7fe fb64 	bl	8002a14 <HAL_GetTick>
 800434c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800434e:	e008      	b.n	8004362 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004350:	f7fe fb60 	bl	8002a14 <HAL_GetTick>
 8004354:	4602      	mov	r2, r0
 8004356:	693b      	ldr	r3, [r7, #16]
 8004358:	1ad3      	subs	r3, r2, r3
 800435a:	2b02      	cmp	r3, #2
 800435c:	d901      	bls.n	8004362 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800435e:	2303      	movs	r3, #3
 8004360:	e026      	b.n	80043b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004362:	4b06      	ldr	r3, [pc, #24]	; (800437c <HAL_RCC_OscConfig+0x4c4>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800436a:	2b00      	cmp	r3, #0
 800436c:	d1f0      	bne.n	8004350 <HAL_RCC_OscConfig+0x498>
 800436e:	e01e      	b.n	80043ae <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	69db      	ldr	r3, [r3, #28]
 8004374:	2b01      	cmp	r3, #1
 8004376:	d107      	bne.n	8004388 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004378:	2301      	movs	r3, #1
 800437a:	e019      	b.n	80043b0 <HAL_RCC_OscConfig+0x4f8>
 800437c:	40021000 	.word	0x40021000
 8004380:	40007000 	.word	0x40007000
 8004384:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004388:	4b0b      	ldr	r3, [pc, #44]	; (80043b8 <HAL_RCC_OscConfig+0x500>)
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6a1b      	ldr	r3, [r3, #32]
 8004398:	429a      	cmp	r2, r3
 800439a:	d106      	bne.n	80043aa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043a6:	429a      	cmp	r2, r3
 80043a8:	d001      	beq.n	80043ae <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80043aa:	2301      	movs	r3, #1
 80043ac:	e000      	b.n	80043b0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80043ae:	2300      	movs	r3, #0
}
 80043b0:	4618      	mov	r0, r3
 80043b2:	3718      	adds	r7, #24
 80043b4:	46bd      	mov	sp, r7
 80043b6:	bd80      	pop	{r7, pc}
 80043b8:	40021000 	.word	0x40021000

080043bc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b084      	sub	sp, #16
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
 80043c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d101      	bne.n	80043d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80043cc:	2301      	movs	r3, #1
 80043ce:	e0d0      	b.n	8004572 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80043d0:	4b6a      	ldr	r3, [pc, #424]	; (800457c <HAL_RCC_ClockConfig+0x1c0>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f003 0307 	and.w	r3, r3, #7
 80043d8:	683a      	ldr	r2, [r7, #0]
 80043da:	429a      	cmp	r2, r3
 80043dc:	d910      	bls.n	8004400 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043de:	4b67      	ldr	r3, [pc, #412]	; (800457c <HAL_RCC_ClockConfig+0x1c0>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f023 0207 	bic.w	r2, r3, #7
 80043e6:	4965      	ldr	r1, [pc, #404]	; (800457c <HAL_RCC_ClockConfig+0x1c0>)
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	4313      	orrs	r3, r2
 80043ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80043ee:	4b63      	ldr	r3, [pc, #396]	; (800457c <HAL_RCC_ClockConfig+0x1c0>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f003 0307 	and.w	r3, r3, #7
 80043f6:	683a      	ldr	r2, [r7, #0]
 80043f8:	429a      	cmp	r2, r3
 80043fa:	d001      	beq.n	8004400 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80043fc:	2301      	movs	r3, #1
 80043fe:	e0b8      	b.n	8004572 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f003 0302 	and.w	r3, r3, #2
 8004408:	2b00      	cmp	r3, #0
 800440a:	d020      	beq.n	800444e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f003 0304 	and.w	r3, r3, #4
 8004414:	2b00      	cmp	r3, #0
 8004416:	d005      	beq.n	8004424 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004418:	4b59      	ldr	r3, [pc, #356]	; (8004580 <HAL_RCC_ClockConfig+0x1c4>)
 800441a:	685b      	ldr	r3, [r3, #4]
 800441c:	4a58      	ldr	r2, [pc, #352]	; (8004580 <HAL_RCC_ClockConfig+0x1c4>)
 800441e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004422:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f003 0308 	and.w	r3, r3, #8
 800442c:	2b00      	cmp	r3, #0
 800442e:	d005      	beq.n	800443c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004430:	4b53      	ldr	r3, [pc, #332]	; (8004580 <HAL_RCC_ClockConfig+0x1c4>)
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	4a52      	ldr	r2, [pc, #328]	; (8004580 <HAL_RCC_ClockConfig+0x1c4>)
 8004436:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800443a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800443c:	4b50      	ldr	r3, [pc, #320]	; (8004580 <HAL_RCC_ClockConfig+0x1c4>)
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	689b      	ldr	r3, [r3, #8]
 8004448:	494d      	ldr	r1, [pc, #308]	; (8004580 <HAL_RCC_ClockConfig+0x1c4>)
 800444a:	4313      	orrs	r3, r2
 800444c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f003 0301 	and.w	r3, r3, #1
 8004456:	2b00      	cmp	r3, #0
 8004458:	d040      	beq.n	80044dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	2b01      	cmp	r3, #1
 8004460:	d107      	bne.n	8004472 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004462:	4b47      	ldr	r3, [pc, #284]	; (8004580 <HAL_RCC_ClockConfig+0x1c4>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800446a:	2b00      	cmp	r3, #0
 800446c:	d115      	bne.n	800449a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800446e:	2301      	movs	r3, #1
 8004470:	e07f      	b.n	8004572 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	2b02      	cmp	r3, #2
 8004478:	d107      	bne.n	800448a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800447a:	4b41      	ldr	r3, [pc, #260]	; (8004580 <HAL_RCC_ClockConfig+0x1c4>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004482:	2b00      	cmp	r3, #0
 8004484:	d109      	bne.n	800449a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004486:	2301      	movs	r3, #1
 8004488:	e073      	b.n	8004572 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800448a:	4b3d      	ldr	r3, [pc, #244]	; (8004580 <HAL_RCC_ClockConfig+0x1c4>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f003 0302 	and.w	r3, r3, #2
 8004492:	2b00      	cmp	r3, #0
 8004494:	d101      	bne.n	800449a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004496:	2301      	movs	r3, #1
 8004498:	e06b      	b.n	8004572 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800449a:	4b39      	ldr	r3, [pc, #228]	; (8004580 <HAL_RCC_ClockConfig+0x1c4>)
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	f023 0203 	bic.w	r2, r3, #3
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	4936      	ldr	r1, [pc, #216]	; (8004580 <HAL_RCC_ClockConfig+0x1c4>)
 80044a8:	4313      	orrs	r3, r2
 80044aa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80044ac:	f7fe fab2 	bl	8002a14 <HAL_GetTick>
 80044b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044b2:	e00a      	b.n	80044ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044b4:	f7fe faae 	bl	8002a14 <HAL_GetTick>
 80044b8:	4602      	mov	r2, r0
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	1ad3      	subs	r3, r2, r3
 80044be:	f241 3288 	movw	r2, #5000	; 0x1388
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d901      	bls.n	80044ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80044c6:	2303      	movs	r3, #3
 80044c8:	e053      	b.n	8004572 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044ca:	4b2d      	ldr	r3, [pc, #180]	; (8004580 <HAL_RCC_ClockConfig+0x1c4>)
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	f003 020c 	and.w	r2, r3, #12
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	009b      	lsls	r3, r3, #2
 80044d8:	429a      	cmp	r2, r3
 80044da:	d1eb      	bne.n	80044b4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80044dc:	4b27      	ldr	r3, [pc, #156]	; (800457c <HAL_RCC_ClockConfig+0x1c0>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f003 0307 	and.w	r3, r3, #7
 80044e4:	683a      	ldr	r2, [r7, #0]
 80044e6:	429a      	cmp	r2, r3
 80044e8:	d210      	bcs.n	800450c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044ea:	4b24      	ldr	r3, [pc, #144]	; (800457c <HAL_RCC_ClockConfig+0x1c0>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f023 0207 	bic.w	r2, r3, #7
 80044f2:	4922      	ldr	r1, [pc, #136]	; (800457c <HAL_RCC_ClockConfig+0x1c0>)
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	4313      	orrs	r3, r2
 80044f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044fa:	4b20      	ldr	r3, [pc, #128]	; (800457c <HAL_RCC_ClockConfig+0x1c0>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f003 0307 	and.w	r3, r3, #7
 8004502:	683a      	ldr	r2, [r7, #0]
 8004504:	429a      	cmp	r2, r3
 8004506:	d001      	beq.n	800450c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004508:	2301      	movs	r3, #1
 800450a:	e032      	b.n	8004572 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f003 0304 	and.w	r3, r3, #4
 8004514:	2b00      	cmp	r3, #0
 8004516:	d008      	beq.n	800452a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004518:	4b19      	ldr	r3, [pc, #100]	; (8004580 <HAL_RCC_ClockConfig+0x1c4>)
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	68db      	ldr	r3, [r3, #12]
 8004524:	4916      	ldr	r1, [pc, #88]	; (8004580 <HAL_RCC_ClockConfig+0x1c4>)
 8004526:	4313      	orrs	r3, r2
 8004528:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f003 0308 	and.w	r3, r3, #8
 8004532:	2b00      	cmp	r3, #0
 8004534:	d009      	beq.n	800454a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004536:	4b12      	ldr	r3, [pc, #72]	; (8004580 <HAL_RCC_ClockConfig+0x1c4>)
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	691b      	ldr	r3, [r3, #16]
 8004542:	00db      	lsls	r3, r3, #3
 8004544:	490e      	ldr	r1, [pc, #56]	; (8004580 <HAL_RCC_ClockConfig+0x1c4>)
 8004546:	4313      	orrs	r3, r2
 8004548:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800454a:	f000 f821 	bl	8004590 <HAL_RCC_GetSysClockFreq>
 800454e:	4602      	mov	r2, r0
 8004550:	4b0b      	ldr	r3, [pc, #44]	; (8004580 <HAL_RCC_ClockConfig+0x1c4>)
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	091b      	lsrs	r3, r3, #4
 8004556:	f003 030f 	and.w	r3, r3, #15
 800455a:	490a      	ldr	r1, [pc, #40]	; (8004584 <HAL_RCC_ClockConfig+0x1c8>)
 800455c:	5ccb      	ldrb	r3, [r1, r3]
 800455e:	fa22 f303 	lsr.w	r3, r2, r3
 8004562:	4a09      	ldr	r2, [pc, #36]	; (8004588 <HAL_RCC_ClockConfig+0x1cc>)
 8004564:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004566:	4b09      	ldr	r3, [pc, #36]	; (800458c <HAL_RCC_ClockConfig+0x1d0>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4618      	mov	r0, r3
 800456c:	f7fe fa10 	bl	8002990 <HAL_InitTick>

  return HAL_OK;
 8004570:	2300      	movs	r3, #0
}
 8004572:	4618      	mov	r0, r3
 8004574:	3710      	adds	r7, #16
 8004576:	46bd      	mov	sp, r7
 8004578:	bd80      	pop	{r7, pc}
 800457a:	bf00      	nop
 800457c:	40022000 	.word	0x40022000
 8004580:	40021000 	.word	0x40021000
 8004584:	0800a74c 	.word	0x0800a74c
 8004588:	20000038 	.word	0x20000038
 800458c:	2000003c 	.word	0x2000003c

08004590 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004590:	b480      	push	{r7}
 8004592:	b087      	sub	sp, #28
 8004594:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004596:	2300      	movs	r3, #0
 8004598:	60fb      	str	r3, [r7, #12]
 800459a:	2300      	movs	r3, #0
 800459c:	60bb      	str	r3, [r7, #8]
 800459e:	2300      	movs	r3, #0
 80045a0:	617b      	str	r3, [r7, #20]
 80045a2:	2300      	movs	r3, #0
 80045a4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80045a6:	2300      	movs	r3, #0
 80045a8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80045aa:	4b1e      	ldr	r3, [pc, #120]	; (8004624 <HAL_RCC_GetSysClockFreq+0x94>)
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	f003 030c 	and.w	r3, r3, #12
 80045b6:	2b04      	cmp	r3, #4
 80045b8:	d002      	beq.n	80045c0 <HAL_RCC_GetSysClockFreq+0x30>
 80045ba:	2b08      	cmp	r3, #8
 80045bc:	d003      	beq.n	80045c6 <HAL_RCC_GetSysClockFreq+0x36>
 80045be:	e027      	b.n	8004610 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80045c0:	4b19      	ldr	r3, [pc, #100]	; (8004628 <HAL_RCC_GetSysClockFreq+0x98>)
 80045c2:	613b      	str	r3, [r7, #16]
      break;
 80045c4:	e027      	b.n	8004616 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	0c9b      	lsrs	r3, r3, #18
 80045ca:	f003 030f 	and.w	r3, r3, #15
 80045ce:	4a17      	ldr	r2, [pc, #92]	; (800462c <HAL_RCC_GetSysClockFreq+0x9c>)
 80045d0:	5cd3      	ldrb	r3, [r2, r3]
 80045d2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d010      	beq.n	8004600 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80045de:	4b11      	ldr	r3, [pc, #68]	; (8004624 <HAL_RCC_GetSysClockFreq+0x94>)
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	0c5b      	lsrs	r3, r3, #17
 80045e4:	f003 0301 	and.w	r3, r3, #1
 80045e8:	4a11      	ldr	r2, [pc, #68]	; (8004630 <HAL_RCC_GetSysClockFreq+0xa0>)
 80045ea:	5cd3      	ldrb	r3, [r2, r3]
 80045ec:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	4a0d      	ldr	r2, [pc, #52]	; (8004628 <HAL_RCC_GetSysClockFreq+0x98>)
 80045f2:	fb03 f202 	mul.w	r2, r3, r2
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80045fc:	617b      	str	r3, [r7, #20]
 80045fe:	e004      	b.n	800460a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	4a0c      	ldr	r2, [pc, #48]	; (8004634 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004604:	fb02 f303 	mul.w	r3, r2, r3
 8004608:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800460a:	697b      	ldr	r3, [r7, #20]
 800460c:	613b      	str	r3, [r7, #16]
      break;
 800460e:	e002      	b.n	8004616 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004610:	4b05      	ldr	r3, [pc, #20]	; (8004628 <HAL_RCC_GetSysClockFreq+0x98>)
 8004612:	613b      	str	r3, [r7, #16]
      break;
 8004614:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004616:	693b      	ldr	r3, [r7, #16]
}
 8004618:	4618      	mov	r0, r3
 800461a:	371c      	adds	r7, #28
 800461c:	46bd      	mov	sp, r7
 800461e:	bc80      	pop	{r7}
 8004620:	4770      	bx	lr
 8004622:	bf00      	nop
 8004624:	40021000 	.word	0x40021000
 8004628:	007a1200 	.word	0x007a1200
 800462c:	0800a764 	.word	0x0800a764
 8004630:	0800a774 	.word	0x0800a774
 8004634:	003d0900 	.word	0x003d0900

08004638 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004638:	b480      	push	{r7}
 800463a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800463c:	4b02      	ldr	r3, [pc, #8]	; (8004648 <HAL_RCC_GetHCLKFreq+0x10>)
 800463e:	681b      	ldr	r3, [r3, #0]
}
 8004640:	4618      	mov	r0, r3
 8004642:	46bd      	mov	sp, r7
 8004644:	bc80      	pop	{r7}
 8004646:	4770      	bx	lr
 8004648:	20000038 	.word	0x20000038

0800464c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004650:	f7ff fff2 	bl	8004638 <HAL_RCC_GetHCLKFreq>
 8004654:	4602      	mov	r2, r0
 8004656:	4b05      	ldr	r3, [pc, #20]	; (800466c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	0a1b      	lsrs	r3, r3, #8
 800465c:	f003 0307 	and.w	r3, r3, #7
 8004660:	4903      	ldr	r1, [pc, #12]	; (8004670 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004662:	5ccb      	ldrb	r3, [r1, r3]
 8004664:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004668:	4618      	mov	r0, r3
 800466a:	bd80      	pop	{r7, pc}
 800466c:	40021000 	.word	0x40021000
 8004670:	0800a75c 	.word	0x0800a75c

08004674 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004678:	f7ff ffde 	bl	8004638 <HAL_RCC_GetHCLKFreq>
 800467c:	4602      	mov	r2, r0
 800467e:	4b05      	ldr	r3, [pc, #20]	; (8004694 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	0adb      	lsrs	r3, r3, #11
 8004684:	f003 0307 	and.w	r3, r3, #7
 8004688:	4903      	ldr	r1, [pc, #12]	; (8004698 <HAL_RCC_GetPCLK2Freq+0x24>)
 800468a:	5ccb      	ldrb	r3, [r1, r3]
 800468c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004690:	4618      	mov	r0, r3
 8004692:	bd80      	pop	{r7, pc}
 8004694:	40021000 	.word	0x40021000
 8004698:	0800a75c 	.word	0x0800a75c

0800469c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800469c:	b480      	push	{r7}
 800469e:	b085      	sub	sp, #20
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80046a4:	4b0a      	ldr	r3, [pc, #40]	; (80046d0 <RCC_Delay+0x34>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4a0a      	ldr	r2, [pc, #40]	; (80046d4 <RCC_Delay+0x38>)
 80046aa:	fba2 2303 	umull	r2, r3, r2, r3
 80046ae:	0a5b      	lsrs	r3, r3, #9
 80046b0:	687a      	ldr	r2, [r7, #4]
 80046b2:	fb02 f303 	mul.w	r3, r2, r3
 80046b6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80046b8:	bf00      	nop
  }
  while (Delay --);
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	1e5a      	subs	r2, r3, #1
 80046be:	60fa      	str	r2, [r7, #12]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d1f9      	bne.n	80046b8 <RCC_Delay+0x1c>
}
 80046c4:	bf00      	nop
 80046c6:	bf00      	nop
 80046c8:	3714      	adds	r7, #20
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bc80      	pop	{r7}
 80046ce:	4770      	bx	lr
 80046d0:	20000038 	.word	0x20000038
 80046d4:	10624dd3 	.word	0x10624dd3

080046d8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b082      	sub	sp, #8
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d101      	bne.n	80046ea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80046e6:	2301      	movs	r3, #1
 80046e8:	e076      	b.n	80047d8 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d108      	bne.n	8004704 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80046fa:	d009      	beq.n	8004710 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2200      	movs	r2, #0
 8004700:	61da      	str	r2, [r3, #28]
 8004702:	e005      	b.n	8004710 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2200      	movs	r2, #0
 8004708:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2200      	movs	r2, #0
 800470e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2200      	movs	r2, #0
 8004714:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800471c:	b2db      	uxtb	r3, r3
 800471e:	2b00      	cmp	r3, #0
 8004720:	d106      	bne.n	8004730 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2200      	movs	r2, #0
 8004726:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800472a:	6878      	ldr	r0, [r7, #4]
 800472c:	f7fd fe26 	bl	800237c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2202      	movs	r2, #2
 8004734:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	681a      	ldr	r2, [r3, #0]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004746:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	689b      	ldr	r3, [r3, #8]
 8004754:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004758:	431a      	orrs	r2, r3
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	68db      	ldr	r3, [r3, #12]
 800475e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004762:	431a      	orrs	r2, r3
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	691b      	ldr	r3, [r3, #16]
 8004768:	f003 0302 	and.w	r3, r3, #2
 800476c:	431a      	orrs	r2, r3
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	695b      	ldr	r3, [r3, #20]
 8004772:	f003 0301 	and.w	r3, r3, #1
 8004776:	431a      	orrs	r2, r3
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	699b      	ldr	r3, [r3, #24]
 800477c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004780:	431a      	orrs	r2, r3
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	69db      	ldr	r3, [r3, #28]
 8004786:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800478a:	431a      	orrs	r2, r3
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6a1b      	ldr	r3, [r3, #32]
 8004790:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004794:	ea42 0103 	orr.w	r1, r2, r3
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800479c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	430a      	orrs	r2, r1
 80047a6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	699b      	ldr	r3, [r3, #24]
 80047ac:	0c1a      	lsrs	r2, r3, #16
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f002 0204 	and.w	r2, r2, #4
 80047b6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	69da      	ldr	r2, [r3, #28]
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80047c6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2200      	movs	r2, #0
 80047cc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2201      	movs	r2, #1
 80047d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80047d6:	2300      	movs	r3, #0
}
 80047d8:	4618      	mov	r0, r3
 80047da:	3708      	adds	r7, #8
 80047dc:	46bd      	mov	sp, r7
 80047de:	bd80      	pop	{r7, pc}

080047e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b082      	sub	sp, #8
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d101      	bne.n	80047f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80047ee:	2301      	movs	r3, #1
 80047f0:	e041      	b.n	8004876 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047f8:	b2db      	uxtb	r3, r3
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d106      	bne.n	800480c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2200      	movs	r2, #0
 8004802:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004806:	6878      	ldr	r0, [r7, #4]
 8004808:	f7fd fe78 	bl	80024fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2202      	movs	r2, #2
 8004810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681a      	ldr	r2, [r3, #0]
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	3304      	adds	r3, #4
 800481c:	4619      	mov	r1, r3
 800481e:	4610      	mov	r0, r2
 8004820:	f000 fe3e 	bl	80054a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2201      	movs	r2, #1
 8004828:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2201      	movs	r2, #1
 8004830:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2201      	movs	r2, #1
 8004838:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2201      	movs	r2, #1
 8004840:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2201      	movs	r2, #1
 8004848:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2201      	movs	r2, #1
 8004850:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2201      	movs	r2, #1
 8004858:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2201      	movs	r2, #1
 8004860:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2201      	movs	r2, #1
 8004868:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2201      	movs	r2, #1
 8004870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004874:	2300      	movs	r3, #0
}
 8004876:	4618      	mov	r0, r3
 8004878:	3708      	adds	r7, #8
 800487a:	46bd      	mov	sp, r7
 800487c:	bd80      	pop	{r7, pc}
	...

08004880 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004880:	b480      	push	{r7}
 8004882:	b085      	sub	sp, #20
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800488e:	b2db      	uxtb	r3, r3
 8004890:	2b01      	cmp	r3, #1
 8004892:	d001      	beq.n	8004898 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004894:	2301      	movs	r3, #1
 8004896:	e03a      	b.n	800490e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2202      	movs	r2, #2
 800489c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	68da      	ldr	r2, [r3, #12]
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f042 0201 	orr.w	r2, r2, #1
 80048ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a18      	ldr	r2, [pc, #96]	; (8004918 <HAL_TIM_Base_Start_IT+0x98>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d00e      	beq.n	80048d8 <HAL_TIM_Base_Start_IT+0x58>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048c2:	d009      	beq.n	80048d8 <HAL_TIM_Base_Start_IT+0x58>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a14      	ldr	r2, [pc, #80]	; (800491c <HAL_TIM_Base_Start_IT+0x9c>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d004      	beq.n	80048d8 <HAL_TIM_Base_Start_IT+0x58>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4a13      	ldr	r2, [pc, #76]	; (8004920 <HAL_TIM_Base_Start_IT+0xa0>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d111      	bne.n	80048fc <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	689b      	ldr	r3, [r3, #8]
 80048de:	f003 0307 	and.w	r3, r3, #7
 80048e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	2b06      	cmp	r3, #6
 80048e8:	d010      	beq.n	800490c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	681a      	ldr	r2, [r3, #0]
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f042 0201 	orr.w	r2, r2, #1
 80048f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048fa:	e007      	b.n	800490c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	681a      	ldr	r2, [r3, #0]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f042 0201 	orr.w	r2, r2, #1
 800490a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800490c:	2300      	movs	r3, #0
}
 800490e:	4618      	mov	r0, r3
 8004910:	3714      	adds	r7, #20
 8004912:	46bd      	mov	sp, r7
 8004914:	bc80      	pop	{r7}
 8004916:	4770      	bx	lr
 8004918:	40012c00 	.word	0x40012c00
 800491c:	40000400 	.word	0x40000400
 8004920:	40000800 	.word	0x40000800

08004924 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b082      	sub	sp, #8
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d101      	bne.n	8004936 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004932:	2301      	movs	r3, #1
 8004934:	e041      	b.n	80049ba <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800493c:	b2db      	uxtb	r3, r3
 800493e:	2b00      	cmp	r3, #0
 8004940:	d106      	bne.n	8004950 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2200      	movs	r2, #0
 8004946:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800494a:	6878      	ldr	r0, [r7, #4]
 800494c:	f7fd fd60 	bl	8002410 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2202      	movs	r2, #2
 8004954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681a      	ldr	r2, [r3, #0]
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	3304      	adds	r3, #4
 8004960:	4619      	mov	r1, r3
 8004962:	4610      	mov	r0, r2
 8004964:	f000 fd9c 	bl	80054a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2201      	movs	r2, #1
 800496c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2201      	movs	r2, #1
 8004974:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2201      	movs	r2, #1
 800497c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2201      	movs	r2, #1
 8004984:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2201      	movs	r2, #1
 800498c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2201      	movs	r2, #1
 8004994:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2201      	movs	r2, #1
 800499c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2201      	movs	r2, #1
 80049a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2201      	movs	r2, #1
 80049ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2201      	movs	r2, #1
 80049b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80049b8:	2300      	movs	r3, #0
}
 80049ba:	4618      	mov	r0, r3
 80049bc:	3708      	adds	r7, #8
 80049be:	46bd      	mov	sp, r7
 80049c0:	bd80      	pop	{r7, pc}
	...

080049c4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b084      	sub	sp, #16
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
 80049cc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d109      	bne.n	80049e8 <HAL_TIM_PWM_Start+0x24>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80049da:	b2db      	uxtb	r3, r3
 80049dc:	2b01      	cmp	r3, #1
 80049de:	bf14      	ite	ne
 80049e0:	2301      	movne	r3, #1
 80049e2:	2300      	moveq	r3, #0
 80049e4:	b2db      	uxtb	r3, r3
 80049e6:	e022      	b.n	8004a2e <HAL_TIM_PWM_Start+0x6a>
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	2b04      	cmp	r3, #4
 80049ec:	d109      	bne.n	8004a02 <HAL_TIM_PWM_Start+0x3e>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80049f4:	b2db      	uxtb	r3, r3
 80049f6:	2b01      	cmp	r3, #1
 80049f8:	bf14      	ite	ne
 80049fa:	2301      	movne	r3, #1
 80049fc:	2300      	moveq	r3, #0
 80049fe:	b2db      	uxtb	r3, r3
 8004a00:	e015      	b.n	8004a2e <HAL_TIM_PWM_Start+0x6a>
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	2b08      	cmp	r3, #8
 8004a06:	d109      	bne.n	8004a1c <HAL_TIM_PWM_Start+0x58>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004a0e:	b2db      	uxtb	r3, r3
 8004a10:	2b01      	cmp	r3, #1
 8004a12:	bf14      	ite	ne
 8004a14:	2301      	movne	r3, #1
 8004a16:	2300      	moveq	r3, #0
 8004a18:	b2db      	uxtb	r3, r3
 8004a1a:	e008      	b.n	8004a2e <HAL_TIM_PWM_Start+0x6a>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a22:	b2db      	uxtb	r3, r3
 8004a24:	2b01      	cmp	r3, #1
 8004a26:	bf14      	ite	ne
 8004a28:	2301      	movne	r3, #1
 8004a2a:	2300      	moveq	r3, #0
 8004a2c:	b2db      	uxtb	r3, r3
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d001      	beq.n	8004a36 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004a32:	2301      	movs	r3, #1
 8004a34:	e05e      	b.n	8004af4 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d104      	bne.n	8004a46 <HAL_TIM_PWM_Start+0x82>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2202      	movs	r2, #2
 8004a40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a44:	e013      	b.n	8004a6e <HAL_TIM_PWM_Start+0xaa>
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	2b04      	cmp	r3, #4
 8004a4a:	d104      	bne.n	8004a56 <HAL_TIM_PWM_Start+0x92>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2202      	movs	r2, #2
 8004a50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a54:	e00b      	b.n	8004a6e <HAL_TIM_PWM_Start+0xaa>
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	2b08      	cmp	r3, #8
 8004a5a:	d104      	bne.n	8004a66 <HAL_TIM_PWM_Start+0xa2>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2202      	movs	r2, #2
 8004a60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a64:	e003      	b.n	8004a6e <HAL_TIM_PWM_Start+0xaa>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2202      	movs	r2, #2
 8004a6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	2201      	movs	r2, #1
 8004a74:	6839      	ldr	r1, [r7, #0]
 8004a76:	4618      	mov	r0, r3
 8004a78:	f000 ff92 	bl	80059a0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a1e      	ldr	r2, [pc, #120]	; (8004afc <HAL_TIM_PWM_Start+0x138>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d107      	bne.n	8004a96 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004a94:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4a18      	ldr	r2, [pc, #96]	; (8004afc <HAL_TIM_PWM_Start+0x138>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d00e      	beq.n	8004abe <HAL_TIM_PWM_Start+0xfa>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004aa8:	d009      	beq.n	8004abe <HAL_TIM_PWM_Start+0xfa>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4a14      	ldr	r2, [pc, #80]	; (8004b00 <HAL_TIM_PWM_Start+0x13c>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d004      	beq.n	8004abe <HAL_TIM_PWM_Start+0xfa>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4a12      	ldr	r2, [pc, #72]	; (8004b04 <HAL_TIM_PWM_Start+0x140>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d111      	bne.n	8004ae2 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	689b      	ldr	r3, [r3, #8]
 8004ac4:	f003 0307 	and.w	r3, r3, #7
 8004ac8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	2b06      	cmp	r3, #6
 8004ace:	d010      	beq.n	8004af2 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	681a      	ldr	r2, [r3, #0]
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f042 0201 	orr.w	r2, r2, #1
 8004ade:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ae0:	e007      	b.n	8004af2 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	681a      	ldr	r2, [r3, #0]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f042 0201 	orr.w	r2, r2, #1
 8004af0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004af2:	2300      	movs	r3, #0
}
 8004af4:	4618      	mov	r0, r3
 8004af6:	3710      	adds	r7, #16
 8004af8:	46bd      	mov	sp, r7
 8004afa:	bd80      	pop	{r7, pc}
 8004afc:	40012c00 	.word	0x40012c00
 8004b00:	40000400 	.word	0x40000400
 8004b04:	40000800 	.word	0x40000800

08004b08 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b084      	sub	sp, #16
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
 8004b10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b12:	2300      	movs	r3, #0
 8004b14:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d109      	bne.n	8004b30 <HAL_TIM_PWM_Start_IT+0x28>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b22:	b2db      	uxtb	r3, r3
 8004b24:	2b01      	cmp	r3, #1
 8004b26:	bf14      	ite	ne
 8004b28:	2301      	movne	r3, #1
 8004b2a:	2300      	moveq	r3, #0
 8004b2c:	b2db      	uxtb	r3, r3
 8004b2e:	e022      	b.n	8004b76 <HAL_TIM_PWM_Start_IT+0x6e>
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	2b04      	cmp	r3, #4
 8004b34:	d109      	bne.n	8004b4a <HAL_TIM_PWM_Start_IT+0x42>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004b3c:	b2db      	uxtb	r3, r3
 8004b3e:	2b01      	cmp	r3, #1
 8004b40:	bf14      	ite	ne
 8004b42:	2301      	movne	r3, #1
 8004b44:	2300      	moveq	r3, #0
 8004b46:	b2db      	uxtb	r3, r3
 8004b48:	e015      	b.n	8004b76 <HAL_TIM_PWM_Start_IT+0x6e>
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	2b08      	cmp	r3, #8
 8004b4e:	d109      	bne.n	8004b64 <HAL_TIM_PWM_Start_IT+0x5c>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004b56:	b2db      	uxtb	r3, r3
 8004b58:	2b01      	cmp	r3, #1
 8004b5a:	bf14      	ite	ne
 8004b5c:	2301      	movne	r3, #1
 8004b5e:	2300      	moveq	r3, #0
 8004b60:	b2db      	uxtb	r3, r3
 8004b62:	e008      	b.n	8004b76 <HAL_TIM_PWM_Start_IT+0x6e>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b6a:	b2db      	uxtb	r3, r3
 8004b6c:	2b01      	cmp	r3, #1
 8004b6e:	bf14      	ite	ne
 8004b70:	2301      	movne	r3, #1
 8004b72:	2300      	moveq	r3, #0
 8004b74:	b2db      	uxtb	r3, r3
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d001      	beq.n	8004b7e <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	e0a9      	b.n	8004cd2 <HAL_TIM_PWM_Start_IT+0x1ca>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d104      	bne.n	8004b8e <HAL_TIM_PWM_Start_IT+0x86>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2202      	movs	r2, #2
 8004b88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b8c:	e013      	b.n	8004bb6 <HAL_TIM_PWM_Start_IT+0xae>
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	2b04      	cmp	r3, #4
 8004b92:	d104      	bne.n	8004b9e <HAL_TIM_PWM_Start_IT+0x96>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2202      	movs	r2, #2
 8004b98:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b9c:	e00b      	b.n	8004bb6 <HAL_TIM_PWM_Start_IT+0xae>
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	2b08      	cmp	r3, #8
 8004ba2:	d104      	bne.n	8004bae <HAL_TIM_PWM_Start_IT+0xa6>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2202      	movs	r2, #2
 8004ba8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004bac:	e003      	b.n	8004bb6 <HAL_TIM_PWM_Start_IT+0xae>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2202      	movs	r2, #2
 8004bb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	2b0c      	cmp	r3, #12
 8004bba:	d841      	bhi.n	8004c40 <HAL_TIM_PWM_Start_IT+0x138>
 8004bbc:	a201      	add	r2, pc, #4	; (adr r2, 8004bc4 <HAL_TIM_PWM_Start_IT+0xbc>)
 8004bbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bc2:	bf00      	nop
 8004bc4:	08004bf9 	.word	0x08004bf9
 8004bc8:	08004c41 	.word	0x08004c41
 8004bcc:	08004c41 	.word	0x08004c41
 8004bd0:	08004c41 	.word	0x08004c41
 8004bd4:	08004c0b 	.word	0x08004c0b
 8004bd8:	08004c41 	.word	0x08004c41
 8004bdc:	08004c41 	.word	0x08004c41
 8004be0:	08004c41 	.word	0x08004c41
 8004be4:	08004c1d 	.word	0x08004c1d
 8004be8:	08004c41 	.word	0x08004c41
 8004bec:	08004c41 	.word	0x08004c41
 8004bf0:	08004c41 	.word	0x08004c41
 8004bf4:	08004c2f 	.word	0x08004c2f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	68da      	ldr	r2, [r3, #12]
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f042 0202 	orr.w	r2, r2, #2
 8004c06:	60da      	str	r2, [r3, #12]
      break;
 8004c08:	e01d      	b.n	8004c46 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	68da      	ldr	r2, [r3, #12]
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f042 0204 	orr.w	r2, r2, #4
 8004c18:	60da      	str	r2, [r3, #12]
      break;
 8004c1a:	e014      	b.n	8004c46 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	68da      	ldr	r2, [r3, #12]
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f042 0208 	orr.w	r2, r2, #8
 8004c2a:	60da      	str	r2, [r3, #12]
      break;
 8004c2c:	e00b      	b.n	8004c46 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	68da      	ldr	r2, [r3, #12]
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f042 0210 	orr.w	r2, r2, #16
 8004c3c:	60da      	str	r2, [r3, #12]
      break;
 8004c3e:	e002      	b.n	8004c46 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8004c40:	2301      	movs	r3, #1
 8004c42:	73fb      	strb	r3, [r7, #15]
      break;
 8004c44:	bf00      	nop
  }

  if (status == HAL_OK)
 8004c46:	7bfb      	ldrb	r3, [r7, #15]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d141      	bne.n	8004cd0 <HAL_TIM_PWM_Start_IT+0x1c8>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	2201      	movs	r2, #1
 8004c52:	6839      	ldr	r1, [r7, #0]
 8004c54:	4618      	mov	r0, r3
 8004c56:	f000 fea3 	bl	80059a0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4a1f      	ldr	r2, [pc, #124]	; (8004cdc <HAL_TIM_PWM_Start_IT+0x1d4>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d107      	bne.n	8004c74 <HAL_TIM_PWM_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004c72:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4a18      	ldr	r2, [pc, #96]	; (8004cdc <HAL_TIM_PWM_Start_IT+0x1d4>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d00e      	beq.n	8004c9c <HAL_TIM_PWM_Start_IT+0x194>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c86:	d009      	beq.n	8004c9c <HAL_TIM_PWM_Start_IT+0x194>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4a14      	ldr	r2, [pc, #80]	; (8004ce0 <HAL_TIM_PWM_Start_IT+0x1d8>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d004      	beq.n	8004c9c <HAL_TIM_PWM_Start_IT+0x194>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4a13      	ldr	r2, [pc, #76]	; (8004ce4 <HAL_TIM_PWM_Start_IT+0x1dc>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d111      	bne.n	8004cc0 <HAL_TIM_PWM_Start_IT+0x1b8>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	689b      	ldr	r3, [r3, #8]
 8004ca2:	f003 0307 	and.w	r3, r3, #7
 8004ca6:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ca8:	68bb      	ldr	r3, [r7, #8]
 8004caa:	2b06      	cmp	r3, #6
 8004cac:	d010      	beq.n	8004cd0 <HAL_TIM_PWM_Start_IT+0x1c8>
      {
        __HAL_TIM_ENABLE(htim);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	681a      	ldr	r2, [r3, #0]
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f042 0201 	orr.w	r2, r2, #1
 8004cbc:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cbe:	e007      	b.n	8004cd0 <HAL_TIM_PWM_Start_IT+0x1c8>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	681a      	ldr	r2, [r3, #0]
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f042 0201 	orr.w	r2, r2, #1
 8004cce:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8004cd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	3710      	adds	r7, #16
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	bd80      	pop	{r7, pc}
 8004cda:	bf00      	nop
 8004cdc:	40012c00 	.word	0x40012c00
 8004ce0:	40000400 	.word	0x40000400
 8004ce4:	40000800 	.word	0x40000800

08004ce8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b086      	sub	sp, #24
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
 8004cf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d101      	bne.n	8004cfc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	e093      	b.n	8004e24 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d02:	b2db      	uxtb	r3, r3
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d106      	bne.n	8004d16 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004d10:	6878      	ldr	r0, [r7, #4]
 8004d12:	f7fd fbaf 	bl	8002474 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2202      	movs	r2, #2
 8004d1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	689b      	ldr	r3, [r3, #8]
 8004d24:	687a      	ldr	r2, [r7, #4]
 8004d26:	6812      	ldr	r2, [r2, #0]
 8004d28:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004d2c:	f023 0307 	bic.w	r3, r3, #7
 8004d30:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681a      	ldr	r2, [r3, #0]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	3304      	adds	r3, #4
 8004d3a:	4619      	mov	r1, r3
 8004d3c:	4610      	mov	r0, r2
 8004d3e:	f000 fbaf 	bl	80054a0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	689b      	ldr	r3, [r3, #8]
 8004d48:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	699b      	ldr	r3, [r3, #24]
 8004d50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	6a1b      	ldr	r3, [r3, #32]
 8004d58:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	697a      	ldr	r2, [r7, #20]
 8004d60:	4313      	orrs	r3, r2
 8004d62:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004d64:	693b      	ldr	r3, [r7, #16]
 8004d66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d6a:	f023 0303 	bic.w	r3, r3, #3
 8004d6e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	689a      	ldr	r2, [r3, #8]
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	699b      	ldr	r3, [r3, #24]
 8004d78:	021b      	lsls	r3, r3, #8
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	693a      	ldr	r2, [r7, #16]
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004d82:	693b      	ldr	r3, [r7, #16]
 8004d84:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004d88:	f023 030c 	bic.w	r3, r3, #12
 8004d8c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004d8e:	693b      	ldr	r3, [r7, #16]
 8004d90:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004d94:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004d98:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	68da      	ldr	r2, [r3, #12]
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	69db      	ldr	r3, [r3, #28]
 8004da2:	021b      	lsls	r3, r3, #8
 8004da4:	4313      	orrs	r3, r2
 8004da6:	693a      	ldr	r2, [r7, #16]
 8004da8:	4313      	orrs	r3, r2
 8004daa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	691b      	ldr	r3, [r3, #16]
 8004db0:	011a      	lsls	r2, r3, #4
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	6a1b      	ldr	r3, [r3, #32]
 8004db6:	031b      	lsls	r3, r3, #12
 8004db8:	4313      	orrs	r3, r2
 8004dba:	693a      	ldr	r2, [r7, #16]
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004dc6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	685a      	ldr	r2, [r3, #4]
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	695b      	ldr	r3, [r3, #20]
 8004dd0:	011b      	lsls	r3, r3, #4
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	68fa      	ldr	r2, [r7, #12]
 8004dd6:	4313      	orrs	r3, r2
 8004dd8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	697a      	ldr	r2, [r7, #20]
 8004de0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	693a      	ldr	r2, [r7, #16]
 8004de8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	68fa      	ldr	r2, [r7, #12]
 8004df0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2201      	movs	r2, #1
 8004df6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2201      	movs	r2, #1
 8004dfe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2201      	movs	r2, #1
 8004e06:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2201      	movs	r2, #1
 8004e0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2201      	movs	r2, #1
 8004e16:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2201      	movs	r2, #1
 8004e1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e22:	2300      	movs	r3, #0
}
 8004e24:	4618      	mov	r0, r3
 8004e26:	3718      	adds	r7, #24
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	bd80      	pop	{r7, pc}

08004e2c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b084      	sub	sp, #16
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
 8004e34:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e3c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004e44:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004e4c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004e54:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d110      	bne.n	8004e7e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004e5c:	7bfb      	ldrb	r3, [r7, #15]
 8004e5e:	2b01      	cmp	r3, #1
 8004e60:	d102      	bne.n	8004e68 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004e62:	7b7b      	ldrb	r3, [r7, #13]
 8004e64:	2b01      	cmp	r3, #1
 8004e66:	d001      	beq.n	8004e6c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004e68:	2301      	movs	r3, #1
 8004e6a:	e069      	b.n	8004f40 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2202      	movs	r2, #2
 8004e70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2202      	movs	r2, #2
 8004e78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e7c:	e031      	b.n	8004ee2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	2b04      	cmp	r3, #4
 8004e82:	d110      	bne.n	8004ea6 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004e84:	7bbb      	ldrb	r3, [r7, #14]
 8004e86:	2b01      	cmp	r3, #1
 8004e88:	d102      	bne.n	8004e90 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004e8a:	7b3b      	ldrb	r3, [r7, #12]
 8004e8c:	2b01      	cmp	r3, #1
 8004e8e:	d001      	beq.n	8004e94 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004e90:	2301      	movs	r3, #1
 8004e92:	e055      	b.n	8004f40 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2202      	movs	r2, #2
 8004e98:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2202      	movs	r2, #2
 8004ea0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004ea4:	e01d      	b.n	8004ee2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004ea6:	7bfb      	ldrb	r3, [r7, #15]
 8004ea8:	2b01      	cmp	r3, #1
 8004eaa:	d108      	bne.n	8004ebe <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004eac:	7bbb      	ldrb	r3, [r7, #14]
 8004eae:	2b01      	cmp	r3, #1
 8004eb0:	d105      	bne.n	8004ebe <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004eb2:	7b7b      	ldrb	r3, [r7, #13]
 8004eb4:	2b01      	cmp	r3, #1
 8004eb6:	d102      	bne.n	8004ebe <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004eb8:	7b3b      	ldrb	r3, [r7, #12]
 8004eba:	2b01      	cmp	r3, #1
 8004ebc:	d001      	beq.n	8004ec2 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	e03e      	b.n	8004f40 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2202      	movs	r2, #2
 8004ec6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2202      	movs	r2, #2
 8004ece:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2202      	movs	r2, #2
 8004ed6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2202      	movs	r2, #2
 8004ede:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d003      	beq.n	8004ef0 <HAL_TIM_Encoder_Start+0xc4>
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	2b04      	cmp	r3, #4
 8004eec:	d008      	beq.n	8004f00 <HAL_TIM_Encoder_Start+0xd4>
 8004eee:	e00f      	b.n	8004f10 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	2201      	movs	r2, #1
 8004ef6:	2100      	movs	r1, #0
 8004ef8:	4618      	mov	r0, r3
 8004efa:	f000 fd51 	bl	80059a0 <TIM_CCxChannelCmd>
      break;
 8004efe:	e016      	b.n	8004f2e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	2201      	movs	r2, #1
 8004f06:	2104      	movs	r1, #4
 8004f08:	4618      	mov	r0, r3
 8004f0a:	f000 fd49 	bl	80059a0 <TIM_CCxChannelCmd>
      break;
 8004f0e:	e00e      	b.n	8004f2e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	2201      	movs	r2, #1
 8004f16:	2100      	movs	r1, #0
 8004f18:	4618      	mov	r0, r3
 8004f1a:	f000 fd41 	bl	80059a0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	2201      	movs	r2, #1
 8004f24:	2104      	movs	r1, #4
 8004f26:	4618      	mov	r0, r3
 8004f28:	f000 fd3a 	bl	80059a0 <TIM_CCxChannelCmd>
      break;
 8004f2c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	681a      	ldr	r2, [r3, #0]
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f042 0201 	orr.w	r2, r2, #1
 8004f3c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004f3e:	2300      	movs	r3, #0
}
 8004f40:	4618      	mov	r0, r3
 8004f42:	3710      	adds	r7, #16
 8004f44:	46bd      	mov	sp, r7
 8004f46:	bd80      	pop	{r7, pc}

08004f48 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b082      	sub	sp, #8
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	691b      	ldr	r3, [r3, #16]
 8004f56:	f003 0302 	and.w	r3, r3, #2
 8004f5a:	2b02      	cmp	r3, #2
 8004f5c:	d122      	bne.n	8004fa4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	68db      	ldr	r3, [r3, #12]
 8004f64:	f003 0302 	and.w	r3, r3, #2
 8004f68:	2b02      	cmp	r3, #2
 8004f6a:	d11b      	bne.n	8004fa4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f06f 0202 	mvn.w	r2, #2
 8004f74:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2201      	movs	r2, #1
 8004f7a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	699b      	ldr	r3, [r3, #24]
 8004f82:	f003 0303 	and.w	r3, r3, #3
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d003      	beq.n	8004f92 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004f8a:	6878      	ldr	r0, [r7, #4]
 8004f8c:	f7fc fe39 	bl	8001c02 <HAL_TIM_IC_CaptureCallback>
 8004f90:	e005      	b.n	8004f9e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f92:	6878      	ldr	r0, [r7, #4]
 8004f94:	f000 fa69 	bl	800546a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f98:	6878      	ldr	r0, [r7, #4]
 8004f9a:	f000 fa6f 	bl	800547c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	691b      	ldr	r3, [r3, #16]
 8004faa:	f003 0304 	and.w	r3, r3, #4
 8004fae:	2b04      	cmp	r3, #4
 8004fb0:	d122      	bne.n	8004ff8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	68db      	ldr	r3, [r3, #12]
 8004fb8:	f003 0304 	and.w	r3, r3, #4
 8004fbc:	2b04      	cmp	r3, #4
 8004fbe:	d11b      	bne.n	8004ff8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f06f 0204 	mvn.w	r2, #4
 8004fc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2202      	movs	r2, #2
 8004fce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	699b      	ldr	r3, [r3, #24]
 8004fd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d003      	beq.n	8004fe6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004fde:	6878      	ldr	r0, [r7, #4]
 8004fe0:	f7fc fe0f 	bl	8001c02 <HAL_TIM_IC_CaptureCallback>
 8004fe4:	e005      	b.n	8004ff2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fe6:	6878      	ldr	r0, [r7, #4]
 8004fe8:	f000 fa3f 	bl	800546a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fec:	6878      	ldr	r0, [r7, #4]
 8004fee:	f000 fa45 	bl	800547c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	691b      	ldr	r3, [r3, #16]
 8004ffe:	f003 0308 	and.w	r3, r3, #8
 8005002:	2b08      	cmp	r3, #8
 8005004:	d122      	bne.n	800504c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	68db      	ldr	r3, [r3, #12]
 800500c:	f003 0308 	and.w	r3, r3, #8
 8005010:	2b08      	cmp	r3, #8
 8005012:	d11b      	bne.n	800504c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f06f 0208 	mvn.w	r2, #8
 800501c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2204      	movs	r2, #4
 8005022:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	69db      	ldr	r3, [r3, #28]
 800502a:	f003 0303 	and.w	r3, r3, #3
 800502e:	2b00      	cmp	r3, #0
 8005030:	d003      	beq.n	800503a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005032:	6878      	ldr	r0, [r7, #4]
 8005034:	f7fc fde5 	bl	8001c02 <HAL_TIM_IC_CaptureCallback>
 8005038:	e005      	b.n	8005046 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800503a:	6878      	ldr	r0, [r7, #4]
 800503c:	f000 fa15 	bl	800546a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005040:	6878      	ldr	r0, [r7, #4]
 8005042:	f000 fa1b 	bl	800547c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2200      	movs	r2, #0
 800504a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	691b      	ldr	r3, [r3, #16]
 8005052:	f003 0310 	and.w	r3, r3, #16
 8005056:	2b10      	cmp	r3, #16
 8005058:	d122      	bne.n	80050a0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	68db      	ldr	r3, [r3, #12]
 8005060:	f003 0310 	and.w	r3, r3, #16
 8005064:	2b10      	cmp	r3, #16
 8005066:	d11b      	bne.n	80050a0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f06f 0210 	mvn.w	r2, #16
 8005070:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2208      	movs	r2, #8
 8005076:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	69db      	ldr	r3, [r3, #28]
 800507e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005082:	2b00      	cmp	r3, #0
 8005084:	d003      	beq.n	800508e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005086:	6878      	ldr	r0, [r7, #4]
 8005088:	f7fc fdbb 	bl	8001c02 <HAL_TIM_IC_CaptureCallback>
 800508c:	e005      	b.n	800509a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800508e:	6878      	ldr	r0, [r7, #4]
 8005090:	f000 f9eb 	bl	800546a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005094:	6878      	ldr	r0, [r7, #4]
 8005096:	f000 f9f1 	bl	800547c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2200      	movs	r2, #0
 800509e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	691b      	ldr	r3, [r3, #16]
 80050a6:	f003 0301 	and.w	r3, r3, #1
 80050aa:	2b01      	cmp	r3, #1
 80050ac:	d10e      	bne.n	80050cc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	68db      	ldr	r3, [r3, #12]
 80050b4:	f003 0301 	and.w	r3, r3, #1
 80050b8:	2b01      	cmp	r3, #1
 80050ba:	d107      	bne.n	80050cc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f06f 0201 	mvn.w	r2, #1
 80050c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80050c6:	6878      	ldr	r0, [r7, #4]
 80050c8:	f7fd fbfa 	bl	80028c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	691b      	ldr	r3, [r3, #16]
 80050d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050d6:	2b80      	cmp	r3, #128	; 0x80
 80050d8:	d10e      	bne.n	80050f8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	68db      	ldr	r3, [r3, #12]
 80050e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050e4:	2b80      	cmp	r3, #128	; 0x80
 80050e6:	d107      	bne.n	80050f8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80050f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80050f2:	6878      	ldr	r0, [r7, #4]
 80050f4:	f000 fd30 	bl	8005b58 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	691b      	ldr	r3, [r3, #16]
 80050fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005102:	2b40      	cmp	r3, #64	; 0x40
 8005104:	d10e      	bne.n	8005124 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	68db      	ldr	r3, [r3, #12]
 800510c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005110:	2b40      	cmp	r3, #64	; 0x40
 8005112:	d107      	bne.n	8005124 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800511c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800511e:	6878      	ldr	r0, [r7, #4]
 8005120:	f000 f9b5 	bl	800548e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	691b      	ldr	r3, [r3, #16]
 800512a:	f003 0320 	and.w	r3, r3, #32
 800512e:	2b20      	cmp	r3, #32
 8005130:	d10e      	bne.n	8005150 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	68db      	ldr	r3, [r3, #12]
 8005138:	f003 0320 	and.w	r3, r3, #32
 800513c:	2b20      	cmp	r3, #32
 800513e:	d107      	bne.n	8005150 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f06f 0220 	mvn.w	r2, #32
 8005148:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800514a:	6878      	ldr	r0, [r7, #4]
 800514c:	f000 fcfb 	bl	8005b46 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005150:	bf00      	nop
 8005152:	3708      	adds	r7, #8
 8005154:	46bd      	mov	sp, r7
 8005156:	bd80      	pop	{r7, pc}

08005158 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b086      	sub	sp, #24
 800515c:	af00      	add	r7, sp, #0
 800515e:	60f8      	str	r0, [r7, #12]
 8005160:	60b9      	str	r1, [r7, #8]
 8005162:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005164:	2300      	movs	r3, #0
 8005166:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800516e:	2b01      	cmp	r3, #1
 8005170:	d101      	bne.n	8005176 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005172:	2302      	movs	r3, #2
 8005174:	e0ae      	b.n	80052d4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	2201      	movs	r2, #1
 800517a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2b0c      	cmp	r3, #12
 8005182:	f200 809f 	bhi.w	80052c4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005186:	a201      	add	r2, pc, #4	; (adr r2, 800518c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005188:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800518c:	080051c1 	.word	0x080051c1
 8005190:	080052c5 	.word	0x080052c5
 8005194:	080052c5 	.word	0x080052c5
 8005198:	080052c5 	.word	0x080052c5
 800519c:	08005201 	.word	0x08005201
 80051a0:	080052c5 	.word	0x080052c5
 80051a4:	080052c5 	.word	0x080052c5
 80051a8:	080052c5 	.word	0x080052c5
 80051ac:	08005243 	.word	0x08005243
 80051b0:	080052c5 	.word	0x080052c5
 80051b4:	080052c5 	.word	0x080052c5
 80051b8:	080052c5 	.word	0x080052c5
 80051bc:	08005283 	.word	0x08005283
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	68b9      	ldr	r1, [r7, #8]
 80051c6:	4618      	mov	r0, r3
 80051c8:	f000 f9cc 	bl	8005564 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	699a      	ldr	r2, [r3, #24]
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f042 0208 	orr.w	r2, r2, #8
 80051da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	699a      	ldr	r2, [r3, #24]
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f022 0204 	bic.w	r2, r2, #4
 80051ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	6999      	ldr	r1, [r3, #24]
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	691a      	ldr	r2, [r3, #16]
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	430a      	orrs	r2, r1
 80051fc:	619a      	str	r2, [r3, #24]
      break;
 80051fe:	e064      	b.n	80052ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	68b9      	ldr	r1, [r7, #8]
 8005206:	4618      	mov	r0, r3
 8005208:	f000 fa12 	bl	8005630 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	699a      	ldr	r2, [r3, #24]
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800521a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	699a      	ldr	r2, [r3, #24]
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800522a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	6999      	ldr	r1, [r3, #24]
 8005232:	68bb      	ldr	r3, [r7, #8]
 8005234:	691b      	ldr	r3, [r3, #16]
 8005236:	021a      	lsls	r2, r3, #8
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	430a      	orrs	r2, r1
 800523e:	619a      	str	r2, [r3, #24]
      break;
 8005240:	e043      	b.n	80052ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	68b9      	ldr	r1, [r7, #8]
 8005248:	4618      	mov	r0, r3
 800524a:	f000 fa5b 	bl	8005704 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	69da      	ldr	r2, [r3, #28]
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f042 0208 	orr.w	r2, r2, #8
 800525c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	69da      	ldr	r2, [r3, #28]
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f022 0204 	bic.w	r2, r2, #4
 800526c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	69d9      	ldr	r1, [r3, #28]
 8005274:	68bb      	ldr	r3, [r7, #8]
 8005276:	691a      	ldr	r2, [r3, #16]
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	430a      	orrs	r2, r1
 800527e:	61da      	str	r2, [r3, #28]
      break;
 8005280:	e023      	b.n	80052ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	68b9      	ldr	r1, [r7, #8]
 8005288:	4618      	mov	r0, r3
 800528a:	f000 faa5 	bl	80057d8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	69da      	ldr	r2, [r3, #28]
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800529c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	69da      	ldr	r2, [r3, #28]
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	69d9      	ldr	r1, [r3, #28]
 80052b4:	68bb      	ldr	r3, [r7, #8]
 80052b6:	691b      	ldr	r3, [r3, #16]
 80052b8:	021a      	lsls	r2, r3, #8
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	430a      	orrs	r2, r1
 80052c0:	61da      	str	r2, [r3, #28]
      break;
 80052c2:	e002      	b.n	80052ca <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80052c4:	2301      	movs	r3, #1
 80052c6:	75fb      	strb	r3, [r7, #23]
      break;
 80052c8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	2200      	movs	r2, #0
 80052ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80052d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80052d4:	4618      	mov	r0, r3
 80052d6:	3718      	adds	r7, #24
 80052d8:	46bd      	mov	sp, r7
 80052da:	bd80      	pop	{r7, pc}

080052dc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b084      	sub	sp, #16
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
 80052e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80052e6:	2300      	movs	r3, #0
 80052e8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052f0:	2b01      	cmp	r3, #1
 80052f2:	d101      	bne.n	80052f8 <HAL_TIM_ConfigClockSource+0x1c>
 80052f4:	2302      	movs	r3, #2
 80052f6:	e0b4      	b.n	8005462 <HAL_TIM_ConfigClockSource+0x186>
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2201      	movs	r2, #1
 80052fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2202      	movs	r2, #2
 8005304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	689b      	ldr	r3, [r3, #8]
 800530e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005316:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800531e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	68ba      	ldr	r2, [r7, #8]
 8005326:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005330:	d03e      	beq.n	80053b0 <HAL_TIM_ConfigClockSource+0xd4>
 8005332:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005336:	f200 8087 	bhi.w	8005448 <HAL_TIM_ConfigClockSource+0x16c>
 800533a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800533e:	f000 8086 	beq.w	800544e <HAL_TIM_ConfigClockSource+0x172>
 8005342:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005346:	d87f      	bhi.n	8005448 <HAL_TIM_ConfigClockSource+0x16c>
 8005348:	2b70      	cmp	r3, #112	; 0x70
 800534a:	d01a      	beq.n	8005382 <HAL_TIM_ConfigClockSource+0xa6>
 800534c:	2b70      	cmp	r3, #112	; 0x70
 800534e:	d87b      	bhi.n	8005448 <HAL_TIM_ConfigClockSource+0x16c>
 8005350:	2b60      	cmp	r3, #96	; 0x60
 8005352:	d050      	beq.n	80053f6 <HAL_TIM_ConfigClockSource+0x11a>
 8005354:	2b60      	cmp	r3, #96	; 0x60
 8005356:	d877      	bhi.n	8005448 <HAL_TIM_ConfigClockSource+0x16c>
 8005358:	2b50      	cmp	r3, #80	; 0x50
 800535a:	d03c      	beq.n	80053d6 <HAL_TIM_ConfigClockSource+0xfa>
 800535c:	2b50      	cmp	r3, #80	; 0x50
 800535e:	d873      	bhi.n	8005448 <HAL_TIM_ConfigClockSource+0x16c>
 8005360:	2b40      	cmp	r3, #64	; 0x40
 8005362:	d058      	beq.n	8005416 <HAL_TIM_ConfigClockSource+0x13a>
 8005364:	2b40      	cmp	r3, #64	; 0x40
 8005366:	d86f      	bhi.n	8005448 <HAL_TIM_ConfigClockSource+0x16c>
 8005368:	2b30      	cmp	r3, #48	; 0x30
 800536a:	d064      	beq.n	8005436 <HAL_TIM_ConfigClockSource+0x15a>
 800536c:	2b30      	cmp	r3, #48	; 0x30
 800536e:	d86b      	bhi.n	8005448 <HAL_TIM_ConfigClockSource+0x16c>
 8005370:	2b20      	cmp	r3, #32
 8005372:	d060      	beq.n	8005436 <HAL_TIM_ConfigClockSource+0x15a>
 8005374:	2b20      	cmp	r3, #32
 8005376:	d867      	bhi.n	8005448 <HAL_TIM_ConfigClockSource+0x16c>
 8005378:	2b00      	cmp	r3, #0
 800537a:	d05c      	beq.n	8005436 <HAL_TIM_ConfigClockSource+0x15a>
 800537c:	2b10      	cmp	r3, #16
 800537e:	d05a      	beq.n	8005436 <HAL_TIM_ConfigClockSource+0x15a>
 8005380:	e062      	b.n	8005448 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005392:	f000 fae6 	bl	8005962 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	689b      	ldr	r3, [r3, #8]
 800539c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800539e:	68bb      	ldr	r3, [r7, #8]
 80053a0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80053a4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	68ba      	ldr	r2, [r7, #8]
 80053ac:	609a      	str	r2, [r3, #8]
      break;
 80053ae:	e04f      	b.n	8005450 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80053c0:	f000 facf 	bl	8005962 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	689a      	ldr	r2, [r3, #8]
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80053d2:	609a      	str	r2, [r3, #8]
      break;
 80053d4:	e03c      	b.n	8005450 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80053e2:	461a      	mov	r2, r3
 80053e4:	f000 fa46 	bl	8005874 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	2150      	movs	r1, #80	; 0x50
 80053ee:	4618      	mov	r0, r3
 80053f0:	f000 fa9d 	bl	800592e <TIM_ITRx_SetConfig>
      break;
 80053f4:	e02c      	b.n	8005450 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005402:	461a      	mov	r2, r3
 8005404:	f000 fa64 	bl	80058d0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	2160      	movs	r1, #96	; 0x60
 800540e:	4618      	mov	r0, r3
 8005410:	f000 fa8d 	bl	800592e <TIM_ITRx_SetConfig>
      break;
 8005414:	e01c      	b.n	8005450 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005422:	461a      	mov	r2, r3
 8005424:	f000 fa26 	bl	8005874 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	2140      	movs	r1, #64	; 0x40
 800542e:	4618      	mov	r0, r3
 8005430:	f000 fa7d 	bl	800592e <TIM_ITRx_SetConfig>
      break;
 8005434:	e00c      	b.n	8005450 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681a      	ldr	r2, [r3, #0]
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4619      	mov	r1, r3
 8005440:	4610      	mov	r0, r2
 8005442:	f000 fa74 	bl	800592e <TIM_ITRx_SetConfig>
      break;
 8005446:	e003      	b.n	8005450 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005448:	2301      	movs	r3, #1
 800544a:	73fb      	strb	r3, [r7, #15]
      break;
 800544c:	e000      	b.n	8005450 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800544e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2201      	movs	r2, #1
 8005454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2200      	movs	r2, #0
 800545c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005460:	7bfb      	ldrb	r3, [r7, #15]
}
 8005462:	4618      	mov	r0, r3
 8005464:	3710      	adds	r7, #16
 8005466:	46bd      	mov	sp, r7
 8005468:	bd80      	pop	{r7, pc}

0800546a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800546a:	b480      	push	{r7}
 800546c:	b083      	sub	sp, #12
 800546e:	af00      	add	r7, sp, #0
 8005470:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005472:	bf00      	nop
 8005474:	370c      	adds	r7, #12
 8005476:	46bd      	mov	sp, r7
 8005478:	bc80      	pop	{r7}
 800547a:	4770      	bx	lr

0800547c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800547c:	b480      	push	{r7}
 800547e:	b083      	sub	sp, #12
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005484:	bf00      	nop
 8005486:	370c      	adds	r7, #12
 8005488:	46bd      	mov	sp, r7
 800548a:	bc80      	pop	{r7}
 800548c:	4770      	bx	lr

0800548e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800548e:	b480      	push	{r7}
 8005490:	b083      	sub	sp, #12
 8005492:	af00      	add	r7, sp, #0
 8005494:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005496:	bf00      	nop
 8005498:	370c      	adds	r7, #12
 800549a:	46bd      	mov	sp, r7
 800549c:	bc80      	pop	{r7}
 800549e:	4770      	bx	lr

080054a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80054a0:	b480      	push	{r7}
 80054a2:	b085      	sub	sp, #20
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
 80054a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	4a29      	ldr	r2, [pc, #164]	; (8005558 <TIM_Base_SetConfig+0xb8>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d00b      	beq.n	80054d0 <TIM_Base_SetConfig+0x30>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054be:	d007      	beq.n	80054d0 <TIM_Base_SetConfig+0x30>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	4a26      	ldr	r2, [pc, #152]	; (800555c <TIM_Base_SetConfig+0xbc>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d003      	beq.n	80054d0 <TIM_Base_SetConfig+0x30>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	4a25      	ldr	r2, [pc, #148]	; (8005560 <TIM_Base_SetConfig+0xc0>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d108      	bne.n	80054e2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	685b      	ldr	r3, [r3, #4]
 80054dc:	68fa      	ldr	r2, [r7, #12]
 80054de:	4313      	orrs	r3, r2
 80054e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	4a1c      	ldr	r2, [pc, #112]	; (8005558 <TIM_Base_SetConfig+0xb8>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d00b      	beq.n	8005502 <TIM_Base_SetConfig+0x62>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054f0:	d007      	beq.n	8005502 <TIM_Base_SetConfig+0x62>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	4a19      	ldr	r2, [pc, #100]	; (800555c <TIM_Base_SetConfig+0xbc>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d003      	beq.n	8005502 <TIM_Base_SetConfig+0x62>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	4a18      	ldr	r2, [pc, #96]	; (8005560 <TIM_Base_SetConfig+0xc0>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d108      	bne.n	8005514 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005508:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	68db      	ldr	r3, [r3, #12]
 800550e:	68fa      	ldr	r2, [r7, #12]
 8005510:	4313      	orrs	r3, r2
 8005512:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	695b      	ldr	r3, [r3, #20]
 800551e:	4313      	orrs	r3, r2
 8005520:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	68fa      	ldr	r2, [r7, #12]
 8005526:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	689a      	ldr	r2, [r3, #8]
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	681a      	ldr	r2, [r3, #0]
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	4a07      	ldr	r2, [pc, #28]	; (8005558 <TIM_Base_SetConfig+0xb8>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d103      	bne.n	8005548 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	691a      	ldr	r2, [r3, #16]
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2201      	movs	r2, #1
 800554c:	615a      	str	r2, [r3, #20]
}
 800554e:	bf00      	nop
 8005550:	3714      	adds	r7, #20
 8005552:	46bd      	mov	sp, r7
 8005554:	bc80      	pop	{r7}
 8005556:	4770      	bx	lr
 8005558:	40012c00 	.word	0x40012c00
 800555c:	40000400 	.word	0x40000400
 8005560:	40000800 	.word	0x40000800

08005564 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005564:	b480      	push	{r7}
 8005566:	b087      	sub	sp, #28
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
 800556c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6a1b      	ldr	r3, [r3, #32]
 8005572:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6a1b      	ldr	r3, [r3, #32]
 8005578:	f023 0201 	bic.w	r2, r3, #1
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	685b      	ldr	r3, [r3, #4]
 8005584:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	699b      	ldr	r3, [r3, #24]
 800558a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005592:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	f023 0303 	bic.w	r3, r3, #3
 800559a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	68fa      	ldr	r2, [r7, #12]
 80055a2:	4313      	orrs	r3, r2
 80055a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80055a6:	697b      	ldr	r3, [r7, #20]
 80055a8:	f023 0302 	bic.w	r3, r3, #2
 80055ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	689b      	ldr	r3, [r3, #8]
 80055b2:	697a      	ldr	r2, [r7, #20]
 80055b4:	4313      	orrs	r3, r2
 80055b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	4a1c      	ldr	r2, [pc, #112]	; (800562c <TIM_OC1_SetConfig+0xc8>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d10c      	bne.n	80055da <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80055c0:	697b      	ldr	r3, [r7, #20]
 80055c2:	f023 0308 	bic.w	r3, r3, #8
 80055c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	68db      	ldr	r3, [r3, #12]
 80055cc:	697a      	ldr	r2, [r7, #20]
 80055ce:	4313      	orrs	r3, r2
 80055d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80055d2:	697b      	ldr	r3, [r7, #20]
 80055d4:	f023 0304 	bic.w	r3, r3, #4
 80055d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	4a13      	ldr	r2, [pc, #76]	; (800562c <TIM_OC1_SetConfig+0xc8>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d111      	bne.n	8005606 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80055e2:	693b      	ldr	r3, [r7, #16]
 80055e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80055e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80055ea:	693b      	ldr	r3, [r7, #16]
 80055ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80055f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	695b      	ldr	r3, [r3, #20]
 80055f6:	693a      	ldr	r2, [r7, #16]
 80055f8:	4313      	orrs	r3, r2
 80055fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	699b      	ldr	r3, [r3, #24]
 8005600:	693a      	ldr	r2, [r7, #16]
 8005602:	4313      	orrs	r3, r2
 8005604:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	693a      	ldr	r2, [r7, #16]
 800560a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	68fa      	ldr	r2, [r7, #12]
 8005610:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	685a      	ldr	r2, [r3, #4]
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	697a      	ldr	r2, [r7, #20]
 800561e:	621a      	str	r2, [r3, #32]
}
 8005620:	bf00      	nop
 8005622:	371c      	adds	r7, #28
 8005624:	46bd      	mov	sp, r7
 8005626:	bc80      	pop	{r7}
 8005628:	4770      	bx	lr
 800562a:	bf00      	nop
 800562c:	40012c00 	.word	0x40012c00

08005630 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005630:	b480      	push	{r7}
 8005632:	b087      	sub	sp, #28
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
 8005638:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6a1b      	ldr	r3, [r3, #32]
 800563e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6a1b      	ldr	r3, [r3, #32]
 8005644:	f023 0210 	bic.w	r2, r3, #16
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	685b      	ldr	r3, [r3, #4]
 8005650:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	699b      	ldr	r3, [r3, #24]
 8005656:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800565e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005666:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	021b      	lsls	r3, r3, #8
 800566e:	68fa      	ldr	r2, [r7, #12]
 8005670:	4313      	orrs	r3, r2
 8005672:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005674:	697b      	ldr	r3, [r7, #20]
 8005676:	f023 0320 	bic.w	r3, r3, #32
 800567a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	689b      	ldr	r3, [r3, #8]
 8005680:	011b      	lsls	r3, r3, #4
 8005682:	697a      	ldr	r2, [r7, #20]
 8005684:	4313      	orrs	r3, r2
 8005686:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	4a1d      	ldr	r2, [pc, #116]	; (8005700 <TIM_OC2_SetConfig+0xd0>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d10d      	bne.n	80056ac <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005690:	697b      	ldr	r3, [r7, #20]
 8005692:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005696:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	68db      	ldr	r3, [r3, #12]
 800569c:	011b      	lsls	r3, r3, #4
 800569e:	697a      	ldr	r2, [r7, #20]
 80056a0:	4313      	orrs	r3, r2
 80056a2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80056a4:	697b      	ldr	r3, [r7, #20]
 80056a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056aa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	4a14      	ldr	r2, [pc, #80]	; (8005700 <TIM_OC2_SetConfig+0xd0>)
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d113      	bne.n	80056dc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80056b4:	693b      	ldr	r3, [r7, #16]
 80056b6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80056ba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80056bc:	693b      	ldr	r3, [r7, #16]
 80056be:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80056c2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	695b      	ldr	r3, [r3, #20]
 80056c8:	009b      	lsls	r3, r3, #2
 80056ca:	693a      	ldr	r2, [r7, #16]
 80056cc:	4313      	orrs	r3, r2
 80056ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	699b      	ldr	r3, [r3, #24]
 80056d4:	009b      	lsls	r3, r3, #2
 80056d6:	693a      	ldr	r2, [r7, #16]
 80056d8:	4313      	orrs	r3, r2
 80056da:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	693a      	ldr	r2, [r7, #16]
 80056e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	68fa      	ldr	r2, [r7, #12]
 80056e6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	685a      	ldr	r2, [r3, #4]
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	697a      	ldr	r2, [r7, #20]
 80056f4:	621a      	str	r2, [r3, #32]
}
 80056f6:	bf00      	nop
 80056f8:	371c      	adds	r7, #28
 80056fa:	46bd      	mov	sp, r7
 80056fc:	bc80      	pop	{r7}
 80056fe:	4770      	bx	lr
 8005700:	40012c00 	.word	0x40012c00

08005704 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005704:	b480      	push	{r7}
 8005706:	b087      	sub	sp, #28
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
 800570c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6a1b      	ldr	r3, [r3, #32]
 8005712:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6a1b      	ldr	r3, [r3, #32]
 8005718:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	685b      	ldr	r3, [r3, #4]
 8005724:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	69db      	ldr	r3, [r3, #28]
 800572a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005732:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	f023 0303 	bic.w	r3, r3, #3
 800573a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	68fa      	ldr	r2, [r7, #12]
 8005742:	4313      	orrs	r3, r2
 8005744:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005746:	697b      	ldr	r3, [r7, #20]
 8005748:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800574c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	689b      	ldr	r3, [r3, #8]
 8005752:	021b      	lsls	r3, r3, #8
 8005754:	697a      	ldr	r2, [r7, #20]
 8005756:	4313      	orrs	r3, r2
 8005758:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	4a1d      	ldr	r2, [pc, #116]	; (80057d4 <TIM_OC3_SetConfig+0xd0>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d10d      	bne.n	800577e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005762:	697b      	ldr	r3, [r7, #20]
 8005764:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005768:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	68db      	ldr	r3, [r3, #12]
 800576e:	021b      	lsls	r3, r3, #8
 8005770:	697a      	ldr	r2, [r7, #20]
 8005772:	4313      	orrs	r3, r2
 8005774:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005776:	697b      	ldr	r3, [r7, #20]
 8005778:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800577c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	4a14      	ldr	r2, [pc, #80]	; (80057d4 <TIM_OC3_SetConfig+0xd0>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d113      	bne.n	80057ae <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005786:	693b      	ldr	r3, [r7, #16]
 8005788:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800578c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800578e:	693b      	ldr	r3, [r7, #16]
 8005790:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005794:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	695b      	ldr	r3, [r3, #20]
 800579a:	011b      	lsls	r3, r3, #4
 800579c:	693a      	ldr	r2, [r7, #16]
 800579e:	4313      	orrs	r3, r2
 80057a0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	699b      	ldr	r3, [r3, #24]
 80057a6:	011b      	lsls	r3, r3, #4
 80057a8:	693a      	ldr	r2, [r7, #16]
 80057aa:	4313      	orrs	r3, r2
 80057ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	693a      	ldr	r2, [r7, #16]
 80057b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	68fa      	ldr	r2, [r7, #12]
 80057b8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	685a      	ldr	r2, [r3, #4]
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	697a      	ldr	r2, [r7, #20]
 80057c6:	621a      	str	r2, [r3, #32]
}
 80057c8:	bf00      	nop
 80057ca:	371c      	adds	r7, #28
 80057cc:	46bd      	mov	sp, r7
 80057ce:	bc80      	pop	{r7}
 80057d0:	4770      	bx	lr
 80057d2:	bf00      	nop
 80057d4:	40012c00 	.word	0x40012c00

080057d8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80057d8:	b480      	push	{r7}
 80057da:	b087      	sub	sp, #28
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
 80057e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6a1b      	ldr	r3, [r3, #32]
 80057e6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6a1b      	ldr	r3, [r3, #32]
 80057ec:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	685b      	ldr	r3, [r3, #4]
 80057f8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	69db      	ldr	r3, [r3, #28]
 80057fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005806:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800580e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	021b      	lsls	r3, r3, #8
 8005816:	68fa      	ldr	r2, [r7, #12]
 8005818:	4313      	orrs	r3, r2
 800581a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800581c:	693b      	ldr	r3, [r7, #16]
 800581e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005822:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	689b      	ldr	r3, [r3, #8]
 8005828:	031b      	lsls	r3, r3, #12
 800582a:	693a      	ldr	r2, [r7, #16]
 800582c:	4313      	orrs	r3, r2
 800582e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	4a0f      	ldr	r2, [pc, #60]	; (8005870 <TIM_OC4_SetConfig+0x98>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d109      	bne.n	800584c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005838:	697b      	ldr	r3, [r7, #20]
 800583a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800583e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	695b      	ldr	r3, [r3, #20]
 8005844:	019b      	lsls	r3, r3, #6
 8005846:	697a      	ldr	r2, [r7, #20]
 8005848:	4313      	orrs	r3, r2
 800584a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	697a      	ldr	r2, [r7, #20]
 8005850:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	68fa      	ldr	r2, [r7, #12]
 8005856:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	685a      	ldr	r2, [r3, #4]
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	693a      	ldr	r2, [r7, #16]
 8005864:	621a      	str	r2, [r3, #32]
}
 8005866:	bf00      	nop
 8005868:	371c      	adds	r7, #28
 800586a:	46bd      	mov	sp, r7
 800586c:	bc80      	pop	{r7}
 800586e:	4770      	bx	lr
 8005870:	40012c00 	.word	0x40012c00

08005874 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005874:	b480      	push	{r7}
 8005876:	b087      	sub	sp, #28
 8005878:	af00      	add	r7, sp, #0
 800587a:	60f8      	str	r0, [r7, #12]
 800587c:	60b9      	str	r1, [r7, #8]
 800587e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	6a1b      	ldr	r3, [r3, #32]
 8005884:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	6a1b      	ldr	r3, [r3, #32]
 800588a:	f023 0201 	bic.w	r2, r3, #1
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	699b      	ldr	r3, [r3, #24]
 8005896:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005898:	693b      	ldr	r3, [r7, #16]
 800589a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800589e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	011b      	lsls	r3, r3, #4
 80058a4:	693a      	ldr	r2, [r7, #16]
 80058a6:	4313      	orrs	r3, r2
 80058a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80058aa:	697b      	ldr	r3, [r7, #20]
 80058ac:	f023 030a 	bic.w	r3, r3, #10
 80058b0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80058b2:	697a      	ldr	r2, [r7, #20]
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	4313      	orrs	r3, r2
 80058b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	693a      	ldr	r2, [r7, #16]
 80058be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	697a      	ldr	r2, [r7, #20]
 80058c4:	621a      	str	r2, [r3, #32]
}
 80058c6:	bf00      	nop
 80058c8:	371c      	adds	r7, #28
 80058ca:	46bd      	mov	sp, r7
 80058cc:	bc80      	pop	{r7}
 80058ce:	4770      	bx	lr

080058d0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80058d0:	b480      	push	{r7}
 80058d2:	b087      	sub	sp, #28
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	60f8      	str	r0, [r7, #12]
 80058d8:	60b9      	str	r1, [r7, #8]
 80058da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	6a1b      	ldr	r3, [r3, #32]
 80058e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	6a1b      	ldr	r3, [r3, #32]
 80058e6:	f023 0210 	bic.w	r2, r3, #16
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	699b      	ldr	r3, [r3, #24]
 80058f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80058f4:	693b      	ldr	r3, [r7, #16]
 80058f6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80058fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	031b      	lsls	r3, r3, #12
 8005900:	693a      	ldr	r2, [r7, #16]
 8005902:	4313      	orrs	r3, r2
 8005904:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005906:	697b      	ldr	r3, [r7, #20]
 8005908:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800590c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	011b      	lsls	r3, r3, #4
 8005912:	697a      	ldr	r2, [r7, #20]
 8005914:	4313      	orrs	r3, r2
 8005916:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	693a      	ldr	r2, [r7, #16]
 800591c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	697a      	ldr	r2, [r7, #20]
 8005922:	621a      	str	r2, [r3, #32]
}
 8005924:	bf00      	nop
 8005926:	371c      	adds	r7, #28
 8005928:	46bd      	mov	sp, r7
 800592a:	bc80      	pop	{r7}
 800592c:	4770      	bx	lr

0800592e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800592e:	b480      	push	{r7}
 8005930:	b085      	sub	sp, #20
 8005932:	af00      	add	r7, sp, #0
 8005934:	6078      	str	r0, [r7, #4]
 8005936:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	689b      	ldr	r3, [r3, #8]
 800593c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005944:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005946:	683a      	ldr	r2, [r7, #0]
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	4313      	orrs	r3, r2
 800594c:	f043 0307 	orr.w	r3, r3, #7
 8005950:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	68fa      	ldr	r2, [r7, #12]
 8005956:	609a      	str	r2, [r3, #8]
}
 8005958:	bf00      	nop
 800595a:	3714      	adds	r7, #20
 800595c:	46bd      	mov	sp, r7
 800595e:	bc80      	pop	{r7}
 8005960:	4770      	bx	lr

08005962 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005962:	b480      	push	{r7}
 8005964:	b087      	sub	sp, #28
 8005966:	af00      	add	r7, sp, #0
 8005968:	60f8      	str	r0, [r7, #12]
 800596a:	60b9      	str	r1, [r7, #8]
 800596c:	607a      	str	r2, [r7, #4]
 800596e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	689b      	ldr	r3, [r3, #8]
 8005974:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005976:	697b      	ldr	r3, [r7, #20]
 8005978:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800597c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	021a      	lsls	r2, r3, #8
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	431a      	orrs	r2, r3
 8005986:	68bb      	ldr	r3, [r7, #8]
 8005988:	4313      	orrs	r3, r2
 800598a:	697a      	ldr	r2, [r7, #20]
 800598c:	4313      	orrs	r3, r2
 800598e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	697a      	ldr	r2, [r7, #20]
 8005994:	609a      	str	r2, [r3, #8]
}
 8005996:	bf00      	nop
 8005998:	371c      	adds	r7, #28
 800599a:	46bd      	mov	sp, r7
 800599c:	bc80      	pop	{r7}
 800599e:	4770      	bx	lr

080059a0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80059a0:	b480      	push	{r7}
 80059a2:	b087      	sub	sp, #28
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	60f8      	str	r0, [r7, #12]
 80059a8:	60b9      	str	r1, [r7, #8]
 80059aa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	f003 031f 	and.w	r3, r3, #31
 80059b2:	2201      	movs	r2, #1
 80059b4:	fa02 f303 	lsl.w	r3, r2, r3
 80059b8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	6a1a      	ldr	r2, [r3, #32]
 80059be:	697b      	ldr	r3, [r7, #20]
 80059c0:	43db      	mvns	r3, r3
 80059c2:	401a      	ands	r2, r3
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	6a1a      	ldr	r2, [r3, #32]
 80059cc:	68bb      	ldr	r3, [r7, #8]
 80059ce:	f003 031f 	and.w	r3, r3, #31
 80059d2:	6879      	ldr	r1, [r7, #4]
 80059d4:	fa01 f303 	lsl.w	r3, r1, r3
 80059d8:	431a      	orrs	r2, r3
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	621a      	str	r2, [r3, #32]
}
 80059de:	bf00      	nop
 80059e0:	371c      	adds	r7, #28
 80059e2:	46bd      	mov	sp, r7
 80059e4:	bc80      	pop	{r7}
 80059e6:	4770      	bx	lr

080059e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80059e8:	b480      	push	{r7}
 80059ea:	b085      	sub	sp, #20
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
 80059f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059f8:	2b01      	cmp	r3, #1
 80059fa:	d101      	bne.n	8005a00 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80059fc:	2302      	movs	r3, #2
 80059fe:	e046      	b.n	8005a8e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2201      	movs	r2, #1
 8005a04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2202      	movs	r2, #2
 8005a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	685b      	ldr	r3, [r3, #4]
 8005a16:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	689b      	ldr	r3, [r3, #8]
 8005a1e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a26:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	68fa      	ldr	r2, [r7, #12]
 8005a2e:	4313      	orrs	r3, r2
 8005a30:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	68fa      	ldr	r2, [r7, #12]
 8005a38:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	4a16      	ldr	r2, [pc, #88]	; (8005a98 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d00e      	beq.n	8005a62 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a4c:	d009      	beq.n	8005a62 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	4a12      	ldr	r2, [pc, #72]	; (8005a9c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d004      	beq.n	8005a62 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	4a10      	ldr	r2, [pc, #64]	; (8005aa0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d10c      	bne.n	8005a7c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005a62:	68bb      	ldr	r3, [r7, #8]
 8005a64:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a68:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	685b      	ldr	r3, [r3, #4]
 8005a6e:	68ba      	ldr	r2, [r7, #8]
 8005a70:	4313      	orrs	r3, r2
 8005a72:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	68ba      	ldr	r2, [r7, #8]
 8005a7a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2201      	movs	r2, #1
 8005a80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2200      	movs	r2, #0
 8005a88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005a8c:	2300      	movs	r3, #0
}
 8005a8e:	4618      	mov	r0, r3
 8005a90:	3714      	adds	r7, #20
 8005a92:	46bd      	mov	sp, r7
 8005a94:	bc80      	pop	{r7}
 8005a96:	4770      	bx	lr
 8005a98:	40012c00 	.word	0x40012c00
 8005a9c:	40000400 	.word	0x40000400
 8005aa0:	40000800 	.word	0x40000800

08005aa4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005aa4:	b480      	push	{r7}
 8005aa6:	b085      	sub	sp, #20
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
 8005aac:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005aae:	2300      	movs	r3, #0
 8005ab0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ab8:	2b01      	cmp	r3, #1
 8005aba:	d101      	bne.n	8005ac0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005abc:	2302      	movs	r3, #2
 8005abe:	e03d      	b.n	8005b3c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2201      	movs	r2, #1
 8005ac4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	68db      	ldr	r3, [r3, #12]
 8005ad2:	4313      	orrs	r3, r2
 8005ad4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	689b      	ldr	r3, [r3, #8]
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	685b      	ldr	r3, [r3, #4]
 8005aee:	4313      	orrs	r3, r2
 8005af0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	4313      	orrs	r3, r2
 8005afe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	691b      	ldr	r3, [r3, #16]
 8005b0a:	4313      	orrs	r3, r2
 8005b0c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	695b      	ldr	r3, [r3, #20]
 8005b18:	4313      	orrs	r3, r2
 8005b1a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	69db      	ldr	r3, [r3, #28]
 8005b26:	4313      	orrs	r3, r2
 8005b28:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	68fa      	ldr	r2, [r7, #12]
 8005b30:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2200      	movs	r2, #0
 8005b36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005b3a:	2300      	movs	r3, #0
}
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	3714      	adds	r7, #20
 8005b40:	46bd      	mov	sp, r7
 8005b42:	bc80      	pop	{r7}
 8005b44:	4770      	bx	lr

08005b46 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005b46:	b480      	push	{r7}
 8005b48:	b083      	sub	sp, #12
 8005b4a:	af00      	add	r7, sp, #0
 8005b4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005b4e:	bf00      	nop
 8005b50:	370c      	adds	r7, #12
 8005b52:	46bd      	mov	sp, r7
 8005b54:	bc80      	pop	{r7}
 8005b56:	4770      	bx	lr

08005b58 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005b58:	b480      	push	{r7}
 8005b5a:	b083      	sub	sp, #12
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005b60:	bf00      	nop
 8005b62:	370c      	adds	r7, #12
 8005b64:	46bd      	mov	sp, r7
 8005b66:	bc80      	pop	{r7}
 8005b68:	4770      	bx	lr

08005b6a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005b6a:	b580      	push	{r7, lr}
 8005b6c:	b082      	sub	sp, #8
 8005b6e:	af00      	add	r7, sp, #0
 8005b70:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d101      	bne.n	8005b7c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005b78:	2301      	movs	r3, #1
 8005b7a:	e042      	b.n	8005c02 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b82:	b2db      	uxtb	r3, r3
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d106      	bne.n	8005b96 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b90:	6878      	ldr	r0, [r7, #4]
 8005b92:	f7fc fd2f 	bl	80025f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2224      	movs	r2, #36	; 0x24
 8005b9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	68da      	ldr	r2, [r3, #12]
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005bac:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005bae:	6878      	ldr	r0, [r7, #4]
 8005bb0:	f000 f91c 	bl	8005dec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	691a      	ldr	r2, [r3, #16]
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005bc2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	695a      	ldr	r2, [r3, #20]
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005bd2:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	68da      	ldr	r2, [r3, #12]
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005be2:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2200      	movs	r2, #0
 8005be8:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2220      	movs	r2, #32
 8005bee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2220      	movs	r2, #32
 8005bf6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005c00:	2300      	movs	r3, #0
}
 8005c02:	4618      	mov	r0, r3
 8005c04:	3708      	adds	r7, #8
 8005c06:	46bd      	mov	sp, r7
 8005c08:	bd80      	pop	{r7, pc}

08005c0a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c0a:	b580      	push	{r7, lr}
 8005c0c:	b08a      	sub	sp, #40	; 0x28
 8005c0e:	af02      	add	r7, sp, #8
 8005c10:	60f8      	str	r0, [r7, #12]
 8005c12:	60b9      	str	r1, [r7, #8]
 8005c14:	603b      	str	r3, [r7, #0]
 8005c16:	4613      	mov	r3, r2
 8005c18:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c24:	b2db      	uxtb	r3, r3
 8005c26:	2b20      	cmp	r3, #32
 8005c28:	d16d      	bne.n	8005d06 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c2a:	68bb      	ldr	r3, [r7, #8]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d002      	beq.n	8005c36 <HAL_UART_Transmit+0x2c>
 8005c30:	88fb      	ldrh	r3, [r7, #6]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d101      	bne.n	8005c3a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005c36:	2301      	movs	r3, #1
 8005c38:	e066      	b.n	8005d08 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	2221      	movs	r2, #33	; 0x21
 8005c44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005c48:	f7fc fee4 	bl	8002a14 <HAL_GetTick>
 8005c4c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	88fa      	ldrh	r2, [r7, #6]
 8005c52:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	88fa      	ldrh	r2, [r7, #6]
 8005c58:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	689b      	ldr	r3, [r3, #8]
 8005c5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c62:	d108      	bne.n	8005c76 <HAL_UART_Transmit+0x6c>
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	691b      	ldr	r3, [r3, #16]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d104      	bne.n	8005c76 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005c70:	68bb      	ldr	r3, [r7, #8]
 8005c72:	61bb      	str	r3, [r7, #24]
 8005c74:	e003      	b.n	8005c7e <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005c76:	68bb      	ldr	r3, [r7, #8]
 8005c78:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005c7e:	e02a      	b.n	8005cd6 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	9300      	str	r3, [sp, #0]
 8005c84:	697b      	ldr	r3, [r7, #20]
 8005c86:	2200      	movs	r2, #0
 8005c88:	2180      	movs	r1, #128	; 0x80
 8005c8a:	68f8      	ldr	r0, [r7, #12]
 8005c8c:	f000 f840 	bl	8005d10 <UART_WaitOnFlagUntilTimeout>
 8005c90:	4603      	mov	r3, r0
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d001      	beq.n	8005c9a <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8005c96:	2303      	movs	r3, #3
 8005c98:	e036      	b.n	8005d08 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8005c9a:	69fb      	ldr	r3, [r7, #28]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d10b      	bne.n	8005cb8 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005ca0:	69bb      	ldr	r3, [r7, #24]
 8005ca2:	881b      	ldrh	r3, [r3, #0]
 8005ca4:	461a      	mov	r2, r3
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005cae:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005cb0:	69bb      	ldr	r3, [r7, #24]
 8005cb2:	3302      	adds	r3, #2
 8005cb4:	61bb      	str	r3, [r7, #24]
 8005cb6:	e007      	b.n	8005cc8 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005cb8:	69fb      	ldr	r3, [r7, #28]
 8005cba:	781a      	ldrb	r2, [r3, #0]
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005cc2:	69fb      	ldr	r3, [r7, #28]
 8005cc4:	3301      	adds	r3, #1
 8005cc6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005ccc:	b29b      	uxth	r3, r3
 8005cce:	3b01      	subs	r3, #1
 8005cd0:	b29a      	uxth	r2, r3
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005cda:	b29b      	uxth	r3, r3
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d1cf      	bne.n	8005c80 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	9300      	str	r3, [sp, #0]
 8005ce4:	697b      	ldr	r3, [r7, #20]
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	2140      	movs	r1, #64	; 0x40
 8005cea:	68f8      	ldr	r0, [r7, #12]
 8005cec:	f000 f810 	bl	8005d10 <UART_WaitOnFlagUntilTimeout>
 8005cf0:	4603      	mov	r3, r0
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d001      	beq.n	8005cfa <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8005cf6:	2303      	movs	r3, #3
 8005cf8:	e006      	b.n	8005d08 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	2220      	movs	r2, #32
 8005cfe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8005d02:	2300      	movs	r3, #0
 8005d04:	e000      	b.n	8005d08 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8005d06:	2302      	movs	r3, #2
  }
}
 8005d08:	4618      	mov	r0, r3
 8005d0a:	3720      	adds	r7, #32
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	bd80      	pop	{r7, pc}

08005d10 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b090      	sub	sp, #64	; 0x40
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	60f8      	str	r0, [r7, #12]
 8005d18:	60b9      	str	r1, [r7, #8]
 8005d1a:	603b      	str	r3, [r7, #0]
 8005d1c:	4613      	mov	r3, r2
 8005d1e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d20:	e050      	b.n	8005dc4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d28:	d04c      	beq.n	8005dc4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005d2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d007      	beq.n	8005d40 <UART_WaitOnFlagUntilTimeout+0x30>
 8005d30:	f7fc fe70 	bl	8002a14 <HAL_GetTick>
 8005d34:	4602      	mov	r2, r0
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	1ad3      	subs	r3, r2, r3
 8005d3a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005d3c:	429a      	cmp	r2, r3
 8005d3e:	d241      	bcs.n	8005dc4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	330c      	adds	r3, #12
 8005d46:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d4a:	e853 3f00 	ldrex	r3, [r3]
 8005d4e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d52:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005d56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	330c      	adds	r3, #12
 8005d5e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005d60:	637a      	str	r2, [r7, #52]	; 0x34
 8005d62:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d64:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005d66:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005d68:	e841 2300 	strex	r3, r2, [r1]
 8005d6c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005d6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d1e5      	bne.n	8005d40 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	3314      	adds	r3, #20
 8005d7a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d7c:	697b      	ldr	r3, [r7, #20]
 8005d7e:	e853 3f00 	ldrex	r3, [r3]
 8005d82:	613b      	str	r3, [r7, #16]
   return(result);
 8005d84:	693b      	ldr	r3, [r7, #16]
 8005d86:	f023 0301 	bic.w	r3, r3, #1
 8005d8a:	63bb      	str	r3, [r7, #56]	; 0x38
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	3314      	adds	r3, #20
 8005d92:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005d94:	623a      	str	r2, [r7, #32]
 8005d96:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d98:	69f9      	ldr	r1, [r7, #28]
 8005d9a:	6a3a      	ldr	r2, [r7, #32]
 8005d9c:	e841 2300 	strex	r3, r2, [r1]
 8005da0:	61bb      	str	r3, [r7, #24]
   return(result);
 8005da2:	69bb      	ldr	r3, [r7, #24]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d1e5      	bne.n	8005d74 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	2220      	movs	r2, #32
 8005dac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	2220      	movs	r2, #32
 8005db4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	2200      	movs	r2, #0
 8005dbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8005dc0:	2303      	movs	r3, #3
 8005dc2:	e00f      	b.n	8005de4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	681a      	ldr	r2, [r3, #0]
 8005dca:	68bb      	ldr	r3, [r7, #8]
 8005dcc:	4013      	ands	r3, r2
 8005dce:	68ba      	ldr	r2, [r7, #8]
 8005dd0:	429a      	cmp	r2, r3
 8005dd2:	bf0c      	ite	eq
 8005dd4:	2301      	moveq	r3, #1
 8005dd6:	2300      	movne	r3, #0
 8005dd8:	b2db      	uxtb	r3, r3
 8005dda:	461a      	mov	r2, r3
 8005ddc:	79fb      	ldrb	r3, [r7, #7]
 8005dde:	429a      	cmp	r2, r3
 8005de0:	d09f      	beq.n	8005d22 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005de2:	2300      	movs	r3, #0
}
 8005de4:	4618      	mov	r0, r3
 8005de6:	3740      	adds	r7, #64	; 0x40
 8005de8:	46bd      	mov	sp, r7
 8005dea:	bd80      	pop	{r7, pc}

08005dec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b084      	sub	sp, #16
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	691b      	ldr	r3, [r3, #16]
 8005dfa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	68da      	ldr	r2, [r3, #12]
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	430a      	orrs	r2, r1
 8005e08:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	689a      	ldr	r2, [r3, #8]
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	691b      	ldr	r3, [r3, #16]
 8005e12:	431a      	orrs	r2, r3
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	695b      	ldr	r3, [r3, #20]
 8005e18:	4313      	orrs	r3, r2
 8005e1a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	68db      	ldr	r3, [r3, #12]
 8005e22:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005e26:	f023 030c 	bic.w	r3, r3, #12
 8005e2a:	687a      	ldr	r2, [r7, #4]
 8005e2c:	6812      	ldr	r2, [r2, #0]
 8005e2e:	68b9      	ldr	r1, [r7, #8]
 8005e30:	430b      	orrs	r3, r1
 8005e32:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	695b      	ldr	r3, [r3, #20]
 8005e3a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	699a      	ldr	r2, [r3, #24]
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	430a      	orrs	r2, r1
 8005e48:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	4a2c      	ldr	r2, [pc, #176]	; (8005f00 <UART_SetConfig+0x114>)
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d103      	bne.n	8005e5c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005e54:	f7fe fc0e 	bl	8004674 <HAL_RCC_GetPCLK2Freq>
 8005e58:	60f8      	str	r0, [r7, #12]
 8005e5a:	e002      	b.n	8005e62 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005e5c:	f7fe fbf6 	bl	800464c <HAL_RCC_GetPCLK1Freq>
 8005e60:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005e62:	68fa      	ldr	r2, [r7, #12]
 8005e64:	4613      	mov	r3, r2
 8005e66:	009b      	lsls	r3, r3, #2
 8005e68:	4413      	add	r3, r2
 8005e6a:	009a      	lsls	r2, r3, #2
 8005e6c:	441a      	add	r2, r3
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	685b      	ldr	r3, [r3, #4]
 8005e72:	009b      	lsls	r3, r3, #2
 8005e74:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e78:	4a22      	ldr	r2, [pc, #136]	; (8005f04 <UART_SetConfig+0x118>)
 8005e7a:	fba2 2303 	umull	r2, r3, r2, r3
 8005e7e:	095b      	lsrs	r3, r3, #5
 8005e80:	0119      	lsls	r1, r3, #4
 8005e82:	68fa      	ldr	r2, [r7, #12]
 8005e84:	4613      	mov	r3, r2
 8005e86:	009b      	lsls	r3, r3, #2
 8005e88:	4413      	add	r3, r2
 8005e8a:	009a      	lsls	r2, r3, #2
 8005e8c:	441a      	add	r2, r3
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	685b      	ldr	r3, [r3, #4]
 8005e92:	009b      	lsls	r3, r3, #2
 8005e94:	fbb2 f2f3 	udiv	r2, r2, r3
 8005e98:	4b1a      	ldr	r3, [pc, #104]	; (8005f04 <UART_SetConfig+0x118>)
 8005e9a:	fba3 0302 	umull	r0, r3, r3, r2
 8005e9e:	095b      	lsrs	r3, r3, #5
 8005ea0:	2064      	movs	r0, #100	; 0x64
 8005ea2:	fb00 f303 	mul.w	r3, r0, r3
 8005ea6:	1ad3      	subs	r3, r2, r3
 8005ea8:	011b      	lsls	r3, r3, #4
 8005eaa:	3332      	adds	r3, #50	; 0x32
 8005eac:	4a15      	ldr	r2, [pc, #84]	; (8005f04 <UART_SetConfig+0x118>)
 8005eae:	fba2 2303 	umull	r2, r3, r2, r3
 8005eb2:	095b      	lsrs	r3, r3, #5
 8005eb4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005eb8:	4419      	add	r1, r3
 8005eba:	68fa      	ldr	r2, [r7, #12]
 8005ebc:	4613      	mov	r3, r2
 8005ebe:	009b      	lsls	r3, r3, #2
 8005ec0:	4413      	add	r3, r2
 8005ec2:	009a      	lsls	r2, r3, #2
 8005ec4:	441a      	add	r2, r3
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	685b      	ldr	r3, [r3, #4]
 8005eca:	009b      	lsls	r3, r3, #2
 8005ecc:	fbb2 f2f3 	udiv	r2, r2, r3
 8005ed0:	4b0c      	ldr	r3, [pc, #48]	; (8005f04 <UART_SetConfig+0x118>)
 8005ed2:	fba3 0302 	umull	r0, r3, r3, r2
 8005ed6:	095b      	lsrs	r3, r3, #5
 8005ed8:	2064      	movs	r0, #100	; 0x64
 8005eda:	fb00 f303 	mul.w	r3, r0, r3
 8005ede:	1ad3      	subs	r3, r2, r3
 8005ee0:	011b      	lsls	r3, r3, #4
 8005ee2:	3332      	adds	r3, #50	; 0x32
 8005ee4:	4a07      	ldr	r2, [pc, #28]	; (8005f04 <UART_SetConfig+0x118>)
 8005ee6:	fba2 2303 	umull	r2, r3, r2, r3
 8005eea:	095b      	lsrs	r3, r3, #5
 8005eec:	f003 020f 	and.w	r2, r3, #15
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	440a      	add	r2, r1
 8005ef6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005ef8:	bf00      	nop
 8005efa:	3710      	adds	r7, #16
 8005efc:	46bd      	mov	sp, r7
 8005efe:	bd80      	pop	{r7, pc}
 8005f00:	40013800 	.word	0x40013800
 8005f04:	51eb851f 	.word	0x51eb851f

08005f08 <__cvt>:
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f0e:	461f      	mov	r7, r3
 8005f10:	bfbb      	ittet	lt
 8005f12:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8005f16:	461f      	movlt	r7, r3
 8005f18:	2300      	movge	r3, #0
 8005f1a:	232d      	movlt	r3, #45	; 0x2d
 8005f1c:	b088      	sub	sp, #32
 8005f1e:	4614      	mov	r4, r2
 8005f20:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005f22:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005f24:	7013      	strb	r3, [r2, #0]
 8005f26:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005f28:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8005f2c:	f023 0820 	bic.w	r8, r3, #32
 8005f30:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005f34:	d005      	beq.n	8005f42 <__cvt+0x3a>
 8005f36:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005f3a:	d100      	bne.n	8005f3e <__cvt+0x36>
 8005f3c:	3501      	adds	r5, #1
 8005f3e:	2302      	movs	r3, #2
 8005f40:	e000      	b.n	8005f44 <__cvt+0x3c>
 8005f42:	2303      	movs	r3, #3
 8005f44:	aa07      	add	r2, sp, #28
 8005f46:	9204      	str	r2, [sp, #16]
 8005f48:	aa06      	add	r2, sp, #24
 8005f4a:	e9cd a202 	strd	sl, r2, [sp, #8]
 8005f4e:	e9cd 3500 	strd	r3, r5, [sp]
 8005f52:	4622      	mov	r2, r4
 8005f54:	463b      	mov	r3, r7
 8005f56:	f001 f993 	bl	8007280 <_dtoa_r>
 8005f5a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005f5e:	4606      	mov	r6, r0
 8005f60:	d102      	bne.n	8005f68 <__cvt+0x60>
 8005f62:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005f64:	07db      	lsls	r3, r3, #31
 8005f66:	d522      	bpl.n	8005fae <__cvt+0xa6>
 8005f68:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005f6c:	eb06 0905 	add.w	r9, r6, r5
 8005f70:	d110      	bne.n	8005f94 <__cvt+0x8c>
 8005f72:	7833      	ldrb	r3, [r6, #0]
 8005f74:	2b30      	cmp	r3, #48	; 0x30
 8005f76:	d10a      	bne.n	8005f8e <__cvt+0x86>
 8005f78:	2200      	movs	r2, #0
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	4620      	mov	r0, r4
 8005f7e:	4639      	mov	r1, r7
 8005f80:	f7fa fd12 	bl	80009a8 <__aeabi_dcmpeq>
 8005f84:	b918      	cbnz	r0, 8005f8e <__cvt+0x86>
 8005f86:	f1c5 0501 	rsb	r5, r5, #1
 8005f8a:	f8ca 5000 	str.w	r5, [sl]
 8005f8e:	f8da 3000 	ldr.w	r3, [sl]
 8005f92:	4499      	add	r9, r3
 8005f94:	2200      	movs	r2, #0
 8005f96:	2300      	movs	r3, #0
 8005f98:	4620      	mov	r0, r4
 8005f9a:	4639      	mov	r1, r7
 8005f9c:	f7fa fd04 	bl	80009a8 <__aeabi_dcmpeq>
 8005fa0:	b108      	cbz	r0, 8005fa6 <__cvt+0x9e>
 8005fa2:	f8cd 901c 	str.w	r9, [sp, #28]
 8005fa6:	2230      	movs	r2, #48	; 0x30
 8005fa8:	9b07      	ldr	r3, [sp, #28]
 8005faa:	454b      	cmp	r3, r9
 8005fac:	d307      	bcc.n	8005fbe <__cvt+0xb6>
 8005fae:	4630      	mov	r0, r6
 8005fb0:	9b07      	ldr	r3, [sp, #28]
 8005fb2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005fb4:	1b9b      	subs	r3, r3, r6
 8005fb6:	6013      	str	r3, [r2, #0]
 8005fb8:	b008      	add	sp, #32
 8005fba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fbe:	1c59      	adds	r1, r3, #1
 8005fc0:	9107      	str	r1, [sp, #28]
 8005fc2:	701a      	strb	r2, [r3, #0]
 8005fc4:	e7f0      	b.n	8005fa8 <__cvt+0xa0>

08005fc6 <__exponent>:
 8005fc6:	4603      	mov	r3, r0
 8005fc8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005fca:	2900      	cmp	r1, #0
 8005fcc:	f803 2b02 	strb.w	r2, [r3], #2
 8005fd0:	bfb6      	itet	lt
 8005fd2:	222d      	movlt	r2, #45	; 0x2d
 8005fd4:	222b      	movge	r2, #43	; 0x2b
 8005fd6:	4249      	neglt	r1, r1
 8005fd8:	2909      	cmp	r1, #9
 8005fda:	7042      	strb	r2, [r0, #1]
 8005fdc:	dd2a      	ble.n	8006034 <__exponent+0x6e>
 8005fde:	f10d 0207 	add.w	r2, sp, #7
 8005fe2:	4617      	mov	r7, r2
 8005fe4:	260a      	movs	r6, #10
 8005fe6:	fb91 f5f6 	sdiv	r5, r1, r6
 8005fea:	4694      	mov	ip, r2
 8005fec:	fb06 1415 	mls	r4, r6, r5, r1
 8005ff0:	3430      	adds	r4, #48	; 0x30
 8005ff2:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8005ff6:	460c      	mov	r4, r1
 8005ff8:	2c63      	cmp	r4, #99	; 0x63
 8005ffa:	4629      	mov	r1, r5
 8005ffc:	f102 32ff 	add.w	r2, r2, #4294967295
 8006000:	dcf1      	bgt.n	8005fe6 <__exponent+0x20>
 8006002:	3130      	adds	r1, #48	; 0x30
 8006004:	f1ac 0402 	sub.w	r4, ip, #2
 8006008:	f802 1c01 	strb.w	r1, [r2, #-1]
 800600c:	4622      	mov	r2, r4
 800600e:	1c41      	adds	r1, r0, #1
 8006010:	42ba      	cmp	r2, r7
 8006012:	d30a      	bcc.n	800602a <__exponent+0x64>
 8006014:	f10d 0209 	add.w	r2, sp, #9
 8006018:	eba2 020c 	sub.w	r2, r2, ip
 800601c:	42bc      	cmp	r4, r7
 800601e:	bf88      	it	hi
 8006020:	2200      	movhi	r2, #0
 8006022:	4413      	add	r3, r2
 8006024:	1a18      	subs	r0, r3, r0
 8006026:	b003      	add	sp, #12
 8006028:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800602a:	f812 5b01 	ldrb.w	r5, [r2], #1
 800602e:	f801 5f01 	strb.w	r5, [r1, #1]!
 8006032:	e7ed      	b.n	8006010 <__exponent+0x4a>
 8006034:	2330      	movs	r3, #48	; 0x30
 8006036:	3130      	adds	r1, #48	; 0x30
 8006038:	7083      	strb	r3, [r0, #2]
 800603a:	70c1      	strb	r1, [r0, #3]
 800603c:	1d03      	adds	r3, r0, #4
 800603e:	e7f1      	b.n	8006024 <__exponent+0x5e>

08006040 <_printf_float>:
 8006040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006044:	b091      	sub	sp, #68	; 0x44
 8006046:	460c      	mov	r4, r1
 8006048:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800604c:	4616      	mov	r6, r2
 800604e:	461f      	mov	r7, r3
 8006050:	4605      	mov	r5, r0
 8006052:	f000 ffe3 	bl	800701c <_localeconv_r>
 8006056:	6803      	ldr	r3, [r0, #0]
 8006058:	4618      	mov	r0, r3
 800605a:	9309      	str	r3, [sp, #36]	; 0x24
 800605c:	f7fa f878 	bl	8000150 <strlen>
 8006060:	2300      	movs	r3, #0
 8006062:	930e      	str	r3, [sp, #56]	; 0x38
 8006064:	f8d8 3000 	ldr.w	r3, [r8]
 8006068:	900a      	str	r0, [sp, #40]	; 0x28
 800606a:	3307      	adds	r3, #7
 800606c:	f023 0307 	bic.w	r3, r3, #7
 8006070:	f103 0208 	add.w	r2, r3, #8
 8006074:	f894 9018 	ldrb.w	r9, [r4, #24]
 8006078:	f8d4 b000 	ldr.w	fp, [r4]
 800607c:	f8c8 2000 	str.w	r2, [r8]
 8006080:	e9d3 a800 	ldrd	sl, r8, [r3]
 8006084:	4652      	mov	r2, sl
 8006086:	4643      	mov	r3, r8
 8006088:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800608c:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8006090:	930b      	str	r3, [sp, #44]	; 0x2c
 8006092:	f04f 32ff 	mov.w	r2, #4294967295
 8006096:	4650      	mov	r0, sl
 8006098:	4b9c      	ldr	r3, [pc, #624]	; (800630c <_printf_float+0x2cc>)
 800609a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800609c:	f7fa fcb6 	bl	8000a0c <__aeabi_dcmpun>
 80060a0:	bb70      	cbnz	r0, 8006100 <_printf_float+0xc0>
 80060a2:	f04f 32ff 	mov.w	r2, #4294967295
 80060a6:	4650      	mov	r0, sl
 80060a8:	4b98      	ldr	r3, [pc, #608]	; (800630c <_printf_float+0x2cc>)
 80060aa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80060ac:	f7fa fc90 	bl	80009d0 <__aeabi_dcmple>
 80060b0:	bb30      	cbnz	r0, 8006100 <_printf_float+0xc0>
 80060b2:	2200      	movs	r2, #0
 80060b4:	2300      	movs	r3, #0
 80060b6:	4650      	mov	r0, sl
 80060b8:	4641      	mov	r1, r8
 80060ba:	f7fa fc7f 	bl	80009bc <__aeabi_dcmplt>
 80060be:	b110      	cbz	r0, 80060c6 <_printf_float+0x86>
 80060c0:	232d      	movs	r3, #45	; 0x2d
 80060c2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80060c6:	4a92      	ldr	r2, [pc, #584]	; (8006310 <_printf_float+0x2d0>)
 80060c8:	4b92      	ldr	r3, [pc, #584]	; (8006314 <_printf_float+0x2d4>)
 80060ca:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80060ce:	bf94      	ite	ls
 80060d0:	4690      	movls	r8, r2
 80060d2:	4698      	movhi	r8, r3
 80060d4:	2303      	movs	r3, #3
 80060d6:	f04f 0a00 	mov.w	sl, #0
 80060da:	6123      	str	r3, [r4, #16]
 80060dc:	f02b 0304 	bic.w	r3, fp, #4
 80060e0:	6023      	str	r3, [r4, #0]
 80060e2:	4633      	mov	r3, r6
 80060e4:	4621      	mov	r1, r4
 80060e6:	4628      	mov	r0, r5
 80060e8:	9700      	str	r7, [sp, #0]
 80060ea:	aa0f      	add	r2, sp, #60	; 0x3c
 80060ec:	f000 f9d6 	bl	800649c <_printf_common>
 80060f0:	3001      	adds	r0, #1
 80060f2:	f040 8090 	bne.w	8006216 <_printf_float+0x1d6>
 80060f6:	f04f 30ff 	mov.w	r0, #4294967295
 80060fa:	b011      	add	sp, #68	; 0x44
 80060fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006100:	4652      	mov	r2, sl
 8006102:	4643      	mov	r3, r8
 8006104:	4650      	mov	r0, sl
 8006106:	4641      	mov	r1, r8
 8006108:	f7fa fc80 	bl	8000a0c <__aeabi_dcmpun>
 800610c:	b148      	cbz	r0, 8006122 <_printf_float+0xe2>
 800610e:	f1b8 0f00 	cmp.w	r8, #0
 8006112:	bfb8      	it	lt
 8006114:	232d      	movlt	r3, #45	; 0x2d
 8006116:	4a80      	ldr	r2, [pc, #512]	; (8006318 <_printf_float+0x2d8>)
 8006118:	bfb8      	it	lt
 800611a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800611e:	4b7f      	ldr	r3, [pc, #508]	; (800631c <_printf_float+0x2dc>)
 8006120:	e7d3      	b.n	80060ca <_printf_float+0x8a>
 8006122:	6863      	ldr	r3, [r4, #4]
 8006124:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8006128:	1c5a      	adds	r2, r3, #1
 800612a:	d142      	bne.n	80061b2 <_printf_float+0x172>
 800612c:	2306      	movs	r3, #6
 800612e:	6063      	str	r3, [r4, #4]
 8006130:	2200      	movs	r2, #0
 8006132:	9206      	str	r2, [sp, #24]
 8006134:	aa0e      	add	r2, sp, #56	; 0x38
 8006136:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800613a:	aa0d      	add	r2, sp, #52	; 0x34
 800613c:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8006140:	9203      	str	r2, [sp, #12]
 8006142:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8006146:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800614a:	6023      	str	r3, [r4, #0]
 800614c:	6863      	ldr	r3, [r4, #4]
 800614e:	4652      	mov	r2, sl
 8006150:	9300      	str	r3, [sp, #0]
 8006152:	4628      	mov	r0, r5
 8006154:	4643      	mov	r3, r8
 8006156:	910b      	str	r1, [sp, #44]	; 0x2c
 8006158:	f7ff fed6 	bl	8005f08 <__cvt>
 800615c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800615e:	4680      	mov	r8, r0
 8006160:	2947      	cmp	r1, #71	; 0x47
 8006162:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006164:	d108      	bne.n	8006178 <_printf_float+0x138>
 8006166:	1cc8      	adds	r0, r1, #3
 8006168:	db02      	blt.n	8006170 <_printf_float+0x130>
 800616a:	6863      	ldr	r3, [r4, #4]
 800616c:	4299      	cmp	r1, r3
 800616e:	dd40      	ble.n	80061f2 <_printf_float+0x1b2>
 8006170:	f1a9 0902 	sub.w	r9, r9, #2
 8006174:	fa5f f989 	uxtb.w	r9, r9
 8006178:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800617c:	d81f      	bhi.n	80061be <_printf_float+0x17e>
 800617e:	464a      	mov	r2, r9
 8006180:	3901      	subs	r1, #1
 8006182:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006186:	910d      	str	r1, [sp, #52]	; 0x34
 8006188:	f7ff ff1d 	bl	8005fc6 <__exponent>
 800618c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800618e:	4682      	mov	sl, r0
 8006190:	1813      	adds	r3, r2, r0
 8006192:	2a01      	cmp	r2, #1
 8006194:	6123      	str	r3, [r4, #16]
 8006196:	dc02      	bgt.n	800619e <_printf_float+0x15e>
 8006198:	6822      	ldr	r2, [r4, #0]
 800619a:	07d2      	lsls	r2, r2, #31
 800619c:	d501      	bpl.n	80061a2 <_printf_float+0x162>
 800619e:	3301      	adds	r3, #1
 80061a0:	6123      	str	r3, [r4, #16]
 80061a2:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d09b      	beq.n	80060e2 <_printf_float+0xa2>
 80061aa:	232d      	movs	r3, #45	; 0x2d
 80061ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80061b0:	e797      	b.n	80060e2 <_printf_float+0xa2>
 80061b2:	2947      	cmp	r1, #71	; 0x47
 80061b4:	d1bc      	bne.n	8006130 <_printf_float+0xf0>
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d1ba      	bne.n	8006130 <_printf_float+0xf0>
 80061ba:	2301      	movs	r3, #1
 80061bc:	e7b7      	b.n	800612e <_printf_float+0xee>
 80061be:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80061c2:	d118      	bne.n	80061f6 <_printf_float+0x1b6>
 80061c4:	2900      	cmp	r1, #0
 80061c6:	6863      	ldr	r3, [r4, #4]
 80061c8:	dd0b      	ble.n	80061e2 <_printf_float+0x1a2>
 80061ca:	6121      	str	r1, [r4, #16]
 80061cc:	b913      	cbnz	r3, 80061d4 <_printf_float+0x194>
 80061ce:	6822      	ldr	r2, [r4, #0]
 80061d0:	07d0      	lsls	r0, r2, #31
 80061d2:	d502      	bpl.n	80061da <_printf_float+0x19a>
 80061d4:	3301      	adds	r3, #1
 80061d6:	440b      	add	r3, r1
 80061d8:	6123      	str	r3, [r4, #16]
 80061da:	f04f 0a00 	mov.w	sl, #0
 80061de:	65a1      	str	r1, [r4, #88]	; 0x58
 80061e0:	e7df      	b.n	80061a2 <_printf_float+0x162>
 80061e2:	b913      	cbnz	r3, 80061ea <_printf_float+0x1aa>
 80061e4:	6822      	ldr	r2, [r4, #0]
 80061e6:	07d2      	lsls	r2, r2, #31
 80061e8:	d501      	bpl.n	80061ee <_printf_float+0x1ae>
 80061ea:	3302      	adds	r3, #2
 80061ec:	e7f4      	b.n	80061d8 <_printf_float+0x198>
 80061ee:	2301      	movs	r3, #1
 80061f0:	e7f2      	b.n	80061d8 <_printf_float+0x198>
 80061f2:	f04f 0967 	mov.w	r9, #103	; 0x67
 80061f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80061f8:	4299      	cmp	r1, r3
 80061fa:	db05      	blt.n	8006208 <_printf_float+0x1c8>
 80061fc:	6823      	ldr	r3, [r4, #0]
 80061fe:	6121      	str	r1, [r4, #16]
 8006200:	07d8      	lsls	r0, r3, #31
 8006202:	d5ea      	bpl.n	80061da <_printf_float+0x19a>
 8006204:	1c4b      	adds	r3, r1, #1
 8006206:	e7e7      	b.n	80061d8 <_printf_float+0x198>
 8006208:	2900      	cmp	r1, #0
 800620a:	bfcc      	ite	gt
 800620c:	2201      	movgt	r2, #1
 800620e:	f1c1 0202 	rsble	r2, r1, #2
 8006212:	4413      	add	r3, r2
 8006214:	e7e0      	b.n	80061d8 <_printf_float+0x198>
 8006216:	6823      	ldr	r3, [r4, #0]
 8006218:	055a      	lsls	r2, r3, #21
 800621a:	d407      	bmi.n	800622c <_printf_float+0x1ec>
 800621c:	6923      	ldr	r3, [r4, #16]
 800621e:	4642      	mov	r2, r8
 8006220:	4631      	mov	r1, r6
 8006222:	4628      	mov	r0, r5
 8006224:	47b8      	blx	r7
 8006226:	3001      	adds	r0, #1
 8006228:	d12b      	bne.n	8006282 <_printf_float+0x242>
 800622a:	e764      	b.n	80060f6 <_printf_float+0xb6>
 800622c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006230:	f240 80dd 	bls.w	80063ee <_printf_float+0x3ae>
 8006234:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006238:	2200      	movs	r2, #0
 800623a:	2300      	movs	r3, #0
 800623c:	f7fa fbb4 	bl	80009a8 <__aeabi_dcmpeq>
 8006240:	2800      	cmp	r0, #0
 8006242:	d033      	beq.n	80062ac <_printf_float+0x26c>
 8006244:	2301      	movs	r3, #1
 8006246:	4631      	mov	r1, r6
 8006248:	4628      	mov	r0, r5
 800624a:	4a35      	ldr	r2, [pc, #212]	; (8006320 <_printf_float+0x2e0>)
 800624c:	47b8      	blx	r7
 800624e:	3001      	adds	r0, #1
 8006250:	f43f af51 	beq.w	80060f6 <_printf_float+0xb6>
 8006254:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006258:	429a      	cmp	r2, r3
 800625a:	db02      	blt.n	8006262 <_printf_float+0x222>
 800625c:	6823      	ldr	r3, [r4, #0]
 800625e:	07d8      	lsls	r0, r3, #31
 8006260:	d50f      	bpl.n	8006282 <_printf_float+0x242>
 8006262:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006266:	4631      	mov	r1, r6
 8006268:	4628      	mov	r0, r5
 800626a:	47b8      	blx	r7
 800626c:	3001      	adds	r0, #1
 800626e:	f43f af42 	beq.w	80060f6 <_printf_float+0xb6>
 8006272:	f04f 0800 	mov.w	r8, #0
 8006276:	f104 091a 	add.w	r9, r4, #26
 800627a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800627c:	3b01      	subs	r3, #1
 800627e:	4543      	cmp	r3, r8
 8006280:	dc09      	bgt.n	8006296 <_printf_float+0x256>
 8006282:	6823      	ldr	r3, [r4, #0]
 8006284:	079b      	lsls	r3, r3, #30
 8006286:	f100 8104 	bmi.w	8006492 <_printf_float+0x452>
 800628a:	68e0      	ldr	r0, [r4, #12]
 800628c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800628e:	4298      	cmp	r0, r3
 8006290:	bfb8      	it	lt
 8006292:	4618      	movlt	r0, r3
 8006294:	e731      	b.n	80060fa <_printf_float+0xba>
 8006296:	2301      	movs	r3, #1
 8006298:	464a      	mov	r2, r9
 800629a:	4631      	mov	r1, r6
 800629c:	4628      	mov	r0, r5
 800629e:	47b8      	blx	r7
 80062a0:	3001      	adds	r0, #1
 80062a2:	f43f af28 	beq.w	80060f6 <_printf_float+0xb6>
 80062a6:	f108 0801 	add.w	r8, r8, #1
 80062aa:	e7e6      	b.n	800627a <_printf_float+0x23a>
 80062ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	dc38      	bgt.n	8006324 <_printf_float+0x2e4>
 80062b2:	2301      	movs	r3, #1
 80062b4:	4631      	mov	r1, r6
 80062b6:	4628      	mov	r0, r5
 80062b8:	4a19      	ldr	r2, [pc, #100]	; (8006320 <_printf_float+0x2e0>)
 80062ba:	47b8      	blx	r7
 80062bc:	3001      	adds	r0, #1
 80062be:	f43f af1a 	beq.w	80060f6 <_printf_float+0xb6>
 80062c2:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80062c6:	4313      	orrs	r3, r2
 80062c8:	d102      	bne.n	80062d0 <_printf_float+0x290>
 80062ca:	6823      	ldr	r3, [r4, #0]
 80062cc:	07d9      	lsls	r1, r3, #31
 80062ce:	d5d8      	bpl.n	8006282 <_printf_float+0x242>
 80062d0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80062d4:	4631      	mov	r1, r6
 80062d6:	4628      	mov	r0, r5
 80062d8:	47b8      	blx	r7
 80062da:	3001      	adds	r0, #1
 80062dc:	f43f af0b 	beq.w	80060f6 <_printf_float+0xb6>
 80062e0:	f04f 0900 	mov.w	r9, #0
 80062e4:	f104 0a1a 	add.w	sl, r4, #26
 80062e8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80062ea:	425b      	negs	r3, r3
 80062ec:	454b      	cmp	r3, r9
 80062ee:	dc01      	bgt.n	80062f4 <_printf_float+0x2b4>
 80062f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80062f2:	e794      	b.n	800621e <_printf_float+0x1de>
 80062f4:	2301      	movs	r3, #1
 80062f6:	4652      	mov	r2, sl
 80062f8:	4631      	mov	r1, r6
 80062fa:	4628      	mov	r0, r5
 80062fc:	47b8      	blx	r7
 80062fe:	3001      	adds	r0, #1
 8006300:	f43f aef9 	beq.w	80060f6 <_printf_float+0xb6>
 8006304:	f109 0901 	add.w	r9, r9, #1
 8006308:	e7ee      	b.n	80062e8 <_printf_float+0x2a8>
 800630a:	bf00      	nop
 800630c:	7fefffff 	.word	0x7fefffff
 8006310:	0800a776 	.word	0x0800a776
 8006314:	0800a77a 	.word	0x0800a77a
 8006318:	0800a77e 	.word	0x0800a77e
 800631c:	0800a782 	.word	0x0800a782
 8006320:	0800a786 	.word	0x0800a786
 8006324:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006326:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006328:	429a      	cmp	r2, r3
 800632a:	bfa8      	it	ge
 800632c:	461a      	movge	r2, r3
 800632e:	2a00      	cmp	r2, #0
 8006330:	4691      	mov	r9, r2
 8006332:	dc37      	bgt.n	80063a4 <_printf_float+0x364>
 8006334:	f04f 0b00 	mov.w	fp, #0
 8006338:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800633c:	f104 021a 	add.w	r2, r4, #26
 8006340:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8006344:	ebaa 0309 	sub.w	r3, sl, r9
 8006348:	455b      	cmp	r3, fp
 800634a:	dc33      	bgt.n	80063b4 <_printf_float+0x374>
 800634c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006350:	429a      	cmp	r2, r3
 8006352:	db3b      	blt.n	80063cc <_printf_float+0x38c>
 8006354:	6823      	ldr	r3, [r4, #0]
 8006356:	07da      	lsls	r2, r3, #31
 8006358:	d438      	bmi.n	80063cc <_printf_float+0x38c>
 800635a:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800635e:	eba2 0903 	sub.w	r9, r2, r3
 8006362:	eba2 020a 	sub.w	r2, r2, sl
 8006366:	4591      	cmp	r9, r2
 8006368:	bfa8      	it	ge
 800636a:	4691      	movge	r9, r2
 800636c:	f1b9 0f00 	cmp.w	r9, #0
 8006370:	dc34      	bgt.n	80063dc <_printf_float+0x39c>
 8006372:	f04f 0800 	mov.w	r8, #0
 8006376:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800637a:	f104 0a1a 	add.w	sl, r4, #26
 800637e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006382:	1a9b      	subs	r3, r3, r2
 8006384:	eba3 0309 	sub.w	r3, r3, r9
 8006388:	4543      	cmp	r3, r8
 800638a:	f77f af7a 	ble.w	8006282 <_printf_float+0x242>
 800638e:	2301      	movs	r3, #1
 8006390:	4652      	mov	r2, sl
 8006392:	4631      	mov	r1, r6
 8006394:	4628      	mov	r0, r5
 8006396:	47b8      	blx	r7
 8006398:	3001      	adds	r0, #1
 800639a:	f43f aeac 	beq.w	80060f6 <_printf_float+0xb6>
 800639e:	f108 0801 	add.w	r8, r8, #1
 80063a2:	e7ec      	b.n	800637e <_printf_float+0x33e>
 80063a4:	4613      	mov	r3, r2
 80063a6:	4631      	mov	r1, r6
 80063a8:	4642      	mov	r2, r8
 80063aa:	4628      	mov	r0, r5
 80063ac:	47b8      	blx	r7
 80063ae:	3001      	adds	r0, #1
 80063b0:	d1c0      	bne.n	8006334 <_printf_float+0x2f4>
 80063b2:	e6a0      	b.n	80060f6 <_printf_float+0xb6>
 80063b4:	2301      	movs	r3, #1
 80063b6:	4631      	mov	r1, r6
 80063b8:	4628      	mov	r0, r5
 80063ba:	920b      	str	r2, [sp, #44]	; 0x2c
 80063bc:	47b8      	blx	r7
 80063be:	3001      	adds	r0, #1
 80063c0:	f43f ae99 	beq.w	80060f6 <_printf_float+0xb6>
 80063c4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80063c6:	f10b 0b01 	add.w	fp, fp, #1
 80063ca:	e7b9      	b.n	8006340 <_printf_float+0x300>
 80063cc:	4631      	mov	r1, r6
 80063ce:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80063d2:	4628      	mov	r0, r5
 80063d4:	47b8      	blx	r7
 80063d6:	3001      	adds	r0, #1
 80063d8:	d1bf      	bne.n	800635a <_printf_float+0x31a>
 80063da:	e68c      	b.n	80060f6 <_printf_float+0xb6>
 80063dc:	464b      	mov	r3, r9
 80063de:	4631      	mov	r1, r6
 80063e0:	4628      	mov	r0, r5
 80063e2:	eb08 020a 	add.w	r2, r8, sl
 80063e6:	47b8      	blx	r7
 80063e8:	3001      	adds	r0, #1
 80063ea:	d1c2      	bne.n	8006372 <_printf_float+0x332>
 80063ec:	e683      	b.n	80060f6 <_printf_float+0xb6>
 80063ee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80063f0:	2a01      	cmp	r2, #1
 80063f2:	dc01      	bgt.n	80063f8 <_printf_float+0x3b8>
 80063f4:	07db      	lsls	r3, r3, #31
 80063f6:	d539      	bpl.n	800646c <_printf_float+0x42c>
 80063f8:	2301      	movs	r3, #1
 80063fa:	4642      	mov	r2, r8
 80063fc:	4631      	mov	r1, r6
 80063fe:	4628      	mov	r0, r5
 8006400:	47b8      	blx	r7
 8006402:	3001      	adds	r0, #1
 8006404:	f43f ae77 	beq.w	80060f6 <_printf_float+0xb6>
 8006408:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800640c:	4631      	mov	r1, r6
 800640e:	4628      	mov	r0, r5
 8006410:	47b8      	blx	r7
 8006412:	3001      	adds	r0, #1
 8006414:	f43f ae6f 	beq.w	80060f6 <_printf_float+0xb6>
 8006418:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800641c:	2200      	movs	r2, #0
 800641e:	2300      	movs	r3, #0
 8006420:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8006424:	f7fa fac0 	bl	80009a8 <__aeabi_dcmpeq>
 8006428:	b9d8      	cbnz	r0, 8006462 <_printf_float+0x422>
 800642a:	f109 33ff 	add.w	r3, r9, #4294967295
 800642e:	f108 0201 	add.w	r2, r8, #1
 8006432:	4631      	mov	r1, r6
 8006434:	4628      	mov	r0, r5
 8006436:	47b8      	blx	r7
 8006438:	3001      	adds	r0, #1
 800643a:	d10e      	bne.n	800645a <_printf_float+0x41a>
 800643c:	e65b      	b.n	80060f6 <_printf_float+0xb6>
 800643e:	2301      	movs	r3, #1
 8006440:	464a      	mov	r2, r9
 8006442:	4631      	mov	r1, r6
 8006444:	4628      	mov	r0, r5
 8006446:	47b8      	blx	r7
 8006448:	3001      	adds	r0, #1
 800644a:	f43f ae54 	beq.w	80060f6 <_printf_float+0xb6>
 800644e:	f108 0801 	add.w	r8, r8, #1
 8006452:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006454:	3b01      	subs	r3, #1
 8006456:	4543      	cmp	r3, r8
 8006458:	dcf1      	bgt.n	800643e <_printf_float+0x3fe>
 800645a:	4653      	mov	r3, sl
 800645c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006460:	e6de      	b.n	8006220 <_printf_float+0x1e0>
 8006462:	f04f 0800 	mov.w	r8, #0
 8006466:	f104 091a 	add.w	r9, r4, #26
 800646a:	e7f2      	b.n	8006452 <_printf_float+0x412>
 800646c:	2301      	movs	r3, #1
 800646e:	4642      	mov	r2, r8
 8006470:	e7df      	b.n	8006432 <_printf_float+0x3f2>
 8006472:	2301      	movs	r3, #1
 8006474:	464a      	mov	r2, r9
 8006476:	4631      	mov	r1, r6
 8006478:	4628      	mov	r0, r5
 800647a:	47b8      	blx	r7
 800647c:	3001      	adds	r0, #1
 800647e:	f43f ae3a 	beq.w	80060f6 <_printf_float+0xb6>
 8006482:	f108 0801 	add.w	r8, r8, #1
 8006486:	68e3      	ldr	r3, [r4, #12]
 8006488:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800648a:	1a5b      	subs	r3, r3, r1
 800648c:	4543      	cmp	r3, r8
 800648e:	dcf0      	bgt.n	8006472 <_printf_float+0x432>
 8006490:	e6fb      	b.n	800628a <_printf_float+0x24a>
 8006492:	f04f 0800 	mov.w	r8, #0
 8006496:	f104 0919 	add.w	r9, r4, #25
 800649a:	e7f4      	b.n	8006486 <_printf_float+0x446>

0800649c <_printf_common>:
 800649c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80064a0:	4616      	mov	r6, r2
 80064a2:	4699      	mov	r9, r3
 80064a4:	688a      	ldr	r2, [r1, #8]
 80064a6:	690b      	ldr	r3, [r1, #16]
 80064a8:	4607      	mov	r7, r0
 80064aa:	4293      	cmp	r3, r2
 80064ac:	bfb8      	it	lt
 80064ae:	4613      	movlt	r3, r2
 80064b0:	6033      	str	r3, [r6, #0]
 80064b2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80064b6:	460c      	mov	r4, r1
 80064b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80064bc:	b10a      	cbz	r2, 80064c2 <_printf_common+0x26>
 80064be:	3301      	adds	r3, #1
 80064c0:	6033      	str	r3, [r6, #0]
 80064c2:	6823      	ldr	r3, [r4, #0]
 80064c4:	0699      	lsls	r1, r3, #26
 80064c6:	bf42      	ittt	mi
 80064c8:	6833      	ldrmi	r3, [r6, #0]
 80064ca:	3302      	addmi	r3, #2
 80064cc:	6033      	strmi	r3, [r6, #0]
 80064ce:	6825      	ldr	r5, [r4, #0]
 80064d0:	f015 0506 	ands.w	r5, r5, #6
 80064d4:	d106      	bne.n	80064e4 <_printf_common+0x48>
 80064d6:	f104 0a19 	add.w	sl, r4, #25
 80064da:	68e3      	ldr	r3, [r4, #12]
 80064dc:	6832      	ldr	r2, [r6, #0]
 80064de:	1a9b      	subs	r3, r3, r2
 80064e0:	42ab      	cmp	r3, r5
 80064e2:	dc2b      	bgt.n	800653c <_printf_common+0xa0>
 80064e4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80064e8:	1e13      	subs	r3, r2, #0
 80064ea:	6822      	ldr	r2, [r4, #0]
 80064ec:	bf18      	it	ne
 80064ee:	2301      	movne	r3, #1
 80064f0:	0692      	lsls	r2, r2, #26
 80064f2:	d430      	bmi.n	8006556 <_printf_common+0xba>
 80064f4:	4649      	mov	r1, r9
 80064f6:	4638      	mov	r0, r7
 80064f8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80064fc:	47c0      	blx	r8
 80064fe:	3001      	adds	r0, #1
 8006500:	d023      	beq.n	800654a <_printf_common+0xae>
 8006502:	6823      	ldr	r3, [r4, #0]
 8006504:	6922      	ldr	r2, [r4, #16]
 8006506:	f003 0306 	and.w	r3, r3, #6
 800650a:	2b04      	cmp	r3, #4
 800650c:	bf14      	ite	ne
 800650e:	2500      	movne	r5, #0
 8006510:	6833      	ldreq	r3, [r6, #0]
 8006512:	f04f 0600 	mov.w	r6, #0
 8006516:	bf08      	it	eq
 8006518:	68e5      	ldreq	r5, [r4, #12]
 800651a:	f104 041a 	add.w	r4, r4, #26
 800651e:	bf08      	it	eq
 8006520:	1aed      	subeq	r5, r5, r3
 8006522:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8006526:	bf08      	it	eq
 8006528:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800652c:	4293      	cmp	r3, r2
 800652e:	bfc4      	itt	gt
 8006530:	1a9b      	subgt	r3, r3, r2
 8006532:	18ed      	addgt	r5, r5, r3
 8006534:	42b5      	cmp	r5, r6
 8006536:	d11a      	bne.n	800656e <_printf_common+0xd2>
 8006538:	2000      	movs	r0, #0
 800653a:	e008      	b.n	800654e <_printf_common+0xb2>
 800653c:	2301      	movs	r3, #1
 800653e:	4652      	mov	r2, sl
 8006540:	4649      	mov	r1, r9
 8006542:	4638      	mov	r0, r7
 8006544:	47c0      	blx	r8
 8006546:	3001      	adds	r0, #1
 8006548:	d103      	bne.n	8006552 <_printf_common+0xb6>
 800654a:	f04f 30ff 	mov.w	r0, #4294967295
 800654e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006552:	3501      	adds	r5, #1
 8006554:	e7c1      	b.n	80064da <_printf_common+0x3e>
 8006556:	2030      	movs	r0, #48	; 0x30
 8006558:	18e1      	adds	r1, r4, r3
 800655a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800655e:	1c5a      	adds	r2, r3, #1
 8006560:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006564:	4422      	add	r2, r4
 8006566:	3302      	adds	r3, #2
 8006568:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800656c:	e7c2      	b.n	80064f4 <_printf_common+0x58>
 800656e:	2301      	movs	r3, #1
 8006570:	4622      	mov	r2, r4
 8006572:	4649      	mov	r1, r9
 8006574:	4638      	mov	r0, r7
 8006576:	47c0      	blx	r8
 8006578:	3001      	adds	r0, #1
 800657a:	d0e6      	beq.n	800654a <_printf_common+0xae>
 800657c:	3601      	adds	r6, #1
 800657e:	e7d9      	b.n	8006534 <_printf_common+0x98>

08006580 <_printf_i>:
 8006580:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006584:	7e0f      	ldrb	r7, [r1, #24]
 8006586:	4691      	mov	r9, r2
 8006588:	2f78      	cmp	r7, #120	; 0x78
 800658a:	4680      	mov	r8, r0
 800658c:	460c      	mov	r4, r1
 800658e:	469a      	mov	sl, r3
 8006590:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006592:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006596:	d807      	bhi.n	80065a8 <_printf_i+0x28>
 8006598:	2f62      	cmp	r7, #98	; 0x62
 800659a:	d80a      	bhi.n	80065b2 <_printf_i+0x32>
 800659c:	2f00      	cmp	r7, #0
 800659e:	f000 80d5 	beq.w	800674c <_printf_i+0x1cc>
 80065a2:	2f58      	cmp	r7, #88	; 0x58
 80065a4:	f000 80c1 	beq.w	800672a <_printf_i+0x1aa>
 80065a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80065ac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80065b0:	e03a      	b.n	8006628 <_printf_i+0xa8>
 80065b2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80065b6:	2b15      	cmp	r3, #21
 80065b8:	d8f6      	bhi.n	80065a8 <_printf_i+0x28>
 80065ba:	a101      	add	r1, pc, #4	; (adr r1, 80065c0 <_printf_i+0x40>)
 80065bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80065c0:	08006619 	.word	0x08006619
 80065c4:	0800662d 	.word	0x0800662d
 80065c8:	080065a9 	.word	0x080065a9
 80065cc:	080065a9 	.word	0x080065a9
 80065d0:	080065a9 	.word	0x080065a9
 80065d4:	080065a9 	.word	0x080065a9
 80065d8:	0800662d 	.word	0x0800662d
 80065dc:	080065a9 	.word	0x080065a9
 80065e0:	080065a9 	.word	0x080065a9
 80065e4:	080065a9 	.word	0x080065a9
 80065e8:	080065a9 	.word	0x080065a9
 80065ec:	08006733 	.word	0x08006733
 80065f0:	08006659 	.word	0x08006659
 80065f4:	080066ed 	.word	0x080066ed
 80065f8:	080065a9 	.word	0x080065a9
 80065fc:	080065a9 	.word	0x080065a9
 8006600:	08006755 	.word	0x08006755
 8006604:	080065a9 	.word	0x080065a9
 8006608:	08006659 	.word	0x08006659
 800660c:	080065a9 	.word	0x080065a9
 8006610:	080065a9 	.word	0x080065a9
 8006614:	080066f5 	.word	0x080066f5
 8006618:	682b      	ldr	r3, [r5, #0]
 800661a:	1d1a      	adds	r2, r3, #4
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	602a      	str	r2, [r5, #0]
 8006620:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006624:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006628:	2301      	movs	r3, #1
 800662a:	e0a0      	b.n	800676e <_printf_i+0x1ee>
 800662c:	6820      	ldr	r0, [r4, #0]
 800662e:	682b      	ldr	r3, [r5, #0]
 8006630:	0607      	lsls	r7, r0, #24
 8006632:	f103 0104 	add.w	r1, r3, #4
 8006636:	6029      	str	r1, [r5, #0]
 8006638:	d501      	bpl.n	800663e <_printf_i+0xbe>
 800663a:	681e      	ldr	r6, [r3, #0]
 800663c:	e003      	b.n	8006646 <_printf_i+0xc6>
 800663e:	0646      	lsls	r6, r0, #25
 8006640:	d5fb      	bpl.n	800663a <_printf_i+0xba>
 8006642:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006646:	2e00      	cmp	r6, #0
 8006648:	da03      	bge.n	8006652 <_printf_i+0xd2>
 800664a:	232d      	movs	r3, #45	; 0x2d
 800664c:	4276      	negs	r6, r6
 800664e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006652:	230a      	movs	r3, #10
 8006654:	4859      	ldr	r0, [pc, #356]	; (80067bc <_printf_i+0x23c>)
 8006656:	e012      	b.n	800667e <_printf_i+0xfe>
 8006658:	682b      	ldr	r3, [r5, #0]
 800665a:	6820      	ldr	r0, [r4, #0]
 800665c:	1d19      	adds	r1, r3, #4
 800665e:	6029      	str	r1, [r5, #0]
 8006660:	0605      	lsls	r5, r0, #24
 8006662:	d501      	bpl.n	8006668 <_printf_i+0xe8>
 8006664:	681e      	ldr	r6, [r3, #0]
 8006666:	e002      	b.n	800666e <_printf_i+0xee>
 8006668:	0641      	lsls	r1, r0, #25
 800666a:	d5fb      	bpl.n	8006664 <_printf_i+0xe4>
 800666c:	881e      	ldrh	r6, [r3, #0]
 800666e:	2f6f      	cmp	r7, #111	; 0x6f
 8006670:	bf0c      	ite	eq
 8006672:	2308      	moveq	r3, #8
 8006674:	230a      	movne	r3, #10
 8006676:	4851      	ldr	r0, [pc, #324]	; (80067bc <_printf_i+0x23c>)
 8006678:	2100      	movs	r1, #0
 800667a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800667e:	6865      	ldr	r5, [r4, #4]
 8006680:	2d00      	cmp	r5, #0
 8006682:	bfa8      	it	ge
 8006684:	6821      	ldrge	r1, [r4, #0]
 8006686:	60a5      	str	r5, [r4, #8]
 8006688:	bfa4      	itt	ge
 800668a:	f021 0104 	bicge.w	r1, r1, #4
 800668e:	6021      	strge	r1, [r4, #0]
 8006690:	b90e      	cbnz	r6, 8006696 <_printf_i+0x116>
 8006692:	2d00      	cmp	r5, #0
 8006694:	d04b      	beq.n	800672e <_printf_i+0x1ae>
 8006696:	4615      	mov	r5, r2
 8006698:	fbb6 f1f3 	udiv	r1, r6, r3
 800669c:	fb03 6711 	mls	r7, r3, r1, r6
 80066a0:	5dc7      	ldrb	r7, [r0, r7]
 80066a2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80066a6:	4637      	mov	r7, r6
 80066a8:	42bb      	cmp	r3, r7
 80066aa:	460e      	mov	r6, r1
 80066ac:	d9f4      	bls.n	8006698 <_printf_i+0x118>
 80066ae:	2b08      	cmp	r3, #8
 80066b0:	d10b      	bne.n	80066ca <_printf_i+0x14a>
 80066b2:	6823      	ldr	r3, [r4, #0]
 80066b4:	07de      	lsls	r6, r3, #31
 80066b6:	d508      	bpl.n	80066ca <_printf_i+0x14a>
 80066b8:	6923      	ldr	r3, [r4, #16]
 80066ba:	6861      	ldr	r1, [r4, #4]
 80066bc:	4299      	cmp	r1, r3
 80066be:	bfde      	ittt	le
 80066c0:	2330      	movle	r3, #48	; 0x30
 80066c2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80066c6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80066ca:	1b52      	subs	r2, r2, r5
 80066cc:	6122      	str	r2, [r4, #16]
 80066ce:	464b      	mov	r3, r9
 80066d0:	4621      	mov	r1, r4
 80066d2:	4640      	mov	r0, r8
 80066d4:	f8cd a000 	str.w	sl, [sp]
 80066d8:	aa03      	add	r2, sp, #12
 80066da:	f7ff fedf 	bl	800649c <_printf_common>
 80066de:	3001      	adds	r0, #1
 80066e0:	d14a      	bne.n	8006778 <_printf_i+0x1f8>
 80066e2:	f04f 30ff 	mov.w	r0, #4294967295
 80066e6:	b004      	add	sp, #16
 80066e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066ec:	6823      	ldr	r3, [r4, #0]
 80066ee:	f043 0320 	orr.w	r3, r3, #32
 80066f2:	6023      	str	r3, [r4, #0]
 80066f4:	2778      	movs	r7, #120	; 0x78
 80066f6:	4832      	ldr	r0, [pc, #200]	; (80067c0 <_printf_i+0x240>)
 80066f8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80066fc:	6823      	ldr	r3, [r4, #0]
 80066fe:	6829      	ldr	r1, [r5, #0]
 8006700:	061f      	lsls	r7, r3, #24
 8006702:	f851 6b04 	ldr.w	r6, [r1], #4
 8006706:	d402      	bmi.n	800670e <_printf_i+0x18e>
 8006708:	065f      	lsls	r7, r3, #25
 800670a:	bf48      	it	mi
 800670c:	b2b6      	uxthmi	r6, r6
 800670e:	07df      	lsls	r7, r3, #31
 8006710:	bf48      	it	mi
 8006712:	f043 0320 	orrmi.w	r3, r3, #32
 8006716:	6029      	str	r1, [r5, #0]
 8006718:	bf48      	it	mi
 800671a:	6023      	strmi	r3, [r4, #0]
 800671c:	b91e      	cbnz	r6, 8006726 <_printf_i+0x1a6>
 800671e:	6823      	ldr	r3, [r4, #0]
 8006720:	f023 0320 	bic.w	r3, r3, #32
 8006724:	6023      	str	r3, [r4, #0]
 8006726:	2310      	movs	r3, #16
 8006728:	e7a6      	b.n	8006678 <_printf_i+0xf8>
 800672a:	4824      	ldr	r0, [pc, #144]	; (80067bc <_printf_i+0x23c>)
 800672c:	e7e4      	b.n	80066f8 <_printf_i+0x178>
 800672e:	4615      	mov	r5, r2
 8006730:	e7bd      	b.n	80066ae <_printf_i+0x12e>
 8006732:	682b      	ldr	r3, [r5, #0]
 8006734:	6826      	ldr	r6, [r4, #0]
 8006736:	1d18      	adds	r0, r3, #4
 8006738:	6961      	ldr	r1, [r4, #20]
 800673a:	6028      	str	r0, [r5, #0]
 800673c:	0635      	lsls	r5, r6, #24
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	d501      	bpl.n	8006746 <_printf_i+0x1c6>
 8006742:	6019      	str	r1, [r3, #0]
 8006744:	e002      	b.n	800674c <_printf_i+0x1cc>
 8006746:	0670      	lsls	r0, r6, #25
 8006748:	d5fb      	bpl.n	8006742 <_printf_i+0x1c2>
 800674a:	8019      	strh	r1, [r3, #0]
 800674c:	2300      	movs	r3, #0
 800674e:	4615      	mov	r5, r2
 8006750:	6123      	str	r3, [r4, #16]
 8006752:	e7bc      	b.n	80066ce <_printf_i+0x14e>
 8006754:	682b      	ldr	r3, [r5, #0]
 8006756:	2100      	movs	r1, #0
 8006758:	1d1a      	adds	r2, r3, #4
 800675a:	602a      	str	r2, [r5, #0]
 800675c:	681d      	ldr	r5, [r3, #0]
 800675e:	6862      	ldr	r2, [r4, #4]
 8006760:	4628      	mov	r0, r5
 8006762:	f000 fcd2 	bl	800710a <memchr>
 8006766:	b108      	cbz	r0, 800676c <_printf_i+0x1ec>
 8006768:	1b40      	subs	r0, r0, r5
 800676a:	6060      	str	r0, [r4, #4]
 800676c:	6863      	ldr	r3, [r4, #4]
 800676e:	6123      	str	r3, [r4, #16]
 8006770:	2300      	movs	r3, #0
 8006772:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006776:	e7aa      	b.n	80066ce <_printf_i+0x14e>
 8006778:	462a      	mov	r2, r5
 800677a:	4649      	mov	r1, r9
 800677c:	4640      	mov	r0, r8
 800677e:	6923      	ldr	r3, [r4, #16]
 8006780:	47d0      	blx	sl
 8006782:	3001      	adds	r0, #1
 8006784:	d0ad      	beq.n	80066e2 <_printf_i+0x162>
 8006786:	6823      	ldr	r3, [r4, #0]
 8006788:	079b      	lsls	r3, r3, #30
 800678a:	d413      	bmi.n	80067b4 <_printf_i+0x234>
 800678c:	68e0      	ldr	r0, [r4, #12]
 800678e:	9b03      	ldr	r3, [sp, #12]
 8006790:	4298      	cmp	r0, r3
 8006792:	bfb8      	it	lt
 8006794:	4618      	movlt	r0, r3
 8006796:	e7a6      	b.n	80066e6 <_printf_i+0x166>
 8006798:	2301      	movs	r3, #1
 800679a:	4632      	mov	r2, r6
 800679c:	4649      	mov	r1, r9
 800679e:	4640      	mov	r0, r8
 80067a0:	47d0      	blx	sl
 80067a2:	3001      	adds	r0, #1
 80067a4:	d09d      	beq.n	80066e2 <_printf_i+0x162>
 80067a6:	3501      	adds	r5, #1
 80067a8:	68e3      	ldr	r3, [r4, #12]
 80067aa:	9903      	ldr	r1, [sp, #12]
 80067ac:	1a5b      	subs	r3, r3, r1
 80067ae:	42ab      	cmp	r3, r5
 80067b0:	dcf2      	bgt.n	8006798 <_printf_i+0x218>
 80067b2:	e7eb      	b.n	800678c <_printf_i+0x20c>
 80067b4:	2500      	movs	r5, #0
 80067b6:	f104 0619 	add.w	r6, r4, #25
 80067ba:	e7f5      	b.n	80067a8 <_printf_i+0x228>
 80067bc:	0800a788 	.word	0x0800a788
 80067c0:	0800a799 	.word	0x0800a799

080067c4 <_scanf_float>:
 80067c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067c8:	b087      	sub	sp, #28
 80067ca:	9303      	str	r3, [sp, #12]
 80067cc:	688b      	ldr	r3, [r1, #8]
 80067ce:	4617      	mov	r7, r2
 80067d0:	1e5a      	subs	r2, r3, #1
 80067d2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80067d6:	bf85      	ittet	hi
 80067d8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80067dc:	195b      	addhi	r3, r3, r5
 80067de:	2300      	movls	r3, #0
 80067e0:	9302      	strhi	r3, [sp, #8]
 80067e2:	bf88      	it	hi
 80067e4:	f240 135d 	movwhi	r3, #349	; 0x15d
 80067e8:	468b      	mov	fp, r1
 80067ea:	f04f 0500 	mov.w	r5, #0
 80067ee:	bf8c      	ite	hi
 80067f0:	608b      	strhi	r3, [r1, #8]
 80067f2:	9302      	strls	r3, [sp, #8]
 80067f4:	680b      	ldr	r3, [r1, #0]
 80067f6:	4680      	mov	r8, r0
 80067f8:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80067fc:	f84b 3b1c 	str.w	r3, [fp], #28
 8006800:	460c      	mov	r4, r1
 8006802:	465e      	mov	r6, fp
 8006804:	46aa      	mov	sl, r5
 8006806:	46a9      	mov	r9, r5
 8006808:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800680c:	9501      	str	r5, [sp, #4]
 800680e:	68a2      	ldr	r2, [r4, #8]
 8006810:	b152      	cbz	r2, 8006828 <_scanf_float+0x64>
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	781b      	ldrb	r3, [r3, #0]
 8006816:	2b4e      	cmp	r3, #78	; 0x4e
 8006818:	d864      	bhi.n	80068e4 <_scanf_float+0x120>
 800681a:	2b40      	cmp	r3, #64	; 0x40
 800681c:	d83c      	bhi.n	8006898 <_scanf_float+0xd4>
 800681e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8006822:	b2c8      	uxtb	r0, r1
 8006824:	280e      	cmp	r0, #14
 8006826:	d93a      	bls.n	800689e <_scanf_float+0xda>
 8006828:	f1b9 0f00 	cmp.w	r9, #0
 800682c:	d003      	beq.n	8006836 <_scanf_float+0x72>
 800682e:	6823      	ldr	r3, [r4, #0]
 8006830:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006834:	6023      	str	r3, [r4, #0]
 8006836:	f10a 3aff 	add.w	sl, sl, #4294967295
 800683a:	f1ba 0f01 	cmp.w	sl, #1
 800683e:	f200 8113 	bhi.w	8006a68 <_scanf_float+0x2a4>
 8006842:	455e      	cmp	r6, fp
 8006844:	f200 8105 	bhi.w	8006a52 <_scanf_float+0x28e>
 8006848:	2501      	movs	r5, #1
 800684a:	4628      	mov	r0, r5
 800684c:	b007      	add	sp, #28
 800684e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006852:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8006856:	2a0d      	cmp	r2, #13
 8006858:	d8e6      	bhi.n	8006828 <_scanf_float+0x64>
 800685a:	a101      	add	r1, pc, #4	; (adr r1, 8006860 <_scanf_float+0x9c>)
 800685c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006860:	0800699f 	.word	0x0800699f
 8006864:	08006829 	.word	0x08006829
 8006868:	08006829 	.word	0x08006829
 800686c:	08006829 	.word	0x08006829
 8006870:	080069ff 	.word	0x080069ff
 8006874:	080069d7 	.word	0x080069d7
 8006878:	08006829 	.word	0x08006829
 800687c:	08006829 	.word	0x08006829
 8006880:	080069ad 	.word	0x080069ad
 8006884:	08006829 	.word	0x08006829
 8006888:	08006829 	.word	0x08006829
 800688c:	08006829 	.word	0x08006829
 8006890:	08006829 	.word	0x08006829
 8006894:	08006965 	.word	0x08006965
 8006898:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800689c:	e7db      	b.n	8006856 <_scanf_float+0x92>
 800689e:	290e      	cmp	r1, #14
 80068a0:	d8c2      	bhi.n	8006828 <_scanf_float+0x64>
 80068a2:	a001      	add	r0, pc, #4	; (adr r0, 80068a8 <_scanf_float+0xe4>)
 80068a4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80068a8:	08006957 	.word	0x08006957
 80068ac:	08006829 	.word	0x08006829
 80068b0:	08006957 	.word	0x08006957
 80068b4:	080069eb 	.word	0x080069eb
 80068b8:	08006829 	.word	0x08006829
 80068bc:	08006905 	.word	0x08006905
 80068c0:	08006941 	.word	0x08006941
 80068c4:	08006941 	.word	0x08006941
 80068c8:	08006941 	.word	0x08006941
 80068cc:	08006941 	.word	0x08006941
 80068d0:	08006941 	.word	0x08006941
 80068d4:	08006941 	.word	0x08006941
 80068d8:	08006941 	.word	0x08006941
 80068dc:	08006941 	.word	0x08006941
 80068e0:	08006941 	.word	0x08006941
 80068e4:	2b6e      	cmp	r3, #110	; 0x6e
 80068e6:	d809      	bhi.n	80068fc <_scanf_float+0x138>
 80068e8:	2b60      	cmp	r3, #96	; 0x60
 80068ea:	d8b2      	bhi.n	8006852 <_scanf_float+0x8e>
 80068ec:	2b54      	cmp	r3, #84	; 0x54
 80068ee:	d077      	beq.n	80069e0 <_scanf_float+0x21c>
 80068f0:	2b59      	cmp	r3, #89	; 0x59
 80068f2:	d199      	bne.n	8006828 <_scanf_float+0x64>
 80068f4:	2d07      	cmp	r5, #7
 80068f6:	d197      	bne.n	8006828 <_scanf_float+0x64>
 80068f8:	2508      	movs	r5, #8
 80068fa:	e029      	b.n	8006950 <_scanf_float+0x18c>
 80068fc:	2b74      	cmp	r3, #116	; 0x74
 80068fe:	d06f      	beq.n	80069e0 <_scanf_float+0x21c>
 8006900:	2b79      	cmp	r3, #121	; 0x79
 8006902:	e7f6      	b.n	80068f2 <_scanf_float+0x12e>
 8006904:	6821      	ldr	r1, [r4, #0]
 8006906:	05c8      	lsls	r0, r1, #23
 8006908:	d51a      	bpl.n	8006940 <_scanf_float+0x17c>
 800690a:	9b02      	ldr	r3, [sp, #8]
 800690c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006910:	6021      	str	r1, [r4, #0]
 8006912:	f109 0901 	add.w	r9, r9, #1
 8006916:	b11b      	cbz	r3, 8006920 <_scanf_float+0x15c>
 8006918:	3b01      	subs	r3, #1
 800691a:	3201      	adds	r2, #1
 800691c:	9302      	str	r3, [sp, #8]
 800691e:	60a2      	str	r2, [r4, #8]
 8006920:	68a3      	ldr	r3, [r4, #8]
 8006922:	3b01      	subs	r3, #1
 8006924:	60a3      	str	r3, [r4, #8]
 8006926:	6923      	ldr	r3, [r4, #16]
 8006928:	3301      	adds	r3, #1
 800692a:	6123      	str	r3, [r4, #16]
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	3b01      	subs	r3, #1
 8006930:	2b00      	cmp	r3, #0
 8006932:	607b      	str	r3, [r7, #4]
 8006934:	f340 8084 	ble.w	8006a40 <_scanf_float+0x27c>
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	3301      	adds	r3, #1
 800693c:	603b      	str	r3, [r7, #0]
 800693e:	e766      	b.n	800680e <_scanf_float+0x4a>
 8006940:	eb1a 0f05 	cmn.w	sl, r5
 8006944:	f47f af70 	bne.w	8006828 <_scanf_float+0x64>
 8006948:	6822      	ldr	r2, [r4, #0]
 800694a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800694e:	6022      	str	r2, [r4, #0]
 8006950:	f806 3b01 	strb.w	r3, [r6], #1
 8006954:	e7e4      	b.n	8006920 <_scanf_float+0x15c>
 8006956:	6822      	ldr	r2, [r4, #0]
 8006958:	0610      	lsls	r0, r2, #24
 800695a:	f57f af65 	bpl.w	8006828 <_scanf_float+0x64>
 800695e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006962:	e7f4      	b.n	800694e <_scanf_float+0x18a>
 8006964:	f1ba 0f00 	cmp.w	sl, #0
 8006968:	d10e      	bne.n	8006988 <_scanf_float+0x1c4>
 800696a:	f1b9 0f00 	cmp.w	r9, #0
 800696e:	d10e      	bne.n	800698e <_scanf_float+0x1ca>
 8006970:	6822      	ldr	r2, [r4, #0]
 8006972:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006976:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800697a:	d108      	bne.n	800698e <_scanf_float+0x1ca>
 800697c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006980:	f04f 0a01 	mov.w	sl, #1
 8006984:	6022      	str	r2, [r4, #0]
 8006986:	e7e3      	b.n	8006950 <_scanf_float+0x18c>
 8006988:	f1ba 0f02 	cmp.w	sl, #2
 800698c:	d055      	beq.n	8006a3a <_scanf_float+0x276>
 800698e:	2d01      	cmp	r5, #1
 8006990:	d002      	beq.n	8006998 <_scanf_float+0x1d4>
 8006992:	2d04      	cmp	r5, #4
 8006994:	f47f af48 	bne.w	8006828 <_scanf_float+0x64>
 8006998:	3501      	adds	r5, #1
 800699a:	b2ed      	uxtb	r5, r5
 800699c:	e7d8      	b.n	8006950 <_scanf_float+0x18c>
 800699e:	f1ba 0f01 	cmp.w	sl, #1
 80069a2:	f47f af41 	bne.w	8006828 <_scanf_float+0x64>
 80069a6:	f04f 0a02 	mov.w	sl, #2
 80069aa:	e7d1      	b.n	8006950 <_scanf_float+0x18c>
 80069ac:	b97d      	cbnz	r5, 80069ce <_scanf_float+0x20a>
 80069ae:	f1b9 0f00 	cmp.w	r9, #0
 80069b2:	f47f af3c 	bne.w	800682e <_scanf_float+0x6a>
 80069b6:	6822      	ldr	r2, [r4, #0]
 80069b8:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80069bc:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80069c0:	f47f af39 	bne.w	8006836 <_scanf_float+0x72>
 80069c4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80069c8:	2501      	movs	r5, #1
 80069ca:	6022      	str	r2, [r4, #0]
 80069cc:	e7c0      	b.n	8006950 <_scanf_float+0x18c>
 80069ce:	2d03      	cmp	r5, #3
 80069d0:	d0e2      	beq.n	8006998 <_scanf_float+0x1d4>
 80069d2:	2d05      	cmp	r5, #5
 80069d4:	e7de      	b.n	8006994 <_scanf_float+0x1d0>
 80069d6:	2d02      	cmp	r5, #2
 80069d8:	f47f af26 	bne.w	8006828 <_scanf_float+0x64>
 80069dc:	2503      	movs	r5, #3
 80069de:	e7b7      	b.n	8006950 <_scanf_float+0x18c>
 80069e0:	2d06      	cmp	r5, #6
 80069e2:	f47f af21 	bne.w	8006828 <_scanf_float+0x64>
 80069e6:	2507      	movs	r5, #7
 80069e8:	e7b2      	b.n	8006950 <_scanf_float+0x18c>
 80069ea:	6822      	ldr	r2, [r4, #0]
 80069ec:	0591      	lsls	r1, r2, #22
 80069ee:	f57f af1b 	bpl.w	8006828 <_scanf_float+0x64>
 80069f2:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80069f6:	6022      	str	r2, [r4, #0]
 80069f8:	f8cd 9004 	str.w	r9, [sp, #4]
 80069fc:	e7a8      	b.n	8006950 <_scanf_float+0x18c>
 80069fe:	6822      	ldr	r2, [r4, #0]
 8006a00:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8006a04:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8006a08:	d006      	beq.n	8006a18 <_scanf_float+0x254>
 8006a0a:	0550      	lsls	r0, r2, #21
 8006a0c:	f57f af0c 	bpl.w	8006828 <_scanf_float+0x64>
 8006a10:	f1b9 0f00 	cmp.w	r9, #0
 8006a14:	f43f af0f 	beq.w	8006836 <_scanf_float+0x72>
 8006a18:	0591      	lsls	r1, r2, #22
 8006a1a:	bf58      	it	pl
 8006a1c:	9901      	ldrpl	r1, [sp, #4]
 8006a1e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006a22:	bf58      	it	pl
 8006a24:	eba9 0101 	subpl.w	r1, r9, r1
 8006a28:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8006a2c:	f04f 0900 	mov.w	r9, #0
 8006a30:	bf58      	it	pl
 8006a32:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006a36:	6022      	str	r2, [r4, #0]
 8006a38:	e78a      	b.n	8006950 <_scanf_float+0x18c>
 8006a3a:	f04f 0a03 	mov.w	sl, #3
 8006a3e:	e787      	b.n	8006950 <_scanf_float+0x18c>
 8006a40:	4639      	mov	r1, r7
 8006a42:	4640      	mov	r0, r8
 8006a44:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006a48:	4798      	blx	r3
 8006a4a:	2800      	cmp	r0, #0
 8006a4c:	f43f aedf 	beq.w	800680e <_scanf_float+0x4a>
 8006a50:	e6ea      	b.n	8006828 <_scanf_float+0x64>
 8006a52:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006a56:	463a      	mov	r2, r7
 8006a58:	4640      	mov	r0, r8
 8006a5a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006a5e:	4798      	blx	r3
 8006a60:	6923      	ldr	r3, [r4, #16]
 8006a62:	3b01      	subs	r3, #1
 8006a64:	6123      	str	r3, [r4, #16]
 8006a66:	e6ec      	b.n	8006842 <_scanf_float+0x7e>
 8006a68:	1e6b      	subs	r3, r5, #1
 8006a6a:	2b06      	cmp	r3, #6
 8006a6c:	d825      	bhi.n	8006aba <_scanf_float+0x2f6>
 8006a6e:	2d02      	cmp	r5, #2
 8006a70:	d836      	bhi.n	8006ae0 <_scanf_float+0x31c>
 8006a72:	455e      	cmp	r6, fp
 8006a74:	f67f aee8 	bls.w	8006848 <_scanf_float+0x84>
 8006a78:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006a7c:	463a      	mov	r2, r7
 8006a7e:	4640      	mov	r0, r8
 8006a80:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006a84:	4798      	blx	r3
 8006a86:	6923      	ldr	r3, [r4, #16]
 8006a88:	3b01      	subs	r3, #1
 8006a8a:	6123      	str	r3, [r4, #16]
 8006a8c:	e7f1      	b.n	8006a72 <_scanf_float+0x2ae>
 8006a8e:	9802      	ldr	r0, [sp, #8]
 8006a90:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006a94:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8006a98:	463a      	mov	r2, r7
 8006a9a:	9002      	str	r0, [sp, #8]
 8006a9c:	4640      	mov	r0, r8
 8006a9e:	4798      	blx	r3
 8006aa0:	6923      	ldr	r3, [r4, #16]
 8006aa2:	3b01      	subs	r3, #1
 8006aa4:	6123      	str	r3, [r4, #16]
 8006aa6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006aaa:	fa5f fa8a 	uxtb.w	sl, sl
 8006aae:	f1ba 0f02 	cmp.w	sl, #2
 8006ab2:	d1ec      	bne.n	8006a8e <_scanf_float+0x2ca>
 8006ab4:	3d03      	subs	r5, #3
 8006ab6:	b2ed      	uxtb	r5, r5
 8006ab8:	1b76      	subs	r6, r6, r5
 8006aba:	6823      	ldr	r3, [r4, #0]
 8006abc:	05da      	lsls	r2, r3, #23
 8006abe:	d52f      	bpl.n	8006b20 <_scanf_float+0x35c>
 8006ac0:	055b      	lsls	r3, r3, #21
 8006ac2:	d510      	bpl.n	8006ae6 <_scanf_float+0x322>
 8006ac4:	455e      	cmp	r6, fp
 8006ac6:	f67f aebf 	bls.w	8006848 <_scanf_float+0x84>
 8006aca:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006ace:	463a      	mov	r2, r7
 8006ad0:	4640      	mov	r0, r8
 8006ad2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006ad6:	4798      	blx	r3
 8006ad8:	6923      	ldr	r3, [r4, #16]
 8006ada:	3b01      	subs	r3, #1
 8006adc:	6123      	str	r3, [r4, #16]
 8006ade:	e7f1      	b.n	8006ac4 <_scanf_float+0x300>
 8006ae0:	46aa      	mov	sl, r5
 8006ae2:	9602      	str	r6, [sp, #8]
 8006ae4:	e7df      	b.n	8006aa6 <_scanf_float+0x2e2>
 8006ae6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006aea:	6923      	ldr	r3, [r4, #16]
 8006aec:	2965      	cmp	r1, #101	; 0x65
 8006aee:	f103 33ff 	add.w	r3, r3, #4294967295
 8006af2:	f106 35ff 	add.w	r5, r6, #4294967295
 8006af6:	6123      	str	r3, [r4, #16]
 8006af8:	d00c      	beq.n	8006b14 <_scanf_float+0x350>
 8006afa:	2945      	cmp	r1, #69	; 0x45
 8006afc:	d00a      	beq.n	8006b14 <_scanf_float+0x350>
 8006afe:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006b02:	463a      	mov	r2, r7
 8006b04:	4640      	mov	r0, r8
 8006b06:	4798      	blx	r3
 8006b08:	6923      	ldr	r3, [r4, #16]
 8006b0a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006b0e:	3b01      	subs	r3, #1
 8006b10:	1eb5      	subs	r5, r6, #2
 8006b12:	6123      	str	r3, [r4, #16]
 8006b14:	463a      	mov	r2, r7
 8006b16:	4640      	mov	r0, r8
 8006b18:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006b1c:	4798      	blx	r3
 8006b1e:	462e      	mov	r6, r5
 8006b20:	6825      	ldr	r5, [r4, #0]
 8006b22:	f015 0510 	ands.w	r5, r5, #16
 8006b26:	d155      	bne.n	8006bd4 <_scanf_float+0x410>
 8006b28:	7035      	strb	r5, [r6, #0]
 8006b2a:	6823      	ldr	r3, [r4, #0]
 8006b2c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006b30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b34:	d11d      	bne.n	8006b72 <_scanf_float+0x3ae>
 8006b36:	9b01      	ldr	r3, [sp, #4]
 8006b38:	454b      	cmp	r3, r9
 8006b3a:	eba3 0209 	sub.w	r2, r3, r9
 8006b3e:	d125      	bne.n	8006b8c <_scanf_float+0x3c8>
 8006b40:	2200      	movs	r2, #0
 8006b42:	4659      	mov	r1, fp
 8006b44:	4640      	mov	r0, r8
 8006b46:	f002 fd2f 	bl	80095a8 <_strtod_r>
 8006b4a:	9b03      	ldr	r3, [sp, #12]
 8006b4c:	f8d4 c000 	ldr.w	ip, [r4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f01c 0f02 	tst.w	ip, #2
 8006b56:	4606      	mov	r6, r0
 8006b58:	460f      	mov	r7, r1
 8006b5a:	f103 0204 	add.w	r2, r3, #4
 8006b5e:	d020      	beq.n	8006ba2 <_scanf_float+0x3de>
 8006b60:	9903      	ldr	r1, [sp, #12]
 8006b62:	600a      	str	r2, [r1, #0]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	e9c3 6700 	strd	r6, r7, [r3]
 8006b6a:	68e3      	ldr	r3, [r4, #12]
 8006b6c:	3301      	adds	r3, #1
 8006b6e:	60e3      	str	r3, [r4, #12]
 8006b70:	e66b      	b.n	800684a <_scanf_float+0x86>
 8006b72:	9b04      	ldr	r3, [sp, #16]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d0e3      	beq.n	8006b40 <_scanf_float+0x37c>
 8006b78:	9905      	ldr	r1, [sp, #20]
 8006b7a:	230a      	movs	r3, #10
 8006b7c:	462a      	mov	r2, r5
 8006b7e:	4640      	mov	r0, r8
 8006b80:	3101      	adds	r1, #1
 8006b82:	f002 fd95 	bl	80096b0 <_strtol_r>
 8006b86:	9b04      	ldr	r3, [sp, #16]
 8006b88:	9e05      	ldr	r6, [sp, #20]
 8006b8a:	1ac2      	subs	r2, r0, r3
 8006b8c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8006b90:	429e      	cmp	r6, r3
 8006b92:	bf28      	it	cs
 8006b94:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8006b98:	4630      	mov	r0, r6
 8006b9a:	490f      	ldr	r1, [pc, #60]	; (8006bd8 <_scanf_float+0x414>)
 8006b9c:	f000 f93e 	bl	8006e1c <siprintf>
 8006ba0:	e7ce      	b.n	8006b40 <_scanf_float+0x37c>
 8006ba2:	f01c 0f04 	tst.w	ip, #4
 8006ba6:	d1db      	bne.n	8006b60 <_scanf_float+0x39c>
 8006ba8:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8006bac:	f8cc 2000 	str.w	r2, [ip]
 8006bb0:	f8d3 8000 	ldr.w	r8, [r3]
 8006bb4:	4602      	mov	r2, r0
 8006bb6:	460b      	mov	r3, r1
 8006bb8:	f7f9 ff28 	bl	8000a0c <__aeabi_dcmpun>
 8006bbc:	b128      	cbz	r0, 8006bca <_scanf_float+0x406>
 8006bbe:	4807      	ldr	r0, [pc, #28]	; (8006bdc <_scanf_float+0x418>)
 8006bc0:	f000 fab2 	bl	8007128 <nanf>
 8006bc4:	f8c8 0000 	str.w	r0, [r8]
 8006bc8:	e7cf      	b.n	8006b6a <_scanf_float+0x3a6>
 8006bca:	4630      	mov	r0, r6
 8006bcc:	4639      	mov	r1, r7
 8006bce:	f7f9 ff7b 	bl	8000ac8 <__aeabi_d2f>
 8006bd2:	e7f7      	b.n	8006bc4 <_scanf_float+0x400>
 8006bd4:	2500      	movs	r5, #0
 8006bd6:	e638      	b.n	800684a <_scanf_float+0x86>
 8006bd8:	0800a7aa 	.word	0x0800a7aa
 8006bdc:	0800a7ea 	.word	0x0800a7ea

08006be0 <std>:
 8006be0:	2300      	movs	r3, #0
 8006be2:	b510      	push	{r4, lr}
 8006be4:	4604      	mov	r4, r0
 8006be6:	e9c0 3300 	strd	r3, r3, [r0]
 8006bea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006bee:	6083      	str	r3, [r0, #8]
 8006bf0:	8181      	strh	r1, [r0, #12]
 8006bf2:	6643      	str	r3, [r0, #100]	; 0x64
 8006bf4:	81c2      	strh	r2, [r0, #14]
 8006bf6:	6183      	str	r3, [r0, #24]
 8006bf8:	4619      	mov	r1, r3
 8006bfa:	2208      	movs	r2, #8
 8006bfc:	305c      	adds	r0, #92	; 0x5c
 8006bfe:	f000 fa05 	bl	800700c <memset>
 8006c02:	4b0d      	ldr	r3, [pc, #52]	; (8006c38 <std+0x58>)
 8006c04:	6224      	str	r4, [r4, #32]
 8006c06:	6263      	str	r3, [r4, #36]	; 0x24
 8006c08:	4b0c      	ldr	r3, [pc, #48]	; (8006c3c <std+0x5c>)
 8006c0a:	62a3      	str	r3, [r4, #40]	; 0x28
 8006c0c:	4b0c      	ldr	r3, [pc, #48]	; (8006c40 <std+0x60>)
 8006c0e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006c10:	4b0c      	ldr	r3, [pc, #48]	; (8006c44 <std+0x64>)
 8006c12:	6323      	str	r3, [r4, #48]	; 0x30
 8006c14:	4b0c      	ldr	r3, [pc, #48]	; (8006c48 <std+0x68>)
 8006c16:	429c      	cmp	r4, r3
 8006c18:	d006      	beq.n	8006c28 <std+0x48>
 8006c1a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8006c1e:	4294      	cmp	r4, r2
 8006c20:	d002      	beq.n	8006c28 <std+0x48>
 8006c22:	33d0      	adds	r3, #208	; 0xd0
 8006c24:	429c      	cmp	r4, r3
 8006c26:	d105      	bne.n	8006c34 <std+0x54>
 8006c28:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006c2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c30:	f000 ba68 	b.w	8007104 <__retarget_lock_init_recursive>
 8006c34:	bd10      	pop	{r4, pc}
 8006c36:	bf00      	nop
 8006c38:	08006e5d 	.word	0x08006e5d
 8006c3c:	08006e7f 	.word	0x08006e7f
 8006c40:	08006eb7 	.word	0x08006eb7
 8006c44:	08006edb 	.word	0x08006edb
 8006c48:	200004d0 	.word	0x200004d0

08006c4c <stdio_exit_handler>:
 8006c4c:	4a02      	ldr	r2, [pc, #8]	; (8006c58 <stdio_exit_handler+0xc>)
 8006c4e:	4903      	ldr	r1, [pc, #12]	; (8006c5c <stdio_exit_handler+0x10>)
 8006c50:	4803      	ldr	r0, [pc, #12]	; (8006c60 <stdio_exit_handler+0x14>)
 8006c52:	f000 b869 	b.w	8006d28 <_fwalk_sglue>
 8006c56:	bf00      	nop
 8006c58:	20000044 	.word	0x20000044
 8006c5c:	08009ced 	.word	0x08009ced
 8006c60:	20000050 	.word	0x20000050

08006c64 <cleanup_stdio>:
 8006c64:	6841      	ldr	r1, [r0, #4]
 8006c66:	4b0c      	ldr	r3, [pc, #48]	; (8006c98 <cleanup_stdio+0x34>)
 8006c68:	b510      	push	{r4, lr}
 8006c6a:	4299      	cmp	r1, r3
 8006c6c:	4604      	mov	r4, r0
 8006c6e:	d001      	beq.n	8006c74 <cleanup_stdio+0x10>
 8006c70:	f003 f83c 	bl	8009cec <_fflush_r>
 8006c74:	68a1      	ldr	r1, [r4, #8]
 8006c76:	4b09      	ldr	r3, [pc, #36]	; (8006c9c <cleanup_stdio+0x38>)
 8006c78:	4299      	cmp	r1, r3
 8006c7a:	d002      	beq.n	8006c82 <cleanup_stdio+0x1e>
 8006c7c:	4620      	mov	r0, r4
 8006c7e:	f003 f835 	bl	8009cec <_fflush_r>
 8006c82:	68e1      	ldr	r1, [r4, #12]
 8006c84:	4b06      	ldr	r3, [pc, #24]	; (8006ca0 <cleanup_stdio+0x3c>)
 8006c86:	4299      	cmp	r1, r3
 8006c88:	d004      	beq.n	8006c94 <cleanup_stdio+0x30>
 8006c8a:	4620      	mov	r0, r4
 8006c8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c90:	f003 b82c 	b.w	8009cec <_fflush_r>
 8006c94:	bd10      	pop	{r4, pc}
 8006c96:	bf00      	nop
 8006c98:	200004d0 	.word	0x200004d0
 8006c9c:	20000538 	.word	0x20000538
 8006ca0:	200005a0 	.word	0x200005a0

08006ca4 <global_stdio_init.part.0>:
 8006ca4:	b510      	push	{r4, lr}
 8006ca6:	4b0b      	ldr	r3, [pc, #44]	; (8006cd4 <global_stdio_init.part.0+0x30>)
 8006ca8:	4c0b      	ldr	r4, [pc, #44]	; (8006cd8 <global_stdio_init.part.0+0x34>)
 8006caa:	4a0c      	ldr	r2, [pc, #48]	; (8006cdc <global_stdio_init.part.0+0x38>)
 8006cac:	4620      	mov	r0, r4
 8006cae:	601a      	str	r2, [r3, #0]
 8006cb0:	2104      	movs	r1, #4
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	f7ff ff94 	bl	8006be0 <std>
 8006cb8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006cbc:	2201      	movs	r2, #1
 8006cbe:	2109      	movs	r1, #9
 8006cc0:	f7ff ff8e 	bl	8006be0 <std>
 8006cc4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006cc8:	2202      	movs	r2, #2
 8006cca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006cce:	2112      	movs	r1, #18
 8006cd0:	f7ff bf86 	b.w	8006be0 <std>
 8006cd4:	20000608 	.word	0x20000608
 8006cd8:	200004d0 	.word	0x200004d0
 8006cdc:	08006c4d 	.word	0x08006c4d

08006ce0 <__sfp_lock_acquire>:
 8006ce0:	4801      	ldr	r0, [pc, #4]	; (8006ce8 <__sfp_lock_acquire+0x8>)
 8006ce2:	f000 ba10 	b.w	8007106 <__retarget_lock_acquire_recursive>
 8006ce6:	bf00      	nop
 8006ce8:	20000611 	.word	0x20000611

08006cec <__sfp_lock_release>:
 8006cec:	4801      	ldr	r0, [pc, #4]	; (8006cf4 <__sfp_lock_release+0x8>)
 8006cee:	f000 ba0b 	b.w	8007108 <__retarget_lock_release_recursive>
 8006cf2:	bf00      	nop
 8006cf4:	20000611 	.word	0x20000611

08006cf8 <__sinit>:
 8006cf8:	b510      	push	{r4, lr}
 8006cfa:	4604      	mov	r4, r0
 8006cfc:	f7ff fff0 	bl	8006ce0 <__sfp_lock_acquire>
 8006d00:	6a23      	ldr	r3, [r4, #32]
 8006d02:	b11b      	cbz	r3, 8006d0c <__sinit+0x14>
 8006d04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d08:	f7ff bff0 	b.w	8006cec <__sfp_lock_release>
 8006d0c:	4b04      	ldr	r3, [pc, #16]	; (8006d20 <__sinit+0x28>)
 8006d0e:	6223      	str	r3, [r4, #32]
 8006d10:	4b04      	ldr	r3, [pc, #16]	; (8006d24 <__sinit+0x2c>)
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d1f5      	bne.n	8006d04 <__sinit+0xc>
 8006d18:	f7ff ffc4 	bl	8006ca4 <global_stdio_init.part.0>
 8006d1c:	e7f2      	b.n	8006d04 <__sinit+0xc>
 8006d1e:	bf00      	nop
 8006d20:	08006c65 	.word	0x08006c65
 8006d24:	20000608 	.word	0x20000608

08006d28 <_fwalk_sglue>:
 8006d28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d2c:	4607      	mov	r7, r0
 8006d2e:	4688      	mov	r8, r1
 8006d30:	4614      	mov	r4, r2
 8006d32:	2600      	movs	r6, #0
 8006d34:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006d38:	f1b9 0901 	subs.w	r9, r9, #1
 8006d3c:	d505      	bpl.n	8006d4a <_fwalk_sglue+0x22>
 8006d3e:	6824      	ldr	r4, [r4, #0]
 8006d40:	2c00      	cmp	r4, #0
 8006d42:	d1f7      	bne.n	8006d34 <_fwalk_sglue+0xc>
 8006d44:	4630      	mov	r0, r6
 8006d46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d4a:	89ab      	ldrh	r3, [r5, #12]
 8006d4c:	2b01      	cmp	r3, #1
 8006d4e:	d907      	bls.n	8006d60 <_fwalk_sglue+0x38>
 8006d50:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006d54:	3301      	adds	r3, #1
 8006d56:	d003      	beq.n	8006d60 <_fwalk_sglue+0x38>
 8006d58:	4629      	mov	r1, r5
 8006d5a:	4638      	mov	r0, r7
 8006d5c:	47c0      	blx	r8
 8006d5e:	4306      	orrs	r6, r0
 8006d60:	3568      	adds	r5, #104	; 0x68
 8006d62:	e7e9      	b.n	8006d38 <_fwalk_sglue+0x10>

08006d64 <_puts_r>:
 8006d64:	6a03      	ldr	r3, [r0, #32]
 8006d66:	b570      	push	{r4, r5, r6, lr}
 8006d68:	4605      	mov	r5, r0
 8006d6a:	460e      	mov	r6, r1
 8006d6c:	6884      	ldr	r4, [r0, #8]
 8006d6e:	b90b      	cbnz	r3, 8006d74 <_puts_r+0x10>
 8006d70:	f7ff ffc2 	bl	8006cf8 <__sinit>
 8006d74:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006d76:	07db      	lsls	r3, r3, #31
 8006d78:	d405      	bmi.n	8006d86 <_puts_r+0x22>
 8006d7a:	89a3      	ldrh	r3, [r4, #12]
 8006d7c:	0598      	lsls	r0, r3, #22
 8006d7e:	d402      	bmi.n	8006d86 <_puts_r+0x22>
 8006d80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006d82:	f000 f9c0 	bl	8007106 <__retarget_lock_acquire_recursive>
 8006d86:	89a3      	ldrh	r3, [r4, #12]
 8006d88:	0719      	lsls	r1, r3, #28
 8006d8a:	d513      	bpl.n	8006db4 <_puts_r+0x50>
 8006d8c:	6923      	ldr	r3, [r4, #16]
 8006d8e:	b18b      	cbz	r3, 8006db4 <_puts_r+0x50>
 8006d90:	3e01      	subs	r6, #1
 8006d92:	68a3      	ldr	r3, [r4, #8]
 8006d94:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006d98:	3b01      	subs	r3, #1
 8006d9a:	60a3      	str	r3, [r4, #8]
 8006d9c:	b9e9      	cbnz	r1, 8006dda <_puts_r+0x76>
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	da2e      	bge.n	8006e00 <_puts_r+0x9c>
 8006da2:	4622      	mov	r2, r4
 8006da4:	210a      	movs	r1, #10
 8006da6:	4628      	mov	r0, r5
 8006da8:	f000 f89b 	bl	8006ee2 <__swbuf_r>
 8006dac:	3001      	adds	r0, #1
 8006dae:	d007      	beq.n	8006dc0 <_puts_r+0x5c>
 8006db0:	250a      	movs	r5, #10
 8006db2:	e007      	b.n	8006dc4 <_puts_r+0x60>
 8006db4:	4621      	mov	r1, r4
 8006db6:	4628      	mov	r0, r5
 8006db8:	f000 f8d0 	bl	8006f5c <__swsetup_r>
 8006dbc:	2800      	cmp	r0, #0
 8006dbe:	d0e7      	beq.n	8006d90 <_puts_r+0x2c>
 8006dc0:	f04f 35ff 	mov.w	r5, #4294967295
 8006dc4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006dc6:	07da      	lsls	r2, r3, #31
 8006dc8:	d405      	bmi.n	8006dd6 <_puts_r+0x72>
 8006dca:	89a3      	ldrh	r3, [r4, #12]
 8006dcc:	059b      	lsls	r3, r3, #22
 8006dce:	d402      	bmi.n	8006dd6 <_puts_r+0x72>
 8006dd0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006dd2:	f000 f999 	bl	8007108 <__retarget_lock_release_recursive>
 8006dd6:	4628      	mov	r0, r5
 8006dd8:	bd70      	pop	{r4, r5, r6, pc}
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	da04      	bge.n	8006de8 <_puts_r+0x84>
 8006dde:	69a2      	ldr	r2, [r4, #24]
 8006de0:	429a      	cmp	r2, r3
 8006de2:	dc06      	bgt.n	8006df2 <_puts_r+0x8e>
 8006de4:	290a      	cmp	r1, #10
 8006de6:	d004      	beq.n	8006df2 <_puts_r+0x8e>
 8006de8:	6823      	ldr	r3, [r4, #0]
 8006dea:	1c5a      	adds	r2, r3, #1
 8006dec:	6022      	str	r2, [r4, #0]
 8006dee:	7019      	strb	r1, [r3, #0]
 8006df0:	e7cf      	b.n	8006d92 <_puts_r+0x2e>
 8006df2:	4622      	mov	r2, r4
 8006df4:	4628      	mov	r0, r5
 8006df6:	f000 f874 	bl	8006ee2 <__swbuf_r>
 8006dfa:	3001      	adds	r0, #1
 8006dfc:	d1c9      	bne.n	8006d92 <_puts_r+0x2e>
 8006dfe:	e7df      	b.n	8006dc0 <_puts_r+0x5c>
 8006e00:	250a      	movs	r5, #10
 8006e02:	6823      	ldr	r3, [r4, #0]
 8006e04:	1c5a      	adds	r2, r3, #1
 8006e06:	6022      	str	r2, [r4, #0]
 8006e08:	701d      	strb	r5, [r3, #0]
 8006e0a:	e7db      	b.n	8006dc4 <_puts_r+0x60>

08006e0c <puts>:
 8006e0c:	4b02      	ldr	r3, [pc, #8]	; (8006e18 <puts+0xc>)
 8006e0e:	4601      	mov	r1, r0
 8006e10:	6818      	ldr	r0, [r3, #0]
 8006e12:	f7ff bfa7 	b.w	8006d64 <_puts_r>
 8006e16:	bf00      	nop
 8006e18:	2000009c 	.word	0x2000009c

08006e1c <siprintf>:
 8006e1c:	b40e      	push	{r1, r2, r3}
 8006e1e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006e22:	b500      	push	{lr}
 8006e24:	b09c      	sub	sp, #112	; 0x70
 8006e26:	ab1d      	add	r3, sp, #116	; 0x74
 8006e28:	9002      	str	r0, [sp, #8]
 8006e2a:	9006      	str	r0, [sp, #24]
 8006e2c:	9107      	str	r1, [sp, #28]
 8006e2e:	9104      	str	r1, [sp, #16]
 8006e30:	4808      	ldr	r0, [pc, #32]	; (8006e54 <siprintf+0x38>)
 8006e32:	4909      	ldr	r1, [pc, #36]	; (8006e58 <siprintf+0x3c>)
 8006e34:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e38:	9105      	str	r1, [sp, #20]
 8006e3a:	6800      	ldr	r0, [r0, #0]
 8006e3c:	a902      	add	r1, sp, #8
 8006e3e:	9301      	str	r3, [sp, #4]
 8006e40:	f002 fc92 	bl	8009768 <_svfiprintf_r>
 8006e44:	2200      	movs	r2, #0
 8006e46:	9b02      	ldr	r3, [sp, #8]
 8006e48:	701a      	strb	r2, [r3, #0]
 8006e4a:	b01c      	add	sp, #112	; 0x70
 8006e4c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006e50:	b003      	add	sp, #12
 8006e52:	4770      	bx	lr
 8006e54:	2000009c 	.word	0x2000009c
 8006e58:	ffff0208 	.word	0xffff0208

08006e5c <__sread>:
 8006e5c:	b510      	push	{r4, lr}
 8006e5e:	460c      	mov	r4, r1
 8006e60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e64:	f000 f900 	bl	8007068 <_read_r>
 8006e68:	2800      	cmp	r0, #0
 8006e6a:	bfab      	itete	ge
 8006e6c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006e6e:	89a3      	ldrhlt	r3, [r4, #12]
 8006e70:	181b      	addge	r3, r3, r0
 8006e72:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006e76:	bfac      	ite	ge
 8006e78:	6563      	strge	r3, [r4, #84]	; 0x54
 8006e7a:	81a3      	strhlt	r3, [r4, #12]
 8006e7c:	bd10      	pop	{r4, pc}

08006e7e <__swrite>:
 8006e7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e82:	461f      	mov	r7, r3
 8006e84:	898b      	ldrh	r3, [r1, #12]
 8006e86:	4605      	mov	r5, r0
 8006e88:	05db      	lsls	r3, r3, #23
 8006e8a:	460c      	mov	r4, r1
 8006e8c:	4616      	mov	r6, r2
 8006e8e:	d505      	bpl.n	8006e9c <__swrite+0x1e>
 8006e90:	2302      	movs	r3, #2
 8006e92:	2200      	movs	r2, #0
 8006e94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e98:	f000 f8d4 	bl	8007044 <_lseek_r>
 8006e9c:	89a3      	ldrh	r3, [r4, #12]
 8006e9e:	4632      	mov	r2, r6
 8006ea0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006ea4:	81a3      	strh	r3, [r4, #12]
 8006ea6:	4628      	mov	r0, r5
 8006ea8:	463b      	mov	r3, r7
 8006eaa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006eae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006eb2:	f000 b8eb 	b.w	800708c <_write_r>

08006eb6 <__sseek>:
 8006eb6:	b510      	push	{r4, lr}
 8006eb8:	460c      	mov	r4, r1
 8006eba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ebe:	f000 f8c1 	bl	8007044 <_lseek_r>
 8006ec2:	1c43      	adds	r3, r0, #1
 8006ec4:	89a3      	ldrh	r3, [r4, #12]
 8006ec6:	bf15      	itete	ne
 8006ec8:	6560      	strne	r0, [r4, #84]	; 0x54
 8006eca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006ece:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006ed2:	81a3      	strheq	r3, [r4, #12]
 8006ed4:	bf18      	it	ne
 8006ed6:	81a3      	strhne	r3, [r4, #12]
 8006ed8:	bd10      	pop	{r4, pc}

08006eda <__sclose>:
 8006eda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ede:	f000 b8a1 	b.w	8007024 <_close_r>

08006ee2 <__swbuf_r>:
 8006ee2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ee4:	460e      	mov	r6, r1
 8006ee6:	4614      	mov	r4, r2
 8006ee8:	4605      	mov	r5, r0
 8006eea:	b118      	cbz	r0, 8006ef4 <__swbuf_r+0x12>
 8006eec:	6a03      	ldr	r3, [r0, #32]
 8006eee:	b90b      	cbnz	r3, 8006ef4 <__swbuf_r+0x12>
 8006ef0:	f7ff ff02 	bl	8006cf8 <__sinit>
 8006ef4:	69a3      	ldr	r3, [r4, #24]
 8006ef6:	60a3      	str	r3, [r4, #8]
 8006ef8:	89a3      	ldrh	r3, [r4, #12]
 8006efa:	071a      	lsls	r2, r3, #28
 8006efc:	d525      	bpl.n	8006f4a <__swbuf_r+0x68>
 8006efe:	6923      	ldr	r3, [r4, #16]
 8006f00:	b31b      	cbz	r3, 8006f4a <__swbuf_r+0x68>
 8006f02:	6823      	ldr	r3, [r4, #0]
 8006f04:	6922      	ldr	r2, [r4, #16]
 8006f06:	b2f6      	uxtb	r6, r6
 8006f08:	1a98      	subs	r0, r3, r2
 8006f0a:	6963      	ldr	r3, [r4, #20]
 8006f0c:	4637      	mov	r7, r6
 8006f0e:	4283      	cmp	r3, r0
 8006f10:	dc04      	bgt.n	8006f1c <__swbuf_r+0x3a>
 8006f12:	4621      	mov	r1, r4
 8006f14:	4628      	mov	r0, r5
 8006f16:	f002 fee9 	bl	8009cec <_fflush_r>
 8006f1a:	b9e0      	cbnz	r0, 8006f56 <__swbuf_r+0x74>
 8006f1c:	68a3      	ldr	r3, [r4, #8]
 8006f1e:	3b01      	subs	r3, #1
 8006f20:	60a3      	str	r3, [r4, #8]
 8006f22:	6823      	ldr	r3, [r4, #0]
 8006f24:	1c5a      	adds	r2, r3, #1
 8006f26:	6022      	str	r2, [r4, #0]
 8006f28:	701e      	strb	r6, [r3, #0]
 8006f2a:	6962      	ldr	r2, [r4, #20]
 8006f2c:	1c43      	adds	r3, r0, #1
 8006f2e:	429a      	cmp	r2, r3
 8006f30:	d004      	beq.n	8006f3c <__swbuf_r+0x5a>
 8006f32:	89a3      	ldrh	r3, [r4, #12]
 8006f34:	07db      	lsls	r3, r3, #31
 8006f36:	d506      	bpl.n	8006f46 <__swbuf_r+0x64>
 8006f38:	2e0a      	cmp	r6, #10
 8006f3a:	d104      	bne.n	8006f46 <__swbuf_r+0x64>
 8006f3c:	4621      	mov	r1, r4
 8006f3e:	4628      	mov	r0, r5
 8006f40:	f002 fed4 	bl	8009cec <_fflush_r>
 8006f44:	b938      	cbnz	r0, 8006f56 <__swbuf_r+0x74>
 8006f46:	4638      	mov	r0, r7
 8006f48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f4a:	4621      	mov	r1, r4
 8006f4c:	4628      	mov	r0, r5
 8006f4e:	f000 f805 	bl	8006f5c <__swsetup_r>
 8006f52:	2800      	cmp	r0, #0
 8006f54:	d0d5      	beq.n	8006f02 <__swbuf_r+0x20>
 8006f56:	f04f 37ff 	mov.w	r7, #4294967295
 8006f5a:	e7f4      	b.n	8006f46 <__swbuf_r+0x64>

08006f5c <__swsetup_r>:
 8006f5c:	b538      	push	{r3, r4, r5, lr}
 8006f5e:	4b2a      	ldr	r3, [pc, #168]	; (8007008 <__swsetup_r+0xac>)
 8006f60:	4605      	mov	r5, r0
 8006f62:	6818      	ldr	r0, [r3, #0]
 8006f64:	460c      	mov	r4, r1
 8006f66:	b118      	cbz	r0, 8006f70 <__swsetup_r+0x14>
 8006f68:	6a03      	ldr	r3, [r0, #32]
 8006f6a:	b90b      	cbnz	r3, 8006f70 <__swsetup_r+0x14>
 8006f6c:	f7ff fec4 	bl	8006cf8 <__sinit>
 8006f70:	89a3      	ldrh	r3, [r4, #12]
 8006f72:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006f76:	0718      	lsls	r0, r3, #28
 8006f78:	d422      	bmi.n	8006fc0 <__swsetup_r+0x64>
 8006f7a:	06d9      	lsls	r1, r3, #27
 8006f7c:	d407      	bmi.n	8006f8e <__swsetup_r+0x32>
 8006f7e:	2309      	movs	r3, #9
 8006f80:	602b      	str	r3, [r5, #0]
 8006f82:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006f86:	f04f 30ff 	mov.w	r0, #4294967295
 8006f8a:	81a3      	strh	r3, [r4, #12]
 8006f8c:	e034      	b.n	8006ff8 <__swsetup_r+0x9c>
 8006f8e:	0758      	lsls	r0, r3, #29
 8006f90:	d512      	bpl.n	8006fb8 <__swsetup_r+0x5c>
 8006f92:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006f94:	b141      	cbz	r1, 8006fa8 <__swsetup_r+0x4c>
 8006f96:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006f9a:	4299      	cmp	r1, r3
 8006f9c:	d002      	beq.n	8006fa4 <__swsetup_r+0x48>
 8006f9e:	4628      	mov	r0, r5
 8006fa0:	f000 ff52 	bl	8007e48 <_free_r>
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	6363      	str	r3, [r4, #52]	; 0x34
 8006fa8:	89a3      	ldrh	r3, [r4, #12]
 8006faa:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006fae:	81a3      	strh	r3, [r4, #12]
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	6063      	str	r3, [r4, #4]
 8006fb4:	6923      	ldr	r3, [r4, #16]
 8006fb6:	6023      	str	r3, [r4, #0]
 8006fb8:	89a3      	ldrh	r3, [r4, #12]
 8006fba:	f043 0308 	orr.w	r3, r3, #8
 8006fbe:	81a3      	strh	r3, [r4, #12]
 8006fc0:	6923      	ldr	r3, [r4, #16]
 8006fc2:	b94b      	cbnz	r3, 8006fd8 <__swsetup_r+0x7c>
 8006fc4:	89a3      	ldrh	r3, [r4, #12]
 8006fc6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006fca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006fce:	d003      	beq.n	8006fd8 <__swsetup_r+0x7c>
 8006fd0:	4621      	mov	r1, r4
 8006fd2:	4628      	mov	r0, r5
 8006fd4:	f002 fee9 	bl	8009daa <__smakebuf_r>
 8006fd8:	89a0      	ldrh	r0, [r4, #12]
 8006fda:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006fde:	f010 0301 	ands.w	r3, r0, #1
 8006fe2:	d00a      	beq.n	8006ffa <__swsetup_r+0x9e>
 8006fe4:	2300      	movs	r3, #0
 8006fe6:	60a3      	str	r3, [r4, #8]
 8006fe8:	6963      	ldr	r3, [r4, #20]
 8006fea:	425b      	negs	r3, r3
 8006fec:	61a3      	str	r3, [r4, #24]
 8006fee:	6923      	ldr	r3, [r4, #16]
 8006ff0:	b943      	cbnz	r3, 8007004 <__swsetup_r+0xa8>
 8006ff2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006ff6:	d1c4      	bne.n	8006f82 <__swsetup_r+0x26>
 8006ff8:	bd38      	pop	{r3, r4, r5, pc}
 8006ffa:	0781      	lsls	r1, r0, #30
 8006ffc:	bf58      	it	pl
 8006ffe:	6963      	ldrpl	r3, [r4, #20]
 8007000:	60a3      	str	r3, [r4, #8]
 8007002:	e7f4      	b.n	8006fee <__swsetup_r+0x92>
 8007004:	2000      	movs	r0, #0
 8007006:	e7f7      	b.n	8006ff8 <__swsetup_r+0x9c>
 8007008:	2000009c 	.word	0x2000009c

0800700c <memset>:
 800700c:	4603      	mov	r3, r0
 800700e:	4402      	add	r2, r0
 8007010:	4293      	cmp	r3, r2
 8007012:	d100      	bne.n	8007016 <memset+0xa>
 8007014:	4770      	bx	lr
 8007016:	f803 1b01 	strb.w	r1, [r3], #1
 800701a:	e7f9      	b.n	8007010 <memset+0x4>

0800701c <_localeconv_r>:
 800701c:	4800      	ldr	r0, [pc, #0]	; (8007020 <_localeconv_r+0x4>)
 800701e:	4770      	bx	lr
 8007020:	20000190 	.word	0x20000190

08007024 <_close_r>:
 8007024:	b538      	push	{r3, r4, r5, lr}
 8007026:	2300      	movs	r3, #0
 8007028:	4d05      	ldr	r5, [pc, #20]	; (8007040 <_close_r+0x1c>)
 800702a:	4604      	mov	r4, r0
 800702c:	4608      	mov	r0, r1
 800702e:	602b      	str	r3, [r5, #0]
 8007030:	f7fb fbda 	bl	80027e8 <_close>
 8007034:	1c43      	adds	r3, r0, #1
 8007036:	d102      	bne.n	800703e <_close_r+0x1a>
 8007038:	682b      	ldr	r3, [r5, #0]
 800703a:	b103      	cbz	r3, 800703e <_close_r+0x1a>
 800703c:	6023      	str	r3, [r4, #0]
 800703e:	bd38      	pop	{r3, r4, r5, pc}
 8007040:	2000060c 	.word	0x2000060c

08007044 <_lseek_r>:
 8007044:	b538      	push	{r3, r4, r5, lr}
 8007046:	4604      	mov	r4, r0
 8007048:	4608      	mov	r0, r1
 800704a:	4611      	mov	r1, r2
 800704c:	2200      	movs	r2, #0
 800704e:	4d05      	ldr	r5, [pc, #20]	; (8007064 <_lseek_r+0x20>)
 8007050:	602a      	str	r2, [r5, #0]
 8007052:	461a      	mov	r2, r3
 8007054:	f7fb fbec 	bl	8002830 <_lseek>
 8007058:	1c43      	adds	r3, r0, #1
 800705a:	d102      	bne.n	8007062 <_lseek_r+0x1e>
 800705c:	682b      	ldr	r3, [r5, #0]
 800705e:	b103      	cbz	r3, 8007062 <_lseek_r+0x1e>
 8007060:	6023      	str	r3, [r4, #0]
 8007062:	bd38      	pop	{r3, r4, r5, pc}
 8007064:	2000060c 	.word	0x2000060c

08007068 <_read_r>:
 8007068:	b538      	push	{r3, r4, r5, lr}
 800706a:	4604      	mov	r4, r0
 800706c:	4608      	mov	r0, r1
 800706e:	4611      	mov	r1, r2
 8007070:	2200      	movs	r2, #0
 8007072:	4d05      	ldr	r5, [pc, #20]	; (8007088 <_read_r+0x20>)
 8007074:	602a      	str	r2, [r5, #0]
 8007076:	461a      	mov	r2, r3
 8007078:	f7fb fb7d 	bl	8002776 <_read>
 800707c:	1c43      	adds	r3, r0, #1
 800707e:	d102      	bne.n	8007086 <_read_r+0x1e>
 8007080:	682b      	ldr	r3, [r5, #0]
 8007082:	b103      	cbz	r3, 8007086 <_read_r+0x1e>
 8007084:	6023      	str	r3, [r4, #0]
 8007086:	bd38      	pop	{r3, r4, r5, pc}
 8007088:	2000060c 	.word	0x2000060c

0800708c <_write_r>:
 800708c:	b538      	push	{r3, r4, r5, lr}
 800708e:	4604      	mov	r4, r0
 8007090:	4608      	mov	r0, r1
 8007092:	4611      	mov	r1, r2
 8007094:	2200      	movs	r2, #0
 8007096:	4d05      	ldr	r5, [pc, #20]	; (80070ac <_write_r+0x20>)
 8007098:	602a      	str	r2, [r5, #0]
 800709a:	461a      	mov	r2, r3
 800709c:	f7fb fb88 	bl	80027b0 <_write>
 80070a0:	1c43      	adds	r3, r0, #1
 80070a2:	d102      	bne.n	80070aa <_write_r+0x1e>
 80070a4:	682b      	ldr	r3, [r5, #0]
 80070a6:	b103      	cbz	r3, 80070aa <_write_r+0x1e>
 80070a8:	6023      	str	r3, [r4, #0]
 80070aa:	bd38      	pop	{r3, r4, r5, pc}
 80070ac:	2000060c 	.word	0x2000060c

080070b0 <__errno>:
 80070b0:	4b01      	ldr	r3, [pc, #4]	; (80070b8 <__errno+0x8>)
 80070b2:	6818      	ldr	r0, [r3, #0]
 80070b4:	4770      	bx	lr
 80070b6:	bf00      	nop
 80070b8:	2000009c 	.word	0x2000009c

080070bc <__libc_init_array>:
 80070bc:	b570      	push	{r4, r5, r6, lr}
 80070be:	2600      	movs	r6, #0
 80070c0:	4d0c      	ldr	r5, [pc, #48]	; (80070f4 <__libc_init_array+0x38>)
 80070c2:	4c0d      	ldr	r4, [pc, #52]	; (80070f8 <__libc_init_array+0x3c>)
 80070c4:	1b64      	subs	r4, r4, r5
 80070c6:	10a4      	asrs	r4, r4, #2
 80070c8:	42a6      	cmp	r6, r4
 80070ca:	d109      	bne.n	80070e0 <__libc_init_array+0x24>
 80070cc:	f003 fb2c 	bl	800a728 <_init>
 80070d0:	2600      	movs	r6, #0
 80070d2:	4d0a      	ldr	r5, [pc, #40]	; (80070fc <__libc_init_array+0x40>)
 80070d4:	4c0a      	ldr	r4, [pc, #40]	; (8007100 <__libc_init_array+0x44>)
 80070d6:	1b64      	subs	r4, r4, r5
 80070d8:	10a4      	asrs	r4, r4, #2
 80070da:	42a6      	cmp	r6, r4
 80070dc:	d105      	bne.n	80070ea <__libc_init_array+0x2e>
 80070de:	bd70      	pop	{r4, r5, r6, pc}
 80070e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80070e4:	4798      	blx	r3
 80070e6:	3601      	adds	r6, #1
 80070e8:	e7ee      	b.n	80070c8 <__libc_init_array+0xc>
 80070ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80070ee:	4798      	blx	r3
 80070f0:	3601      	adds	r6, #1
 80070f2:	e7f2      	b.n	80070da <__libc_init_array+0x1e>
 80070f4:	0800aba4 	.word	0x0800aba4
 80070f8:	0800aba4 	.word	0x0800aba4
 80070fc:	0800aba4 	.word	0x0800aba4
 8007100:	0800aba8 	.word	0x0800aba8

08007104 <__retarget_lock_init_recursive>:
 8007104:	4770      	bx	lr

08007106 <__retarget_lock_acquire_recursive>:
 8007106:	4770      	bx	lr

08007108 <__retarget_lock_release_recursive>:
 8007108:	4770      	bx	lr

0800710a <memchr>:
 800710a:	4603      	mov	r3, r0
 800710c:	b510      	push	{r4, lr}
 800710e:	b2c9      	uxtb	r1, r1
 8007110:	4402      	add	r2, r0
 8007112:	4293      	cmp	r3, r2
 8007114:	4618      	mov	r0, r3
 8007116:	d101      	bne.n	800711c <memchr+0x12>
 8007118:	2000      	movs	r0, #0
 800711a:	e003      	b.n	8007124 <memchr+0x1a>
 800711c:	7804      	ldrb	r4, [r0, #0]
 800711e:	3301      	adds	r3, #1
 8007120:	428c      	cmp	r4, r1
 8007122:	d1f6      	bne.n	8007112 <memchr+0x8>
 8007124:	bd10      	pop	{r4, pc}
	...

08007128 <nanf>:
 8007128:	4800      	ldr	r0, [pc, #0]	; (800712c <nanf+0x4>)
 800712a:	4770      	bx	lr
 800712c:	7fc00000 	.word	0x7fc00000

08007130 <__assert_func>:
 8007130:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007132:	4614      	mov	r4, r2
 8007134:	461a      	mov	r2, r3
 8007136:	4b09      	ldr	r3, [pc, #36]	; (800715c <__assert_func+0x2c>)
 8007138:	4605      	mov	r5, r0
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	68d8      	ldr	r0, [r3, #12]
 800713e:	b14c      	cbz	r4, 8007154 <__assert_func+0x24>
 8007140:	4b07      	ldr	r3, [pc, #28]	; (8007160 <__assert_func+0x30>)
 8007142:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007146:	9100      	str	r1, [sp, #0]
 8007148:	462b      	mov	r3, r5
 800714a:	4906      	ldr	r1, [pc, #24]	; (8007164 <__assert_func+0x34>)
 800714c:	f002 fdf6 	bl	8009d3c <fiprintf>
 8007150:	f002 feda 	bl	8009f08 <abort>
 8007154:	4b04      	ldr	r3, [pc, #16]	; (8007168 <__assert_func+0x38>)
 8007156:	461c      	mov	r4, r3
 8007158:	e7f3      	b.n	8007142 <__assert_func+0x12>
 800715a:	bf00      	nop
 800715c:	2000009c 	.word	0x2000009c
 8007160:	0800a7af 	.word	0x0800a7af
 8007164:	0800a7bc 	.word	0x0800a7bc
 8007168:	0800a7ea 	.word	0x0800a7ea

0800716c <quorem>:
 800716c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007170:	6903      	ldr	r3, [r0, #16]
 8007172:	690c      	ldr	r4, [r1, #16]
 8007174:	4607      	mov	r7, r0
 8007176:	42a3      	cmp	r3, r4
 8007178:	db7f      	blt.n	800727a <quorem+0x10e>
 800717a:	3c01      	subs	r4, #1
 800717c:	f100 0514 	add.w	r5, r0, #20
 8007180:	f101 0814 	add.w	r8, r1, #20
 8007184:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007188:	9301      	str	r3, [sp, #4]
 800718a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800718e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007192:	3301      	adds	r3, #1
 8007194:	429a      	cmp	r2, r3
 8007196:	fbb2 f6f3 	udiv	r6, r2, r3
 800719a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800719e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80071a2:	d331      	bcc.n	8007208 <quorem+0x9c>
 80071a4:	f04f 0e00 	mov.w	lr, #0
 80071a8:	4640      	mov	r0, r8
 80071aa:	46ac      	mov	ip, r5
 80071ac:	46f2      	mov	sl, lr
 80071ae:	f850 2b04 	ldr.w	r2, [r0], #4
 80071b2:	b293      	uxth	r3, r2
 80071b4:	fb06 e303 	mla	r3, r6, r3, lr
 80071b8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80071bc:	0c1a      	lsrs	r2, r3, #16
 80071be:	b29b      	uxth	r3, r3
 80071c0:	fb06 220e 	mla	r2, r6, lr, r2
 80071c4:	ebaa 0303 	sub.w	r3, sl, r3
 80071c8:	f8dc a000 	ldr.w	sl, [ip]
 80071cc:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80071d0:	fa1f fa8a 	uxth.w	sl, sl
 80071d4:	4453      	add	r3, sl
 80071d6:	f8dc a000 	ldr.w	sl, [ip]
 80071da:	b292      	uxth	r2, r2
 80071dc:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80071e0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80071e4:	b29b      	uxth	r3, r3
 80071e6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80071ea:	4581      	cmp	r9, r0
 80071ec:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80071f0:	f84c 3b04 	str.w	r3, [ip], #4
 80071f4:	d2db      	bcs.n	80071ae <quorem+0x42>
 80071f6:	f855 300b 	ldr.w	r3, [r5, fp]
 80071fa:	b92b      	cbnz	r3, 8007208 <quorem+0x9c>
 80071fc:	9b01      	ldr	r3, [sp, #4]
 80071fe:	3b04      	subs	r3, #4
 8007200:	429d      	cmp	r5, r3
 8007202:	461a      	mov	r2, r3
 8007204:	d32d      	bcc.n	8007262 <quorem+0xf6>
 8007206:	613c      	str	r4, [r7, #16]
 8007208:	4638      	mov	r0, r7
 800720a:	f001 f9dd 	bl	80085c8 <__mcmp>
 800720e:	2800      	cmp	r0, #0
 8007210:	db23      	blt.n	800725a <quorem+0xee>
 8007212:	4629      	mov	r1, r5
 8007214:	2000      	movs	r0, #0
 8007216:	3601      	adds	r6, #1
 8007218:	f858 2b04 	ldr.w	r2, [r8], #4
 800721c:	f8d1 c000 	ldr.w	ip, [r1]
 8007220:	b293      	uxth	r3, r2
 8007222:	1ac3      	subs	r3, r0, r3
 8007224:	0c12      	lsrs	r2, r2, #16
 8007226:	fa1f f08c 	uxth.w	r0, ip
 800722a:	4403      	add	r3, r0
 800722c:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8007230:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007234:	b29b      	uxth	r3, r3
 8007236:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800723a:	45c1      	cmp	r9, r8
 800723c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007240:	f841 3b04 	str.w	r3, [r1], #4
 8007244:	d2e8      	bcs.n	8007218 <quorem+0xac>
 8007246:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800724a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800724e:	b922      	cbnz	r2, 800725a <quorem+0xee>
 8007250:	3b04      	subs	r3, #4
 8007252:	429d      	cmp	r5, r3
 8007254:	461a      	mov	r2, r3
 8007256:	d30a      	bcc.n	800726e <quorem+0x102>
 8007258:	613c      	str	r4, [r7, #16]
 800725a:	4630      	mov	r0, r6
 800725c:	b003      	add	sp, #12
 800725e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007262:	6812      	ldr	r2, [r2, #0]
 8007264:	3b04      	subs	r3, #4
 8007266:	2a00      	cmp	r2, #0
 8007268:	d1cd      	bne.n	8007206 <quorem+0x9a>
 800726a:	3c01      	subs	r4, #1
 800726c:	e7c8      	b.n	8007200 <quorem+0x94>
 800726e:	6812      	ldr	r2, [r2, #0]
 8007270:	3b04      	subs	r3, #4
 8007272:	2a00      	cmp	r2, #0
 8007274:	d1f0      	bne.n	8007258 <quorem+0xec>
 8007276:	3c01      	subs	r4, #1
 8007278:	e7eb      	b.n	8007252 <quorem+0xe6>
 800727a:	2000      	movs	r0, #0
 800727c:	e7ee      	b.n	800725c <quorem+0xf0>
	...

08007280 <_dtoa_r>:
 8007280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007284:	4616      	mov	r6, r2
 8007286:	461f      	mov	r7, r3
 8007288:	69c4      	ldr	r4, [r0, #28]
 800728a:	b099      	sub	sp, #100	; 0x64
 800728c:	4605      	mov	r5, r0
 800728e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8007292:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8007296:	b974      	cbnz	r4, 80072b6 <_dtoa_r+0x36>
 8007298:	2010      	movs	r0, #16
 800729a:	f000 fe1d 	bl	8007ed8 <malloc>
 800729e:	4602      	mov	r2, r0
 80072a0:	61e8      	str	r0, [r5, #28]
 80072a2:	b920      	cbnz	r0, 80072ae <_dtoa_r+0x2e>
 80072a4:	21ef      	movs	r1, #239	; 0xef
 80072a6:	4bac      	ldr	r3, [pc, #688]	; (8007558 <_dtoa_r+0x2d8>)
 80072a8:	48ac      	ldr	r0, [pc, #688]	; (800755c <_dtoa_r+0x2dc>)
 80072aa:	f7ff ff41 	bl	8007130 <__assert_func>
 80072ae:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80072b2:	6004      	str	r4, [r0, #0]
 80072b4:	60c4      	str	r4, [r0, #12]
 80072b6:	69eb      	ldr	r3, [r5, #28]
 80072b8:	6819      	ldr	r1, [r3, #0]
 80072ba:	b151      	cbz	r1, 80072d2 <_dtoa_r+0x52>
 80072bc:	685a      	ldr	r2, [r3, #4]
 80072be:	2301      	movs	r3, #1
 80072c0:	4093      	lsls	r3, r2
 80072c2:	604a      	str	r2, [r1, #4]
 80072c4:	608b      	str	r3, [r1, #8]
 80072c6:	4628      	mov	r0, r5
 80072c8:	f000 fefa 	bl	80080c0 <_Bfree>
 80072cc:	2200      	movs	r2, #0
 80072ce:	69eb      	ldr	r3, [r5, #28]
 80072d0:	601a      	str	r2, [r3, #0]
 80072d2:	1e3b      	subs	r3, r7, #0
 80072d4:	bfaf      	iteee	ge
 80072d6:	2300      	movge	r3, #0
 80072d8:	2201      	movlt	r2, #1
 80072da:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80072de:	9305      	strlt	r3, [sp, #20]
 80072e0:	bfa8      	it	ge
 80072e2:	f8c8 3000 	strge.w	r3, [r8]
 80072e6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80072ea:	4b9d      	ldr	r3, [pc, #628]	; (8007560 <_dtoa_r+0x2e0>)
 80072ec:	bfb8      	it	lt
 80072ee:	f8c8 2000 	strlt.w	r2, [r8]
 80072f2:	ea33 0309 	bics.w	r3, r3, r9
 80072f6:	d119      	bne.n	800732c <_dtoa_r+0xac>
 80072f8:	f242 730f 	movw	r3, #9999	; 0x270f
 80072fc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80072fe:	6013      	str	r3, [r2, #0]
 8007300:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007304:	4333      	orrs	r3, r6
 8007306:	f000 8589 	beq.w	8007e1c <_dtoa_r+0xb9c>
 800730a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800730c:	b953      	cbnz	r3, 8007324 <_dtoa_r+0xa4>
 800730e:	4b95      	ldr	r3, [pc, #596]	; (8007564 <_dtoa_r+0x2e4>)
 8007310:	e023      	b.n	800735a <_dtoa_r+0xda>
 8007312:	4b95      	ldr	r3, [pc, #596]	; (8007568 <_dtoa_r+0x2e8>)
 8007314:	9303      	str	r3, [sp, #12]
 8007316:	3308      	adds	r3, #8
 8007318:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800731a:	6013      	str	r3, [r2, #0]
 800731c:	9803      	ldr	r0, [sp, #12]
 800731e:	b019      	add	sp, #100	; 0x64
 8007320:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007324:	4b8f      	ldr	r3, [pc, #572]	; (8007564 <_dtoa_r+0x2e4>)
 8007326:	9303      	str	r3, [sp, #12]
 8007328:	3303      	adds	r3, #3
 800732a:	e7f5      	b.n	8007318 <_dtoa_r+0x98>
 800732c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8007330:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8007334:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007338:	2200      	movs	r2, #0
 800733a:	2300      	movs	r3, #0
 800733c:	f7f9 fb34 	bl	80009a8 <__aeabi_dcmpeq>
 8007340:	4680      	mov	r8, r0
 8007342:	b160      	cbz	r0, 800735e <_dtoa_r+0xde>
 8007344:	2301      	movs	r3, #1
 8007346:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007348:	6013      	str	r3, [r2, #0]
 800734a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800734c:	2b00      	cmp	r3, #0
 800734e:	f000 8562 	beq.w	8007e16 <_dtoa_r+0xb96>
 8007352:	4b86      	ldr	r3, [pc, #536]	; (800756c <_dtoa_r+0x2ec>)
 8007354:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007356:	6013      	str	r3, [r2, #0]
 8007358:	3b01      	subs	r3, #1
 800735a:	9303      	str	r3, [sp, #12]
 800735c:	e7de      	b.n	800731c <_dtoa_r+0x9c>
 800735e:	ab16      	add	r3, sp, #88	; 0x58
 8007360:	9301      	str	r3, [sp, #4]
 8007362:	ab17      	add	r3, sp, #92	; 0x5c
 8007364:	9300      	str	r3, [sp, #0]
 8007366:	4628      	mov	r0, r5
 8007368:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800736c:	f001 fa3c 	bl	80087e8 <__d2b>
 8007370:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8007374:	4682      	mov	sl, r0
 8007376:	2c00      	cmp	r4, #0
 8007378:	d07e      	beq.n	8007478 <_dtoa_r+0x1f8>
 800737a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800737e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007380:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8007384:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007388:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800738c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007390:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8007394:	4619      	mov	r1, r3
 8007396:	2200      	movs	r2, #0
 8007398:	4b75      	ldr	r3, [pc, #468]	; (8007570 <_dtoa_r+0x2f0>)
 800739a:	f7f8 fee5 	bl	8000168 <__aeabi_dsub>
 800739e:	a368      	add	r3, pc, #416	; (adr r3, 8007540 <_dtoa_r+0x2c0>)
 80073a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073a4:	f7f9 f898 	bl	80004d8 <__aeabi_dmul>
 80073a8:	a367      	add	r3, pc, #412	; (adr r3, 8007548 <_dtoa_r+0x2c8>)
 80073aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073ae:	f7f8 fedd 	bl	800016c <__adddf3>
 80073b2:	4606      	mov	r6, r0
 80073b4:	4620      	mov	r0, r4
 80073b6:	460f      	mov	r7, r1
 80073b8:	f7f9 f824 	bl	8000404 <__aeabi_i2d>
 80073bc:	a364      	add	r3, pc, #400	; (adr r3, 8007550 <_dtoa_r+0x2d0>)
 80073be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073c2:	f7f9 f889 	bl	80004d8 <__aeabi_dmul>
 80073c6:	4602      	mov	r2, r0
 80073c8:	460b      	mov	r3, r1
 80073ca:	4630      	mov	r0, r6
 80073cc:	4639      	mov	r1, r7
 80073ce:	f7f8 fecd 	bl	800016c <__adddf3>
 80073d2:	4606      	mov	r6, r0
 80073d4:	460f      	mov	r7, r1
 80073d6:	f7f9 fb2f 	bl	8000a38 <__aeabi_d2iz>
 80073da:	2200      	movs	r2, #0
 80073dc:	4683      	mov	fp, r0
 80073de:	2300      	movs	r3, #0
 80073e0:	4630      	mov	r0, r6
 80073e2:	4639      	mov	r1, r7
 80073e4:	f7f9 faea 	bl	80009bc <__aeabi_dcmplt>
 80073e8:	b148      	cbz	r0, 80073fe <_dtoa_r+0x17e>
 80073ea:	4658      	mov	r0, fp
 80073ec:	f7f9 f80a 	bl	8000404 <__aeabi_i2d>
 80073f0:	4632      	mov	r2, r6
 80073f2:	463b      	mov	r3, r7
 80073f4:	f7f9 fad8 	bl	80009a8 <__aeabi_dcmpeq>
 80073f8:	b908      	cbnz	r0, 80073fe <_dtoa_r+0x17e>
 80073fa:	f10b 3bff 	add.w	fp, fp, #4294967295
 80073fe:	f1bb 0f16 	cmp.w	fp, #22
 8007402:	d857      	bhi.n	80074b4 <_dtoa_r+0x234>
 8007404:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007408:	4b5a      	ldr	r3, [pc, #360]	; (8007574 <_dtoa_r+0x2f4>)
 800740a:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800740e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007412:	f7f9 fad3 	bl	80009bc <__aeabi_dcmplt>
 8007416:	2800      	cmp	r0, #0
 8007418:	d04e      	beq.n	80074b8 <_dtoa_r+0x238>
 800741a:	2300      	movs	r3, #0
 800741c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007420:	930f      	str	r3, [sp, #60]	; 0x3c
 8007422:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007424:	1b1b      	subs	r3, r3, r4
 8007426:	1e5a      	subs	r2, r3, #1
 8007428:	bf46      	itte	mi
 800742a:	f1c3 0901 	rsbmi	r9, r3, #1
 800742e:	2300      	movmi	r3, #0
 8007430:	f04f 0900 	movpl.w	r9, #0
 8007434:	9209      	str	r2, [sp, #36]	; 0x24
 8007436:	bf48      	it	mi
 8007438:	9309      	strmi	r3, [sp, #36]	; 0x24
 800743a:	f1bb 0f00 	cmp.w	fp, #0
 800743e:	db3d      	blt.n	80074bc <_dtoa_r+0x23c>
 8007440:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007442:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8007446:	445b      	add	r3, fp
 8007448:	9309      	str	r3, [sp, #36]	; 0x24
 800744a:	2300      	movs	r3, #0
 800744c:	930a      	str	r3, [sp, #40]	; 0x28
 800744e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007450:	2b09      	cmp	r3, #9
 8007452:	d867      	bhi.n	8007524 <_dtoa_r+0x2a4>
 8007454:	2b05      	cmp	r3, #5
 8007456:	bfc4      	itt	gt
 8007458:	3b04      	subgt	r3, #4
 800745a:	9322      	strgt	r3, [sp, #136]	; 0x88
 800745c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800745e:	bfc8      	it	gt
 8007460:	2400      	movgt	r4, #0
 8007462:	f1a3 0302 	sub.w	r3, r3, #2
 8007466:	bfd8      	it	le
 8007468:	2401      	movle	r4, #1
 800746a:	2b03      	cmp	r3, #3
 800746c:	f200 8086 	bhi.w	800757c <_dtoa_r+0x2fc>
 8007470:	e8df f003 	tbb	[pc, r3]
 8007474:	5637392c 	.word	0x5637392c
 8007478:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800747c:	441c      	add	r4, r3
 800747e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8007482:	2b20      	cmp	r3, #32
 8007484:	bfc1      	itttt	gt
 8007486:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800748a:	fa09 f903 	lslgt.w	r9, r9, r3
 800748e:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 8007492:	fa26 f303 	lsrgt.w	r3, r6, r3
 8007496:	bfd6      	itet	le
 8007498:	f1c3 0320 	rsble	r3, r3, #32
 800749c:	ea49 0003 	orrgt.w	r0, r9, r3
 80074a0:	fa06 f003 	lslle.w	r0, r6, r3
 80074a4:	f7f8 ff9e 	bl	80003e4 <__aeabi_ui2d>
 80074a8:	2201      	movs	r2, #1
 80074aa:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80074ae:	3c01      	subs	r4, #1
 80074b0:	9213      	str	r2, [sp, #76]	; 0x4c
 80074b2:	e76f      	b.n	8007394 <_dtoa_r+0x114>
 80074b4:	2301      	movs	r3, #1
 80074b6:	e7b3      	b.n	8007420 <_dtoa_r+0x1a0>
 80074b8:	900f      	str	r0, [sp, #60]	; 0x3c
 80074ba:	e7b2      	b.n	8007422 <_dtoa_r+0x1a2>
 80074bc:	f1cb 0300 	rsb	r3, fp, #0
 80074c0:	930a      	str	r3, [sp, #40]	; 0x28
 80074c2:	2300      	movs	r3, #0
 80074c4:	eba9 090b 	sub.w	r9, r9, fp
 80074c8:	930e      	str	r3, [sp, #56]	; 0x38
 80074ca:	e7c0      	b.n	800744e <_dtoa_r+0x1ce>
 80074cc:	2300      	movs	r3, #0
 80074ce:	930b      	str	r3, [sp, #44]	; 0x2c
 80074d0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	dc55      	bgt.n	8007582 <_dtoa_r+0x302>
 80074d6:	2301      	movs	r3, #1
 80074d8:	461a      	mov	r2, r3
 80074da:	9306      	str	r3, [sp, #24]
 80074dc:	9308      	str	r3, [sp, #32]
 80074de:	9223      	str	r2, [sp, #140]	; 0x8c
 80074e0:	e00b      	b.n	80074fa <_dtoa_r+0x27a>
 80074e2:	2301      	movs	r3, #1
 80074e4:	e7f3      	b.n	80074ce <_dtoa_r+0x24e>
 80074e6:	2300      	movs	r3, #0
 80074e8:	930b      	str	r3, [sp, #44]	; 0x2c
 80074ea:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80074ec:	445b      	add	r3, fp
 80074ee:	9306      	str	r3, [sp, #24]
 80074f0:	3301      	adds	r3, #1
 80074f2:	2b01      	cmp	r3, #1
 80074f4:	9308      	str	r3, [sp, #32]
 80074f6:	bfb8      	it	lt
 80074f8:	2301      	movlt	r3, #1
 80074fa:	2100      	movs	r1, #0
 80074fc:	2204      	movs	r2, #4
 80074fe:	69e8      	ldr	r0, [r5, #28]
 8007500:	f102 0614 	add.w	r6, r2, #20
 8007504:	429e      	cmp	r6, r3
 8007506:	d940      	bls.n	800758a <_dtoa_r+0x30a>
 8007508:	6041      	str	r1, [r0, #4]
 800750a:	4628      	mov	r0, r5
 800750c:	f000 fd98 	bl	8008040 <_Balloc>
 8007510:	9003      	str	r0, [sp, #12]
 8007512:	2800      	cmp	r0, #0
 8007514:	d13c      	bne.n	8007590 <_dtoa_r+0x310>
 8007516:	4602      	mov	r2, r0
 8007518:	f240 11af 	movw	r1, #431	; 0x1af
 800751c:	4b16      	ldr	r3, [pc, #88]	; (8007578 <_dtoa_r+0x2f8>)
 800751e:	e6c3      	b.n	80072a8 <_dtoa_r+0x28>
 8007520:	2301      	movs	r3, #1
 8007522:	e7e1      	b.n	80074e8 <_dtoa_r+0x268>
 8007524:	2401      	movs	r4, #1
 8007526:	2300      	movs	r3, #0
 8007528:	940b      	str	r4, [sp, #44]	; 0x2c
 800752a:	9322      	str	r3, [sp, #136]	; 0x88
 800752c:	f04f 33ff 	mov.w	r3, #4294967295
 8007530:	2200      	movs	r2, #0
 8007532:	9306      	str	r3, [sp, #24]
 8007534:	9308      	str	r3, [sp, #32]
 8007536:	2312      	movs	r3, #18
 8007538:	e7d1      	b.n	80074de <_dtoa_r+0x25e>
 800753a:	bf00      	nop
 800753c:	f3af 8000 	nop.w
 8007540:	636f4361 	.word	0x636f4361
 8007544:	3fd287a7 	.word	0x3fd287a7
 8007548:	8b60c8b3 	.word	0x8b60c8b3
 800754c:	3fc68a28 	.word	0x3fc68a28
 8007550:	509f79fb 	.word	0x509f79fb
 8007554:	3fd34413 	.word	0x3fd34413
 8007558:	0800a7f8 	.word	0x0800a7f8
 800755c:	0800a80f 	.word	0x0800a80f
 8007560:	7ff00000 	.word	0x7ff00000
 8007564:	0800a7f4 	.word	0x0800a7f4
 8007568:	0800a7eb 	.word	0x0800a7eb
 800756c:	0800a787 	.word	0x0800a787
 8007570:	3ff80000 	.word	0x3ff80000
 8007574:	0800a900 	.word	0x0800a900
 8007578:	0800a867 	.word	0x0800a867
 800757c:	2301      	movs	r3, #1
 800757e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007580:	e7d4      	b.n	800752c <_dtoa_r+0x2ac>
 8007582:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007584:	9306      	str	r3, [sp, #24]
 8007586:	9308      	str	r3, [sp, #32]
 8007588:	e7b7      	b.n	80074fa <_dtoa_r+0x27a>
 800758a:	3101      	adds	r1, #1
 800758c:	0052      	lsls	r2, r2, #1
 800758e:	e7b7      	b.n	8007500 <_dtoa_r+0x280>
 8007590:	69eb      	ldr	r3, [r5, #28]
 8007592:	9a03      	ldr	r2, [sp, #12]
 8007594:	601a      	str	r2, [r3, #0]
 8007596:	9b08      	ldr	r3, [sp, #32]
 8007598:	2b0e      	cmp	r3, #14
 800759a:	f200 80a8 	bhi.w	80076ee <_dtoa_r+0x46e>
 800759e:	2c00      	cmp	r4, #0
 80075a0:	f000 80a5 	beq.w	80076ee <_dtoa_r+0x46e>
 80075a4:	f1bb 0f00 	cmp.w	fp, #0
 80075a8:	dd34      	ble.n	8007614 <_dtoa_r+0x394>
 80075aa:	4b9a      	ldr	r3, [pc, #616]	; (8007814 <_dtoa_r+0x594>)
 80075ac:	f00b 020f 	and.w	r2, fp, #15
 80075b0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80075b4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80075b8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80075bc:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80075c0:	ea4f 142b 	mov.w	r4, fp, asr #4
 80075c4:	d016      	beq.n	80075f4 <_dtoa_r+0x374>
 80075c6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80075ca:	4b93      	ldr	r3, [pc, #588]	; (8007818 <_dtoa_r+0x598>)
 80075cc:	2703      	movs	r7, #3
 80075ce:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80075d2:	f7f9 f8ab 	bl	800072c <__aeabi_ddiv>
 80075d6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80075da:	f004 040f 	and.w	r4, r4, #15
 80075de:	4e8e      	ldr	r6, [pc, #568]	; (8007818 <_dtoa_r+0x598>)
 80075e0:	b954      	cbnz	r4, 80075f8 <_dtoa_r+0x378>
 80075e2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80075e6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80075ea:	f7f9 f89f 	bl	800072c <__aeabi_ddiv>
 80075ee:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80075f2:	e029      	b.n	8007648 <_dtoa_r+0x3c8>
 80075f4:	2702      	movs	r7, #2
 80075f6:	e7f2      	b.n	80075de <_dtoa_r+0x35e>
 80075f8:	07e1      	lsls	r1, r4, #31
 80075fa:	d508      	bpl.n	800760e <_dtoa_r+0x38e>
 80075fc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007600:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007604:	f7f8 ff68 	bl	80004d8 <__aeabi_dmul>
 8007608:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800760c:	3701      	adds	r7, #1
 800760e:	1064      	asrs	r4, r4, #1
 8007610:	3608      	adds	r6, #8
 8007612:	e7e5      	b.n	80075e0 <_dtoa_r+0x360>
 8007614:	f000 80a5 	beq.w	8007762 <_dtoa_r+0x4e2>
 8007618:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800761c:	f1cb 0400 	rsb	r4, fp, #0
 8007620:	4b7c      	ldr	r3, [pc, #496]	; (8007814 <_dtoa_r+0x594>)
 8007622:	f004 020f 	and.w	r2, r4, #15
 8007626:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800762a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800762e:	f7f8 ff53 	bl	80004d8 <__aeabi_dmul>
 8007632:	2702      	movs	r7, #2
 8007634:	2300      	movs	r3, #0
 8007636:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800763a:	4e77      	ldr	r6, [pc, #476]	; (8007818 <_dtoa_r+0x598>)
 800763c:	1124      	asrs	r4, r4, #4
 800763e:	2c00      	cmp	r4, #0
 8007640:	f040 8084 	bne.w	800774c <_dtoa_r+0x4cc>
 8007644:	2b00      	cmp	r3, #0
 8007646:	d1d2      	bne.n	80075ee <_dtoa_r+0x36e>
 8007648:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800764c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8007650:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007652:	2b00      	cmp	r3, #0
 8007654:	f000 8087 	beq.w	8007766 <_dtoa_r+0x4e6>
 8007658:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800765c:	2200      	movs	r2, #0
 800765e:	4b6f      	ldr	r3, [pc, #444]	; (800781c <_dtoa_r+0x59c>)
 8007660:	f7f9 f9ac 	bl	80009bc <__aeabi_dcmplt>
 8007664:	2800      	cmp	r0, #0
 8007666:	d07e      	beq.n	8007766 <_dtoa_r+0x4e6>
 8007668:	9b08      	ldr	r3, [sp, #32]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d07b      	beq.n	8007766 <_dtoa_r+0x4e6>
 800766e:	9b06      	ldr	r3, [sp, #24]
 8007670:	2b00      	cmp	r3, #0
 8007672:	dd38      	ble.n	80076e6 <_dtoa_r+0x466>
 8007674:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007678:	2200      	movs	r2, #0
 800767a:	4b69      	ldr	r3, [pc, #420]	; (8007820 <_dtoa_r+0x5a0>)
 800767c:	f7f8 ff2c 	bl	80004d8 <__aeabi_dmul>
 8007680:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007684:	9c06      	ldr	r4, [sp, #24]
 8007686:	f10b 38ff 	add.w	r8, fp, #4294967295
 800768a:	3701      	adds	r7, #1
 800768c:	4638      	mov	r0, r7
 800768e:	f7f8 feb9 	bl	8000404 <__aeabi_i2d>
 8007692:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007696:	f7f8 ff1f 	bl	80004d8 <__aeabi_dmul>
 800769a:	2200      	movs	r2, #0
 800769c:	4b61      	ldr	r3, [pc, #388]	; (8007824 <_dtoa_r+0x5a4>)
 800769e:	f7f8 fd65 	bl	800016c <__adddf3>
 80076a2:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80076a6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80076aa:	9611      	str	r6, [sp, #68]	; 0x44
 80076ac:	2c00      	cmp	r4, #0
 80076ae:	d15d      	bne.n	800776c <_dtoa_r+0x4ec>
 80076b0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80076b4:	2200      	movs	r2, #0
 80076b6:	4b5c      	ldr	r3, [pc, #368]	; (8007828 <_dtoa_r+0x5a8>)
 80076b8:	f7f8 fd56 	bl	8000168 <__aeabi_dsub>
 80076bc:	4602      	mov	r2, r0
 80076be:	460b      	mov	r3, r1
 80076c0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80076c4:	4633      	mov	r3, r6
 80076c6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80076c8:	f7f9 f996 	bl	80009f8 <__aeabi_dcmpgt>
 80076cc:	2800      	cmp	r0, #0
 80076ce:	f040 8295 	bne.w	8007bfc <_dtoa_r+0x97c>
 80076d2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80076d6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80076d8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80076dc:	f7f9 f96e 	bl	80009bc <__aeabi_dcmplt>
 80076e0:	2800      	cmp	r0, #0
 80076e2:	f040 8289 	bne.w	8007bf8 <_dtoa_r+0x978>
 80076e6:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80076ea:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80076ee:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	f2c0 8151 	blt.w	8007998 <_dtoa_r+0x718>
 80076f6:	f1bb 0f0e 	cmp.w	fp, #14
 80076fa:	f300 814d 	bgt.w	8007998 <_dtoa_r+0x718>
 80076fe:	4b45      	ldr	r3, [pc, #276]	; (8007814 <_dtoa_r+0x594>)
 8007700:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007704:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007708:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800770c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800770e:	2b00      	cmp	r3, #0
 8007710:	f280 80da 	bge.w	80078c8 <_dtoa_r+0x648>
 8007714:	9b08      	ldr	r3, [sp, #32]
 8007716:	2b00      	cmp	r3, #0
 8007718:	f300 80d6 	bgt.w	80078c8 <_dtoa_r+0x648>
 800771c:	f040 826b 	bne.w	8007bf6 <_dtoa_r+0x976>
 8007720:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007724:	2200      	movs	r2, #0
 8007726:	4b40      	ldr	r3, [pc, #256]	; (8007828 <_dtoa_r+0x5a8>)
 8007728:	f7f8 fed6 	bl	80004d8 <__aeabi_dmul>
 800772c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007730:	f7f9 f958 	bl	80009e4 <__aeabi_dcmpge>
 8007734:	9c08      	ldr	r4, [sp, #32]
 8007736:	4626      	mov	r6, r4
 8007738:	2800      	cmp	r0, #0
 800773a:	f040 8241 	bne.w	8007bc0 <_dtoa_r+0x940>
 800773e:	2331      	movs	r3, #49	; 0x31
 8007740:	9f03      	ldr	r7, [sp, #12]
 8007742:	f10b 0b01 	add.w	fp, fp, #1
 8007746:	f807 3b01 	strb.w	r3, [r7], #1
 800774a:	e23d      	b.n	8007bc8 <_dtoa_r+0x948>
 800774c:	07e2      	lsls	r2, r4, #31
 800774e:	d505      	bpl.n	800775c <_dtoa_r+0x4dc>
 8007750:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007754:	f7f8 fec0 	bl	80004d8 <__aeabi_dmul>
 8007758:	2301      	movs	r3, #1
 800775a:	3701      	adds	r7, #1
 800775c:	1064      	asrs	r4, r4, #1
 800775e:	3608      	adds	r6, #8
 8007760:	e76d      	b.n	800763e <_dtoa_r+0x3be>
 8007762:	2702      	movs	r7, #2
 8007764:	e770      	b.n	8007648 <_dtoa_r+0x3c8>
 8007766:	46d8      	mov	r8, fp
 8007768:	9c08      	ldr	r4, [sp, #32]
 800776a:	e78f      	b.n	800768c <_dtoa_r+0x40c>
 800776c:	9903      	ldr	r1, [sp, #12]
 800776e:	4b29      	ldr	r3, [pc, #164]	; (8007814 <_dtoa_r+0x594>)
 8007770:	4421      	add	r1, r4
 8007772:	9112      	str	r1, [sp, #72]	; 0x48
 8007774:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007776:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800777a:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800777e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007782:	2900      	cmp	r1, #0
 8007784:	d054      	beq.n	8007830 <_dtoa_r+0x5b0>
 8007786:	2000      	movs	r0, #0
 8007788:	4928      	ldr	r1, [pc, #160]	; (800782c <_dtoa_r+0x5ac>)
 800778a:	f7f8 ffcf 	bl	800072c <__aeabi_ddiv>
 800778e:	463b      	mov	r3, r7
 8007790:	4632      	mov	r2, r6
 8007792:	f7f8 fce9 	bl	8000168 <__aeabi_dsub>
 8007796:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800779a:	9f03      	ldr	r7, [sp, #12]
 800779c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80077a0:	f7f9 f94a 	bl	8000a38 <__aeabi_d2iz>
 80077a4:	4604      	mov	r4, r0
 80077a6:	f7f8 fe2d 	bl	8000404 <__aeabi_i2d>
 80077aa:	4602      	mov	r2, r0
 80077ac:	460b      	mov	r3, r1
 80077ae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80077b2:	f7f8 fcd9 	bl	8000168 <__aeabi_dsub>
 80077b6:	4602      	mov	r2, r0
 80077b8:	460b      	mov	r3, r1
 80077ba:	3430      	adds	r4, #48	; 0x30
 80077bc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80077c0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80077c4:	f807 4b01 	strb.w	r4, [r7], #1
 80077c8:	f7f9 f8f8 	bl	80009bc <__aeabi_dcmplt>
 80077cc:	2800      	cmp	r0, #0
 80077ce:	d173      	bne.n	80078b8 <_dtoa_r+0x638>
 80077d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80077d4:	2000      	movs	r0, #0
 80077d6:	4911      	ldr	r1, [pc, #68]	; (800781c <_dtoa_r+0x59c>)
 80077d8:	f7f8 fcc6 	bl	8000168 <__aeabi_dsub>
 80077dc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80077e0:	f7f9 f8ec 	bl	80009bc <__aeabi_dcmplt>
 80077e4:	2800      	cmp	r0, #0
 80077e6:	f040 80b6 	bne.w	8007956 <_dtoa_r+0x6d6>
 80077ea:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80077ec:	429f      	cmp	r7, r3
 80077ee:	f43f af7a 	beq.w	80076e6 <_dtoa_r+0x466>
 80077f2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80077f6:	2200      	movs	r2, #0
 80077f8:	4b09      	ldr	r3, [pc, #36]	; (8007820 <_dtoa_r+0x5a0>)
 80077fa:	f7f8 fe6d 	bl	80004d8 <__aeabi_dmul>
 80077fe:	2200      	movs	r2, #0
 8007800:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007804:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007808:	4b05      	ldr	r3, [pc, #20]	; (8007820 <_dtoa_r+0x5a0>)
 800780a:	f7f8 fe65 	bl	80004d8 <__aeabi_dmul>
 800780e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007812:	e7c3      	b.n	800779c <_dtoa_r+0x51c>
 8007814:	0800a900 	.word	0x0800a900
 8007818:	0800a8d8 	.word	0x0800a8d8
 800781c:	3ff00000 	.word	0x3ff00000
 8007820:	40240000 	.word	0x40240000
 8007824:	401c0000 	.word	0x401c0000
 8007828:	40140000 	.word	0x40140000
 800782c:	3fe00000 	.word	0x3fe00000
 8007830:	4630      	mov	r0, r6
 8007832:	4639      	mov	r1, r7
 8007834:	f7f8 fe50 	bl	80004d8 <__aeabi_dmul>
 8007838:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800783a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800783e:	9c03      	ldr	r4, [sp, #12]
 8007840:	9314      	str	r3, [sp, #80]	; 0x50
 8007842:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007846:	f7f9 f8f7 	bl	8000a38 <__aeabi_d2iz>
 800784a:	9015      	str	r0, [sp, #84]	; 0x54
 800784c:	f7f8 fdda 	bl	8000404 <__aeabi_i2d>
 8007850:	4602      	mov	r2, r0
 8007852:	460b      	mov	r3, r1
 8007854:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007858:	f7f8 fc86 	bl	8000168 <__aeabi_dsub>
 800785c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800785e:	4606      	mov	r6, r0
 8007860:	3330      	adds	r3, #48	; 0x30
 8007862:	f804 3b01 	strb.w	r3, [r4], #1
 8007866:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007868:	460f      	mov	r7, r1
 800786a:	429c      	cmp	r4, r3
 800786c:	f04f 0200 	mov.w	r2, #0
 8007870:	d124      	bne.n	80078bc <_dtoa_r+0x63c>
 8007872:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007876:	4baf      	ldr	r3, [pc, #700]	; (8007b34 <_dtoa_r+0x8b4>)
 8007878:	f7f8 fc78 	bl	800016c <__adddf3>
 800787c:	4602      	mov	r2, r0
 800787e:	460b      	mov	r3, r1
 8007880:	4630      	mov	r0, r6
 8007882:	4639      	mov	r1, r7
 8007884:	f7f9 f8b8 	bl	80009f8 <__aeabi_dcmpgt>
 8007888:	2800      	cmp	r0, #0
 800788a:	d163      	bne.n	8007954 <_dtoa_r+0x6d4>
 800788c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007890:	2000      	movs	r0, #0
 8007892:	49a8      	ldr	r1, [pc, #672]	; (8007b34 <_dtoa_r+0x8b4>)
 8007894:	f7f8 fc68 	bl	8000168 <__aeabi_dsub>
 8007898:	4602      	mov	r2, r0
 800789a:	460b      	mov	r3, r1
 800789c:	4630      	mov	r0, r6
 800789e:	4639      	mov	r1, r7
 80078a0:	f7f9 f88c 	bl	80009bc <__aeabi_dcmplt>
 80078a4:	2800      	cmp	r0, #0
 80078a6:	f43f af1e 	beq.w	80076e6 <_dtoa_r+0x466>
 80078aa:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80078ac:	1e7b      	subs	r3, r7, #1
 80078ae:	9314      	str	r3, [sp, #80]	; 0x50
 80078b0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80078b4:	2b30      	cmp	r3, #48	; 0x30
 80078b6:	d0f8      	beq.n	80078aa <_dtoa_r+0x62a>
 80078b8:	46c3      	mov	fp, r8
 80078ba:	e03b      	b.n	8007934 <_dtoa_r+0x6b4>
 80078bc:	4b9e      	ldr	r3, [pc, #632]	; (8007b38 <_dtoa_r+0x8b8>)
 80078be:	f7f8 fe0b 	bl	80004d8 <__aeabi_dmul>
 80078c2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80078c6:	e7bc      	b.n	8007842 <_dtoa_r+0x5c2>
 80078c8:	9f03      	ldr	r7, [sp, #12]
 80078ca:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80078ce:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80078d2:	4640      	mov	r0, r8
 80078d4:	4649      	mov	r1, r9
 80078d6:	f7f8 ff29 	bl	800072c <__aeabi_ddiv>
 80078da:	f7f9 f8ad 	bl	8000a38 <__aeabi_d2iz>
 80078de:	4604      	mov	r4, r0
 80078e0:	f7f8 fd90 	bl	8000404 <__aeabi_i2d>
 80078e4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80078e8:	f7f8 fdf6 	bl	80004d8 <__aeabi_dmul>
 80078ec:	4602      	mov	r2, r0
 80078ee:	460b      	mov	r3, r1
 80078f0:	4640      	mov	r0, r8
 80078f2:	4649      	mov	r1, r9
 80078f4:	f7f8 fc38 	bl	8000168 <__aeabi_dsub>
 80078f8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80078fc:	f807 6b01 	strb.w	r6, [r7], #1
 8007900:	9e03      	ldr	r6, [sp, #12]
 8007902:	f8dd c020 	ldr.w	ip, [sp, #32]
 8007906:	1bbe      	subs	r6, r7, r6
 8007908:	45b4      	cmp	ip, r6
 800790a:	4602      	mov	r2, r0
 800790c:	460b      	mov	r3, r1
 800790e:	d136      	bne.n	800797e <_dtoa_r+0x6fe>
 8007910:	f7f8 fc2c 	bl	800016c <__adddf3>
 8007914:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007918:	4680      	mov	r8, r0
 800791a:	4689      	mov	r9, r1
 800791c:	f7f9 f86c 	bl	80009f8 <__aeabi_dcmpgt>
 8007920:	bb58      	cbnz	r0, 800797a <_dtoa_r+0x6fa>
 8007922:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007926:	4640      	mov	r0, r8
 8007928:	4649      	mov	r1, r9
 800792a:	f7f9 f83d 	bl	80009a8 <__aeabi_dcmpeq>
 800792e:	b108      	cbz	r0, 8007934 <_dtoa_r+0x6b4>
 8007930:	07e3      	lsls	r3, r4, #31
 8007932:	d422      	bmi.n	800797a <_dtoa_r+0x6fa>
 8007934:	4651      	mov	r1, sl
 8007936:	4628      	mov	r0, r5
 8007938:	f000 fbc2 	bl	80080c0 <_Bfree>
 800793c:	2300      	movs	r3, #0
 800793e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007940:	703b      	strb	r3, [r7, #0]
 8007942:	f10b 0301 	add.w	r3, fp, #1
 8007946:	6013      	str	r3, [r2, #0]
 8007948:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800794a:	2b00      	cmp	r3, #0
 800794c:	f43f ace6 	beq.w	800731c <_dtoa_r+0x9c>
 8007950:	601f      	str	r7, [r3, #0]
 8007952:	e4e3      	b.n	800731c <_dtoa_r+0x9c>
 8007954:	4627      	mov	r7, r4
 8007956:	463b      	mov	r3, r7
 8007958:	461f      	mov	r7, r3
 800795a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800795e:	2a39      	cmp	r2, #57	; 0x39
 8007960:	d107      	bne.n	8007972 <_dtoa_r+0x6f2>
 8007962:	9a03      	ldr	r2, [sp, #12]
 8007964:	429a      	cmp	r2, r3
 8007966:	d1f7      	bne.n	8007958 <_dtoa_r+0x6d8>
 8007968:	2230      	movs	r2, #48	; 0x30
 800796a:	9903      	ldr	r1, [sp, #12]
 800796c:	f108 0801 	add.w	r8, r8, #1
 8007970:	700a      	strb	r2, [r1, #0]
 8007972:	781a      	ldrb	r2, [r3, #0]
 8007974:	3201      	adds	r2, #1
 8007976:	701a      	strb	r2, [r3, #0]
 8007978:	e79e      	b.n	80078b8 <_dtoa_r+0x638>
 800797a:	46d8      	mov	r8, fp
 800797c:	e7eb      	b.n	8007956 <_dtoa_r+0x6d6>
 800797e:	2200      	movs	r2, #0
 8007980:	4b6d      	ldr	r3, [pc, #436]	; (8007b38 <_dtoa_r+0x8b8>)
 8007982:	f7f8 fda9 	bl	80004d8 <__aeabi_dmul>
 8007986:	2200      	movs	r2, #0
 8007988:	2300      	movs	r3, #0
 800798a:	4680      	mov	r8, r0
 800798c:	4689      	mov	r9, r1
 800798e:	f7f9 f80b 	bl	80009a8 <__aeabi_dcmpeq>
 8007992:	2800      	cmp	r0, #0
 8007994:	d09b      	beq.n	80078ce <_dtoa_r+0x64e>
 8007996:	e7cd      	b.n	8007934 <_dtoa_r+0x6b4>
 8007998:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800799a:	2a00      	cmp	r2, #0
 800799c:	f000 80c4 	beq.w	8007b28 <_dtoa_r+0x8a8>
 80079a0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80079a2:	2a01      	cmp	r2, #1
 80079a4:	f300 80a8 	bgt.w	8007af8 <_dtoa_r+0x878>
 80079a8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80079aa:	2a00      	cmp	r2, #0
 80079ac:	f000 80a0 	beq.w	8007af0 <_dtoa_r+0x870>
 80079b0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80079b4:	464f      	mov	r7, r9
 80079b6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80079b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80079ba:	2101      	movs	r1, #1
 80079bc:	441a      	add	r2, r3
 80079be:	4628      	mov	r0, r5
 80079c0:	4499      	add	r9, r3
 80079c2:	9209      	str	r2, [sp, #36]	; 0x24
 80079c4:	f000 fc7c 	bl	80082c0 <__i2b>
 80079c8:	4606      	mov	r6, r0
 80079ca:	b15f      	cbz	r7, 80079e4 <_dtoa_r+0x764>
 80079cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	dd08      	ble.n	80079e4 <_dtoa_r+0x764>
 80079d2:	42bb      	cmp	r3, r7
 80079d4:	bfa8      	it	ge
 80079d6:	463b      	movge	r3, r7
 80079d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80079da:	eba9 0903 	sub.w	r9, r9, r3
 80079de:	1aff      	subs	r7, r7, r3
 80079e0:	1ad3      	subs	r3, r2, r3
 80079e2:	9309      	str	r3, [sp, #36]	; 0x24
 80079e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80079e6:	b1f3      	cbz	r3, 8007a26 <_dtoa_r+0x7a6>
 80079e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	f000 80a0 	beq.w	8007b30 <_dtoa_r+0x8b0>
 80079f0:	2c00      	cmp	r4, #0
 80079f2:	dd10      	ble.n	8007a16 <_dtoa_r+0x796>
 80079f4:	4631      	mov	r1, r6
 80079f6:	4622      	mov	r2, r4
 80079f8:	4628      	mov	r0, r5
 80079fa:	f000 fd1f 	bl	800843c <__pow5mult>
 80079fe:	4652      	mov	r2, sl
 8007a00:	4601      	mov	r1, r0
 8007a02:	4606      	mov	r6, r0
 8007a04:	4628      	mov	r0, r5
 8007a06:	f000 fc71 	bl	80082ec <__multiply>
 8007a0a:	4680      	mov	r8, r0
 8007a0c:	4651      	mov	r1, sl
 8007a0e:	4628      	mov	r0, r5
 8007a10:	f000 fb56 	bl	80080c0 <_Bfree>
 8007a14:	46c2      	mov	sl, r8
 8007a16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a18:	1b1a      	subs	r2, r3, r4
 8007a1a:	d004      	beq.n	8007a26 <_dtoa_r+0x7a6>
 8007a1c:	4651      	mov	r1, sl
 8007a1e:	4628      	mov	r0, r5
 8007a20:	f000 fd0c 	bl	800843c <__pow5mult>
 8007a24:	4682      	mov	sl, r0
 8007a26:	2101      	movs	r1, #1
 8007a28:	4628      	mov	r0, r5
 8007a2a:	f000 fc49 	bl	80082c0 <__i2b>
 8007a2e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007a30:	4604      	mov	r4, r0
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	f340 8082 	ble.w	8007b3c <_dtoa_r+0x8bc>
 8007a38:	461a      	mov	r2, r3
 8007a3a:	4601      	mov	r1, r0
 8007a3c:	4628      	mov	r0, r5
 8007a3e:	f000 fcfd 	bl	800843c <__pow5mult>
 8007a42:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007a44:	4604      	mov	r4, r0
 8007a46:	2b01      	cmp	r3, #1
 8007a48:	dd7b      	ble.n	8007b42 <_dtoa_r+0x8c2>
 8007a4a:	f04f 0800 	mov.w	r8, #0
 8007a4e:	6923      	ldr	r3, [r4, #16]
 8007a50:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007a54:	6918      	ldr	r0, [r3, #16]
 8007a56:	f000 fbe5 	bl	8008224 <__hi0bits>
 8007a5a:	f1c0 0020 	rsb	r0, r0, #32
 8007a5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a60:	4418      	add	r0, r3
 8007a62:	f010 001f 	ands.w	r0, r0, #31
 8007a66:	f000 8092 	beq.w	8007b8e <_dtoa_r+0x90e>
 8007a6a:	f1c0 0320 	rsb	r3, r0, #32
 8007a6e:	2b04      	cmp	r3, #4
 8007a70:	f340 8085 	ble.w	8007b7e <_dtoa_r+0x8fe>
 8007a74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a76:	f1c0 001c 	rsb	r0, r0, #28
 8007a7a:	4403      	add	r3, r0
 8007a7c:	4481      	add	r9, r0
 8007a7e:	4407      	add	r7, r0
 8007a80:	9309      	str	r3, [sp, #36]	; 0x24
 8007a82:	f1b9 0f00 	cmp.w	r9, #0
 8007a86:	dd05      	ble.n	8007a94 <_dtoa_r+0x814>
 8007a88:	4651      	mov	r1, sl
 8007a8a:	464a      	mov	r2, r9
 8007a8c:	4628      	mov	r0, r5
 8007a8e:	f000 fd2f 	bl	80084f0 <__lshift>
 8007a92:	4682      	mov	sl, r0
 8007a94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	dd05      	ble.n	8007aa6 <_dtoa_r+0x826>
 8007a9a:	4621      	mov	r1, r4
 8007a9c:	461a      	mov	r2, r3
 8007a9e:	4628      	mov	r0, r5
 8007aa0:	f000 fd26 	bl	80084f0 <__lshift>
 8007aa4:	4604      	mov	r4, r0
 8007aa6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d072      	beq.n	8007b92 <_dtoa_r+0x912>
 8007aac:	4621      	mov	r1, r4
 8007aae:	4650      	mov	r0, sl
 8007ab0:	f000 fd8a 	bl	80085c8 <__mcmp>
 8007ab4:	2800      	cmp	r0, #0
 8007ab6:	da6c      	bge.n	8007b92 <_dtoa_r+0x912>
 8007ab8:	2300      	movs	r3, #0
 8007aba:	4651      	mov	r1, sl
 8007abc:	220a      	movs	r2, #10
 8007abe:	4628      	mov	r0, r5
 8007ac0:	f000 fb20 	bl	8008104 <__multadd>
 8007ac4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007ac6:	4682      	mov	sl, r0
 8007ac8:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	f000 81ac 	beq.w	8007e2a <_dtoa_r+0xbaa>
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	4631      	mov	r1, r6
 8007ad6:	220a      	movs	r2, #10
 8007ad8:	4628      	mov	r0, r5
 8007ada:	f000 fb13 	bl	8008104 <__multadd>
 8007ade:	9b06      	ldr	r3, [sp, #24]
 8007ae0:	4606      	mov	r6, r0
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	f300 8093 	bgt.w	8007c0e <_dtoa_r+0x98e>
 8007ae8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007aea:	2b02      	cmp	r3, #2
 8007aec:	dc59      	bgt.n	8007ba2 <_dtoa_r+0x922>
 8007aee:	e08e      	b.n	8007c0e <_dtoa_r+0x98e>
 8007af0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007af2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007af6:	e75d      	b.n	80079b4 <_dtoa_r+0x734>
 8007af8:	9b08      	ldr	r3, [sp, #32]
 8007afa:	1e5c      	subs	r4, r3, #1
 8007afc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007afe:	42a3      	cmp	r3, r4
 8007b00:	bfbf      	itttt	lt
 8007b02:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007b04:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8007b06:	1ae3      	sublt	r3, r4, r3
 8007b08:	18d2      	addlt	r2, r2, r3
 8007b0a:	bfa8      	it	ge
 8007b0c:	1b1c      	subge	r4, r3, r4
 8007b0e:	9b08      	ldr	r3, [sp, #32]
 8007b10:	bfbe      	ittt	lt
 8007b12:	940a      	strlt	r4, [sp, #40]	; 0x28
 8007b14:	920e      	strlt	r2, [sp, #56]	; 0x38
 8007b16:	2400      	movlt	r4, #0
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	bfb5      	itete	lt
 8007b1c:	eba9 0703 	sublt.w	r7, r9, r3
 8007b20:	464f      	movge	r7, r9
 8007b22:	2300      	movlt	r3, #0
 8007b24:	9b08      	ldrge	r3, [sp, #32]
 8007b26:	e747      	b.n	80079b8 <_dtoa_r+0x738>
 8007b28:	464f      	mov	r7, r9
 8007b2a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007b2c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8007b2e:	e74c      	b.n	80079ca <_dtoa_r+0x74a>
 8007b30:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007b32:	e773      	b.n	8007a1c <_dtoa_r+0x79c>
 8007b34:	3fe00000 	.word	0x3fe00000
 8007b38:	40240000 	.word	0x40240000
 8007b3c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007b3e:	2b01      	cmp	r3, #1
 8007b40:	dc18      	bgt.n	8007b74 <_dtoa_r+0x8f4>
 8007b42:	9b04      	ldr	r3, [sp, #16]
 8007b44:	b9b3      	cbnz	r3, 8007b74 <_dtoa_r+0x8f4>
 8007b46:	9b05      	ldr	r3, [sp, #20]
 8007b48:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007b4c:	b993      	cbnz	r3, 8007b74 <_dtoa_r+0x8f4>
 8007b4e:	9b05      	ldr	r3, [sp, #20]
 8007b50:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007b54:	0d1b      	lsrs	r3, r3, #20
 8007b56:	051b      	lsls	r3, r3, #20
 8007b58:	b17b      	cbz	r3, 8007b7a <_dtoa_r+0x8fa>
 8007b5a:	f04f 0801 	mov.w	r8, #1
 8007b5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b60:	f109 0901 	add.w	r9, r9, #1
 8007b64:	3301      	adds	r3, #1
 8007b66:	9309      	str	r3, [sp, #36]	; 0x24
 8007b68:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	f47f af6f 	bne.w	8007a4e <_dtoa_r+0x7ce>
 8007b70:	2001      	movs	r0, #1
 8007b72:	e774      	b.n	8007a5e <_dtoa_r+0x7de>
 8007b74:	f04f 0800 	mov.w	r8, #0
 8007b78:	e7f6      	b.n	8007b68 <_dtoa_r+0x8e8>
 8007b7a:	4698      	mov	r8, r3
 8007b7c:	e7f4      	b.n	8007b68 <_dtoa_r+0x8e8>
 8007b7e:	d080      	beq.n	8007a82 <_dtoa_r+0x802>
 8007b80:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007b82:	331c      	adds	r3, #28
 8007b84:	441a      	add	r2, r3
 8007b86:	4499      	add	r9, r3
 8007b88:	441f      	add	r7, r3
 8007b8a:	9209      	str	r2, [sp, #36]	; 0x24
 8007b8c:	e779      	b.n	8007a82 <_dtoa_r+0x802>
 8007b8e:	4603      	mov	r3, r0
 8007b90:	e7f6      	b.n	8007b80 <_dtoa_r+0x900>
 8007b92:	9b08      	ldr	r3, [sp, #32]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	dc34      	bgt.n	8007c02 <_dtoa_r+0x982>
 8007b98:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007b9a:	2b02      	cmp	r3, #2
 8007b9c:	dd31      	ble.n	8007c02 <_dtoa_r+0x982>
 8007b9e:	9b08      	ldr	r3, [sp, #32]
 8007ba0:	9306      	str	r3, [sp, #24]
 8007ba2:	9b06      	ldr	r3, [sp, #24]
 8007ba4:	b963      	cbnz	r3, 8007bc0 <_dtoa_r+0x940>
 8007ba6:	4621      	mov	r1, r4
 8007ba8:	2205      	movs	r2, #5
 8007baa:	4628      	mov	r0, r5
 8007bac:	f000 faaa 	bl	8008104 <__multadd>
 8007bb0:	4601      	mov	r1, r0
 8007bb2:	4604      	mov	r4, r0
 8007bb4:	4650      	mov	r0, sl
 8007bb6:	f000 fd07 	bl	80085c8 <__mcmp>
 8007bba:	2800      	cmp	r0, #0
 8007bbc:	f73f adbf 	bgt.w	800773e <_dtoa_r+0x4be>
 8007bc0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007bc2:	9f03      	ldr	r7, [sp, #12]
 8007bc4:	ea6f 0b03 	mvn.w	fp, r3
 8007bc8:	f04f 0800 	mov.w	r8, #0
 8007bcc:	4621      	mov	r1, r4
 8007bce:	4628      	mov	r0, r5
 8007bd0:	f000 fa76 	bl	80080c0 <_Bfree>
 8007bd4:	2e00      	cmp	r6, #0
 8007bd6:	f43f aead 	beq.w	8007934 <_dtoa_r+0x6b4>
 8007bda:	f1b8 0f00 	cmp.w	r8, #0
 8007bde:	d005      	beq.n	8007bec <_dtoa_r+0x96c>
 8007be0:	45b0      	cmp	r8, r6
 8007be2:	d003      	beq.n	8007bec <_dtoa_r+0x96c>
 8007be4:	4641      	mov	r1, r8
 8007be6:	4628      	mov	r0, r5
 8007be8:	f000 fa6a 	bl	80080c0 <_Bfree>
 8007bec:	4631      	mov	r1, r6
 8007bee:	4628      	mov	r0, r5
 8007bf0:	f000 fa66 	bl	80080c0 <_Bfree>
 8007bf4:	e69e      	b.n	8007934 <_dtoa_r+0x6b4>
 8007bf6:	2400      	movs	r4, #0
 8007bf8:	4626      	mov	r6, r4
 8007bfa:	e7e1      	b.n	8007bc0 <_dtoa_r+0x940>
 8007bfc:	46c3      	mov	fp, r8
 8007bfe:	4626      	mov	r6, r4
 8007c00:	e59d      	b.n	800773e <_dtoa_r+0x4be>
 8007c02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	f000 80c8 	beq.w	8007d9a <_dtoa_r+0xb1a>
 8007c0a:	9b08      	ldr	r3, [sp, #32]
 8007c0c:	9306      	str	r3, [sp, #24]
 8007c0e:	2f00      	cmp	r7, #0
 8007c10:	dd05      	ble.n	8007c1e <_dtoa_r+0x99e>
 8007c12:	4631      	mov	r1, r6
 8007c14:	463a      	mov	r2, r7
 8007c16:	4628      	mov	r0, r5
 8007c18:	f000 fc6a 	bl	80084f0 <__lshift>
 8007c1c:	4606      	mov	r6, r0
 8007c1e:	f1b8 0f00 	cmp.w	r8, #0
 8007c22:	d05b      	beq.n	8007cdc <_dtoa_r+0xa5c>
 8007c24:	4628      	mov	r0, r5
 8007c26:	6871      	ldr	r1, [r6, #4]
 8007c28:	f000 fa0a 	bl	8008040 <_Balloc>
 8007c2c:	4607      	mov	r7, r0
 8007c2e:	b928      	cbnz	r0, 8007c3c <_dtoa_r+0x9bc>
 8007c30:	4602      	mov	r2, r0
 8007c32:	f240 21ef 	movw	r1, #751	; 0x2ef
 8007c36:	4b81      	ldr	r3, [pc, #516]	; (8007e3c <_dtoa_r+0xbbc>)
 8007c38:	f7ff bb36 	b.w	80072a8 <_dtoa_r+0x28>
 8007c3c:	6932      	ldr	r2, [r6, #16]
 8007c3e:	f106 010c 	add.w	r1, r6, #12
 8007c42:	3202      	adds	r2, #2
 8007c44:	0092      	lsls	r2, r2, #2
 8007c46:	300c      	adds	r0, #12
 8007c48:	f002 f94a 	bl	8009ee0 <memcpy>
 8007c4c:	2201      	movs	r2, #1
 8007c4e:	4639      	mov	r1, r7
 8007c50:	4628      	mov	r0, r5
 8007c52:	f000 fc4d 	bl	80084f0 <__lshift>
 8007c56:	46b0      	mov	r8, r6
 8007c58:	4606      	mov	r6, r0
 8007c5a:	9b03      	ldr	r3, [sp, #12]
 8007c5c:	9a03      	ldr	r2, [sp, #12]
 8007c5e:	3301      	adds	r3, #1
 8007c60:	9308      	str	r3, [sp, #32]
 8007c62:	9b06      	ldr	r3, [sp, #24]
 8007c64:	4413      	add	r3, r2
 8007c66:	930b      	str	r3, [sp, #44]	; 0x2c
 8007c68:	9b04      	ldr	r3, [sp, #16]
 8007c6a:	f003 0301 	and.w	r3, r3, #1
 8007c6e:	930a      	str	r3, [sp, #40]	; 0x28
 8007c70:	9b08      	ldr	r3, [sp, #32]
 8007c72:	4621      	mov	r1, r4
 8007c74:	3b01      	subs	r3, #1
 8007c76:	4650      	mov	r0, sl
 8007c78:	9304      	str	r3, [sp, #16]
 8007c7a:	f7ff fa77 	bl	800716c <quorem>
 8007c7e:	4641      	mov	r1, r8
 8007c80:	9006      	str	r0, [sp, #24]
 8007c82:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007c86:	4650      	mov	r0, sl
 8007c88:	f000 fc9e 	bl	80085c8 <__mcmp>
 8007c8c:	4632      	mov	r2, r6
 8007c8e:	9009      	str	r0, [sp, #36]	; 0x24
 8007c90:	4621      	mov	r1, r4
 8007c92:	4628      	mov	r0, r5
 8007c94:	f000 fcb4 	bl	8008600 <__mdiff>
 8007c98:	68c2      	ldr	r2, [r0, #12]
 8007c9a:	4607      	mov	r7, r0
 8007c9c:	bb02      	cbnz	r2, 8007ce0 <_dtoa_r+0xa60>
 8007c9e:	4601      	mov	r1, r0
 8007ca0:	4650      	mov	r0, sl
 8007ca2:	f000 fc91 	bl	80085c8 <__mcmp>
 8007ca6:	4602      	mov	r2, r0
 8007ca8:	4639      	mov	r1, r7
 8007caa:	4628      	mov	r0, r5
 8007cac:	920c      	str	r2, [sp, #48]	; 0x30
 8007cae:	f000 fa07 	bl	80080c0 <_Bfree>
 8007cb2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007cb4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007cb6:	9f08      	ldr	r7, [sp, #32]
 8007cb8:	ea43 0102 	orr.w	r1, r3, r2
 8007cbc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007cbe:	4319      	orrs	r1, r3
 8007cc0:	d110      	bne.n	8007ce4 <_dtoa_r+0xa64>
 8007cc2:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007cc6:	d029      	beq.n	8007d1c <_dtoa_r+0xa9c>
 8007cc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	dd02      	ble.n	8007cd4 <_dtoa_r+0xa54>
 8007cce:	9b06      	ldr	r3, [sp, #24]
 8007cd0:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8007cd4:	9b04      	ldr	r3, [sp, #16]
 8007cd6:	f883 9000 	strb.w	r9, [r3]
 8007cda:	e777      	b.n	8007bcc <_dtoa_r+0x94c>
 8007cdc:	4630      	mov	r0, r6
 8007cde:	e7ba      	b.n	8007c56 <_dtoa_r+0x9d6>
 8007ce0:	2201      	movs	r2, #1
 8007ce2:	e7e1      	b.n	8007ca8 <_dtoa_r+0xa28>
 8007ce4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	db04      	blt.n	8007cf4 <_dtoa_r+0xa74>
 8007cea:	9922      	ldr	r1, [sp, #136]	; 0x88
 8007cec:	430b      	orrs	r3, r1
 8007cee:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007cf0:	430b      	orrs	r3, r1
 8007cf2:	d120      	bne.n	8007d36 <_dtoa_r+0xab6>
 8007cf4:	2a00      	cmp	r2, #0
 8007cf6:	dded      	ble.n	8007cd4 <_dtoa_r+0xa54>
 8007cf8:	4651      	mov	r1, sl
 8007cfa:	2201      	movs	r2, #1
 8007cfc:	4628      	mov	r0, r5
 8007cfe:	f000 fbf7 	bl	80084f0 <__lshift>
 8007d02:	4621      	mov	r1, r4
 8007d04:	4682      	mov	sl, r0
 8007d06:	f000 fc5f 	bl	80085c8 <__mcmp>
 8007d0a:	2800      	cmp	r0, #0
 8007d0c:	dc03      	bgt.n	8007d16 <_dtoa_r+0xa96>
 8007d0e:	d1e1      	bne.n	8007cd4 <_dtoa_r+0xa54>
 8007d10:	f019 0f01 	tst.w	r9, #1
 8007d14:	d0de      	beq.n	8007cd4 <_dtoa_r+0xa54>
 8007d16:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007d1a:	d1d8      	bne.n	8007cce <_dtoa_r+0xa4e>
 8007d1c:	2339      	movs	r3, #57	; 0x39
 8007d1e:	9a04      	ldr	r2, [sp, #16]
 8007d20:	7013      	strb	r3, [r2, #0]
 8007d22:	463b      	mov	r3, r7
 8007d24:	461f      	mov	r7, r3
 8007d26:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8007d2a:	3b01      	subs	r3, #1
 8007d2c:	2a39      	cmp	r2, #57	; 0x39
 8007d2e:	d06b      	beq.n	8007e08 <_dtoa_r+0xb88>
 8007d30:	3201      	adds	r2, #1
 8007d32:	701a      	strb	r2, [r3, #0]
 8007d34:	e74a      	b.n	8007bcc <_dtoa_r+0x94c>
 8007d36:	2a00      	cmp	r2, #0
 8007d38:	dd07      	ble.n	8007d4a <_dtoa_r+0xaca>
 8007d3a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007d3e:	d0ed      	beq.n	8007d1c <_dtoa_r+0xa9c>
 8007d40:	9a04      	ldr	r2, [sp, #16]
 8007d42:	f109 0301 	add.w	r3, r9, #1
 8007d46:	7013      	strb	r3, [r2, #0]
 8007d48:	e740      	b.n	8007bcc <_dtoa_r+0x94c>
 8007d4a:	9b08      	ldr	r3, [sp, #32]
 8007d4c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007d4e:	f803 9c01 	strb.w	r9, [r3, #-1]
 8007d52:	4293      	cmp	r3, r2
 8007d54:	d042      	beq.n	8007ddc <_dtoa_r+0xb5c>
 8007d56:	4651      	mov	r1, sl
 8007d58:	2300      	movs	r3, #0
 8007d5a:	220a      	movs	r2, #10
 8007d5c:	4628      	mov	r0, r5
 8007d5e:	f000 f9d1 	bl	8008104 <__multadd>
 8007d62:	45b0      	cmp	r8, r6
 8007d64:	4682      	mov	sl, r0
 8007d66:	f04f 0300 	mov.w	r3, #0
 8007d6a:	f04f 020a 	mov.w	r2, #10
 8007d6e:	4641      	mov	r1, r8
 8007d70:	4628      	mov	r0, r5
 8007d72:	d107      	bne.n	8007d84 <_dtoa_r+0xb04>
 8007d74:	f000 f9c6 	bl	8008104 <__multadd>
 8007d78:	4680      	mov	r8, r0
 8007d7a:	4606      	mov	r6, r0
 8007d7c:	9b08      	ldr	r3, [sp, #32]
 8007d7e:	3301      	adds	r3, #1
 8007d80:	9308      	str	r3, [sp, #32]
 8007d82:	e775      	b.n	8007c70 <_dtoa_r+0x9f0>
 8007d84:	f000 f9be 	bl	8008104 <__multadd>
 8007d88:	4631      	mov	r1, r6
 8007d8a:	4680      	mov	r8, r0
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	220a      	movs	r2, #10
 8007d90:	4628      	mov	r0, r5
 8007d92:	f000 f9b7 	bl	8008104 <__multadd>
 8007d96:	4606      	mov	r6, r0
 8007d98:	e7f0      	b.n	8007d7c <_dtoa_r+0xafc>
 8007d9a:	9b08      	ldr	r3, [sp, #32]
 8007d9c:	9306      	str	r3, [sp, #24]
 8007d9e:	9f03      	ldr	r7, [sp, #12]
 8007da0:	4621      	mov	r1, r4
 8007da2:	4650      	mov	r0, sl
 8007da4:	f7ff f9e2 	bl	800716c <quorem>
 8007da8:	9b03      	ldr	r3, [sp, #12]
 8007daa:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007dae:	f807 9b01 	strb.w	r9, [r7], #1
 8007db2:	1afa      	subs	r2, r7, r3
 8007db4:	9b06      	ldr	r3, [sp, #24]
 8007db6:	4293      	cmp	r3, r2
 8007db8:	dd07      	ble.n	8007dca <_dtoa_r+0xb4a>
 8007dba:	4651      	mov	r1, sl
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	220a      	movs	r2, #10
 8007dc0:	4628      	mov	r0, r5
 8007dc2:	f000 f99f 	bl	8008104 <__multadd>
 8007dc6:	4682      	mov	sl, r0
 8007dc8:	e7ea      	b.n	8007da0 <_dtoa_r+0xb20>
 8007dca:	9b06      	ldr	r3, [sp, #24]
 8007dcc:	f04f 0800 	mov.w	r8, #0
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	bfcc      	ite	gt
 8007dd4:	461f      	movgt	r7, r3
 8007dd6:	2701      	movle	r7, #1
 8007dd8:	9b03      	ldr	r3, [sp, #12]
 8007dda:	441f      	add	r7, r3
 8007ddc:	4651      	mov	r1, sl
 8007dde:	2201      	movs	r2, #1
 8007de0:	4628      	mov	r0, r5
 8007de2:	f000 fb85 	bl	80084f0 <__lshift>
 8007de6:	4621      	mov	r1, r4
 8007de8:	4682      	mov	sl, r0
 8007dea:	f000 fbed 	bl	80085c8 <__mcmp>
 8007dee:	2800      	cmp	r0, #0
 8007df0:	dc97      	bgt.n	8007d22 <_dtoa_r+0xaa2>
 8007df2:	d102      	bne.n	8007dfa <_dtoa_r+0xb7a>
 8007df4:	f019 0f01 	tst.w	r9, #1
 8007df8:	d193      	bne.n	8007d22 <_dtoa_r+0xaa2>
 8007dfa:	463b      	mov	r3, r7
 8007dfc:	461f      	mov	r7, r3
 8007dfe:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007e02:	2a30      	cmp	r2, #48	; 0x30
 8007e04:	d0fa      	beq.n	8007dfc <_dtoa_r+0xb7c>
 8007e06:	e6e1      	b.n	8007bcc <_dtoa_r+0x94c>
 8007e08:	9a03      	ldr	r2, [sp, #12]
 8007e0a:	429a      	cmp	r2, r3
 8007e0c:	d18a      	bne.n	8007d24 <_dtoa_r+0xaa4>
 8007e0e:	2331      	movs	r3, #49	; 0x31
 8007e10:	f10b 0b01 	add.w	fp, fp, #1
 8007e14:	e797      	b.n	8007d46 <_dtoa_r+0xac6>
 8007e16:	4b0a      	ldr	r3, [pc, #40]	; (8007e40 <_dtoa_r+0xbc0>)
 8007e18:	f7ff ba9f 	b.w	800735a <_dtoa_r+0xda>
 8007e1c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	f47f aa77 	bne.w	8007312 <_dtoa_r+0x92>
 8007e24:	4b07      	ldr	r3, [pc, #28]	; (8007e44 <_dtoa_r+0xbc4>)
 8007e26:	f7ff ba98 	b.w	800735a <_dtoa_r+0xda>
 8007e2a:	9b06      	ldr	r3, [sp, #24]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	dcb6      	bgt.n	8007d9e <_dtoa_r+0xb1e>
 8007e30:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007e32:	2b02      	cmp	r3, #2
 8007e34:	f73f aeb5 	bgt.w	8007ba2 <_dtoa_r+0x922>
 8007e38:	e7b1      	b.n	8007d9e <_dtoa_r+0xb1e>
 8007e3a:	bf00      	nop
 8007e3c:	0800a867 	.word	0x0800a867
 8007e40:	0800a786 	.word	0x0800a786
 8007e44:	0800a7eb 	.word	0x0800a7eb

08007e48 <_free_r>:
 8007e48:	b538      	push	{r3, r4, r5, lr}
 8007e4a:	4605      	mov	r5, r0
 8007e4c:	2900      	cmp	r1, #0
 8007e4e:	d040      	beq.n	8007ed2 <_free_r+0x8a>
 8007e50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007e54:	1f0c      	subs	r4, r1, #4
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	bfb8      	it	lt
 8007e5a:	18e4      	addlt	r4, r4, r3
 8007e5c:	f000 f8e4 	bl	8008028 <__malloc_lock>
 8007e60:	4a1c      	ldr	r2, [pc, #112]	; (8007ed4 <_free_r+0x8c>)
 8007e62:	6813      	ldr	r3, [r2, #0]
 8007e64:	b933      	cbnz	r3, 8007e74 <_free_r+0x2c>
 8007e66:	6063      	str	r3, [r4, #4]
 8007e68:	6014      	str	r4, [r2, #0]
 8007e6a:	4628      	mov	r0, r5
 8007e6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007e70:	f000 b8e0 	b.w	8008034 <__malloc_unlock>
 8007e74:	42a3      	cmp	r3, r4
 8007e76:	d908      	bls.n	8007e8a <_free_r+0x42>
 8007e78:	6820      	ldr	r0, [r4, #0]
 8007e7a:	1821      	adds	r1, r4, r0
 8007e7c:	428b      	cmp	r3, r1
 8007e7e:	bf01      	itttt	eq
 8007e80:	6819      	ldreq	r1, [r3, #0]
 8007e82:	685b      	ldreq	r3, [r3, #4]
 8007e84:	1809      	addeq	r1, r1, r0
 8007e86:	6021      	streq	r1, [r4, #0]
 8007e88:	e7ed      	b.n	8007e66 <_free_r+0x1e>
 8007e8a:	461a      	mov	r2, r3
 8007e8c:	685b      	ldr	r3, [r3, #4]
 8007e8e:	b10b      	cbz	r3, 8007e94 <_free_r+0x4c>
 8007e90:	42a3      	cmp	r3, r4
 8007e92:	d9fa      	bls.n	8007e8a <_free_r+0x42>
 8007e94:	6811      	ldr	r1, [r2, #0]
 8007e96:	1850      	adds	r0, r2, r1
 8007e98:	42a0      	cmp	r0, r4
 8007e9a:	d10b      	bne.n	8007eb4 <_free_r+0x6c>
 8007e9c:	6820      	ldr	r0, [r4, #0]
 8007e9e:	4401      	add	r1, r0
 8007ea0:	1850      	adds	r0, r2, r1
 8007ea2:	4283      	cmp	r3, r0
 8007ea4:	6011      	str	r1, [r2, #0]
 8007ea6:	d1e0      	bne.n	8007e6a <_free_r+0x22>
 8007ea8:	6818      	ldr	r0, [r3, #0]
 8007eaa:	685b      	ldr	r3, [r3, #4]
 8007eac:	4408      	add	r0, r1
 8007eae:	6010      	str	r0, [r2, #0]
 8007eb0:	6053      	str	r3, [r2, #4]
 8007eb2:	e7da      	b.n	8007e6a <_free_r+0x22>
 8007eb4:	d902      	bls.n	8007ebc <_free_r+0x74>
 8007eb6:	230c      	movs	r3, #12
 8007eb8:	602b      	str	r3, [r5, #0]
 8007eba:	e7d6      	b.n	8007e6a <_free_r+0x22>
 8007ebc:	6820      	ldr	r0, [r4, #0]
 8007ebe:	1821      	adds	r1, r4, r0
 8007ec0:	428b      	cmp	r3, r1
 8007ec2:	bf01      	itttt	eq
 8007ec4:	6819      	ldreq	r1, [r3, #0]
 8007ec6:	685b      	ldreq	r3, [r3, #4]
 8007ec8:	1809      	addeq	r1, r1, r0
 8007eca:	6021      	streq	r1, [r4, #0]
 8007ecc:	6063      	str	r3, [r4, #4]
 8007ece:	6054      	str	r4, [r2, #4]
 8007ed0:	e7cb      	b.n	8007e6a <_free_r+0x22>
 8007ed2:	bd38      	pop	{r3, r4, r5, pc}
 8007ed4:	20000614 	.word	0x20000614

08007ed8 <malloc>:
 8007ed8:	4b02      	ldr	r3, [pc, #8]	; (8007ee4 <malloc+0xc>)
 8007eda:	4601      	mov	r1, r0
 8007edc:	6818      	ldr	r0, [r3, #0]
 8007ede:	f000 b823 	b.w	8007f28 <_malloc_r>
 8007ee2:	bf00      	nop
 8007ee4:	2000009c 	.word	0x2000009c

08007ee8 <sbrk_aligned>:
 8007ee8:	b570      	push	{r4, r5, r6, lr}
 8007eea:	4e0e      	ldr	r6, [pc, #56]	; (8007f24 <sbrk_aligned+0x3c>)
 8007eec:	460c      	mov	r4, r1
 8007eee:	6831      	ldr	r1, [r6, #0]
 8007ef0:	4605      	mov	r5, r0
 8007ef2:	b911      	cbnz	r1, 8007efa <sbrk_aligned+0x12>
 8007ef4:	f001 ffe4 	bl	8009ec0 <_sbrk_r>
 8007ef8:	6030      	str	r0, [r6, #0]
 8007efa:	4621      	mov	r1, r4
 8007efc:	4628      	mov	r0, r5
 8007efe:	f001 ffdf 	bl	8009ec0 <_sbrk_r>
 8007f02:	1c43      	adds	r3, r0, #1
 8007f04:	d00a      	beq.n	8007f1c <sbrk_aligned+0x34>
 8007f06:	1cc4      	adds	r4, r0, #3
 8007f08:	f024 0403 	bic.w	r4, r4, #3
 8007f0c:	42a0      	cmp	r0, r4
 8007f0e:	d007      	beq.n	8007f20 <sbrk_aligned+0x38>
 8007f10:	1a21      	subs	r1, r4, r0
 8007f12:	4628      	mov	r0, r5
 8007f14:	f001 ffd4 	bl	8009ec0 <_sbrk_r>
 8007f18:	3001      	adds	r0, #1
 8007f1a:	d101      	bne.n	8007f20 <sbrk_aligned+0x38>
 8007f1c:	f04f 34ff 	mov.w	r4, #4294967295
 8007f20:	4620      	mov	r0, r4
 8007f22:	bd70      	pop	{r4, r5, r6, pc}
 8007f24:	20000618 	.word	0x20000618

08007f28 <_malloc_r>:
 8007f28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f2c:	1ccd      	adds	r5, r1, #3
 8007f2e:	f025 0503 	bic.w	r5, r5, #3
 8007f32:	3508      	adds	r5, #8
 8007f34:	2d0c      	cmp	r5, #12
 8007f36:	bf38      	it	cc
 8007f38:	250c      	movcc	r5, #12
 8007f3a:	2d00      	cmp	r5, #0
 8007f3c:	4607      	mov	r7, r0
 8007f3e:	db01      	blt.n	8007f44 <_malloc_r+0x1c>
 8007f40:	42a9      	cmp	r1, r5
 8007f42:	d905      	bls.n	8007f50 <_malloc_r+0x28>
 8007f44:	230c      	movs	r3, #12
 8007f46:	2600      	movs	r6, #0
 8007f48:	603b      	str	r3, [r7, #0]
 8007f4a:	4630      	mov	r0, r6
 8007f4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f50:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008024 <_malloc_r+0xfc>
 8007f54:	f000 f868 	bl	8008028 <__malloc_lock>
 8007f58:	f8d8 3000 	ldr.w	r3, [r8]
 8007f5c:	461c      	mov	r4, r3
 8007f5e:	bb5c      	cbnz	r4, 8007fb8 <_malloc_r+0x90>
 8007f60:	4629      	mov	r1, r5
 8007f62:	4638      	mov	r0, r7
 8007f64:	f7ff ffc0 	bl	8007ee8 <sbrk_aligned>
 8007f68:	1c43      	adds	r3, r0, #1
 8007f6a:	4604      	mov	r4, r0
 8007f6c:	d155      	bne.n	800801a <_malloc_r+0xf2>
 8007f6e:	f8d8 4000 	ldr.w	r4, [r8]
 8007f72:	4626      	mov	r6, r4
 8007f74:	2e00      	cmp	r6, #0
 8007f76:	d145      	bne.n	8008004 <_malloc_r+0xdc>
 8007f78:	2c00      	cmp	r4, #0
 8007f7a:	d048      	beq.n	800800e <_malloc_r+0xe6>
 8007f7c:	6823      	ldr	r3, [r4, #0]
 8007f7e:	4631      	mov	r1, r6
 8007f80:	4638      	mov	r0, r7
 8007f82:	eb04 0903 	add.w	r9, r4, r3
 8007f86:	f001 ff9b 	bl	8009ec0 <_sbrk_r>
 8007f8a:	4581      	cmp	r9, r0
 8007f8c:	d13f      	bne.n	800800e <_malloc_r+0xe6>
 8007f8e:	6821      	ldr	r1, [r4, #0]
 8007f90:	4638      	mov	r0, r7
 8007f92:	1a6d      	subs	r5, r5, r1
 8007f94:	4629      	mov	r1, r5
 8007f96:	f7ff ffa7 	bl	8007ee8 <sbrk_aligned>
 8007f9a:	3001      	adds	r0, #1
 8007f9c:	d037      	beq.n	800800e <_malloc_r+0xe6>
 8007f9e:	6823      	ldr	r3, [r4, #0]
 8007fa0:	442b      	add	r3, r5
 8007fa2:	6023      	str	r3, [r4, #0]
 8007fa4:	f8d8 3000 	ldr.w	r3, [r8]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d038      	beq.n	800801e <_malloc_r+0xf6>
 8007fac:	685a      	ldr	r2, [r3, #4]
 8007fae:	42a2      	cmp	r2, r4
 8007fb0:	d12b      	bne.n	800800a <_malloc_r+0xe2>
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	605a      	str	r2, [r3, #4]
 8007fb6:	e00f      	b.n	8007fd8 <_malloc_r+0xb0>
 8007fb8:	6822      	ldr	r2, [r4, #0]
 8007fba:	1b52      	subs	r2, r2, r5
 8007fbc:	d41f      	bmi.n	8007ffe <_malloc_r+0xd6>
 8007fbe:	2a0b      	cmp	r2, #11
 8007fc0:	d917      	bls.n	8007ff2 <_malloc_r+0xca>
 8007fc2:	1961      	adds	r1, r4, r5
 8007fc4:	42a3      	cmp	r3, r4
 8007fc6:	6025      	str	r5, [r4, #0]
 8007fc8:	bf18      	it	ne
 8007fca:	6059      	strne	r1, [r3, #4]
 8007fcc:	6863      	ldr	r3, [r4, #4]
 8007fce:	bf08      	it	eq
 8007fd0:	f8c8 1000 	streq.w	r1, [r8]
 8007fd4:	5162      	str	r2, [r4, r5]
 8007fd6:	604b      	str	r3, [r1, #4]
 8007fd8:	4638      	mov	r0, r7
 8007fda:	f104 060b 	add.w	r6, r4, #11
 8007fde:	f000 f829 	bl	8008034 <__malloc_unlock>
 8007fe2:	f026 0607 	bic.w	r6, r6, #7
 8007fe6:	1d23      	adds	r3, r4, #4
 8007fe8:	1af2      	subs	r2, r6, r3
 8007fea:	d0ae      	beq.n	8007f4a <_malloc_r+0x22>
 8007fec:	1b9b      	subs	r3, r3, r6
 8007fee:	50a3      	str	r3, [r4, r2]
 8007ff0:	e7ab      	b.n	8007f4a <_malloc_r+0x22>
 8007ff2:	42a3      	cmp	r3, r4
 8007ff4:	6862      	ldr	r2, [r4, #4]
 8007ff6:	d1dd      	bne.n	8007fb4 <_malloc_r+0x8c>
 8007ff8:	f8c8 2000 	str.w	r2, [r8]
 8007ffc:	e7ec      	b.n	8007fd8 <_malloc_r+0xb0>
 8007ffe:	4623      	mov	r3, r4
 8008000:	6864      	ldr	r4, [r4, #4]
 8008002:	e7ac      	b.n	8007f5e <_malloc_r+0x36>
 8008004:	4634      	mov	r4, r6
 8008006:	6876      	ldr	r6, [r6, #4]
 8008008:	e7b4      	b.n	8007f74 <_malloc_r+0x4c>
 800800a:	4613      	mov	r3, r2
 800800c:	e7cc      	b.n	8007fa8 <_malloc_r+0x80>
 800800e:	230c      	movs	r3, #12
 8008010:	4638      	mov	r0, r7
 8008012:	603b      	str	r3, [r7, #0]
 8008014:	f000 f80e 	bl	8008034 <__malloc_unlock>
 8008018:	e797      	b.n	8007f4a <_malloc_r+0x22>
 800801a:	6025      	str	r5, [r4, #0]
 800801c:	e7dc      	b.n	8007fd8 <_malloc_r+0xb0>
 800801e:	605b      	str	r3, [r3, #4]
 8008020:	deff      	udf	#255	; 0xff
 8008022:	bf00      	nop
 8008024:	20000614 	.word	0x20000614

08008028 <__malloc_lock>:
 8008028:	4801      	ldr	r0, [pc, #4]	; (8008030 <__malloc_lock+0x8>)
 800802a:	f7ff b86c 	b.w	8007106 <__retarget_lock_acquire_recursive>
 800802e:	bf00      	nop
 8008030:	20000610 	.word	0x20000610

08008034 <__malloc_unlock>:
 8008034:	4801      	ldr	r0, [pc, #4]	; (800803c <__malloc_unlock+0x8>)
 8008036:	f7ff b867 	b.w	8007108 <__retarget_lock_release_recursive>
 800803a:	bf00      	nop
 800803c:	20000610 	.word	0x20000610

08008040 <_Balloc>:
 8008040:	b570      	push	{r4, r5, r6, lr}
 8008042:	69c6      	ldr	r6, [r0, #28]
 8008044:	4604      	mov	r4, r0
 8008046:	460d      	mov	r5, r1
 8008048:	b976      	cbnz	r6, 8008068 <_Balloc+0x28>
 800804a:	2010      	movs	r0, #16
 800804c:	f7ff ff44 	bl	8007ed8 <malloc>
 8008050:	4602      	mov	r2, r0
 8008052:	61e0      	str	r0, [r4, #28]
 8008054:	b920      	cbnz	r0, 8008060 <_Balloc+0x20>
 8008056:	216b      	movs	r1, #107	; 0x6b
 8008058:	4b17      	ldr	r3, [pc, #92]	; (80080b8 <_Balloc+0x78>)
 800805a:	4818      	ldr	r0, [pc, #96]	; (80080bc <_Balloc+0x7c>)
 800805c:	f7ff f868 	bl	8007130 <__assert_func>
 8008060:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008064:	6006      	str	r6, [r0, #0]
 8008066:	60c6      	str	r6, [r0, #12]
 8008068:	69e6      	ldr	r6, [r4, #28]
 800806a:	68f3      	ldr	r3, [r6, #12]
 800806c:	b183      	cbz	r3, 8008090 <_Balloc+0x50>
 800806e:	69e3      	ldr	r3, [r4, #28]
 8008070:	68db      	ldr	r3, [r3, #12]
 8008072:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008076:	b9b8      	cbnz	r0, 80080a8 <_Balloc+0x68>
 8008078:	2101      	movs	r1, #1
 800807a:	fa01 f605 	lsl.w	r6, r1, r5
 800807e:	1d72      	adds	r2, r6, #5
 8008080:	4620      	mov	r0, r4
 8008082:	0092      	lsls	r2, r2, #2
 8008084:	f001 ff47 	bl	8009f16 <_calloc_r>
 8008088:	b160      	cbz	r0, 80080a4 <_Balloc+0x64>
 800808a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800808e:	e00e      	b.n	80080ae <_Balloc+0x6e>
 8008090:	2221      	movs	r2, #33	; 0x21
 8008092:	2104      	movs	r1, #4
 8008094:	4620      	mov	r0, r4
 8008096:	f001 ff3e 	bl	8009f16 <_calloc_r>
 800809a:	69e3      	ldr	r3, [r4, #28]
 800809c:	60f0      	str	r0, [r6, #12]
 800809e:	68db      	ldr	r3, [r3, #12]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d1e4      	bne.n	800806e <_Balloc+0x2e>
 80080a4:	2000      	movs	r0, #0
 80080a6:	bd70      	pop	{r4, r5, r6, pc}
 80080a8:	6802      	ldr	r2, [r0, #0]
 80080aa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80080ae:	2300      	movs	r3, #0
 80080b0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80080b4:	e7f7      	b.n	80080a6 <_Balloc+0x66>
 80080b6:	bf00      	nop
 80080b8:	0800a7f8 	.word	0x0800a7f8
 80080bc:	0800a878 	.word	0x0800a878

080080c0 <_Bfree>:
 80080c0:	b570      	push	{r4, r5, r6, lr}
 80080c2:	69c6      	ldr	r6, [r0, #28]
 80080c4:	4605      	mov	r5, r0
 80080c6:	460c      	mov	r4, r1
 80080c8:	b976      	cbnz	r6, 80080e8 <_Bfree+0x28>
 80080ca:	2010      	movs	r0, #16
 80080cc:	f7ff ff04 	bl	8007ed8 <malloc>
 80080d0:	4602      	mov	r2, r0
 80080d2:	61e8      	str	r0, [r5, #28]
 80080d4:	b920      	cbnz	r0, 80080e0 <_Bfree+0x20>
 80080d6:	218f      	movs	r1, #143	; 0x8f
 80080d8:	4b08      	ldr	r3, [pc, #32]	; (80080fc <_Bfree+0x3c>)
 80080da:	4809      	ldr	r0, [pc, #36]	; (8008100 <_Bfree+0x40>)
 80080dc:	f7ff f828 	bl	8007130 <__assert_func>
 80080e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80080e4:	6006      	str	r6, [r0, #0]
 80080e6:	60c6      	str	r6, [r0, #12]
 80080e8:	b13c      	cbz	r4, 80080fa <_Bfree+0x3a>
 80080ea:	69eb      	ldr	r3, [r5, #28]
 80080ec:	6862      	ldr	r2, [r4, #4]
 80080ee:	68db      	ldr	r3, [r3, #12]
 80080f0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80080f4:	6021      	str	r1, [r4, #0]
 80080f6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80080fa:	bd70      	pop	{r4, r5, r6, pc}
 80080fc:	0800a7f8 	.word	0x0800a7f8
 8008100:	0800a878 	.word	0x0800a878

08008104 <__multadd>:
 8008104:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008108:	4607      	mov	r7, r0
 800810a:	460c      	mov	r4, r1
 800810c:	461e      	mov	r6, r3
 800810e:	2000      	movs	r0, #0
 8008110:	690d      	ldr	r5, [r1, #16]
 8008112:	f101 0c14 	add.w	ip, r1, #20
 8008116:	f8dc 3000 	ldr.w	r3, [ip]
 800811a:	3001      	adds	r0, #1
 800811c:	b299      	uxth	r1, r3
 800811e:	fb02 6101 	mla	r1, r2, r1, r6
 8008122:	0c1e      	lsrs	r6, r3, #16
 8008124:	0c0b      	lsrs	r3, r1, #16
 8008126:	fb02 3306 	mla	r3, r2, r6, r3
 800812a:	b289      	uxth	r1, r1
 800812c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008130:	4285      	cmp	r5, r0
 8008132:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008136:	f84c 1b04 	str.w	r1, [ip], #4
 800813a:	dcec      	bgt.n	8008116 <__multadd+0x12>
 800813c:	b30e      	cbz	r6, 8008182 <__multadd+0x7e>
 800813e:	68a3      	ldr	r3, [r4, #8]
 8008140:	42ab      	cmp	r3, r5
 8008142:	dc19      	bgt.n	8008178 <__multadd+0x74>
 8008144:	6861      	ldr	r1, [r4, #4]
 8008146:	4638      	mov	r0, r7
 8008148:	3101      	adds	r1, #1
 800814a:	f7ff ff79 	bl	8008040 <_Balloc>
 800814e:	4680      	mov	r8, r0
 8008150:	b928      	cbnz	r0, 800815e <__multadd+0x5a>
 8008152:	4602      	mov	r2, r0
 8008154:	21ba      	movs	r1, #186	; 0xba
 8008156:	4b0c      	ldr	r3, [pc, #48]	; (8008188 <__multadd+0x84>)
 8008158:	480c      	ldr	r0, [pc, #48]	; (800818c <__multadd+0x88>)
 800815a:	f7fe ffe9 	bl	8007130 <__assert_func>
 800815e:	6922      	ldr	r2, [r4, #16]
 8008160:	f104 010c 	add.w	r1, r4, #12
 8008164:	3202      	adds	r2, #2
 8008166:	0092      	lsls	r2, r2, #2
 8008168:	300c      	adds	r0, #12
 800816a:	f001 feb9 	bl	8009ee0 <memcpy>
 800816e:	4621      	mov	r1, r4
 8008170:	4638      	mov	r0, r7
 8008172:	f7ff ffa5 	bl	80080c0 <_Bfree>
 8008176:	4644      	mov	r4, r8
 8008178:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800817c:	3501      	adds	r5, #1
 800817e:	615e      	str	r6, [r3, #20]
 8008180:	6125      	str	r5, [r4, #16]
 8008182:	4620      	mov	r0, r4
 8008184:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008188:	0800a867 	.word	0x0800a867
 800818c:	0800a878 	.word	0x0800a878

08008190 <__s2b>:
 8008190:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008194:	4615      	mov	r5, r2
 8008196:	2209      	movs	r2, #9
 8008198:	461f      	mov	r7, r3
 800819a:	3308      	adds	r3, #8
 800819c:	460c      	mov	r4, r1
 800819e:	fb93 f3f2 	sdiv	r3, r3, r2
 80081a2:	4606      	mov	r6, r0
 80081a4:	2201      	movs	r2, #1
 80081a6:	2100      	movs	r1, #0
 80081a8:	429a      	cmp	r2, r3
 80081aa:	db09      	blt.n	80081c0 <__s2b+0x30>
 80081ac:	4630      	mov	r0, r6
 80081ae:	f7ff ff47 	bl	8008040 <_Balloc>
 80081b2:	b940      	cbnz	r0, 80081c6 <__s2b+0x36>
 80081b4:	4602      	mov	r2, r0
 80081b6:	21d3      	movs	r1, #211	; 0xd3
 80081b8:	4b18      	ldr	r3, [pc, #96]	; (800821c <__s2b+0x8c>)
 80081ba:	4819      	ldr	r0, [pc, #100]	; (8008220 <__s2b+0x90>)
 80081bc:	f7fe ffb8 	bl	8007130 <__assert_func>
 80081c0:	0052      	lsls	r2, r2, #1
 80081c2:	3101      	adds	r1, #1
 80081c4:	e7f0      	b.n	80081a8 <__s2b+0x18>
 80081c6:	9b08      	ldr	r3, [sp, #32]
 80081c8:	2d09      	cmp	r5, #9
 80081ca:	6143      	str	r3, [r0, #20]
 80081cc:	f04f 0301 	mov.w	r3, #1
 80081d0:	6103      	str	r3, [r0, #16]
 80081d2:	dd16      	ble.n	8008202 <__s2b+0x72>
 80081d4:	f104 0909 	add.w	r9, r4, #9
 80081d8:	46c8      	mov	r8, r9
 80081da:	442c      	add	r4, r5
 80081dc:	f818 3b01 	ldrb.w	r3, [r8], #1
 80081e0:	4601      	mov	r1, r0
 80081e2:	220a      	movs	r2, #10
 80081e4:	4630      	mov	r0, r6
 80081e6:	3b30      	subs	r3, #48	; 0x30
 80081e8:	f7ff ff8c 	bl	8008104 <__multadd>
 80081ec:	45a0      	cmp	r8, r4
 80081ee:	d1f5      	bne.n	80081dc <__s2b+0x4c>
 80081f0:	f1a5 0408 	sub.w	r4, r5, #8
 80081f4:	444c      	add	r4, r9
 80081f6:	1b2d      	subs	r5, r5, r4
 80081f8:	1963      	adds	r3, r4, r5
 80081fa:	42bb      	cmp	r3, r7
 80081fc:	db04      	blt.n	8008208 <__s2b+0x78>
 80081fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008202:	2509      	movs	r5, #9
 8008204:	340a      	adds	r4, #10
 8008206:	e7f6      	b.n	80081f6 <__s2b+0x66>
 8008208:	f814 3b01 	ldrb.w	r3, [r4], #1
 800820c:	4601      	mov	r1, r0
 800820e:	220a      	movs	r2, #10
 8008210:	4630      	mov	r0, r6
 8008212:	3b30      	subs	r3, #48	; 0x30
 8008214:	f7ff ff76 	bl	8008104 <__multadd>
 8008218:	e7ee      	b.n	80081f8 <__s2b+0x68>
 800821a:	bf00      	nop
 800821c:	0800a867 	.word	0x0800a867
 8008220:	0800a878 	.word	0x0800a878

08008224 <__hi0bits>:
 8008224:	0c02      	lsrs	r2, r0, #16
 8008226:	0412      	lsls	r2, r2, #16
 8008228:	4603      	mov	r3, r0
 800822a:	b9ca      	cbnz	r2, 8008260 <__hi0bits+0x3c>
 800822c:	0403      	lsls	r3, r0, #16
 800822e:	2010      	movs	r0, #16
 8008230:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8008234:	bf04      	itt	eq
 8008236:	021b      	lsleq	r3, r3, #8
 8008238:	3008      	addeq	r0, #8
 800823a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800823e:	bf04      	itt	eq
 8008240:	011b      	lsleq	r3, r3, #4
 8008242:	3004      	addeq	r0, #4
 8008244:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8008248:	bf04      	itt	eq
 800824a:	009b      	lsleq	r3, r3, #2
 800824c:	3002      	addeq	r0, #2
 800824e:	2b00      	cmp	r3, #0
 8008250:	db05      	blt.n	800825e <__hi0bits+0x3a>
 8008252:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8008256:	f100 0001 	add.w	r0, r0, #1
 800825a:	bf08      	it	eq
 800825c:	2020      	moveq	r0, #32
 800825e:	4770      	bx	lr
 8008260:	2000      	movs	r0, #0
 8008262:	e7e5      	b.n	8008230 <__hi0bits+0xc>

08008264 <__lo0bits>:
 8008264:	6803      	ldr	r3, [r0, #0]
 8008266:	4602      	mov	r2, r0
 8008268:	f013 0007 	ands.w	r0, r3, #7
 800826c:	d00b      	beq.n	8008286 <__lo0bits+0x22>
 800826e:	07d9      	lsls	r1, r3, #31
 8008270:	d421      	bmi.n	80082b6 <__lo0bits+0x52>
 8008272:	0798      	lsls	r0, r3, #30
 8008274:	bf49      	itett	mi
 8008276:	085b      	lsrmi	r3, r3, #1
 8008278:	089b      	lsrpl	r3, r3, #2
 800827a:	2001      	movmi	r0, #1
 800827c:	6013      	strmi	r3, [r2, #0]
 800827e:	bf5c      	itt	pl
 8008280:	2002      	movpl	r0, #2
 8008282:	6013      	strpl	r3, [r2, #0]
 8008284:	4770      	bx	lr
 8008286:	b299      	uxth	r1, r3
 8008288:	b909      	cbnz	r1, 800828e <__lo0bits+0x2a>
 800828a:	2010      	movs	r0, #16
 800828c:	0c1b      	lsrs	r3, r3, #16
 800828e:	b2d9      	uxtb	r1, r3
 8008290:	b909      	cbnz	r1, 8008296 <__lo0bits+0x32>
 8008292:	3008      	adds	r0, #8
 8008294:	0a1b      	lsrs	r3, r3, #8
 8008296:	0719      	lsls	r1, r3, #28
 8008298:	bf04      	itt	eq
 800829a:	091b      	lsreq	r3, r3, #4
 800829c:	3004      	addeq	r0, #4
 800829e:	0799      	lsls	r1, r3, #30
 80082a0:	bf04      	itt	eq
 80082a2:	089b      	lsreq	r3, r3, #2
 80082a4:	3002      	addeq	r0, #2
 80082a6:	07d9      	lsls	r1, r3, #31
 80082a8:	d403      	bmi.n	80082b2 <__lo0bits+0x4e>
 80082aa:	085b      	lsrs	r3, r3, #1
 80082ac:	f100 0001 	add.w	r0, r0, #1
 80082b0:	d003      	beq.n	80082ba <__lo0bits+0x56>
 80082b2:	6013      	str	r3, [r2, #0]
 80082b4:	4770      	bx	lr
 80082b6:	2000      	movs	r0, #0
 80082b8:	4770      	bx	lr
 80082ba:	2020      	movs	r0, #32
 80082bc:	4770      	bx	lr
	...

080082c0 <__i2b>:
 80082c0:	b510      	push	{r4, lr}
 80082c2:	460c      	mov	r4, r1
 80082c4:	2101      	movs	r1, #1
 80082c6:	f7ff febb 	bl	8008040 <_Balloc>
 80082ca:	4602      	mov	r2, r0
 80082cc:	b928      	cbnz	r0, 80082da <__i2b+0x1a>
 80082ce:	f240 1145 	movw	r1, #325	; 0x145
 80082d2:	4b04      	ldr	r3, [pc, #16]	; (80082e4 <__i2b+0x24>)
 80082d4:	4804      	ldr	r0, [pc, #16]	; (80082e8 <__i2b+0x28>)
 80082d6:	f7fe ff2b 	bl	8007130 <__assert_func>
 80082da:	2301      	movs	r3, #1
 80082dc:	6144      	str	r4, [r0, #20]
 80082de:	6103      	str	r3, [r0, #16]
 80082e0:	bd10      	pop	{r4, pc}
 80082e2:	bf00      	nop
 80082e4:	0800a867 	.word	0x0800a867
 80082e8:	0800a878 	.word	0x0800a878

080082ec <__multiply>:
 80082ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082f0:	4691      	mov	r9, r2
 80082f2:	690a      	ldr	r2, [r1, #16]
 80082f4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80082f8:	460c      	mov	r4, r1
 80082fa:	429a      	cmp	r2, r3
 80082fc:	bfbe      	ittt	lt
 80082fe:	460b      	movlt	r3, r1
 8008300:	464c      	movlt	r4, r9
 8008302:	4699      	movlt	r9, r3
 8008304:	6927      	ldr	r7, [r4, #16]
 8008306:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800830a:	68a3      	ldr	r3, [r4, #8]
 800830c:	6861      	ldr	r1, [r4, #4]
 800830e:	eb07 060a 	add.w	r6, r7, sl
 8008312:	42b3      	cmp	r3, r6
 8008314:	b085      	sub	sp, #20
 8008316:	bfb8      	it	lt
 8008318:	3101      	addlt	r1, #1
 800831a:	f7ff fe91 	bl	8008040 <_Balloc>
 800831e:	b930      	cbnz	r0, 800832e <__multiply+0x42>
 8008320:	4602      	mov	r2, r0
 8008322:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8008326:	4b43      	ldr	r3, [pc, #268]	; (8008434 <__multiply+0x148>)
 8008328:	4843      	ldr	r0, [pc, #268]	; (8008438 <__multiply+0x14c>)
 800832a:	f7fe ff01 	bl	8007130 <__assert_func>
 800832e:	f100 0514 	add.w	r5, r0, #20
 8008332:	462b      	mov	r3, r5
 8008334:	2200      	movs	r2, #0
 8008336:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800833a:	4543      	cmp	r3, r8
 800833c:	d321      	bcc.n	8008382 <__multiply+0x96>
 800833e:	f104 0314 	add.w	r3, r4, #20
 8008342:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008346:	f109 0314 	add.w	r3, r9, #20
 800834a:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800834e:	9202      	str	r2, [sp, #8]
 8008350:	1b3a      	subs	r2, r7, r4
 8008352:	3a15      	subs	r2, #21
 8008354:	f022 0203 	bic.w	r2, r2, #3
 8008358:	3204      	adds	r2, #4
 800835a:	f104 0115 	add.w	r1, r4, #21
 800835e:	428f      	cmp	r7, r1
 8008360:	bf38      	it	cc
 8008362:	2204      	movcc	r2, #4
 8008364:	9201      	str	r2, [sp, #4]
 8008366:	9a02      	ldr	r2, [sp, #8]
 8008368:	9303      	str	r3, [sp, #12]
 800836a:	429a      	cmp	r2, r3
 800836c:	d80c      	bhi.n	8008388 <__multiply+0x9c>
 800836e:	2e00      	cmp	r6, #0
 8008370:	dd03      	ble.n	800837a <__multiply+0x8e>
 8008372:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008376:	2b00      	cmp	r3, #0
 8008378:	d05a      	beq.n	8008430 <__multiply+0x144>
 800837a:	6106      	str	r6, [r0, #16]
 800837c:	b005      	add	sp, #20
 800837e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008382:	f843 2b04 	str.w	r2, [r3], #4
 8008386:	e7d8      	b.n	800833a <__multiply+0x4e>
 8008388:	f8b3 a000 	ldrh.w	sl, [r3]
 800838c:	f1ba 0f00 	cmp.w	sl, #0
 8008390:	d023      	beq.n	80083da <__multiply+0xee>
 8008392:	46a9      	mov	r9, r5
 8008394:	f04f 0c00 	mov.w	ip, #0
 8008398:	f104 0e14 	add.w	lr, r4, #20
 800839c:	f85e 2b04 	ldr.w	r2, [lr], #4
 80083a0:	f8d9 1000 	ldr.w	r1, [r9]
 80083a4:	fa1f fb82 	uxth.w	fp, r2
 80083a8:	b289      	uxth	r1, r1
 80083aa:	fb0a 110b 	mla	r1, sl, fp, r1
 80083ae:	4461      	add	r1, ip
 80083b0:	f8d9 c000 	ldr.w	ip, [r9]
 80083b4:	0c12      	lsrs	r2, r2, #16
 80083b6:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80083ba:	fb0a c202 	mla	r2, sl, r2, ip
 80083be:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80083c2:	b289      	uxth	r1, r1
 80083c4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80083c8:	4577      	cmp	r7, lr
 80083ca:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80083ce:	f849 1b04 	str.w	r1, [r9], #4
 80083d2:	d8e3      	bhi.n	800839c <__multiply+0xb0>
 80083d4:	9a01      	ldr	r2, [sp, #4]
 80083d6:	f845 c002 	str.w	ip, [r5, r2]
 80083da:	9a03      	ldr	r2, [sp, #12]
 80083dc:	3304      	adds	r3, #4
 80083de:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80083e2:	f1b9 0f00 	cmp.w	r9, #0
 80083e6:	d021      	beq.n	800842c <__multiply+0x140>
 80083e8:	46ae      	mov	lr, r5
 80083ea:	f04f 0a00 	mov.w	sl, #0
 80083ee:	6829      	ldr	r1, [r5, #0]
 80083f0:	f104 0c14 	add.w	ip, r4, #20
 80083f4:	f8bc b000 	ldrh.w	fp, [ip]
 80083f8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80083fc:	b289      	uxth	r1, r1
 80083fe:	fb09 220b 	mla	r2, r9, fp, r2
 8008402:	4452      	add	r2, sl
 8008404:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008408:	f84e 1b04 	str.w	r1, [lr], #4
 800840c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008410:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008414:	f8be 1000 	ldrh.w	r1, [lr]
 8008418:	4567      	cmp	r7, ip
 800841a:	fb09 110a 	mla	r1, r9, sl, r1
 800841e:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8008422:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008426:	d8e5      	bhi.n	80083f4 <__multiply+0x108>
 8008428:	9a01      	ldr	r2, [sp, #4]
 800842a:	50a9      	str	r1, [r5, r2]
 800842c:	3504      	adds	r5, #4
 800842e:	e79a      	b.n	8008366 <__multiply+0x7a>
 8008430:	3e01      	subs	r6, #1
 8008432:	e79c      	b.n	800836e <__multiply+0x82>
 8008434:	0800a867 	.word	0x0800a867
 8008438:	0800a878 	.word	0x0800a878

0800843c <__pow5mult>:
 800843c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008440:	4615      	mov	r5, r2
 8008442:	f012 0203 	ands.w	r2, r2, #3
 8008446:	4606      	mov	r6, r0
 8008448:	460f      	mov	r7, r1
 800844a:	d007      	beq.n	800845c <__pow5mult+0x20>
 800844c:	4c25      	ldr	r4, [pc, #148]	; (80084e4 <__pow5mult+0xa8>)
 800844e:	3a01      	subs	r2, #1
 8008450:	2300      	movs	r3, #0
 8008452:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008456:	f7ff fe55 	bl	8008104 <__multadd>
 800845a:	4607      	mov	r7, r0
 800845c:	10ad      	asrs	r5, r5, #2
 800845e:	d03d      	beq.n	80084dc <__pow5mult+0xa0>
 8008460:	69f4      	ldr	r4, [r6, #28]
 8008462:	b97c      	cbnz	r4, 8008484 <__pow5mult+0x48>
 8008464:	2010      	movs	r0, #16
 8008466:	f7ff fd37 	bl	8007ed8 <malloc>
 800846a:	4602      	mov	r2, r0
 800846c:	61f0      	str	r0, [r6, #28]
 800846e:	b928      	cbnz	r0, 800847c <__pow5mult+0x40>
 8008470:	f240 11b3 	movw	r1, #435	; 0x1b3
 8008474:	4b1c      	ldr	r3, [pc, #112]	; (80084e8 <__pow5mult+0xac>)
 8008476:	481d      	ldr	r0, [pc, #116]	; (80084ec <__pow5mult+0xb0>)
 8008478:	f7fe fe5a 	bl	8007130 <__assert_func>
 800847c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008480:	6004      	str	r4, [r0, #0]
 8008482:	60c4      	str	r4, [r0, #12]
 8008484:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8008488:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800848c:	b94c      	cbnz	r4, 80084a2 <__pow5mult+0x66>
 800848e:	f240 2171 	movw	r1, #625	; 0x271
 8008492:	4630      	mov	r0, r6
 8008494:	f7ff ff14 	bl	80082c0 <__i2b>
 8008498:	2300      	movs	r3, #0
 800849a:	4604      	mov	r4, r0
 800849c:	f8c8 0008 	str.w	r0, [r8, #8]
 80084a0:	6003      	str	r3, [r0, #0]
 80084a2:	f04f 0900 	mov.w	r9, #0
 80084a6:	07eb      	lsls	r3, r5, #31
 80084a8:	d50a      	bpl.n	80084c0 <__pow5mult+0x84>
 80084aa:	4639      	mov	r1, r7
 80084ac:	4622      	mov	r2, r4
 80084ae:	4630      	mov	r0, r6
 80084b0:	f7ff ff1c 	bl	80082ec <__multiply>
 80084b4:	4680      	mov	r8, r0
 80084b6:	4639      	mov	r1, r7
 80084b8:	4630      	mov	r0, r6
 80084ba:	f7ff fe01 	bl	80080c0 <_Bfree>
 80084be:	4647      	mov	r7, r8
 80084c0:	106d      	asrs	r5, r5, #1
 80084c2:	d00b      	beq.n	80084dc <__pow5mult+0xa0>
 80084c4:	6820      	ldr	r0, [r4, #0]
 80084c6:	b938      	cbnz	r0, 80084d8 <__pow5mult+0x9c>
 80084c8:	4622      	mov	r2, r4
 80084ca:	4621      	mov	r1, r4
 80084cc:	4630      	mov	r0, r6
 80084ce:	f7ff ff0d 	bl	80082ec <__multiply>
 80084d2:	6020      	str	r0, [r4, #0]
 80084d4:	f8c0 9000 	str.w	r9, [r0]
 80084d8:	4604      	mov	r4, r0
 80084da:	e7e4      	b.n	80084a6 <__pow5mult+0x6a>
 80084dc:	4638      	mov	r0, r7
 80084de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80084e2:	bf00      	nop
 80084e4:	0800a9c8 	.word	0x0800a9c8
 80084e8:	0800a7f8 	.word	0x0800a7f8
 80084ec:	0800a878 	.word	0x0800a878

080084f0 <__lshift>:
 80084f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80084f4:	460c      	mov	r4, r1
 80084f6:	4607      	mov	r7, r0
 80084f8:	4691      	mov	r9, r2
 80084fa:	6923      	ldr	r3, [r4, #16]
 80084fc:	6849      	ldr	r1, [r1, #4]
 80084fe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008502:	68a3      	ldr	r3, [r4, #8]
 8008504:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008508:	f108 0601 	add.w	r6, r8, #1
 800850c:	42b3      	cmp	r3, r6
 800850e:	db0b      	blt.n	8008528 <__lshift+0x38>
 8008510:	4638      	mov	r0, r7
 8008512:	f7ff fd95 	bl	8008040 <_Balloc>
 8008516:	4605      	mov	r5, r0
 8008518:	b948      	cbnz	r0, 800852e <__lshift+0x3e>
 800851a:	4602      	mov	r2, r0
 800851c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8008520:	4b27      	ldr	r3, [pc, #156]	; (80085c0 <__lshift+0xd0>)
 8008522:	4828      	ldr	r0, [pc, #160]	; (80085c4 <__lshift+0xd4>)
 8008524:	f7fe fe04 	bl	8007130 <__assert_func>
 8008528:	3101      	adds	r1, #1
 800852a:	005b      	lsls	r3, r3, #1
 800852c:	e7ee      	b.n	800850c <__lshift+0x1c>
 800852e:	2300      	movs	r3, #0
 8008530:	f100 0114 	add.w	r1, r0, #20
 8008534:	f100 0210 	add.w	r2, r0, #16
 8008538:	4618      	mov	r0, r3
 800853a:	4553      	cmp	r3, sl
 800853c:	db33      	blt.n	80085a6 <__lshift+0xb6>
 800853e:	6920      	ldr	r0, [r4, #16]
 8008540:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008544:	f104 0314 	add.w	r3, r4, #20
 8008548:	f019 091f 	ands.w	r9, r9, #31
 800854c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008550:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008554:	d02b      	beq.n	80085ae <__lshift+0xbe>
 8008556:	468a      	mov	sl, r1
 8008558:	2200      	movs	r2, #0
 800855a:	f1c9 0e20 	rsb	lr, r9, #32
 800855e:	6818      	ldr	r0, [r3, #0]
 8008560:	fa00 f009 	lsl.w	r0, r0, r9
 8008564:	4310      	orrs	r0, r2
 8008566:	f84a 0b04 	str.w	r0, [sl], #4
 800856a:	f853 2b04 	ldr.w	r2, [r3], #4
 800856e:	459c      	cmp	ip, r3
 8008570:	fa22 f20e 	lsr.w	r2, r2, lr
 8008574:	d8f3      	bhi.n	800855e <__lshift+0x6e>
 8008576:	ebac 0304 	sub.w	r3, ip, r4
 800857a:	3b15      	subs	r3, #21
 800857c:	f023 0303 	bic.w	r3, r3, #3
 8008580:	3304      	adds	r3, #4
 8008582:	f104 0015 	add.w	r0, r4, #21
 8008586:	4584      	cmp	ip, r0
 8008588:	bf38      	it	cc
 800858a:	2304      	movcc	r3, #4
 800858c:	50ca      	str	r2, [r1, r3]
 800858e:	b10a      	cbz	r2, 8008594 <__lshift+0xa4>
 8008590:	f108 0602 	add.w	r6, r8, #2
 8008594:	3e01      	subs	r6, #1
 8008596:	4638      	mov	r0, r7
 8008598:	4621      	mov	r1, r4
 800859a:	612e      	str	r6, [r5, #16]
 800859c:	f7ff fd90 	bl	80080c0 <_Bfree>
 80085a0:	4628      	mov	r0, r5
 80085a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085a6:	f842 0f04 	str.w	r0, [r2, #4]!
 80085aa:	3301      	adds	r3, #1
 80085ac:	e7c5      	b.n	800853a <__lshift+0x4a>
 80085ae:	3904      	subs	r1, #4
 80085b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80085b4:	459c      	cmp	ip, r3
 80085b6:	f841 2f04 	str.w	r2, [r1, #4]!
 80085ba:	d8f9      	bhi.n	80085b0 <__lshift+0xc0>
 80085bc:	e7ea      	b.n	8008594 <__lshift+0xa4>
 80085be:	bf00      	nop
 80085c0:	0800a867 	.word	0x0800a867
 80085c4:	0800a878 	.word	0x0800a878

080085c8 <__mcmp>:
 80085c8:	4603      	mov	r3, r0
 80085ca:	690a      	ldr	r2, [r1, #16]
 80085cc:	6900      	ldr	r0, [r0, #16]
 80085ce:	b530      	push	{r4, r5, lr}
 80085d0:	1a80      	subs	r0, r0, r2
 80085d2:	d10d      	bne.n	80085f0 <__mcmp+0x28>
 80085d4:	3314      	adds	r3, #20
 80085d6:	3114      	adds	r1, #20
 80085d8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80085dc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80085e0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80085e4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80085e8:	4295      	cmp	r5, r2
 80085ea:	d002      	beq.n	80085f2 <__mcmp+0x2a>
 80085ec:	d304      	bcc.n	80085f8 <__mcmp+0x30>
 80085ee:	2001      	movs	r0, #1
 80085f0:	bd30      	pop	{r4, r5, pc}
 80085f2:	42a3      	cmp	r3, r4
 80085f4:	d3f4      	bcc.n	80085e0 <__mcmp+0x18>
 80085f6:	e7fb      	b.n	80085f0 <__mcmp+0x28>
 80085f8:	f04f 30ff 	mov.w	r0, #4294967295
 80085fc:	e7f8      	b.n	80085f0 <__mcmp+0x28>
	...

08008600 <__mdiff>:
 8008600:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008604:	460d      	mov	r5, r1
 8008606:	4607      	mov	r7, r0
 8008608:	4611      	mov	r1, r2
 800860a:	4628      	mov	r0, r5
 800860c:	4614      	mov	r4, r2
 800860e:	f7ff ffdb 	bl	80085c8 <__mcmp>
 8008612:	1e06      	subs	r6, r0, #0
 8008614:	d111      	bne.n	800863a <__mdiff+0x3a>
 8008616:	4631      	mov	r1, r6
 8008618:	4638      	mov	r0, r7
 800861a:	f7ff fd11 	bl	8008040 <_Balloc>
 800861e:	4602      	mov	r2, r0
 8008620:	b928      	cbnz	r0, 800862e <__mdiff+0x2e>
 8008622:	f240 2137 	movw	r1, #567	; 0x237
 8008626:	4b3a      	ldr	r3, [pc, #232]	; (8008710 <__mdiff+0x110>)
 8008628:	483a      	ldr	r0, [pc, #232]	; (8008714 <__mdiff+0x114>)
 800862a:	f7fe fd81 	bl	8007130 <__assert_func>
 800862e:	2301      	movs	r3, #1
 8008630:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8008634:	4610      	mov	r0, r2
 8008636:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800863a:	bfa4      	itt	ge
 800863c:	4623      	movge	r3, r4
 800863e:	462c      	movge	r4, r5
 8008640:	4638      	mov	r0, r7
 8008642:	6861      	ldr	r1, [r4, #4]
 8008644:	bfa6      	itte	ge
 8008646:	461d      	movge	r5, r3
 8008648:	2600      	movge	r6, #0
 800864a:	2601      	movlt	r6, #1
 800864c:	f7ff fcf8 	bl	8008040 <_Balloc>
 8008650:	4602      	mov	r2, r0
 8008652:	b918      	cbnz	r0, 800865c <__mdiff+0x5c>
 8008654:	f240 2145 	movw	r1, #581	; 0x245
 8008658:	4b2d      	ldr	r3, [pc, #180]	; (8008710 <__mdiff+0x110>)
 800865a:	e7e5      	b.n	8008628 <__mdiff+0x28>
 800865c:	f102 0814 	add.w	r8, r2, #20
 8008660:	46c2      	mov	sl, r8
 8008662:	f04f 0c00 	mov.w	ip, #0
 8008666:	6927      	ldr	r7, [r4, #16]
 8008668:	60c6      	str	r6, [r0, #12]
 800866a:	692e      	ldr	r6, [r5, #16]
 800866c:	f104 0014 	add.w	r0, r4, #20
 8008670:	f105 0914 	add.w	r9, r5, #20
 8008674:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8008678:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800867c:	3410      	adds	r4, #16
 800867e:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8008682:	f859 3b04 	ldr.w	r3, [r9], #4
 8008686:	fa1f f18b 	uxth.w	r1, fp
 800868a:	4461      	add	r1, ip
 800868c:	fa1f fc83 	uxth.w	ip, r3
 8008690:	0c1b      	lsrs	r3, r3, #16
 8008692:	eba1 010c 	sub.w	r1, r1, ip
 8008696:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800869a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800869e:	b289      	uxth	r1, r1
 80086a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80086a4:	454e      	cmp	r6, r9
 80086a6:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80086aa:	f84a 1b04 	str.w	r1, [sl], #4
 80086ae:	d8e6      	bhi.n	800867e <__mdiff+0x7e>
 80086b0:	1b73      	subs	r3, r6, r5
 80086b2:	3b15      	subs	r3, #21
 80086b4:	f023 0303 	bic.w	r3, r3, #3
 80086b8:	3515      	adds	r5, #21
 80086ba:	3304      	adds	r3, #4
 80086bc:	42ae      	cmp	r6, r5
 80086be:	bf38      	it	cc
 80086c0:	2304      	movcc	r3, #4
 80086c2:	4418      	add	r0, r3
 80086c4:	4443      	add	r3, r8
 80086c6:	461e      	mov	r6, r3
 80086c8:	4605      	mov	r5, r0
 80086ca:	4575      	cmp	r5, lr
 80086cc:	d30e      	bcc.n	80086ec <__mdiff+0xec>
 80086ce:	f10e 0103 	add.w	r1, lr, #3
 80086d2:	1a09      	subs	r1, r1, r0
 80086d4:	f021 0103 	bic.w	r1, r1, #3
 80086d8:	3803      	subs	r0, #3
 80086da:	4586      	cmp	lr, r0
 80086dc:	bf38      	it	cc
 80086de:	2100      	movcc	r1, #0
 80086e0:	440b      	add	r3, r1
 80086e2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80086e6:	b189      	cbz	r1, 800870c <__mdiff+0x10c>
 80086e8:	6117      	str	r7, [r2, #16]
 80086ea:	e7a3      	b.n	8008634 <__mdiff+0x34>
 80086ec:	f855 8b04 	ldr.w	r8, [r5], #4
 80086f0:	fa1f f188 	uxth.w	r1, r8
 80086f4:	4461      	add	r1, ip
 80086f6:	140c      	asrs	r4, r1, #16
 80086f8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80086fc:	b289      	uxth	r1, r1
 80086fe:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8008702:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8008706:	f846 1b04 	str.w	r1, [r6], #4
 800870a:	e7de      	b.n	80086ca <__mdiff+0xca>
 800870c:	3f01      	subs	r7, #1
 800870e:	e7e8      	b.n	80086e2 <__mdiff+0xe2>
 8008710:	0800a867 	.word	0x0800a867
 8008714:	0800a878 	.word	0x0800a878

08008718 <__ulp>:
 8008718:	4b0e      	ldr	r3, [pc, #56]	; (8008754 <__ulp+0x3c>)
 800871a:	400b      	ands	r3, r1
 800871c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8008720:	2b00      	cmp	r3, #0
 8008722:	dc08      	bgt.n	8008736 <__ulp+0x1e>
 8008724:	425b      	negs	r3, r3
 8008726:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800872a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800872e:	da04      	bge.n	800873a <__ulp+0x22>
 8008730:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008734:	4113      	asrs	r3, r2
 8008736:	2200      	movs	r2, #0
 8008738:	e008      	b.n	800874c <__ulp+0x34>
 800873a:	f1a2 0314 	sub.w	r3, r2, #20
 800873e:	2b1e      	cmp	r3, #30
 8008740:	bfd6      	itet	le
 8008742:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8008746:	2201      	movgt	r2, #1
 8008748:	40da      	lsrle	r2, r3
 800874a:	2300      	movs	r3, #0
 800874c:	4619      	mov	r1, r3
 800874e:	4610      	mov	r0, r2
 8008750:	4770      	bx	lr
 8008752:	bf00      	nop
 8008754:	7ff00000 	.word	0x7ff00000

08008758 <__b2d>:
 8008758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800875a:	6905      	ldr	r5, [r0, #16]
 800875c:	f100 0714 	add.w	r7, r0, #20
 8008760:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8008764:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8008768:	1f2e      	subs	r6, r5, #4
 800876a:	4620      	mov	r0, r4
 800876c:	f7ff fd5a 	bl	8008224 <__hi0bits>
 8008770:	f1c0 0220 	rsb	r2, r0, #32
 8008774:	280a      	cmp	r0, #10
 8008776:	4603      	mov	r3, r0
 8008778:	f8df c068 	ldr.w	ip, [pc, #104]	; 80087e4 <__b2d+0x8c>
 800877c:	600a      	str	r2, [r1, #0]
 800877e:	dc12      	bgt.n	80087a6 <__b2d+0x4e>
 8008780:	f1c0 0e0b 	rsb	lr, r0, #11
 8008784:	fa24 f20e 	lsr.w	r2, r4, lr
 8008788:	42b7      	cmp	r7, r6
 800878a:	ea42 010c 	orr.w	r1, r2, ip
 800878e:	bf2c      	ite	cs
 8008790:	2200      	movcs	r2, #0
 8008792:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 8008796:	3315      	adds	r3, #21
 8008798:	fa04 f303 	lsl.w	r3, r4, r3
 800879c:	fa22 f20e 	lsr.w	r2, r2, lr
 80087a0:	431a      	orrs	r2, r3
 80087a2:	4610      	mov	r0, r2
 80087a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80087a6:	42b7      	cmp	r7, r6
 80087a8:	bf2e      	itee	cs
 80087aa:	2200      	movcs	r2, #0
 80087ac:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 80087b0:	f1a5 0608 	subcc.w	r6, r5, #8
 80087b4:	3b0b      	subs	r3, #11
 80087b6:	d012      	beq.n	80087de <__b2d+0x86>
 80087b8:	f1c3 0520 	rsb	r5, r3, #32
 80087bc:	fa22 f105 	lsr.w	r1, r2, r5
 80087c0:	409c      	lsls	r4, r3
 80087c2:	430c      	orrs	r4, r1
 80087c4:	42be      	cmp	r6, r7
 80087c6:	f044 517f 	orr.w	r1, r4, #1069547520	; 0x3fc00000
 80087ca:	bf94      	ite	ls
 80087cc:	2400      	movls	r4, #0
 80087ce:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80087d2:	409a      	lsls	r2, r3
 80087d4:	40ec      	lsrs	r4, r5
 80087d6:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80087da:	4322      	orrs	r2, r4
 80087dc:	e7e1      	b.n	80087a2 <__b2d+0x4a>
 80087de:	ea44 010c 	orr.w	r1, r4, ip
 80087e2:	e7de      	b.n	80087a2 <__b2d+0x4a>
 80087e4:	3ff00000 	.word	0x3ff00000

080087e8 <__d2b>:
 80087e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80087ea:	2101      	movs	r1, #1
 80087ec:	4617      	mov	r7, r2
 80087ee:	461c      	mov	r4, r3
 80087f0:	9e08      	ldr	r6, [sp, #32]
 80087f2:	f7ff fc25 	bl	8008040 <_Balloc>
 80087f6:	4605      	mov	r5, r0
 80087f8:	b930      	cbnz	r0, 8008808 <__d2b+0x20>
 80087fa:	4602      	mov	r2, r0
 80087fc:	f240 310f 	movw	r1, #783	; 0x30f
 8008800:	4b22      	ldr	r3, [pc, #136]	; (800888c <__d2b+0xa4>)
 8008802:	4823      	ldr	r0, [pc, #140]	; (8008890 <__d2b+0xa8>)
 8008804:	f7fe fc94 	bl	8007130 <__assert_func>
 8008808:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800880c:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8008810:	bb24      	cbnz	r4, 800885c <__d2b+0x74>
 8008812:	2f00      	cmp	r7, #0
 8008814:	9301      	str	r3, [sp, #4]
 8008816:	d026      	beq.n	8008866 <__d2b+0x7e>
 8008818:	4668      	mov	r0, sp
 800881a:	9700      	str	r7, [sp, #0]
 800881c:	f7ff fd22 	bl	8008264 <__lo0bits>
 8008820:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008824:	b1e8      	cbz	r0, 8008862 <__d2b+0x7a>
 8008826:	f1c0 0320 	rsb	r3, r0, #32
 800882a:	fa02 f303 	lsl.w	r3, r2, r3
 800882e:	430b      	orrs	r3, r1
 8008830:	40c2      	lsrs	r2, r0
 8008832:	616b      	str	r3, [r5, #20]
 8008834:	9201      	str	r2, [sp, #4]
 8008836:	9b01      	ldr	r3, [sp, #4]
 8008838:	2b00      	cmp	r3, #0
 800883a:	bf14      	ite	ne
 800883c:	2102      	movne	r1, #2
 800883e:	2101      	moveq	r1, #1
 8008840:	61ab      	str	r3, [r5, #24]
 8008842:	6129      	str	r1, [r5, #16]
 8008844:	b1bc      	cbz	r4, 8008876 <__d2b+0x8e>
 8008846:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800884a:	4404      	add	r4, r0
 800884c:	6034      	str	r4, [r6, #0]
 800884e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008852:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008854:	6018      	str	r0, [r3, #0]
 8008856:	4628      	mov	r0, r5
 8008858:	b003      	add	sp, #12
 800885a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800885c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008860:	e7d7      	b.n	8008812 <__d2b+0x2a>
 8008862:	6169      	str	r1, [r5, #20]
 8008864:	e7e7      	b.n	8008836 <__d2b+0x4e>
 8008866:	a801      	add	r0, sp, #4
 8008868:	f7ff fcfc 	bl	8008264 <__lo0bits>
 800886c:	9b01      	ldr	r3, [sp, #4]
 800886e:	2101      	movs	r1, #1
 8008870:	616b      	str	r3, [r5, #20]
 8008872:	3020      	adds	r0, #32
 8008874:	e7e5      	b.n	8008842 <__d2b+0x5a>
 8008876:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800887a:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 800887e:	6030      	str	r0, [r6, #0]
 8008880:	6918      	ldr	r0, [r3, #16]
 8008882:	f7ff fccf 	bl	8008224 <__hi0bits>
 8008886:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800888a:	e7e2      	b.n	8008852 <__d2b+0x6a>
 800888c:	0800a867 	.word	0x0800a867
 8008890:	0800a878 	.word	0x0800a878

08008894 <__ratio>:
 8008894:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008898:	4688      	mov	r8, r1
 800889a:	4669      	mov	r1, sp
 800889c:	4681      	mov	r9, r0
 800889e:	f7ff ff5b 	bl	8008758 <__b2d>
 80088a2:	460f      	mov	r7, r1
 80088a4:	4604      	mov	r4, r0
 80088a6:	460d      	mov	r5, r1
 80088a8:	4640      	mov	r0, r8
 80088aa:	a901      	add	r1, sp, #4
 80088ac:	f7ff ff54 	bl	8008758 <__b2d>
 80088b0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80088b4:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80088b8:	468b      	mov	fp, r1
 80088ba:	eba3 0c02 	sub.w	ip, r3, r2
 80088be:	e9dd 3200 	ldrd	r3, r2, [sp]
 80088c2:	1a9b      	subs	r3, r3, r2
 80088c4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	bfd5      	itete	le
 80088cc:	460a      	movle	r2, r1
 80088ce:	462a      	movgt	r2, r5
 80088d0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80088d4:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80088d8:	bfd8      	it	le
 80088da:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80088de:	465b      	mov	r3, fp
 80088e0:	4602      	mov	r2, r0
 80088e2:	4639      	mov	r1, r7
 80088e4:	4620      	mov	r0, r4
 80088e6:	f7f7 ff21 	bl	800072c <__aeabi_ddiv>
 80088ea:	b003      	add	sp, #12
 80088ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080088f0 <__copybits>:
 80088f0:	3901      	subs	r1, #1
 80088f2:	b570      	push	{r4, r5, r6, lr}
 80088f4:	1149      	asrs	r1, r1, #5
 80088f6:	6914      	ldr	r4, [r2, #16]
 80088f8:	3101      	adds	r1, #1
 80088fa:	f102 0314 	add.w	r3, r2, #20
 80088fe:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008902:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008906:	1f05      	subs	r5, r0, #4
 8008908:	42a3      	cmp	r3, r4
 800890a:	d30c      	bcc.n	8008926 <__copybits+0x36>
 800890c:	1aa3      	subs	r3, r4, r2
 800890e:	3b11      	subs	r3, #17
 8008910:	f023 0303 	bic.w	r3, r3, #3
 8008914:	3211      	adds	r2, #17
 8008916:	42a2      	cmp	r2, r4
 8008918:	bf88      	it	hi
 800891a:	2300      	movhi	r3, #0
 800891c:	4418      	add	r0, r3
 800891e:	2300      	movs	r3, #0
 8008920:	4288      	cmp	r0, r1
 8008922:	d305      	bcc.n	8008930 <__copybits+0x40>
 8008924:	bd70      	pop	{r4, r5, r6, pc}
 8008926:	f853 6b04 	ldr.w	r6, [r3], #4
 800892a:	f845 6f04 	str.w	r6, [r5, #4]!
 800892e:	e7eb      	b.n	8008908 <__copybits+0x18>
 8008930:	f840 3b04 	str.w	r3, [r0], #4
 8008934:	e7f4      	b.n	8008920 <__copybits+0x30>

08008936 <__any_on>:
 8008936:	f100 0214 	add.w	r2, r0, #20
 800893a:	6900      	ldr	r0, [r0, #16]
 800893c:	114b      	asrs	r3, r1, #5
 800893e:	4298      	cmp	r0, r3
 8008940:	b510      	push	{r4, lr}
 8008942:	db11      	blt.n	8008968 <__any_on+0x32>
 8008944:	dd0a      	ble.n	800895c <__any_on+0x26>
 8008946:	f011 011f 	ands.w	r1, r1, #31
 800894a:	d007      	beq.n	800895c <__any_on+0x26>
 800894c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008950:	fa24 f001 	lsr.w	r0, r4, r1
 8008954:	fa00 f101 	lsl.w	r1, r0, r1
 8008958:	428c      	cmp	r4, r1
 800895a:	d10b      	bne.n	8008974 <__any_on+0x3e>
 800895c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008960:	4293      	cmp	r3, r2
 8008962:	d803      	bhi.n	800896c <__any_on+0x36>
 8008964:	2000      	movs	r0, #0
 8008966:	bd10      	pop	{r4, pc}
 8008968:	4603      	mov	r3, r0
 800896a:	e7f7      	b.n	800895c <__any_on+0x26>
 800896c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008970:	2900      	cmp	r1, #0
 8008972:	d0f5      	beq.n	8008960 <__any_on+0x2a>
 8008974:	2001      	movs	r0, #1
 8008976:	e7f6      	b.n	8008966 <__any_on+0x30>

08008978 <sulp>:
 8008978:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800897c:	460f      	mov	r7, r1
 800897e:	4690      	mov	r8, r2
 8008980:	f7ff feca 	bl	8008718 <__ulp>
 8008984:	4604      	mov	r4, r0
 8008986:	460d      	mov	r5, r1
 8008988:	f1b8 0f00 	cmp.w	r8, #0
 800898c:	d011      	beq.n	80089b2 <sulp+0x3a>
 800898e:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8008992:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008996:	2b00      	cmp	r3, #0
 8008998:	dd0b      	ble.n	80089b2 <sulp+0x3a>
 800899a:	2400      	movs	r4, #0
 800899c:	051b      	lsls	r3, r3, #20
 800899e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80089a2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80089a6:	4622      	mov	r2, r4
 80089a8:	462b      	mov	r3, r5
 80089aa:	f7f7 fd95 	bl	80004d8 <__aeabi_dmul>
 80089ae:	4604      	mov	r4, r0
 80089b0:	460d      	mov	r5, r1
 80089b2:	4620      	mov	r0, r4
 80089b4:	4629      	mov	r1, r5
 80089b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80089ba:	0000      	movs	r0, r0
 80089bc:	0000      	movs	r0, r0
	...

080089c0 <_strtod_l>:
 80089c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089c4:	b09f      	sub	sp, #124	; 0x7c
 80089c6:	9217      	str	r2, [sp, #92]	; 0x5c
 80089c8:	2200      	movs	r2, #0
 80089ca:	4604      	mov	r4, r0
 80089cc:	921a      	str	r2, [sp, #104]	; 0x68
 80089ce:	460d      	mov	r5, r1
 80089d0:	f04f 0800 	mov.w	r8, #0
 80089d4:	f04f 0900 	mov.w	r9, #0
 80089d8:	460a      	mov	r2, r1
 80089da:	9219      	str	r2, [sp, #100]	; 0x64
 80089dc:	7811      	ldrb	r1, [r2, #0]
 80089de:	292b      	cmp	r1, #43	; 0x2b
 80089e0:	d04a      	beq.n	8008a78 <_strtod_l+0xb8>
 80089e2:	d838      	bhi.n	8008a56 <_strtod_l+0x96>
 80089e4:	290d      	cmp	r1, #13
 80089e6:	d832      	bhi.n	8008a4e <_strtod_l+0x8e>
 80089e8:	2908      	cmp	r1, #8
 80089ea:	d832      	bhi.n	8008a52 <_strtod_l+0x92>
 80089ec:	2900      	cmp	r1, #0
 80089ee:	d03b      	beq.n	8008a68 <_strtod_l+0xa8>
 80089f0:	2200      	movs	r2, #0
 80089f2:	920e      	str	r2, [sp, #56]	; 0x38
 80089f4:	9e19      	ldr	r6, [sp, #100]	; 0x64
 80089f6:	7832      	ldrb	r2, [r6, #0]
 80089f8:	2a30      	cmp	r2, #48	; 0x30
 80089fa:	f040 80b2 	bne.w	8008b62 <_strtod_l+0x1a2>
 80089fe:	7872      	ldrb	r2, [r6, #1]
 8008a00:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8008a04:	2a58      	cmp	r2, #88	; 0x58
 8008a06:	d16e      	bne.n	8008ae6 <_strtod_l+0x126>
 8008a08:	9302      	str	r3, [sp, #8]
 8008a0a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008a0c:	4620      	mov	r0, r4
 8008a0e:	9301      	str	r3, [sp, #4]
 8008a10:	ab1a      	add	r3, sp, #104	; 0x68
 8008a12:	9300      	str	r3, [sp, #0]
 8008a14:	4a8c      	ldr	r2, [pc, #560]	; (8008c48 <_strtod_l+0x288>)
 8008a16:	ab1b      	add	r3, sp, #108	; 0x6c
 8008a18:	a919      	add	r1, sp, #100	; 0x64
 8008a1a:	f001 faf9 	bl	800a010 <__gethex>
 8008a1e:	f010 070f 	ands.w	r7, r0, #15
 8008a22:	4605      	mov	r5, r0
 8008a24:	d005      	beq.n	8008a32 <_strtod_l+0x72>
 8008a26:	2f06      	cmp	r7, #6
 8008a28:	d128      	bne.n	8008a7c <_strtod_l+0xbc>
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	3601      	adds	r6, #1
 8008a2e:	9619      	str	r6, [sp, #100]	; 0x64
 8008a30:	930e      	str	r3, [sp, #56]	; 0x38
 8008a32:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	f040 85a0 	bne.w	800957a <_strtod_l+0xbba>
 8008a3a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008a3c:	b1cb      	cbz	r3, 8008a72 <_strtod_l+0xb2>
 8008a3e:	4642      	mov	r2, r8
 8008a40:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008a44:	4610      	mov	r0, r2
 8008a46:	4619      	mov	r1, r3
 8008a48:	b01f      	add	sp, #124	; 0x7c
 8008a4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a4e:	2920      	cmp	r1, #32
 8008a50:	d1ce      	bne.n	80089f0 <_strtod_l+0x30>
 8008a52:	3201      	adds	r2, #1
 8008a54:	e7c1      	b.n	80089da <_strtod_l+0x1a>
 8008a56:	292d      	cmp	r1, #45	; 0x2d
 8008a58:	d1ca      	bne.n	80089f0 <_strtod_l+0x30>
 8008a5a:	2101      	movs	r1, #1
 8008a5c:	910e      	str	r1, [sp, #56]	; 0x38
 8008a5e:	1c51      	adds	r1, r2, #1
 8008a60:	9119      	str	r1, [sp, #100]	; 0x64
 8008a62:	7852      	ldrb	r2, [r2, #1]
 8008a64:	2a00      	cmp	r2, #0
 8008a66:	d1c5      	bne.n	80089f4 <_strtod_l+0x34>
 8008a68:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008a6a:	9519      	str	r5, [sp, #100]	; 0x64
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	f040 8582 	bne.w	8009576 <_strtod_l+0xbb6>
 8008a72:	4642      	mov	r2, r8
 8008a74:	464b      	mov	r3, r9
 8008a76:	e7e5      	b.n	8008a44 <_strtod_l+0x84>
 8008a78:	2100      	movs	r1, #0
 8008a7a:	e7ef      	b.n	8008a5c <_strtod_l+0x9c>
 8008a7c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008a7e:	b13a      	cbz	r2, 8008a90 <_strtod_l+0xd0>
 8008a80:	2135      	movs	r1, #53	; 0x35
 8008a82:	a81c      	add	r0, sp, #112	; 0x70
 8008a84:	f7ff ff34 	bl	80088f0 <__copybits>
 8008a88:	4620      	mov	r0, r4
 8008a8a:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008a8c:	f7ff fb18 	bl	80080c0 <_Bfree>
 8008a90:	3f01      	subs	r7, #1
 8008a92:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8008a94:	2f04      	cmp	r7, #4
 8008a96:	d806      	bhi.n	8008aa6 <_strtod_l+0xe6>
 8008a98:	e8df f007 	tbb	[pc, r7]
 8008a9c:	201d0314 	.word	0x201d0314
 8008aa0:	14          	.byte	0x14
 8008aa1:	00          	.byte	0x00
 8008aa2:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 8008aa6:	05e9      	lsls	r1, r5, #23
 8008aa8:	bf48      	it	mi
 8008aaa:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8008aae:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008ab2:	0d1b      	lsrs	r3, r3, #20
 8008ab4:	051b      	lsls	r3, r3, #20
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d1bb      	bne.n	8008a32 <_strtod_l+0x72>
 8008aba:	f7fe faf9 	bl	80070b0 <__errno>
 8008abe:	2322      	movs	r3, #34	; 0x22
 8008ac0:	6003      	str	r3, [r0, #0]
 8008ac2:	e7b6      	b.n	8008a32 <_strtod_l+0x72>
 8008ac4:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008ac8:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8008acc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008ad0:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8008ad4:	e7e7      	b.n	8008aa6 <_strtod_l+0xe6>
 8008ad6:	f8df 9174 	ldr.w	r9, [pc, #372]	; 8008c4c <_strtod_l+0x28c>
 8008ada:	e7e4      	b.n	8008aa6 <_strtod_l+0xe6>
 8008adc:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8008ae0:	f04f 38ff 	mov.w	r8, #4294967295
 8008ae4:	e7df      	b.n	8008aa6 <_strtod_l+0xe6>
 8008ae6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008ae8:	1c5a      	adds	r2, r3, #1
 8008aea:	9219      	str	r2, [sp, #100]	; 0x64
 8008aec:	785b      	ldrb	r3, [r3, #1]
 8008aee:	2b30      	cmp	r3, #48	; 0x30
 8008af0:	d0f9      	beq.n	8008ae6 <_strtod_l+0x126>
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d09d      	beq.n	8008a32 <_strtod_l+0x72>
 8008af6:	2301      	movs	r3, #1
 8008af8:	f04f 0a00 	mov.w	sl, #0
 8008afc:	220a      	movs	r2, #10
 8008afe:	46d3      	mov	fp, sl
 8008b00:	9305      	str	r3, [sp, #20]
 8008b02:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008b04:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 8008b08:	930b      	str	r3, [sp, #44]	; 0x2c
 8008b0a:	9819      	ldr	r0, [sp, #100]	; 0x64
 8008b0c:	7806      	ldrb	r6, [r0, #0]
 8008b0e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8008b12:	b2d9      	uxtb	r1, r3
 8008b14:	2909      	cmp	r1, #9
 8008b16:	d926      	bls.n	8008b66 <_strtod_l+0x1a6>
 8008b18:	2201      	movs	r2, #1
 8008b1a:	494d      	ldr	r1, [pc, #308]	; (8008c50 <_strtod_l+0x290>)
 8008b1c:	f001 f99b 	bl	8009e56 <strncmp>
 8008b20:	2800      	cmp	r0, #0
 8008b22:	d030      	beq.n	8008b86 <_strtod_l+0x1c6>
 8008b24:	2000      	movs	r0, #0
 8008b26:	4632      	mov	r2, r6
 8008b28:	4603      	mov	r3, r0
 8008b2a:	465e      	mov	r6, fp
 8008b2c:	9008      	str	r0, [sp, #32]
 8008b2e:	2a65      	cmp	r2, #101	; 0x65
 8008b30:	d001      	beq.n	8008b36 <_strtod_l+0x176>
 8008b32:	2a45      	cmp	r2, #69	; 0x45
 8008b34:	d113      	bne.n	8008b5e <_strtod_l+0x19e>
 8008b36:	b91e      	cbnz	r6, 8008b40 <_strtod_l+0x180>
 8008b38:	9a05      	ldr	r2, [sp, #20]
 8008b3a:	4302      	orrs	r2, r0
 8008b3c:	d094      	beq.n	8008a68 <_strtod_l+0xa8>
 8008b3e:	2600      	movs	r6, #0
 8008b40:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8008b42:	1c6a      	adds	r2, r5, #1
 8008b44:	9219      	str	r2, [sp, #100]	; 0x64
 8008b46:	786a      	ldrb	r2, [r5, #1]
 8008b48:	2a2b      	cmp	r2, #43	; 0x2b
 8008b4a:	d074      	beq.n	8008c36 <_strtod_l+0x276>
 8008b4c:	2a2d      	cmp	r2, #45	; 0x2d
 8008b4e:	d078      	beq.n	8008c42 <_strtod_l+0x282>
 8008b50:	f04f 0c00 	mov.w	ip, #0
 8008b54:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8008b58:	2909      	cmp	r1, #9
 8008b5a:	d97f      	bls.n	8008c5c <_strtod_l+0x29c>
 8008b5c:	9519      	str	r5, [sp, #100]	; 0x64
 8008b5e:	2700      	movs	r7, #0
 8008b60:	e09e      	b.n	8008ca0 <_strtod_l+0x2e0>
 8008b62:	2300      	movs	r3, #0
 8008b64:	e7c8      	b.n	8008af8 <_strtod_l+0x138>
 8008b66:	f1bb 0f08 	cmp.w	fp, #8
 8008b6a:	bfd8      	it	le
 8008b6c:	990a      	ldrle	r1, [sp, #40]	; 0x28
 8008b6e:	f100 0001 	add.w	r0, r0, #1
 8008b72:	bfd6      	itet	le
 8008b74:	fb02 3301 	mlale	r3, r2, r1, r3
 8008b78:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8008b7c:	930a      	strle	r3, [sp, #40]	; 0x28
 8008b7e:	f10b 0b01 	add.w	fp, fp, #1
 8008b82:	9019      	str	r0, [sp, #100]	; 0x64
 8008b84:	e7c1      	b.n	8008b0a <_strtod_l+0x14a>
 8008b86:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008b88:	1c5a      	adds	r2, r3, #1
 8008b8a:	9219      	str	r2, [sp, #100]	; 0x64
 8008b8c:	785a      	ldrb	r2, [r3, #1]
 8008b8e:	f1bb 0f00 	cmp.w	fp, #0
 8008b92:	d037      	beq.n	8008c04 <_strtod_l+0x244>
 8008b94:	465e      	mov	r6, fp
 8008b96:	9008      	str	r0, [sp, #32]
 8008b98:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8008b9c:	2b09      	cmp	r3, #9
 8008b9e:	d912      	bls.n	8008bc6 <_strtod_l+0x206>
 8008ba0:	2301      	movs	r3, #1
 8008ba2:	e7c4      	b.n	8008b2e <_strtod_l+0x16e>
 8008ba4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008ba6:	3001      	adds	r0, #1
 8008ba8:	1c5a      	adds	r2, r3, #1
 8008baa:	9219      	str	r2, [sp, #100]	; 0x64
 8008bac:	785a      	ldrb	r2, [r3, #1]
 8008bae:	2a30      	cmp	r2, #48	; 0x30
 8008bb0:	d0f8      	beq.n	8008ba4 <_strtod_l+0x1e4>
 8008bb2:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8008bb6:	2b08      	cmp	r3, #8
 8008bb8:	f200 84e4 	bhi.w	8009584 <_strtod_l+0xbc4>
 8008bbc:	9008      	str	r0, [sp, #32]
 8008bbe:	2000      	movs	r0, #0
 8008bc0:	4606      	mov	r6, r0
 8008bc2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008bc4:	930b      	str	r3, [sp, #44]	; 0x2c
 8008bc6:	3a30      	subs	r2, #48	; 0x30
 8008bc8:	f100 0301 	add.w	r3, r0, #1
 8008bcc:	d014      	beq.n	8008bf8 <_strtod_l+0x238>
 8008bce:	9908      	ldr	r1, [sp, #32]
 8008bd0:	eb00 0c06 	add.w	ip, r0, r6
 8008bd4:	4419      	add	r1, r3
 8008bd6:	9108      	str	r1, [sp, #32]
 8008bd8:	4633      	mov	r3, r6
 8008bda:	210a      	movs	r1, #10
 8008bdc:	4563      	cmp	r3, ip
 8008bde:	d113      	bne.n	8008c08 <_strtod_l+0x248>
 8008be0:	1833      	adds	r3, r6, r0
 8008be2:	2b08      	cmp	r3, #8
 8008be4:	f106 0601 	add.w	r6, r6, #1
 8008be8:	4406      	add	r6, r0
 8008bea:	dc1a      	bgt.n	8008c22 <_strtod_l+0x262>
 8008bec:	230a      	movs	r3, #10
 8008bee:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008bf0:	fb03 2301 	mla	r3, r3, r1, r2
 8008bf4:	930a      	str	r3, [sp, #40]	; 0x28
 8008bf6:	2300      	movs	r3, #0
 8008bf8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	1c51      	adds	r1, r2, #1
 8008bfe:	9119      	str	r1, [sp, #100]	; 0x64
 8008c00:	7852      	ldrb	r2, [r2, #1]
 8008c02:	e7c9      	b.n	8008b98 <_strtod_l+0x1d8>
 8008c04:	4658      	mov	r0, fp
 8008c06:	e7d2      	b.n	8008bae <_strtod_l+0x1ee>
 8008c08:	2b08      	cmp	r3, #8
 8008c0a:	f103 0301 	add.w	r3, r3, #1
 8008c0e:	dc03      	bgt.n	8008c18 <_strtod_l+0x258>
 8008c10:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8008c12:	434f      	muls	r7, r1
 8008c14:	970a      	str	r7, [sp, #40]	; 0x28
 8008c16:	e7e1      	b.n	8008bdc <_strtod_l+0x21c>
 8008c18:	2b10      	cmp	r3, #16
 8008c1a:	bfd8      	it	le
 8008c1c:	fb01 fa0a 	mulle.w	sl, r1, sl
 8008c20:	e7dc      	b.n	8008bdc <_strtod_l+0x21c>
 8008c22:	2e10      	cmp	r6, #16
 8008c24:	bfdc      	itt	le
 8008c26:	230a      	movle	r3, #10
 8008c28:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8008c2c:	e7e3      	b.n	8008bf6 <_strtod_l+0x236>
 8008c2e:	2300      	movs	r3, #0
 8008c30:	9308      	str	r3, [sp, #32]
 8008c32:	2301      	movs	r3, #1
 8008c34:	e780      	b.n	8008b38 <_strtod_l+0x178>
 8008c36:	f04f 0c00 	mov.w	ip, #0
 8008c3a:	1caa      	adds	r2, r5, #2
 8008c3c:	9219      	str	r2, [sp, #100]	; 0x64
 8008c3e:	78aa      	ldrb	r2, [r5, #2]
 8008c40:	e788      	b.n	8008b54 <_strtod_l+0x194>
 8008c42:	f04f 0c01 	mov.w	ip, #1
 8008c46:	e7f8      	b.n	8008c3a <_strtod_l+0x27a>
 8008c48:	0800a9d8 	.word	0x0800a9d8
 8008c4c:	7ff00000 	.word	0x7ff00000
 8008c50:	0800a9d4 	.word	0x0800a9d4
 8008c54:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008c56:	1c51      	adds	r1, r2, #1
 8008c58:	9119      	str	r1, [sp, #100]	; 0x64
 8008c5a:	7852      	ldrb	r2, [r2, #1]
 8008c5c:	2a30      	cmp	r2, #48	; 0x30
 8008c5e:	d0f9      	beq.n	8008c54 <_strtod_l+0x294>
 8008c60:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8008c64:	2908      	cmp	r1, #8
 8008c66:	f63f af7a 	bhi.w	8008b5e <_strtod_l+0x19e>
 8008c6a:	3a30      	subs	r2, #48	; 0x30
 8008c6c:	9209      	str	r2, [sp, #36]	; 0x24
 8008c6e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008c70:	920c      	str	r2, [sp, #48]	; 0x30
 8008c72:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008c74:	1c57      	adds	r7, r2, #1
 8008c76:	9719      	str	r7, [sp, #100]	; 0x64
 8008c78:	7852      	ldrb	r2, [r2, #1]
 8008c7a:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8008c7e:	f1be 0f09 	cmp.w	lr, #9
 8008c82:	d938      	bls.n	8008cf6 <_strtod_l+0x336>
 8008c84:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008c86:	1a7f      	subs	r7, r7, r1
 8008c88:	2f08      	cmp	r7, #8
 8008c8a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8008c8e:	dc03      	bgt.n	8008c98 <_strtod_l+0x2d8>
 8008c90:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008c92:	428f      	cmp	r7, r1
 8008c94:	bfa8      	it	ge
 8008c96:	460f      	movge	r7, r1
 8008c98:	f1bc 0f00 	cmp.w	ip, #0
 8008c9c:	d000      	beq.n	8008ca0 <_strtod_l+0x2e0>
 8008c9e:	427f      	negs	r7, r7
 8008ca0:	2e00      	cmp	r6, #0
 8008ca2:	d14f      	bne.n	8008d44 <_strtod_l+0x384>
 8008ca4:	9905      	ldr	r1, [sp, #20]
 8008ca6:	4301      	orrs	r1, r0
 8008ca8:	f47f aec3 	bne.w	8008a32 <_strtod_l+0x72>
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	f47f aedb 	bne.w	8008a68 <_strtod_l+0xa8>
 8008cb2:	2a69      	cmp	r2, #105	; 0x69
 8008cb4:	d029      	beq.n	8008d0a <_strtod_l+0x34a>
 8008cb6:	dc26      	bgt.n	8008d06 <_strtod_l+0x346>
 8008cb8:	2a49      	cmp	r2, #73	; 0x49
 8008cba:	d026      	beq.n	8008d0a <_strtod_l+0x34a>
 8008cbc:	2a4e      	cmp	r2, #78	; 0x4e
 8008cbe:	f47f aed3 	bne.w	8008a68 <_strtod_l+0xa8>
 8008cc2:	499a      	ldr	r1, [pc, #616]	; (8008f2c <_strtod_l+0x56c>)
 8008cc4:	a819      	add	r0, sp, #100	; 0x64
 8008cc6:	f001 fbe5 	bl	800a494 <__match>
 8008cca:	2800      	cmp	r0, #0
 8008ccc:	f43f aecc 	beq.w	8008a68 <_strtod_l+0xa8>
 8008cd0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008cd2:	781b      	ldrb	r3, [r3, #0]
 8008cd4:	2b28      	cmp	r3, #40	; 0x28
 8008cd6:	d12f      	bne.n	8008d38 <_strtod_l+0x378>
 8008cd8:	4995      	ldr	r1, [pc, #596]	; (8008f30 <_strtod_l+0x570>)
 8008cda:	aa1c      	add	r2, sp, #112	; 0x70
 8008cdc:	a819      	add	r0, sp, #100	; 0x64
 8008cde:	f001 fbed 	bl	800a4bc <__hexnan>
 8008ce2:	2805      	cmp	r0, #5
 8008ce4:	d128      	bne.n	8008d38 <_strtod_l+0x378>
 8008ce6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008ce8:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8008cec:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8008cf0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8008cf4:	e69d      	b.n	8008a32 <_strtod_l+0x72>
 8008cf6:	210a      	movs	r1, #10
 8008cf8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008cfa:	fb01 2107 	mla	r1, r1, r7, r2
 8008cfe:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8008d02:	9209      	str	r2, [sp, #36]	; 0x24
 8008d04:	e7b5      	b.n	8008c72 <_strtod_l+0x2b2>
 8008d06:	2a6e      	cmp	r2, #110	; 0x6e
 8008d08:	e7d9      	b.n	8008cbe <_strtod_l+0x2fe>
 8008d0a:	498a      	ldr	r1, [pc, #552]	; (8008f34 <_strtod_l+0x574>)
 8008d0c:	a819      	add	r0, sp, #100	; 0x64
 8008d0e:	f001 fbc1 	bl	800a494 <__match>
 8008d12:	2800      	cmp	r0, #0
 8008d14:	f43f aea8 	beq.w	8008a68 <_strtod_l+0xa8>
 8008d18:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008d1a:	4987      	ldr	r1, [pc, #540]	; (8008f38 <_strtod_l+0x578>)
 8008d1c:	3b01      	subs	r3, #1
 8008d1e:	a819      	add	r0, sp, #100	; 0x64
 8008d20:	9319      	str	r3, [sp, #100]	; 0x64
 8008d22:	f001 fbb7 	bl	800a494 <__match>
 8008d26:	b910      	cbnz	r0, 8008d2e <_strtod_l+0x36e>
 8008d28:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008d2a:	3301      	adds	r3, #1
 8008d2c:	9319      	str	r3, [sp, #100]	; 0x64
 8008d2e:	f04f 0800 	mov.w	r8, #0
 8008d32:	f8df 9208 	ldr.w	r9, [pc, #520]	; 8008f3c <_strtod_l+0x57c>
 8008d36:	e67c      	b.n	8008a32 <_strtod_l+0x72>
 8008d38:	4881      	ldr	r0, [pc, #516]	; (8008f40 <_strtod_l+0x580>)
 8008d3a:	f001 f8df 	bl	8009efc <nan>
 8008d3e:	4680      	mov	r8, r0
 8008d40:	4689      	mov	r9, r1
 8008d42:	e676      	b.n	8008a32 <_strtod_l+0x72>
 8008d44:	9b08      	ldr	r3, [sp, #32]
 8008d46:	f1bb 0f00 	cmp.w	fp, #0
 8008d4a:	bf08      	it	eq
 8008d4c:	46b3      	moveq	fp, r6
 8008d4e:	1afb      	subs	r3, r7, r3
 8008d50:	2e10      	cmp	r6, #16
 8008d52:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008d54:	4635      	mov	r5, r6
 8008d56:	9309      	str	r3, [sp, #36]	; 0x24
 8008d58:	bfa8      	it	ge
 8008d5a:	2510      	movge	r5, #16
 8008d5c:	f7f7 fb42 	bl	80003e4 <__aeabi_ui2d>
 8008d60:	2e09      	cmp	r6, #9
 8008d62:	4680      	mov	r8, r0
 8008d64:	4689      	mov	r9, r1
 8008d66:	dd13      	ble.n	8008d90 <_strtod_l+0x3d0>
 8008d68:	4b76      	ldr	r3, [pc, #472]	; (8008f44 <_strtod_l+0x584>)
 8008d6a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8008d6e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8008d72:	f7f7 fbb1 	bl	80004d8 <__aeabi_dmul>
 8008d76:	4680      	mov	r8, r0
 8008d78:	4650      	mov	r0, sl
 8008d7a:	4689      	mov	r9, r1
 8008d7c:	f7f7 fb32 	bl	80003e4 <__aeabi_ui2d>
 8008d80:	4602      	mov	r2, r0
 8008d82:	460b      	mov	r3, r1
 8008d84:	4640      	mov	r0, r8
 8008d86:	4649      	mov	r1, r9
 8008d88:	f7f7 f9f0 	bl	800016c <__adddf3>
 8008d8c:	4680      	mov	r8, r0
 8008d8e:	4689      	mov	r9, r1
 8008d90:	2e0f      	cmp	r6, #15
 8008d92:	dc36      	bgt.n	8008e02 <_strtod_l+0x442>
 8008d94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	f43f ae4b 	beq.w	8008a32 <_strtod_l+0x72>
 8008d9c:	dd22      	ble.n	8008de4 <_strtod_l+0x424>
 8008d9e:	2b16      	cmp	r3, #22
 8008da0:	dc09      	bgt.n	8008db6 <_strtod_l+0x3f6>
 8008da2:	4968      	ldr	r1, [pc, #416]	; (8008f44 <_strtod_l+0x584>)
 8008da4:	4642      	mov	r2, r8
 8008da6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008daa:	464b      	mov	r3, r9
 8008dac:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008db0:	f7f7 fb92 	bl	80004d8 <__aeabi_dmul>
 8008db4:	e7c3      	b.n	8008d3e <_strtod_l+0x37e>
 8008db6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008db8:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8008dbc:	4293      	cmp	r3, r2
 8008dbe:	db20      	blt.n	8008e02 <_strtod_l+0x442>
 8008dc0:	4c60      	ldr	r4, [pc, #384]	; (8008f44 <_strtod_l+0x584>)
 8008dc2:	f1c6 060f 	rsb	r6, r6, #15
 8008dc6:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8008dca:	4642      	mov	r2, r8
 8008dcc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008dd0:	464b      	mov	r3, r9
 8008dd2:	f7f7 fb81 	bl	80004d8 <__aeabi_dmul>
 8008dd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008dd8:	1b9e      	subs	r6, r3, r6
 8008dda:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8008dde:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008de2:	e7e5      	b.n	8008db0 <_strtod_l+0x3f0>
 8008de4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008de6:	3316      	adds	r3, #22
 8008de8:	db0b      	blt.n	8008e02 <_strtod_l+0x442>
 8008dea:	9b08      	ldr	r3, [sp, #32]
 8008dec:	4640      	mov	r0, r8
 8008dee:	1bdf      	subs	r7, r3, r7
 8008df0:	4b54      	ldr	r3, [pc, #336]	; (8008f44 <_strtod_l+0x584>)
 8008df2:	4649      	mov	r1, r9
 8008df4:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8008df8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008dfc:	f7f7 fc96 	bl	800072c <__aeabi_ddiv>
 8008e00:	e79d      	b.n	8008d3e <_strtod_l+0x37e>
 8008e02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e04:	1b75      	subs	r5, r6, r5
 8008e06:	441d      	add	r5, r3
 8008e08:	2d00      	cmp	r5, #0
 8008e0a:	dd70      	ble.n	8008eee <_strtod_l+0x52e>
 8008e0c:	f015 030f 	ands.w	r3, r5, #15
 8008e10:	d00a      	beq.n	8008e28 <_strtod_l+0x468>
 8008e12:	494c      	ldr	r1, [pc, #304]	; (8008f44 <_strtod_l+0x584>)
 8008e14:	4642      	mov	r2, r8
 8008e16:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008e1a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008e1e:	464b      	mov	r3, r9
 8008e20:	f7f7 fb5a 	bl	80004d8 <__aeabi_dmul>
 8008e24:	4680      	mov	r8, r0
 8008e26:	4689      	mov	r9, r1
 8008e28:	f035 050f 	bics.w	r5, r5, #15
 8008e2c:	d04d      	beq.n	8008eca <_strtod_l+0x50a>
 8008e2e:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8008e32:	dd22      	ble.n	8008e7a <_strtod_l+0x4ba>
 8008e34:	2600      	movs	r6, #0
 8008e36:	46b3      	mov	fp, r6
 8008e38:	960b      	str	r6, [sp, #44]	; 0x2c
 8008e3a:	9608      	str	r6, [sp, #32]
 8008e3c:	2322      	movs	r3, #34	; 0x22
 8008e3e:	f04f 0800 	mov.w	r8, #0
 8008e42:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 8008f3c <_strtod_l+0x57c>
 8008e46:	6023      	str	r3, [r4, #0]
 8008e48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	f43f adf1 	beq.w	8008a32 <_strtod_l+0x72>
 8008e50:	4620      	mov	r0, r4
 8008e52:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008e54:	f7ff f934 	bl	80080c0 <_Bfree>
 8008e58:	4620      	mov	r0, r4
 8008e5a:	9908      	ldr	r1, [sp, #32]
 8008e5c:	f7ff f930 	bl	80080c0 <_Bfree>
 8008e60:	4659      	mov	r1, fp
 8008e62:	4620      	mov	r0, r4
 8008e64:	f7ff f92c 	bl	80080c0 <_Bfree>
 8008e68:	4620      	mov	r0, r4
 8008e6a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008e6c:	f7ff f928 	bl	80080c0 <_Bfree>
 8008e70:	4631      	mov	r1, r6
 8008e72:	4620      	mov	r0, r4
 8008e74:	f7ff f924 	bl	80080c0 <_Bfree>
 8008e78:	e5db      	b.n	8008a32 <_strtod_l+0x72>
 8008e7a:	4b33      	ldr	r3, [pc, #204]	; (8008f48 <_strtod_l+0x588>)
 8008e7c:	4640      	mov	r0, r8
 8008e7e:	9305      	str	r3, [sp, #20]
 8008e80:	2300      	movs	r3, #0
 8008e82:	4649      	mov	r1, r9
 8008e84:	469a      	mov	sl, r3
 8008e86:	112d      	asrs	r5, r5, #4
 8008e88:	2d01      	cmp	r5, #1
 8008e8a:	dc21      	bgt.n	8008ed0 <_strtod_l+0x510>
 8008e8c:	b10b      	cbz	r3, 8008e92 <_strtod_l+0x4d2>
 8008e8e:	4680      	mov	r8, r0
 8008e90:	4689      	mov	r9, r1
 8008e92:	492d      	ldr	r1, [pc, #180]	; (8008f48 <_strtod_l+0x588>)
 8008e94:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8008e98:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8008e9c:	4642      	mov	r2, r8
 8008e9e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008ea2:	464b      	mov	r3, r9
 8008ea4:	f7f7 fb18 	bl	80004d8 <__aeabi_dmul>
 8008ea8:	4b24      	ldr	r3, [pc, #144]	; (8008f3c <_strtod_l+0x57c>)
 8008eaa:	460a      	mov	r2, r1
 8008eac:	400b      	ands	r3, r1
 8008eae:	4927      	ldr	r1, [pc, #156]	; (8008f4c <_strtod_l+0x58c>)
 8008eb0:	4680      	mov	r8, r0
 8008eb2:	428b      	cmp	r3, r1
 8008eb4:	d8be      	bhi.n	8008e34 <_strtod_l+0x474>
 8008eb6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8008eba:	428b      	cmp	r3, r1
 8008ebc:	bf86      	itte	hi
 8008ebe:	f04f 38ff 	movhi.w	r8, #4294967295
 8008ec2:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 8008f50 <_strtod_l+0x590>
 8008ec6:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8008eca:	2300      	movs	r3, #0
 8008ecc:	9305      	str	r3, [sp, #20]
 8008ece:	e07b      	b.n	8008fc8 <_strtod_l+0x608>
 8008ed0:	07ea      	lsls	r2, r5, #31
 8008ed2:	d505      	bpl.n	8008ee0 <_strtod_l+0x520>
 8008ed4:	9b05      	ldr	r3, [sp, #20]
 8008ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eda:	f7f7 fafd 	bl	80004d8 <__aeabi_dmul>
 8008ede:	2301      	movs	r3, #1
 8008ee0:	9a05      	ldr	r2, [sp, #20]
 8008ee2:	f10a 0a01 	add.w	sl, sl, #1
 8008ee6:	3208      	adds	r2, #8
 8008ee8:	106d      	asrs	r5, r5, #1
 8008eea:	9205      	str	r2, [sp, #20]
 8008eec:	e7cc      	b.n	8008e88 <_strtod_l+0x4c8>
 8008eee:	d0ec      	beq.n	8008eca <_strtod_l+0x50a>
 8008ef0:	426d      	negs	r5, r5
 8008ef2:	f015 020f 	ands.w	r2, r5, #15
 8008ef6:	d00a      	beq.n	8008f0e <_strtod_l+0x54e>
 8008ef8:	4b12      	ldr	r3, [pc, #72]	; (8008f44 <_strtod_l+0x584>)
 8008efa:	4640      	mov	r0, r8
 8008efc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008f00:	4649      	mov	r1, r9
 8008f02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f06:	f7f7 fc11 	bl	800072c <__aeabi_ddiv>
 8008f0a:	4680      	mov	r8, r0
 8008f0c:	4689      	mov	r9, r1
 8008f0e:	112d      	asrs	r5, r5, #4
 8008f10:	d0db      	beq.n	8008eca <_strtod_l+0x50a>
 8008f12:	2d1f      	cmp	r5, #31
 8008f14:	dd1e      	ble.n	8008f54 <_strtod_l+0x594>
 8008f16:	2600      	movs	r6, #0
 8008f18:	46b3      	mov	fp, r6
 8008f1a:	960b      	str	r6, [sp, #44]	; 0x2c
 8008f1c:	9608      	str	r6, [sp, #32]
 8008f1e:	2322      	movs	r3, #34	; 0x22
 8008f20:	f04f 0800 	mov.w	r8, #0
 8008f24:	f04f 0900 	mov.w	r9, #0
 8008f28:	6023      	str	r3, [r4, #0]
 8008f2a:	e78d      	b.n	8008e48 <_strtod_l+0x488>
 8008f2c:	0800a783 	.word	0x0800a783
 8008f30:	0800a9ec 	.word	0x0800a9ec
 8008f34:	0800a77b 	.word	0x0800a77b
 8008f38:	0800a7ee 	.word	0x0800a7ee
 8008f3c:	7ff00000 	.word	0x7ff00000
 8008f40:	0800a7ea 	.word	0x0800a7ea
 8008f44:	0800a900 	.word	0x0800a900
 8008f48:	0800a8d8 	.word	0x0800a8d8
 8008f4c:	7ca00000 	.word	0x7ca00000
 8008f50:	7fefffff 	.word	0x7fefffff
 8008f54:	f015 0310 	ands.w	r3, r5, #16
 8008f58:	bf18      	it	ne
 8008f5a:	236a      	movne	r3, #106	; 0x6a
 8008f5c:	4640      	mov	r0, r8
 8008f5e:	9305      	str	r3, [sp, #20]
 8008f60:	4649      	mov	r1, r9
 8008f62:	2300      	movs	r3, #0
 8008f64:	f8df a2c8 	ldr.w	sl, [pc, #712]	; 8009230 <_strtod_l+0x870>
 8008f68:	07ea      	lsls	r2, r5, #31
 8008f6a:	d504      	bpl.n	8008f76 <_strtod_l+0x5b6>
 8008f6c:	e9da 2300 	ldrd	r2, r3, [sl]
 8008f70:	f7f7 fab2 	bl	80004d8 <__aeabi_dmul>
 8008f74:	2301      	movs	r3, #1
 8008f76:	106d      	asrs	r5, r5, #1
 8008f78:	f10a 0a08 	add.w	sl, sl, #8
 8008f7c:	d1f4      	bne.n	8008f68 <_strtod_l+0x5a8>
 8008f7e:	b10b      	cbz	r3, 8008f84 <_strtod_l+0x5c4>
 8008f80:	4680      	mov	r8, r0
 8008f82:	4689      	mov	r9, r1
 8008f84:	9b05      	ldr	r3, [sp, #20]
 8008f86:	b1bb      	cbz	r3, 8008fb8 <_strtod_l+0x5f8>
 8008f88:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8008f8c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	4649      	mov	r1, r9
 8008f94:	dd10      	ble.n	8008fb8 <_strtod_l+0x5f8>
 8008f96:	2b1f      	cmp	r3, #31
 8008f98:	f340 8128 	ble.w	80091ec <_strtod_l+0x82c>
 8008f9c:	2b34      	cmp	r3, #52	; 0x34
 8008f9e:	bfd8      	it	le
 8008fa0:	f04f 33ff 	movle.w	r3, #4294967295
 8008fa4:	f04f 0800 	mov.w	r8, #0
 8008fa8:	bfcf      	iteee	gt
 8008faa:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8008fae:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8008fb2:	4093      	lslle	r3, r2
 8008fb4:	ea03 0901 	andle.w	r9, r3, r1
 8008fb8:	2200      	movs	r2, #0
 8008fba:	2300      	movs	r3, #0
 8008fbc:	4640      	mov	r0, r8
 8008fbe:	4649      	mov	r1, r9
 8008fc0:	f7f7 fcf2 	bl	80009a8 <__aeabi_dcmpeq>
 8008fc4:	2800      	cmp	r0, #0
 8008fc6:	d1a6      	bne.n	8008f16 <_strtod_l+0x556>
 8008fc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008fca:	465a      	mov	r2, fp
 8008fcc:	9300      	str	r3, [sp, #0]
 8008fce:	4620      	mov	r0, r4
 8008fd0:	4633      	mov	r3, r6
 8008fd2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008fd4:	f7ff f8dc 	bl	8008190 <__s2b>
 8008fd8:	900b      	str	r0, [sp, #44]	; 0x2c
 8008fda:	2800      	cmp	r0, #0
 8008fdc:	f43f af2a 	beq.w	8008e34 <_strtod_l+0x474>
 8008fe0:	2600      	movs	r6, #0
 8008fe2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008fe4:	9b08      	ldr	r3, [sp, #32]
 8008fe6:	2a00      	cmp	r2, #0
 8008fe8:	eba3 0307 	sub.w	r3, r3, r7
 8008fec:	bfa8      	it	ge
 8008fee:	2300      	movge	r3, #0
 8008ff0:	46b3      	mov	fp, r6
 8008ff2:	9312      	str	r3, [sp, #72]	; 0x48
 8008ff4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8008ff8:	9316      	str	r3, [sp, #88]	; 0x58
 8008ffa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008ffc:	4620      	mov	r0, r4
 8008ffe:	6859      	ldr	r1, [r3, #4]
 8009000:	f7ff f81e 	bl	8008040 <_Balloc>
 8009004:	9008      	str	r0, [sp, #32]
 8009006:	2800      	cmp	r0, #0
 8009008:	f43f af18 	beq.w	8008e3c <_strtod_l+0x47c>
 800900c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800900e:	300c      	adds	r0, #12
 8009010:	691a      	ldr	r2, [r3, #16]
 8009012:	f103 010c 	add.w	r1, r3, #12
 8009016:	3202      	adds	r2, #2
 8009018:	0092      	lsls	r2, r2, #2
 800901a:	f000 ff61 	bl	8009ee0 <memcpy>
 800901e:	ab1c      	add	r3, sp, #112	; 0x70
 8009020:	9301      	str	r3, [sp, #4]
 8009022:	ab1b      	add	r3, sp, #108	; 0x6c
 8009024:	9300      	str	r3, [sp, #0]
 8009026:	4642      	mov	r2, r8
 8009028:	464b      	mov	r3, r9
 800902a:	4620      	mov	r0, r4
 800902c:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 8009030:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 8009034:	f7ff fbd8 	bl	80087e8 <__d2b>
 8009038:	901a      	str	r0, [sp, #104]	; 0x68
 800903a:	2800      	cmp	r0, #0
 800903c:	f43f aefe 	beq.w	8008e3c <_strtod_l+0x47c>
 8009040:	2101      	movs	r1, #1
 8009042:	4620      	mov	r0, r4
 8009044:	f7ff f93c 	bl	80082c0 <__i2b>
 8009048:	4683      	mov	fp, r0
 800904a:	2800      	cmp	r0, #0
 800904c:	f43f aef6 	beq.w	8008e3c <_strtod_l+0x47c>
 8009050:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 8009052:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009054:	2f00      	cmp	r7, #0
 8009056:	bfab      	itete	ge
 8009058:	9b12      	ldrge	r3, [sp, #72]	; 0x48
 800905a:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800905c:	eb07 0a03 	addge.w	sl, r7, r3
 8009060:	1bdd      	sublt	r5, r3, r7
 8009062:	9b05      	ldr	r3, [sp, #20]
 8009064:	bfa8      	it	ge
 8009066:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8009068:	eba7 0703 	sub.w	r7, r7, r3
 800906c:	4417      	add	r7, r2
 800906e:	4b71      	ldr	r3, [pc, #452]	; (8009234 <_strtod_l+0x874>)
 8009070:	f107 37ff 	add.w	r7, r7, #4294967295
 8009074:	bfb8      	it	lt
 8009076:	f8dd a048 	ldrlt.w	sl, [sp, #72]	; 0x48
 800907a:	429f      	cmp	r7, r3
 800907c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009080:	f280 80c7 	bge.w	8009212 <_strtod_l+0x852>
 8009084:	1bdb      	subs	r3, r3, r7
 8009086:	2b1f      	cmp	r3, #31
 8009088:	f04f 0101 	mov.w	r1, #1
 800908c:	eba2 0203 	sub.w	r2, r2, r3
 8009090:	f300 80b3 	bgt.w	80091fa <_strtod_l+0x83a>
 8009094:	fa01 f303 	lsl.w	r3, r1, r3
 8009098:	9313      	str	r3, [sp, #76]	; 0x4c
 800909a:	2300      	movs	r3, #0
 800909c:	9310      	str	r3, [sp, #64]	; 0x40
 800909e:	eb0a 0702 	add.w	r7, sl, r2
 80090a2:	9b05      	ldr	r3, [sp, #20]
 80090a4:	45ba      	cmp	sl, r7
 80090a6:	4415      	add	r5, r2
 80090a8:	441d      	add	r5, r3
 80090aa:	4653      	mov	r3, sl
 80090ac:	bfa8      	it	ge
 80090ae:	463b      	movge	r3, r7
 80090b0:	42ab      	cmp	r3, r5
 80090b2:	bfa8      	it	ge
 80090b4:	462b      	movge	r3, r5
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	bfc2      	ittt	gt
 80090ba:	1aff      	subgt	r7, r7, r3
 80090bc:	1aed      	subgt	r5, r5, r3
 80090be:	ebaa 0a03 	subgt.w	sl, sl, r3
 80090c2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	dd17      	ble.n	80090f8 <_strtod_l+0x738>
 80090c8:	4659      	mov	r1, fp
 80090ca:	461a      	mov	r2, r3
 80090cc:	4620      	mov	r0, r4
 80090ce:	f7ff f9b5 	bl	800843c <__pow5mult>
 80090d2:	4683      	mov	fp, r0
 80090d4:	2800      	cmp	r0, #0
 80090d6:	f43f aeb1 	beq.w	8008e3c <_strtod_l+0x47c>
 80090da:	4601      	mov	r1, r0
 80090dc:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80090de:	4620      	mov	r0, r4
 80090e0:	f7ff f904 	bl	80082ec <__multiply>
 80090e4:	900a      	str	r0, [sp, #40]	; 0x28
 80090e6:	2800      	cmp	r0, #0
 80090e8:	f43f aea8 	beq.w	8008e3c <_strtod_l+0x47c>
 80090ec:	4620      	mov	r0, r4
 80090ee:	991a      	ldr	r1, [sp, #104]	; 0x68
 80090f0:	f7fe ffe6 	bl	80080c0 <_Bfree>
 80090f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80090f6:	931a      	str	r3, [sp, #104]	; 0x68
 80090f8:	2f00      	cmp	r7, #0
 80090fa:	f300 808f 	bgt.w	800921c <_strtod_l+0x85c>
 80090fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009100:	2b00      	cmp	r3, #0
 8009102:	dd08      	ble.n	8009116 <_strtod_l+0x756>
 8009104:	4620      	mov	r0, r4
 8009106:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8009108:	9908      	ldr	r1, [sp, #32]
 800910a:	f7ff f997 	bl	800843c <__pow5mult>
 800910e:	9008      	str	r0, [sp, #32]
 8009110:	2800      	cmp	r0, #0
 8009112:	f43f ae93 	beq.w	8008e3c <_strtod_l+0x47c>
 8009116:	2d00      	cmp	r5, #0
 8009118:	dd08      	ble.n	800912c <_strtod_l+0x76c>
 800911a:	462a      	mov	r2, r5
 800911c:	4620      	mov	r0, r4
 800911e:	9908      	ldr	r1, [sp, #32]
 8009120:	f7ff f9e6 	bl	80084f0 <__lshift>
 8009124:	9008      	str	r0, [sp, #32]
 8009126:	2800      	cmp	r0, #0
 8009128:	f43f ae88 	beq.w	8008e3c <_strtod_l+0x47c>
 800912c:	f1ba 0f00 	cmp.w	sl, #0
 8009130:	dd08      	ble.n	8009144 <_strtod_l+0x784>
 8009132:	4659      	mov	r1, fp
 8009134:	4652      	mov	r2, sl
 8009136:	4620      	mov	r0, r4
 8009138:	f7ff f9da 	bl	80084f0 <__lshift>
 800913c:	4683      	mov	fp, r0
 800913e:	2800      	cmp	r0, #0
 8009140:	f43f ae7c 	beq.w	8008e3c <_strtod_l+0x47c>
 8009144:	4620      	mov	r0, r4
 8009146:	9a08      	ldr	r2, [sp, #32]
 8009148:	991a      	ldr	r1, [sp, #104]	; 0x68
 800914a:	f7ff fa59 	bl	8008600 <__mdiff>
 800914e:	4606      	mov	r6, r0
 8009150:	2800      	cmp	r0, #0
 8009152:	f43f ae73 	beq.w	8008e3c <_strtod_l+0x47c>
 8009156:	2500      	movs	r5, #0
 8009158:	68c3      	ldr	r3, [r0, #12]
 800915a:	4659      	mov	r1, fp
 800915c:	60c5      	str	r5, [r0, #12]
 800915e:	930a      	str	r3, [sp, #40]	; 0x28
 8009160:	f7ff fa32 	bl	80085c8 <__mcmp>
 8009164:	42a8      	cmp	r0, r5
 8009166:	da6b      	bge.n	8009240 <_strtod_l+0x880>
 8009168:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800916a:	ea53 0308 	orrs.w	r3, r3, r8
 800916e:	f040 808f 	bne.w	8009290 <_strtod_l+0x8d0>
 8009172:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009176:	2b00      	cmp	r3, #0
 8009178:	f040 808a 	bne.w	8009290 <_strtod_l+0x8d0>
 800917c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009180:	0d1b      	lsrs	r3, r3, #20
 8009182:	051b      	lsls	r3, r3, #20
 8009184:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8009188:	f240 8082 	bls.w	8009290 <_strtod_l+0x8d0>
 800918c:	6973      	ldr	r3, [r6, #20]
 800918e:	b913      	cbnz	r3, 8009196 <_strtod_l+0x7d6>
 8009190:	6933      	ldr	r3, [r6, #16]
 8009192:	2b01      	cmp	r3, #1
 8009194:	dd7c      	ble.n	8009290 <_strtod_l+0x8d0>
 8009196:	4631      	mov	r1, r6
 8009198:	2201      	movs	r2, #1
 800919a:	4620      	mov	r0, r4
 800919c:	f7ff f9a8 	bl	80084f0 <__lshift>
 80091a0:	4659      	mov	r1, fp
 80091a2:	4606      	mov	r6, r0
 80091a4:	f7ff fa10 	bl	80085c8 <__mcmp>
 80091a8:	2800      	cmp	r0, #0
 80091aa:	dd71      	ble.n	8009290 <_strtod_l+0x8d0>
 80091ac:	9905      	ldr	r1, [sp, #20]
 80091ae:	464b      	mov	r3, r9
 80091b0:	4a21      	ldr	r2, [pc, #132]	; (8009238 <_strtod_l+0x878>)
 80091b2:	2900      	cmp	r1, #0
 80091b4:	f000 808d 	beq.w	80092d2 <_strtod_l+0x912>
 80091b8:	ea02 0109 	and.w	r1, r2, r9
 80091bc:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80091c0:	f300 8087 	bgt.w	80092d2 <_strtod_l+0x912>
 80091c4:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80091c8:	f77f aea9 	ble.w	8008f1e <_strtod_l+0x55e>
 80091cc:	4640      	mov	r0, r8
 80091ce:	4649      	mov	r1, r9
 80091d0:	4b1a      	ldr	r3, [pc, #104]	; (800923c <_strtod_l+0x87c>)
 80091d2:	2200      	movs	r2, #0
 80091d4:	f7f7 f980 	bl	80004d8 <__aeabi_dmul>
 80091d8:	4b17      	ldr	r3, [pc, #92]	; (8009238 <_strtod_l+0x878>)
 80091da:	4680      	mov	r8, r0
 80091dc:	400b      	ands	r3, r1
 80091de:	4689      	mov	r9, r1
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	f47f ae35 	bne.w	8008e50 <_strtod_l+0x490>
 80091e6:	2322      	movs	r3, #34	; 0x22
 80091e8:	6023      	str	r3, [r4, #0]
 80091ea:	e631      	b.n	8008e50 <_strtod_l+0x490>
 80091ec:	f04f 32ff 	mov.w	r2, #4294967295
 80091f0:	fa02 f303 	lsl.w	r3, r2, r3
 80091f4:	ea03 0808 	and.w	r8, r3, r8
 80091f8:	e6de      	b.n	8008fb8 <_strtod_l+0x5f8>
 80091fa:	f1c7 477f 	rsb	r7, r7, #4278190080	; 0xff000000
 80091fe:	f507 077f 	add.w	r7, r7, #16711680	; 0xff0000
 8009202:	f507 477b 	add.w	r7, r7, #64256	; 0xfb00
 8009206:	37e2      	adds	r7, #226	; 0xe2
 8009208:	fa01 f307 	lsl.w	r3, r1, r7
 800920c:	9310      	str	r3, [sp, #64]	; 0x40
 800920e:	9113      	str	r1, [sp, #76]	; 0x4c
 8009210:	e745      	b.n	800909e <_strtod_l+0x6de>
 8009212:	2300      	movs	r3, #0
 8009214:	9310      	str	r3, [sp, #64]	; 0x40
 8009216:	2301      	movs	r3, #1
 8009218:	9313      	str	r3, [sp, #76]	; 0x4c
 800921a:	e740      	b.n	800909e <_strtod_l+0x6de>
 800921c:	463a      	mov	r2, r7
 800921e:	4620      	mov	r0, r4
 8009220:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009222:	f7ff f965 	bl	80084f0 <__lshift>
 8009226:	901a      	str	r0, [sp, #104]	; 0x68
 8009228:	2800      	cmp	r0, #0
 800922a:	f47f af68 	bne.w	80090fe <_strtod_l+0x73e>
 800922e:	e605      	b.n	8008e3c <_strtod_l+0x47c>
 8009230:	0800aa00 	.word	0x0800aa00
 8009234:	fffffc02 	.word	0xfffffc02
 8009238:	7ff00000 	.word	0x7ff00000
 800923c:	39500000 	.word	0x39500000
 8009240:	46ca      	mov	sl, r9
 8009242:	d165      	bne.n	8009310 <_strtod_l+0x950>
 8009244:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009246:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800924a:	b352      	cbz	r2, 80092a2 <_strtod_l+0x8e2>
 800924c:	4a9e      	ldr	r2, [pc, #632]	; (80094c8 <_strtod_l+0xb08>)
 800924e:	4293      	cmp	r3, r2
 8009250:	d12a      	bne.n	80092a8 <_strtod_l+0x8e8>
 8009252:	9b05      	ldr	r3, [sp, #20]
 8009254:	4641      	mov	r1, r8
 8009256:	b1fb      	cbz	r3, 8009298 <_strtod_l+0x8d8>
 8009258:	4b9c      	ldr	r3, [pc, #624]	; (80094cc <_strtod_l+0xb0c>)
 800925a:	f04f 32ff 	mov.w	r2, #4294967295
 800925e:	ea09 0303 	and.w	r3, r9, r3
 8009262:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009266:	d81a      	bhi.n	800929e <_strtod_l+0x8de>
 8009268:	0d1b      	lsrs	r3, r3, #20
 800926a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800926e:	fa02 f303 	lsl.w	r3, r2, r3
 8009272:	4299      	cmp	r1, r3
 8009274:	d118      	bne.n	80092a8 <_strtod_l+0x8e8>
 8009276:	4b96      	ldr	r3, [pc, #600]	; (80094d0 <_strtod_l+0xb10>)
 8009278:	459a      	cmp	sl, r3
 800927a:	d102      	bne.n	8009282 <_strtod_l+0x8c2>
 800927c:	3101      	adds	r1, #1
 800927e:	f43f addd 	beq.w	8008e3c <_strtod_l+0x47c>
 8009282:	f04f 0800 	mov.w	r8, #0
 8009286:	4b91      	ldr	r3, [pc, #580]	; (80094cc <_strtod_l+0xb0c>)
 8009288:	ea0a 0303 	and.w	r3, sl, r3
 800928c:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8009290:	9b05      	ldr	r3, [sp, #20]
 8009292:	2b00      	cmp	r3, #0
 8009294:	d19a      	bne.n	80091cc <_strtod_l+0x80c>
 8009296:	e5db      	b.n	8008e50 <_strtod_l+0x490>
 8009298:	f04f 33ff 	mov.w	r3, #4294967295
 800929c:	e7e9      	b.n	8009272 <_strtod_l+0x8b2>
 800929e:	4613      	mov	r3, r2
 80092a0:	e7e7      	b.n	8009272 <_strtod_l+0x8b2>
 80092a2:	ea53 0308 	orrs.w	r3, r3, r8
 80092a6:	d081      	beq.n	80091ac <_strtod_l+0x7ec>
 80092a8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80092aa:	b1e3      	cbz	r3, 80092e6 <_strtod_l+0x926>
 80092ac:	ea13 0f0a 	tst.w	r3, sl
 80092b0:	d0ee      	beq.n	8009290 <_strtod_l+0x8d0>
 80092b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80092b4:	4640      	mov	r0, r8
 80092b6:	4649      	mov	r1, r9
 80092b8:	9a05      	ldr	r2, [sp, #20]
 80092ba:	b1c3      	cbz	r3, 80092ee <_strtod_l+0x92e>
 80092bc:	f7ff fb5c 	bl	8008978 <sulp>
 80092c0:	4602      	mov	r2, r0
 80092c2:	460b      	mov	r3, r1
 80092c4:	980c      	ldr	r0, [sp, #48]	; 0x30
 80092c6:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80092c8:	f7f6 ff50 	bl	800016c <__adddf3>
 80092cc:	4680      	mov	r8, r0
 80092ce:	4689      	mov	r9, r1
 80092d0:	e7de      	b.n	8009290 <_strtod_l+0x8d0>
 80092d2:	4013      	ands	r3, r2
 80092d4:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80092d8:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80092dc:	f04f 38ff 	mov.w	r8, #4294967295
 80092e0:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80092e4:	e7d4      	b.n	8009290 <_strtod_l+0x8d0>
 80092e6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80092e8:	ea13 0f08 	tst.w	r3, r8
 80092ec:	e7e0      	b.n	80092b0 <_strtod_l+0x8f0>
 80092ee:	f7ff fb43 	bl	8008978 <sulp>
 80092f2:	4602      	mov	r2, r0
 80092f4:	460b      	mov	r3, r1
 80092f6:	980c      	ldr	r0, [sp, #48]	; 0x30
 80092f8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80092fa:	f7f6 ff35 	bl	8000168 <__aeabi_dsub>
 80092fe:	2200      	movs	r2, #0
 8009300:	2300      	movs	r3, #0
 8009302:	4680      	mov	r8, r0
 8009304:	4689      	mov	r9, r1
 8009306:	f7f7 fb4f 	bl	80009a8 <__aeabi_dcmpeq>
 800930a:	2800      	cmp	r0, #0
 800930c:	d0c0      	beq.n	8009290 <_strtod_l+0x8d0>
 800930e:	e606      	b.n	8008f1e <_strtod_l+0x55e>
 8009310:	4659      	mov	r1, fp
 8009312:	4630      	mov	r0, r6
 8009314:	f7ff fabe 	bl	8008894 <__ratio>
 8009318:	4602      	mov	r2, r0
 800931a:	460b      	mov	r3, r1
 800931c:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8009320:	2200      	movs	r2, #0
 8009322:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009326:	f7f7 fb53 	bl	80009d0 <__aeabi_dcmple>
 800932a:	2800      	cmp	r0, #0
 800932c:	d06f      	beq.n	800940e <_strtod_l+0xa4e>
 800932e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009330:	2b00      	cmp	r3, #0
 8009332:	d17c      	bne.n	800942e <_strtod_l+0xa6e>
 8009334:	f1b8 0f00 	cmp.w	r8, #0
 8009338:	d159      	bne.n	80093ee <_strtod_l+0xa2e>
 800933a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800933e:	2b00      	cmp	r3, #0
 8009340:	d17b      	bne.n	800943a <_strtod_l+0xa7a>
 8009342:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009346:	2200      	movs	r2, #0
 8009348:	4b62      	ldr	r3, [pc, #392]	; (80094d4 <_strtod_l+0xb14>)
 800934a:	f7f7 fb37 	bl	80009bc <__aeabi_dcmplt>
 800934e:	2800      	cmp	r0, #0
 8009350:	d15a      	bne.n	8009408 <_strtod_l+0xa48>
 8009352:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009356:	2200      	movs	r2, #0
 8009358:	4b5f      	ldr	r3, [pc, #380]	; (80094d8 <_strtod_l+0xb18>)
 800935a:	f7f7 f8bd 	bl	80004d8 <__aeabi_dmul>
 800935e:	4605      	mov	r5, r0
 8009360:	460f      	mov	r7, r1
 8009362:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8009366:	9506      	str	r5, [sp, #24]
 8009368:	9307      	str	r3, [sp, #28]
 800936a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800936e:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8009372:	4b56      	ldr	r3, [pc, #344]	; (80094cc <_strtod_l+0xb0c>)
 8009374:	4a55      	ldr	r2, [pc, #340]	; (80094cc <_strtod_l+0xb0c>)
 8009376:	ea0a 0303 	and.w	r3, sl, r3
 800937a:	9313      	str	r3, [sp, #76]	; 0x4c
 800937c:	4b57      	ldr	r3, [pc, #348]	; (80094dc <_strtod_l+0xb1c>)
 800937e:	ea0a 0202 	and.w	r2, sl, r2
 8009382:	429a      	cmp	r2, r3
 8009384:	f040 80b0 	bne.w	80094e8 <_strtod_l+0xb28>
 8009388:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800938c:	4640      	mov	r0, r8
 800938e:	4649      	mov	r1, r9
 8009390:	f7ff f9c2 	bl	8008718 <__ulp>
 8009394:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009398:	f7f7 f89e 	bl	80004d8 <__aeabi_dmul>
 800939c:	4642      	mov	r2, r8
 800939e:	464b      	mov	r3, r9
 80093a0:	f7f6 fee4 	bl	800016c <__adddf3>
 80093a4:	f8df a124 	ldr.w	sl, [pc, #292]	; 80094cc <_strtod_l+0xb0c>
 80093a8:	4a4d      	ldr	r2, [pc, #308]	; (80094e0 <_strtod_l+0xb20>)
 80093aa:	ea01 0a0a 	and.w	sl, r1, sl
 80093ae:	4592      	cmp	sl, r2
 80093b0:	4680      	mov	r8, r0
 80093b2:	d948      	bls.n	8009446 <_strtod_l+0xa86>
 80093b4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80093b6:	4b46      	ldr	r3, [pc, #280]	; (80094d0 <_strtod_l+0xb10>)
 80093b8:	429a      	cmp	r2, r3
 80093ba:	d103      	bne.n	80093c4 <_strtod_l+0xa04>
 80093bc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80093be:	3301      	adds	r3, #1
 80093c0:	f43f ad3c 	beq.w	8008e3c <_strtod_l+0x47c>
 80093c4:	f04f 38ff 	mov.w	r8, #4294967295
 80093c8:	f8df 9104 	ldr.w	r9, [pc, #260]	; 80094d0 <_strtod_l+0xb10>
 80093cc:	4620      	mov	r0, r4
 80093ce:	991a      	ldr	r1, [sp, #104]	; 0x68
 80093d0:	f7fe fe76 	bl	80080c0 <_Bfree>
 80093d4:	4620      	mov	r0, r4
 80093d6:	9908      	ldr	r1, [sp, #32]
 80093d8:	f7fe fe72 	bl	80080c0 <_Bfree>
 80093dc:	4659      	mov	r1, fp
 80093de:	4620      	mov	r0, r4
 80093e0:	f7fe fe6e 	bl	80080c0 <_Bfree>
 80093e4:	4631      	mov	r1, r6
 80093e6:	4620      	mov	r0, r4
 80093e8:	f7fe fe6a 	bl	80080c0 <_Bfree>
 80093ec:	e605      	b.n	8008ffa <_strtod_l+0x63a>
 80093ee:	f1b8 0f01 	cmp.w	r8, #1
 80093f2:	d103      	bne.n	80093fc <_strtod_l+0xa3c>
 80093f4:	f1b9 0f00 	cmp.w	r9, #0
 80093f8:	f43f ad91 	beq.w	8008f1e <_strtod_l+0x55e>
 80093fc:	2200      	movs	r2, #0
 80093fe:	4b39      	ldr	r3, [pc, #228]	; (80094e4 <_strtod_l+0xb24>)
 8009400:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8009402:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009406:	e016      	b.n	8009436 <_strtod_l+0xa76>
 8009408:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800940a:	4f33      	ldr	r7, [pc, #204]	; (80094d8 <_strtod_l+0xb18>)
 800940c:	e7a9      	b.n	8009362 <_strtod_l+0x9a2>
 800940e:	4b32      	ldr	r3, [pc, #200]	; (80094d8 <_strtod_l+0xb18>)
 8009410:	2200      	movs	r2, #0
 8009412:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009416:	f7f7 f85f 	bl	80004d8 <__aeabi_dmul>
 800941a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800941c:	4605      	mov	r5, r0
 800941e:	460f      	mov	r7, r1
 8009420:	2b00      	cmp	r3, #0
 8009422:	d09e      	beq.n	8009362 <_strtod_l+0x9a2>
 8009424:	4602      	mov	r2, r0
 8009426:	460b      	mov	r3, r1
 8009428:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800942c:	e79d      	b.n	800936a <_strtod_l+0x9aa>
 800942e:	2200      	movs	r2, #0
 8009430:	4b28      	ldr	r3, [pc, #160]	; (80094d4 <_strtod_l+0xb14>)
 8009432:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009436:	4f27      	ldr	r7, [pc, #156]	; (80094d4 <_strtod_l+0xb14>)
 8009438:	e797      	b.n	800936a <_strtod_l+0x9aa>
 800943a:	2200      	movs	r2, #0
 800943c:	4b29      	ldr	r3, [pc, #164]	; (80094e4 <_strtod_l+0xb24>)
 800943e:	4645      	mov	r5, r8
 8009440:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009444:	e7f7      	b.n	8009436 <_strtod_l+0xa76>
 8009446:	f101 7954 	add.w	r9, r1, #55574528	; 0x3500000
 800944a:	9b05      	ldr	r3, [sp, #20]
 800944c:	46ca      	mov	sl, r9
 800944e:	2b00      	cmp	r3, #0
 8009450:	d1bc      	bne.n	80093cc <_strtod_l+0xa0c>
 8009452:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009456:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009458:	0d1b      	lsrs	r3, r3, #20
 800945a:	051b      	lsls	r3, r3, #20
 800945c:	429a      	cmp	r2, r3
 800945e:	d1b5      	bne.n	80093cc <_strtod_l+0xa0c>
 8009460:	4628      	mov	r0, r5
 8009462:	4639      	mov	r1, r7
 8009464:	f7f7 fe74 	bl	8001150 <__aeabi_d2lz>
 8009468:	f7f7 f808 	bl	800047c <__aeabi_l2d>
 800946c:	4602      	mov	r2, r0
 800946e:	460b      	mov	r3, r1
 8009470:	4628      	mov	r0, r5
 8009472:	4639      	mov	r1, r7
 8009474:	f7f6 fe78 	bl	8000168 <__aeabi_dsub>
 8009478:	460b      	mov	r3, r1
 800947a:	4602      	mov	r2, r0
 800947c:	f3c9 0a13 	ubfx	sl, r9, #0, #20
 8009480:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8009484:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009486:	ea4a 0a08 	orr.w	sl, sl, r8
 800948a:	ea5a 0a03 	orrs.w	sl, sl, r3
 800948e:	d06c      	beq.n	800956a <_strtod_l+0xbaa>
 8009490:	a309      	add	r3, pc, #36	; (adr r3, 80094b8 <_strtod_l+0xaf8>)
 8009492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009496:	f7f7 fa91 	bl	80009bc <__aeabi_dcmplt>
 800949a:	2800      	cmp	r0, #0
 800949c:	f47f acd8 	bne.w	8008e50 <_strtod_l+0x490>
 80094a0:	a307      	add	r3, pc, #28	; (adr r3, 80094c0 <_strtod_l+0xb00>)
 80094a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094a6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80094aa:	f7f7 faa5 	bl	80009f8 <__aeabi_dcmpgt>
 80094ae:	2800      	cmp	r0, #0
 80094b0:	d08c      	beq.n	80093cc <_strtod_l+0xa0c>
 80094b2:	e4cd      	b.n	8008e50 <_strtod_l+0x490>
 80094b4:	f3af 8000 	nop.w
 80094b8:	94a03595 	.word	0x94a03595
 80094bc:	3fdfffff 	.word	0x3fdfffff
 80094c0:	35afe535 	.word	0x35afe535
 80094c4:	3fe00000 	.word	0x3fe00000
 80094c8:	000fffff 	.word	0x000fffff
 80094cc:	7ff00000 	.word	0x7ff00000
 80094d0:	7fefffff 	.word	0x7fefffff
 80094d4:	3ff00000 	.word	0x3ff00000
 80094d8:	3fe00000 	.word	0x3fe00000
 80094dc:	7fe00000 	.word	0x7fe00000
 80094e0:	7c9fffff 	.word	0x7c9fffff
 80094e4:	bff00000 	.word	0xbff00000
 80094e8:	9b05      	ldr	r3, [sp, #20]
 80094ea:	b333      	cbz	r3, 800953a <_strtod_l+0xb7a>
 80094ec:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80094ee:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80094f2:	d822      	bhi.n	800953a <_strtod_l+0xb7a>
 80094f4:	a328      	add	r3, pc, #160	; (adr r3, 8009598 <_strtod_l+0xbd8>)
 80094f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094fa:	4628      	mov	r0, r5
 80094fc:	4639      	mov	r1, r7
 80094fe:	f7f7 fa67 	bl	80009d0 <__aeabi_dcmple>
 8009502:	b1a0      	cbz	r0, 800952e <_strtod_l+0xb6e>
 8009504:	4639      	mov	r1, r7
 8009506:	4628      	mov	r0, r5
 8009508:	f7f7 fabe 	bl	8000a88 <__aeabi_d2uiz>
 800950c:	2801      	cmp	r0, #1
 800950e:	bf38      	it	cc
 8009510:	2001      	movcc	r0, #1
 8009512:	f7f6 ff67 	bl	80003e4 <__aeabi_ui2d>
 8009516:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009518:	4605      	mov	r5, r0
 800951a:	460f      	mov	r7, r1
 800951c:	bb03      	cbnz	r3, 8009560 <_strtod_l+0xba0>
 800951e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009522:	9014      	str	r0, [sp, #80]	; 0x50
 8009524:	9315      	str	r3, [sp, #84]	; 0x54
 8009526:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800952a:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800952e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009530:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009532:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8009536:	1a9b      	subs	r3, r3, r2
 8009538:	9311      	str	r3, [sp, #68]	; 0x44
 800953a:	980c      	ldr	r0, [sp, #48]	; 0x30
 800953c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800953e:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
 8009542:	f7ff f8e9 	bl	8008718 <__ulp>
 8009546:	4602      	mov	r2, r0
 8009548:	460b      	mov	r3, r1
 800954a:	4640      	mov	r0, r8
 800954c:	4649      	mov	r1, r9
 800954e:	f7f6 ffc3 	bl	80004d8 <__aeabi_dmul>
 8009552:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009554:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009556:	f7f6 fe09 	bl	800016c <__adddf3>
 800955a:	4680      	mov	r8, r0
 800955c:	4689      	mov	r9, r1
 800955e:	e774      	b.n	800944a <_strtod_l+0xa8a>
 8009560:	4602      	mov	r2, r0
 8009562:	460b      	mov	r3, r1
 8009564:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8009568:	e7dd      	b.n	8009526 <_strtod_l+0xb66>
 800956a:	a30d      	add	r3, pc, #52	; (adr r3, 80095a0 <_strtod_l+0xbe0>)
 800956c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009570:	f7f7 fa24 	bl	80009bc <__aeabi_dcmplt>
 8009574:	e79b      	b.n	80094ae <_strtod_l+0xaee>
 8009576:	2300      	movs	r3, #0
 8009578:	930e      	str	r3, [sp, #56]	; 0x38
 800957a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800957c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800957e:	6013      	str	r3, [r2, #0]
 8009580:	f7ff ba5b 	b.w	8008a3a <_strtod_l+0x7a>
 8009584:	2a65      	cmp	r2, #101	; 0x65
 8009586:	f43f ab52 	beq.w	8008c2e <_strtod_l+0x26e>
 800958a:	2a45      	cmp	r2, #69	; 0x45
 800958c:	f43f ab4f 	beq.w	8008c2e <_strtod_l+0x26e>
 8009590:	2301      	movs	r3, #1
 8009592:	f7ff bb87 	b.w	8008ca4 <_strtod_l+0x2e4>
 8009596:	bf00      	nop
 8009598:	ffc00000 	.word	0xffc00000
 800959c:	41dfffff 	.word	0x41dfffff
 80095a0:	94a03595 	.word	0x94a03595
 80095a4:	3fcfffff 	.word	0x3fcfffff

080095a8 <_strtod_r>:
 80095a8:	4b01      	ldr	r3, [pc, #4]	; (80095b0 <_strtod_r+0x8>)
 80095aa:	f7ff ba09 	b.w	80089c0 <_strtod_l>
 80095ae:	bf00      	nop
 80095b0:	200000a0 	.word	0x200000a0

080095b4 <_strtol_l.constprop.0>:
 80095b4:	2b01      	cmp	r3, #1
 80095b6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80095ba:	4686      	mov	lr, r0
 80095bc:	4690      	mov	r8, r2
 80095be:	d001      	beq.n	80095c4 <_strtol_l.constprop.0+0x10>
 80095c0:	2b24      	cmp	r3, #36	; 0x24
 80095c2:	d906      	bls.n	80095d2 <_strtol_l.constprop.0+0x1e>
 80095c4:	f7fd fd74 	bl	80070b0 <__errno>
 80095c8:	2316      	movs	r3, #22
 80095ca:	6003      	str	r3, [r0, #0]
 80095cc:	2000      	movs	r0, #0
 80095ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095d2:	460d      	mov	r5, r1
 80095d4:	4835      	ldr	r0, [pc, #212]	; (80096ac <_strtol_l.constprop.0+0xf8>)
 80095d6:	462a      	mov	r2, r5
 80095d8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80095dc:	5d06      	ldrb	r6, [r0, r4]
 80095de:	f016 0608 	ands.w	r6, r6, #8
 80095e2:	d1f8      	bne.n	80095d6 <_strtol_l.constprop.0+0x22>
 80095e4:	2c2d      	cmp	r4, #45	; 0x2d
 80095e6:	d12e      	bne.n	8009646 <_strtol_l.constprop.0+0x92>
 80095e8:	2601      	movs	r6, #1
 80095ea:	782c      	ldrb	r4, [r5, #0]
 80095ec:	1c95      	adds	r5, r2, #2
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d057      	beq.n	80096a2 <_strtol_l.constprop.0+0xee>
 80095f2:	2b10      	cmp	r3, #16
 80095f4:	d109      	bne.n	800960a <_strtol_l.constprop.0+0x56>
 80095f6:	2c30      	cmp	r4, #48	; 0x30
 80095f8:	d107      	bne.n	800960a <_strtol_l.constprop.0+0x56>
 80095fa:	782a      	ldrb	r2, [r5, #0]
 80095fc:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8009600:	2a58      	cmp	r2, #88	; 0x58
 8009602:	d149      	bne.n	8009698 <_strtol_l.constprop.0+0xe4>
 8009604:	2310      	movs	r3, #16
 8009606:	786c      	ldrb	r4, [r5, #1]
 8009608:	3502      	adds	r5, #2
 800960a:	2200      	movs	r2, #0
 800960c:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 8009610:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009614:	fbbc f9f3 	udiv	r9, ip, r3
 8009618:	4610      	mov	r0, r2
 800961a:	fb03 ca19 	mls	sl, r3, r9, ip
 800961e:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8009622:	2f09      	cmp	r7, #9
 8009624:	d814      	bhi.n	8009650 <_strtol_l.constprop.0+0x9c>
 8009626:	463c      	mov	r4, r7
 8009628:	42a3      	cmp	r3, r4
 800962a:	dd20      	ble.n	800966e <_strtol_l.constprop.0+0xba>
 800962c:	1c57      	adds	r7, r2, #1
 800962e:	d007      	beq.n	8009640 <_strtol_l.constprop.0+0x8c>
 8009630:	4581      	cmp	r9, r0
 8009632:	d319      	bcc.n	8009668 <_strtol_l.constprop.0+0xb4>
 8009634:	d101      	bne.n	800963a <_strtol_l.constprop.0+0x86>
 8009636:	45a2      	cmp	sl, r4
 8009638:	db16      	blt.n	8009668 <_strtol_l.constprop.0+0xb4>
 800963a:	2201      	movs	r2, #1
 800963c:	fb00 4003 	mla	r0, r0, r3, r4
 8009640:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009644:	e7eb      	b.n	800961e <_strtol_l.constprop.0+0x6a>
 8009646:	2c2b      	cmp	r4, #43	; 0x2b
 8009648:	bf04      	itt	eq
 800964a:	782c      	ldrbeq	r4, [r5, #0]
 800964c:	1c95      	addeq	r5, r2, #2
 800964e:	e7ce      	b.n	80095ee <_strtol_l.constprop.0+0x3a>
 8009650:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8009654:	2f19      	cmp	r7, #25
 8009656:	d801      	bhi.n	800965c <_strtol_l.constprop.0+0xa8>
 8009658:	3c37      	subs	r4, #55	; 0x37
 800965a:	e7e5      	b.n	8009628 <_strtol_l.constprop.0+0x74>
 800965c:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8009660:	2f19      	cmp	r7, #25
 8009662:	d804      	bhi.n	800966e <_strtol_l.constprop.0+0xba>
 8009664:	3c57      	subs	r4, #87	; 0x57
 8009666:	e7df      	b.n	8009628 <_strtol_l.constprop.0+0x74>
 8009668:	f04f 32ff 	mov.w	r2, #4294967295
 800966c:	e7e8      	b.n	8009640 <_strtol_l.constprop.0+0x8c>
 800966e:	1c53      	adds	r3, r2, #1
 8009670:	d108      	bne.n	8009684 <_strtol_l.constprop.0+0xd0>
 8009672:	2322      	movs	r3, #34	; 0x22
 8009674:	4660      	mov	r0, ip
 8009676:	f8ce 3000 	str.w	r3, [lr]
 800967a:	f1b8 0f00 	cmp.w	r8, #0
 800967e:	d0a6      	beq.n	80095ce <_strtol_l.constprop.0+0x1a>
 8009680:	1e69      	subs	r1, r5, #1
 8009682:	e006      	b.n	8009692 <_strtol_l.constprop.0+0xde>
 8009684:	b106      	cbz	r6, 8009688 <_strtol_l.constprop.0+0xd4>
 8009686:	4240      	negs	r0, r0
 8009688:	f1b8 0f00 	cmp.w	r8, #0
 800968c:	d09f      	beq.n	80095ce <_strtol_l.constprop.0+0x1a>
 800968e:	2a00      	cmp	r2, #0
 8009690:	d1f6      	bne.n	8009680 <_strtol_l.constprop.0+0xcc>
 8009692:	f8c8 1000 	str.w	r1, [r8]
 8009696:	e79a      	b.n	80095ce <_strtol_l.constprop.0+0x1a>
 8009698:	2430      	movs	r4, #48	; 0x30
 800969a:	2b00      	cmp	r3, #0
 800969c:	d1b5      	bne.n	800960a <_strtol_l.constprop.0+0x56>
 800969e:	2308      	movs	r3, #8
 80096a0:	e7b3      	b.n	800960a <_strtol_l.constprop.0+0x56>
 80096a2:	2c30      	cmp	r4, #48	; 0x30
 80096a4:	d0a9      	beq.n	80095fa <_strtol_l.constprop.0+0x46>
 80096a6:	230a      	movs	r3, #10
 80096a8:	e7af      	b.n	800960a <_strtol_l.constprop.0+0x56>
 80096aa:	bf00      	nop
 80096ac:	0800aa29 	.word	0x0800aa29

080096b0 <_strtol_r>:
 80096b0:	f7ff bf80 	b.w	80095b4 <_strtol_l.constprop.0>

080096b4 <__ssputs_r>:
 80096b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80096b8:	461f      	mov	r7, r3
 80096ba:	688e      	ldr	r6, [r1, #8]
 80096bc:	4682      	mov	sl, r0
 80096be:	42be      	cmp	r6, r7
 80096c0:	460c      	mov	r4, r1
 80096c2:	4690      	mov	r8, r2
 80096c4:	680b      	ldr	r3, [r1, #0]
 80096c6:	d82c      	bhi.n	8009722 <__ssputs_r+0x6e>
 80096c8:	898a      	ldrh	r2, [r1, #12]
 80096ca:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80096ce:	d026      	beq.n	800971e <__ssputs_r+0x6a>
 80096d0:	6965      	ldr	r5, [r4, #20]
 80096d2:	6909      	ldr	r1, [r1, #16]
 80096d4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80096d8:	eba3 0901 	sub.w	r9, r3, r1
 80096dc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80096e0:	1c7b      	adds	r3, r7, #1
 80096e2:	444b      	add	r3, r9
 80096e4:	106d      	asrs	r5, r5, #1
 80096e6:	429d      	cmp	r5, r3
 80096e8:	bf38      	it	cc
 80096ea:	461d      	movcc	r5, r3
 80096ec:	0553      	lsls	r3, r2, #21
 80096ee:	d527      	bpl.n	8009740 <__ssputs_r+0x8c>
 80096f0:	4629      	mov	r1, r5
 80096f2:	f7fe fc19 	bl	8007f28 <_malloc_r>
 80096f6:	4606      	mov	r6, r0
 80096f8:	b360      	cbz	r0, 8009754 <__ssputs_r+0xa0>
 80096fa:	464a      	mov	r2, r9
 80096fc:	6921      	ldr	r1, [r4, #16]
 80096fe:	f000 fbef 	bl	8009ee0 <memcpy>
 8009702:	89a3      	ldrh	r3, [r4, #12]
 8009704:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009708:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800970c:	81a3      	strh	r3, [r4, #12]
 800970e:	6126      	str	r6, [r4, #16]
 8009710:	444e      	add	r6, r9
 8009712:	6026      	str	r6, [r4, #0]
 8009714:	463e      	mov	r6, r7
 8009716:	6165      	str	r5, [r4, #20]
 8009718:	eba5 0509 	sub.w	r5, r5, r9
 800971c:	60a5      	str	r5, [r4, #8]
 800971e:	42be      	cmp	r6, r7
 8009720:	d900      	bls.n	8009724 <__ssputs_r+0x70>
 8009722:	463e      	mov	r6, r7
 8009724:	4632      	mov	r2, r6
 8009726:	4641      	mov	r1, r8
 8009728:	6820      	ldr	r0, [r4, #0]
 800972a:	f000 fb7a 	bl	8009e22 <memmove>
 800972e:	2000      	movs	r0, #0
 8009730:	68a3      	ldr	r3, [r4, #8]
 8009732:	1b9b      	subs	r3, r3, r6
 8009734:	60a3      	str	r3, [r4, #8]
 8009736:	6823      	ldr	r3, [r4, #0]
 8009738:	4433      	add	r3, r6
 800973a:	6023      	str	r3, [r4, #0]
 800973c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009740:	462a      	mov	r2, r5
 8009742:	f000 ff68 	bl	800a616 <_realloc_r>
 8009746:	4606      	mov	r6, r0
 8009748:	2800      	cmp	r0, #0
 800974a:	d1e0      	bne.n	800970e <__ssputs_r+0x5a>
 800974c:	4650      	mov	r0, sl
 800974e:	6921      	ldr	r1, [r4, #16]
 8009750:	f7fe fb7a 	bl	8007e48 <_free_r>
 8009754:	230c      	movs	r3, #12
 8009756:	f8ca 3000 	str.w	r3, [sl]
 800975a:	89a3      	ldrh	r3, [r4, #12]
 800975c:	f04f 30ff 	mov.w	r0, #4294967295
 8009760:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009764:	81a3      	strh	r3, [r4, #12]
 8009766:	e7e9      	b.n	800973c <__ssputs_r+0x88>

08009768 <_svfiprintf_r>:
 8009768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800976c:	4698      	mov	r8, r3
 800976e:	898b      	ldrh	r3, [r1, #12]
 8009770:	4607      	mov	r7, r0
 8009772:	061b      	lsls	r3, r3, #24
 8009774:	460d      	mov	r5, r1
 8009776:	4614      	mov	r4, r2
 8009778:	b09d      	sub	sp, #116	; 0x74
 800977a:	d50e      	bpl.n	800979a <_svfiprintf_r+0x32>
 800977c:	690b      	ldr	r3, [r1, #16]
 800977e:	b963      	cbnz	r3, 800979a <_svfiprintf_r+0x32>
 8009780:	2140      	movs	r1, #64	; 0x40
 8009782:	f7fe fbd1 	bl	8007f28 <_malloc_r>
 8009786:	6028      	str	r0, [r5, #0]
 8009788:	6128      	str	r0, [r5, #16]
 800978a:	b920      	cbnz	r0, 8009796 <_svfiprintf_r+0x2e>
 800978c:	230c      	movs	r3, #12
 800978e:	603b      	str	r3, [r7, #0]
 8009790:	f04f 30ff 	mov.w	r0, #4294967295
 8009794:	e0d0      	b.n	8009938 <_svfiprintf_r+0x1d0>
 8009796:	2340      	movs	r3, #64	; 0x40
 8009798:	616b      	str	r3, [r5, #20]
 800979a:	2300      	movs	r3, #0
 800979c:	9309      	str	r3, [sp, #36]	; 0x24
 800979e:	2320      	movs	r3, #32
 80097a0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80097a4:	2330      	movs	r3, #48	; 0x30
 80097a6:	f04f 0901 	mov.w	r9, #1
 80097aa:	f8cd 800c 	str.w	r8, [sp, #12]
 80097ae:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8009950 <_svfiprintf_r+0x1e8>
 80097b2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80097b6:	4623      	mov	r3, r4
 80097b8:	469a      	mov	sl, r3
 80097ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80097be:	b10a      	cbz	r2, 80097c4 <_svfiprintf_r+0x5c>
 80097c0:	2a25      	cmp	r2, #37	; 0x25
 80097c2:	d1f9      	bne.n	80097b8 <_svfiprintf_r+0x50>
 80097c4:	ebba 0b04 	subs.w	fp, sl, r4
 80097c8:	d00b      	beq.n	80097e2 <_svfiprintf_r+0x7a>
 80097ca:	465b      	mov	r3, fp
 80097cc:	4622      	mov	r2, r4
 80097ce:	4629      	mov	r1, r5
 80097d0:	4638      	mov	r0, r7
 80097d2:	f7ff ff6f 	bl	80096b4 <__ssputs_r>
 80097d6:	3001      	adds	r0, #1
 80097d8:	f000 80a9 	beq.w	800992e <_svfiprintf_r+0x1c6>
 80097dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80097de:	445a      	add	r2, fp
 80097e0:	9209      	str	r2, [sp, #36]	; 0x24
 80097e2:	f89a 3000 	ldrb.w	r3, [sl]
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	f000 80a1 	beq.w	800992e <_svfiprintf_r+0x1c6>
 80097ec:	2300      	movs	r3, #0
 80097ee:	f04f 32ff 	mov.w	r2, #4294967295
 80097f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80097f6:	f10a 0a01 	add.w	sl, sl, #1
 80097fa:	9304      	str	r3, [sp, #16]
 80097fc:	9307      	str	r3, [sp, #28]
 80097fe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009802:	931a      	str	r3, [sp, #104]	; 0x68
 8009804:	4654      	mov	r4, sl
 8009806:	2205      	movs	r2, #5
 8009808:	f814 1b01 	ldrb.w	r1, [r4], #1
 800980c:	4850      	ldr	r0, [pc, #320]	; (8009950 <_svfiprintf_r+0x1e8>)
 800980e:	f7fd fc7c 	bl	800710a <memchr>
 8009812:	9a04      	ldr	r2, [sp, #16]
 8009814:	b9d8      	cbnz	r0, 800984e <_svfiprintf_r+0xe6>
 8009816:	06d0      	lsls	r0, r2, #27
 8009818:	bf44      	itt	mi
 800981a:	2320      	movmi	r3, #32
 800981c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009820:	0711      	lsls	r1, r2, #28
 8009822:	bf44      	itt	mi
 8009824:	232b      	movmi	r3, #43	; 0x2b
 8009826:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800982a:	f89a 3000 	ldrb.w	r3, [sl]
 800982e:	2b2a      	cmp	r3, #42	; 0x2a
 8009830:	d015      	beq.n	800985e <_svfiprintf_r+0xf6>
 8009832:	4654      	mov	r4, sl
 8009834:	2000      	movs	r0, #0
 8009836:	f04f 0c0a 	mov.w	ip, #10
 800983a:	9a07      	ldr	r2, [sp, #28]
 800983c:	4621      	mov	r1, r4
 800983e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009842:	3b30      	subs	r3, #48	; 0x30
 8009844:	2b09      	cmp	r3, #9
 8009846:	d94d      	bls.n	80098e4 <_svfiprintf_r+0x17c>
 8009848:	b1b0      	cbz	r0, 8009878 <_svfiprintf_r+0x110>
 800984a:	9207      	str	r2, [sp, #28]
 800984c:	e014      	b.n	8009878 <_svfiprintf_r+0x110>
 800984e:	eba0 0308 	sub.w	r3, r0, r8
 8009852:	fa09 f303 	lsl.w	r3, r9, r3
 8009856:	4313      	orrs	r3, r2
 8009858:	46a2      	mov	sl, r4
 800985a:	9304      	str	r3, [sp, #16]
 800985c:	e7d2      	b.n	8009804 <_svfiprintf_r+0x9c>
 800985e:	9b03      	ldr	r3, [sp, #12]
 8009860:	1d19      	adds	r1, r3, #4
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	9103      	str	r1, [sp, #12]
 8009866:	2b00      	cmp	r3, #0
 8009868:	bfbb      	ittet	lt
 800986a:	425b      	neglt	r3, r3
 800986c:	f042 0202 	orrlt.w	r2, r2, #2
 8009870:	9307      	strge	r3, [sp, #28]
 8009872:	9307      	strlt	r3, [sp, #28]
 8009874:	bfb8      	it	lt
 8009876:	9204      	strlt	r2, [sp, #16]
 8009878:	7823      	ldrb	r3, [r4, #0]
 800987a:	2b2e      	cmp	r3, #46	; 0x2e
 800987c:	d10c      	bne.n	8009898 <_svfiprintf_r+0x130>
 800987e:	7863      	ldrb	r3, [r4, #1]
 8009880:	2b2a      	cmp	r3, #42	; 0x2a
 8009882:	d134      	bne.n	80098ee <_svfiprintf_r+0x186>
 8009884:	9b03      	ldr	r3, [sp, #12]
 8009886:	3402      	adds	r4, #2
 8009888:	1d1a      	adds	r2, r3, #4
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	9203      	str	r2, [sp, #12]
 800988e:	2b00      	cmp	r3, #0
 8009890:	bfb8      	it	lt
 8009892:	f04f 33ff 	movlt.w	r3, #4294967295
 8009896:	9305      	str	r3, [sp, #20]
 8009898:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8009954 <_svfiprintf_r+0x1ec>
 800989c:	2203      	movs	r2, #3
 800989e:	4650      	mov	r0, sl
 80098a0:	7821      	ldrb	r1, [r4, #0]
 80098a2:	f7fd fc32 	bl	800710a <memchr>
 80098a6:	b138      	cbz	r0, 80098b8 <_svfiprintf_r+0x150>
 80098a8:	2240      	movs	r2, #64	; 0x40
 80098aa:	9b04      	ldr	r3, [sp, #16]
 80098ac:	eba0 000a 	sub.w	r0, r0, sl
 80098b0:	4082      	lsls	r2, r0
 80098b2:	4313      	orrs	r3, r2
 80098b4:	3401      	adds	r4, #1
 80098b6:	9304      	str	r3, [sp, #16]
 80098b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80098bc:	2206      	movs	r2, #6
 80098be:	4826      	ldr	r0, [pc, #152]	; (8009958 <_svfiprintf_r+0x1f0>)
 80098c0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80098c4:	f7fd fc21 	bl	800710a <memchr>
 80098c8:	2800      	cmp	r0, #0
 80098ca:	d038      	beq.n	800993e <_svfiprintf_r+0x1d6>
 80098cc:	4b23      	ldr	r3, [pc, #140]	; (800995c <_svfiprintf_r+0x1f4>)
 80098ce:	bb1b      	cbnz	r3, 8009918 <_svfiprintf_r+0x1b0>
 80098d0:	9b03      	ldr	r3, [sp, #12]
 80098d2:	3307      	adds	r3, #7
 80098d4:	f023 0307 	bic.w	r3, r3, #7
 80098d8:	3308      	adds	r3, #8
 80098da:	9303      	str	r3, [sp, #12]
 80098dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80098de:	4433      	add	r3, r6
 80098e0:	9309      	str	r3, [sp, #36]	; 0x24
 80098e2:	e768      	b.n	80097b6 <_svfiprintf_r+0x4e>
 80098e4:	460c      	mov	r4, r1
 80098e6:	2001      	movs	r0, #1
 80098e8:	fb0c 3202 	mla	r2, ip, r2, r3
 80098ec:	e7a6      	b.n	800983c <_svfiprintf_r+0xd4>
 80098ee:	2300      	movs	r3, #0
 80098f0:	f04f 0c0a 	mov.w	ip, #10
 80098f4:	4619      	mov	r1, r3
 80098f6:	3401      	adds	r4, #1
 80098f8:	9305      	str	r3, [sp, #20]
 80098fa:	4620      	mov	r0, r4
 80098fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009900:	3a30      	subs	r2, #48	; 0x30
 8009902:	2a09      	cmp	r2, #9
 8009904:	d903      	bls.n	800990e <_svfiprintf_r+0x1a6>
 8009906:	2b00      	cmp	r3, #0
 8009908:	d0c6      	beq.n	8009898 <_svfiprintf_r+0x130>
 800990a:	9105      	str	r1, [sp, #20]
 800990c:	e7c4      	b.n	8009898 <_svfiprintf_r+0x130>
 800990e:	4604      	mov	r4, r0
 8009910:	2301      	movs	r3, #1
 8009912:	fb0c 2101 	mla	r1, ip, r1, r2
 8009916:	e7f0      	b.n	80098fa <_svfiprintf_r+0x192>
 8009918:	ab03      	add	r3, sp, #12
 800991a:	9300      	str	r3, [sp, #0]
 800991c:	462a      	mov	r2, r5
 800991e:	4638      	mov	r0, r7
 8009920:	4b0f      	ldr	r3, [pc, #60]	; (8009960 <_svfiprintf_r+0x1f8>)
 8009922:	a904      	add	r1, sp, #16
 8009924:	f7fc fb8c 	bl	8006040 <_printf_float>
 8009928:	1c42      	adds	r2, r0, #1
 800992a:	4606      	mov	r6, r0
 800992c:	d1d6      	bne.n	80098dc <_svfiprintf_r+0x174>
 800992e:	89ab      	ldrh	r3, [r5, #12]
 8009930:	065b      	lsls	r3, r3, #25
 8009932:	f53f af2d 	bmi.w	8009790 <_svfiprintf_r+0x28>
 8009936:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009938:	b01d      	add	sp, #116	; 0x74
 800993a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800993e:	ab03      	add	r3, sp, #12
 8009940:	9300      	str	r3, [sp, #0]
 8009942:	462a      	mov	r2, r5
 8009944:	4638      	mov	r0, r7
 8009946:	4b06      	ldr	r3, [pc, #24]	; (8009960 <_svfiprintf_r+0x1f8>)
 8009948:	a904      	add	r1, sp, #16
 800994a:	f7fc fe19 	bl	8006580 <_printf_i>
 800994e:	e7eb      	b.n	8009928 <_svfiprintf_r+0x1c0>
 8009950:	0800ab29 	.word	0x0800ab29
 8009954:	0800ab2f 	.word	0x0800ab2f
 8009958:	0800ab33 	.word	0x0800ab33
 800995c:	08006041 	.word	0x08006041
 8009960:	080096b5 	.word	0x080096b5

08009964 <__sfputc_r>:
 8009964:	6893      	ldr	r3, [r2, #8]
 8009966:	b410      	push	{r4}
 8009968:	3b01      	subs	r3, #1
 800996a:	2b00      	cmp	r3, #0
 800996c:	6093      	str	r3, [r2, #8]
 800996e:	da07      	bge.n	8009980 <__sfputc_r+0x1c>
 8009970:	6994      	ldr	r4, [r2, #24]
 8009972:	42a3      	cmp	r3, r4
 8009974:	db01      	blt.n	800997a <__sfputc_r+0x16>
 8009976:	290a      	cmp	r1, #10
 8009978:	d102      	bne.n	8009980 <__sfputc_r+0x1c>
 800997a:	bc10      	pop	{r4}
 800997c:	f7fd bab1 	b.w	8006ee2 <__swbuf_r>
 8009980:	6813      	ldr	r3, [r2, #0]
 8009982:	1c58      	adds	r0, r3, #1
 8009984:	6010      	str	r0, [r2, #0]
 8009986:	7019      	strb	r1, [r3, #0]
 8009988:	4608      	mov	r0, r1
 800998a:	bc10      	pop	{r4}
 800998c:	4770      	bx	lr

0800998e <__sfputs_r>:
 800998e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009990:	4606      	mov	r6, r0
 8009992:	460f      	mov	r7, r1
 8009994:	4614      	mov	r4, r2
 8009996:	18d5      	adds	r5, r2, r3
 8009998:	42ac      	cmp	r4, r5
 800999a:	d101      	bne.n	80099a0 <__sfputs_r+0x12>
 800999c:	2000      	movs	r0, #0
 800999e:	e007      	b.n	80099b0 <__sfputs_r+0x22>
 80099a0:	463a      	mov	r2, r7
 80099a2:	4630      	mov	r0, r6
 80099a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80099a8:	f7ff ffdc 	bl	8009964 <__sfputc_r>
 80099ac:	1c43      	adds	r3, r0, #1
 80099ae:	d1f3      	bne.n	8009998 <__sfputs_r+0xa>
 80099b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080099b4 <_vfiprintf_r>:
 80099b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099b8:	460d      	mov	r5, r1
 80099ba:	4614      	mov	r4, r2
 80099bc:	4698      	mov	r8, r3
 80099be:	4606      	mov	r6, r0
 80099c0:	b09d      	sub	sp, #116	; 0x74
 80099c2:	b118      	cbz	r0, 80099cc <_vfiprintf_r+0x18>
 80099c4:	6a03      	ldr	r3, [r0, #32]
 80099c6:	b90b      	cbnz	r3, 80099cc <_vfiprintf_r+0x18>
 80099c8:	f7fd f996 	bl	8006cf8 <__sinit>
 80099cc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80099ce:	07d9      	lsls	r1, r3, #31
 80099d0:	d405      	bmi.n	80099de <_vfiprintf_r+0x2a>
 80099d2:	89ab      	ldrh	r3, [r5, #12]
 80099d4:	059a      	lsls	r2, r3, #22
 80099d6:	d402      	bmi.n	80099de <_vfiprintf_r+0x2a>
 80099d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80099da:	f7fd fb94 	bl	8007106 <__retarget_lock_acquire_recursive>
 80099de:	89ab      	ldrh	r3, [r5, #12]
 80099e0:	071b      	lsls	r3, r3, #28
 80099e2:	d501      	bpl.n	80099e8 <_vfiprintf_r+0x34>
 80099e4:	692b      	ldr	r3, [r5, #16]
 80099e6:	b99b      	cbnz	r3, 8009a10 <_vfiprintf_r+0x5c>
 80099e8:	4629      	mov	r1, r5
 80099ea:	4630      	mov	r0, r6
 80099ec:	f7fd fab6 	bl	8006f5c <__swsetup_r>
 80099f0:	b170      	cbz	r0, 8009a10 <_vfiprintf_r+0x5c>
 80099f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80099f4:	07dc      	lsls	r4, r3, #31
 80099f6:	d504      	bpl.n	8009a02 <_vfiprintf_r+0x4e>
 80099f8:	f04f 30ff 	mov.w	r0, #4294967295
 80099fc:	b01d      	add	sp, #116	; 0x74
 80099fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a02:	89ab      	ldrh	r3, [r5, #12]
 8009a04:	0598      	lsls	r0, r3, #22
 8009a06:	d4f7      	bmi.n	80099f8 <_vfiprintf_r+0x44>
 8009a08:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009a0a:	f7fd fb7d 	bl	8007108 <__retarget_lock_release_recursive>
 8009a0e:	e7f3      	b.n	80099f8 <_vfiprintf_r+0x44>
 8009a10:	2300      	movs	r3, #0
 8009a12:	9309      	str	r3, [sp, #36]	; 0x24
 8009a14:	2320      	movs	r3, #32
 8009a16:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009a1a:	2330      	movs	r3, #48	; 0x30
 8009a1c:	f04f 0901 	mov.w	r9, #1
 8009a20:	f8cd 800c 	str.w	r8, [sp, #12]
 8009a24:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8009bd4 <_vfiprintf_r+0x220>
 8009a28:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009a2c:	4623      	mov	r3, r4
 8009a2e:	469a      	mov	sl, r3
 8009a30:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009a34:	b10a      	cbz	r2, 8009a3a <_vfiprintf_r+0x86>
 8009a36:	2a25      	cmp	r2, #37	; 0x25
 8009a38:	d1f9      	bne.n	8009a2e <_vfiprintf_r+0x7a>
 8009a3a:	ebba 0b04 	subs.w	fp, sl, r4
 8009a3e:	d00b      	beq.n	8009a58 <_vfiprintf_r+0xa4>
 8009a40:	465b      	mov	r3, fp
 8009a42:	4622      	mov	r2, r4
 8009a44:	4629      	mov	r1, r5
 8009a46:	4630      	mov	r0, r6
 8009a48:	f7ff ffa1 	bl	800998e <__sfputs_r>
 8009a4c:	3001      	adds	r0, #1
 8009a4e:	f000 80a9 	beq.w	8009ba4 <_vfiprintf_r+0x1f0>
 8009a52:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009a54:	445a      	add	r2, fp
 8009a56:	9209      	str	r2, [sp, #36]	; 0x24
 8009a58:	f89a 3000 	ldrb.w	r3, [sl]
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	f000 80a1 	beq.w	8009ba4 <_vfiprintf_r+0x1f0>
 8009a62:	2300      	movs	r3, #0
 8009a64:	f04f 32ff 	mov.w	r2, #4294967295
 8009a68:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009a6c:	f10a 0a01 	add.w	sl, sl, #1
 8009a70:	9304      	str	r3, [sp, #16]
 8009a72:	9307      	str	r3, [sp, #28]
 8009a74:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009a78:	931a      	str	r3, [sp, #104]	; 0x68
 8009a7a:	4654      	mov	r4, sl
 8009a7c:	2205      	movs	r2, #5
 8009a7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a82:	4854      	ldr	r0, [pc, #336]	; (8009bd4 <_vfiprintf_r+0x220>)
 8009a84:	f7fd fb41 	bl	800710a <memchr>
 8009a88:	9a04      	ldr	r2, [sp, #16]
 8009a8a:	b9d8      	cbnz	r0, 8009ac4 <_vfiprintf_r+0x110>
 8009a8c:	06d1      	lsls	r1, r2, #27
 8009a8e:	bf44      	itt	mi
 8009a90:	2320      	movmi	r3, #32
 8009a92:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009a96:	0713      	lsls	r3, r2, #28
 8009a98:	bf44      	itt	mi
 8009a9a:	232b      	movmi	r3, #43	; 0x2b
 8009a9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009aa0:	f89a 3000 	ldrb.w	r3, [sl]
 8009aa4:	2b2a      	cmp	r3, #42	; 0x2a
 8009aa6:	d015      	beq.n	8009ad4 <_vfiprintf_r+0x120>
 8009aa8:	4654      	mov	r4, sl
 8009aaa:	2000      	movs	r0, #0
 8009aac:	f04f 0c0a 	mov.w	ip, #10
 8009ab0:	9a07      	ldr	r2, [sp, #28]
 8009ab2:	4621      	mov	r1, r4
 8009ab4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009ab8:	3b30      	subs	r3, #48	; 0x30
 8009aba:	2b09      	cmp	r3, #9
 8009abc:	d94d      	bls.n	8009b5a <_vfiprintf_r+0x1a6>
 8009abe:	b1b0      	cbz	r0, 8009aee <_vfiprintf_r+0x13a>
 8009ac0:	9207      	str	r2, [sp, #28]
 8009ac2:	e014      	b.n	8009aee <_vfiprintf_r+0x13a>
 8009ac4:	eba0 0308 	sub.w	r3, r0, r8
 8009ac8:	fa09 f303 	lsl.w	r3, r9, r3
 8009acc:	4313      	orrs	r3, r2
 8009ace:	46a2      	mov	sl, r4
 8009ad0:	9304      	str	r3, [sp, #16]
 8009ad2:	e7d2      	b.n	8009a7a <_vfiprintf_r+0xc6>
 8009ad4:	9b03      	ldr	r3, [sp, #12]
 8009ad6:	1d19      	adds	r1, r3, #4
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	9103      	str	r1, [sp, #12]
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	bfbb      	ittet	lt
 8009ae0:	425b      	neglt	r3, r3
 8009ae2:	f042 0202 	orrlt.w	r2, r2, #2
 8009ae6:	9307      	strge	r3, [sp, #28]
 8009ae8:	9307      	strlt	r3, [sp, #28]
 8009aea:	bfb8      	it	lt
 8009aec:	9204      	strlt	r2, [sp, #16]
 8009aee:	7823      	ldrb	r3, [r4, #0]
 8009af0:	2b2e      	cmp	r3, #46	; 0x2e
 8009af2:	d10c      	bne.n	8009b0e <_vfiprintf_r+0x15a>
 8009af4:	7863      	ldrb	r3, [r4, #1]
 8009af6:	2b2a      	cmp	r3, #42	; 0x2a
 8009af8:	d134      	bne.n	8009b64 <_vfiprintf_r+0x1b0>
 8009afa:	9b03      	ldr	r3, [sp, #12]
 8009afc:	3402      	adds	r4, #2
 8009afe:	1d1a      	adds	r2, r3, #4
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	9203      	str	r2, [sp, #12]
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	bfb8      	it	lt
 8009b08:	f04f 33ff 	movlt.w	r3, #4294967295
 8009b0c:	9305      	str	r3, [sp, #20]
 8009b0e:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009bd8 <_vfiprintf_r+0x224>
 8009b12:	2203      	movs	r2, #3
 8009b14:	4650      	mov	r0, sl
 8009b16:	7821      	ldrb	r1, [r4, #0]
 8009b18:	f7fd faf7 	bl	800710a <memchr>
 8009b1c:	b138      	cbz	r0, 8009b2e <_vfiprintf_r+0x17a>
 8009b1e:	2240      	movs	r2, #64	; 0x40
 8009b20:	9b04      	ldr	r3, [sp, #16]
 8009b22:	eba0 000a 	sub.w	r0, r0, sl
 8009b26:	4082      	lsls	r2, r0
 8009b28:	4313      	orrs	r3, r2
 8009b2a:	3401      	adds	r4, #1
 8009b2c:	9304      	str	r3, [sp, #16]
 8009b2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b32:	2206      	movs	r2, #6
 8009b34:	4829      	ldr	r0, [pc, #164]	; (8009bdc <_vfiprintf_r+0x228>)
 8009b36:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009b3a:	f7fd fae6 	bl	800710a <memchr>
 8009b3e:	2800      	cmp	r0, #0
 8009b40:	d03f      	beq.n	8009bc2 <_vfiprintf_r+0x20e>
 8009b42:	4b27      	ldr	r3, [pc, #156]	; (8009be0 <_vfiprintf_r+0x22c>)
 8009b44:	bb1b      	cbnz	r3, 8009b8e <_vfiprintf_r+0x1da>
 8009b46:	9b03      	ldr	r3, [sp, #12]
 8009b48:	3307      	adds	r3, #7
 8009b4a:	f023 0307 	bic.w	r3, r3, #7
 8009b4e:	3308      	adds	r3, #8
 8009b50:	9303      	str	r3, [sp, #12]
 8009b52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b54:	443b      	add	r3, r7
 8009b56:	9309      	str	r3, [sp, #36]	; 0x24
 8009b58:	e768      	b.n	8009a2c <_vfiprintf_r+0x78>
 8009b5a:	460c      	mov	r4, r1
 8009b5c:	2001      	movs	r0, #1
 8009b5e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009b62:	e7a6      	b.n	8009ab2 <_vfiprintf_r+0xfe>
 8009b64:	2300      	movs	r3, #0
 8009b66:	f04f 0c0a 	mov.w	ip, #10
 8009b6a:	4619      	mov	r1, r3
 8009b6c:	3401      	adds	r4, #1
 8009b6e:	9305      	str	r3, [sp, #20]
 8009b70:	4620      	mov	r0, r4
 8009b72:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009b76:	3a30      	subs	r2, #48	; 0x30
 8009b78:	2a09      	cmp	r2, #9
 8009b7a:	d903      	bls.n	8009b84 <_vfiprintf_r+0x1d0>
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d0c6      	beq.n	8009b0e <_vfiprintf_r+0x15a>
 8009b80:	9105      	str	r1, [sp, #20]
 8009b82:	e7c4      	b.n	8009b0e <_vfiprintf_r+0x15a>
 8009b84:	4604      	mov	r4, r0
 8009b86:	2301      	movs	r3, #1
 8009b88:	fb0c 2101 	mla	r1, ip, r1, r2
 8009b8c:	e7f0      	b.n	8009b70 <_vfiprintf_r+0x1bc>
 8009b8e:	ab03      	add	r3, sp, #12
 8009b90:	9300      	str	r3, [sp, #0]
 8009b92:	462a      	mov	r2, r5
 8009b94:	4630      	mov	r0, r6
 8009b96:	4b13      	ldr	r3, [pc, #76]	; (8009be4 <_vfiprintf_r+0x230>)
 8009b98:	a904      	add	r1, sp, #16
 8009b9a:	f7fc fa51 	bl	8006040 <_printf_float>
 8009b9e:	4607      	mov	r7, r0
 8009ba0:	1c78      	adds	r0, r7, #1
 8009ba2:	d1d6      	bne.n	8009b52 <_vfiprintf_r+0x19e>
 8009ba4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009ba6:	07d9      	lsls	r1, r3, #31
 8009ba8:	d405      	bmi.n	8009bb6 <_vfiprintf_r+0x202>
 8009baa:	89ab      	ldrh	r3, [r5, #12]
 8009bac:	059a      	lsls	r2, r3, #22
 8009bae:	d402      	bmi.n	8009bb6 <_vfiprintf_r+0x202>
 8009bb0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009bb2:	f7fd faa9 	bl	8007108 <__retarget_lock_release_recursive>
 8009bb6:	89ab      	ldrh	r3, [r5, #12]
 8009bb8:	065b      	lsls	r3, r3, #25
 8009bba:	f53f af1d 	bmi.w	80099f8 <_vfiprintf_r+0x44>
 8009bbe:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009bc0:	e71c      	b.n	80099fc <_vfiprintf_r+0x48>
 8009bc2:	ab03      	add	r3, sp, #12
 8009bc4:	9300      	str	r3, [sp, #0]
 8009bc6:	462a      	mov	r2, r5
 8009bc8:	4630      	mov	r0, r6
 8009bca:	4b06      	ldr	r3, [pc, #24]	; (8009be4 <_vfiprintf_r+0x230>)
 8009bcc:	a904      	add	r1, sp, #16
 8009bce:	f7fc fcd7 	bl	8006580 <_printf_i>
 8009bd2:	e7e4      	b.n	8009b9e <_vfiprintf_r+0x1ea>
 8009bd4:	0800ab29 	.word	0x0800ab29
 8009bd8:	0800ab2f 	.word	0x0800ab2f
 8009bdc:	0800ab33 	.word	0x0800ab33
 8009be0:	08006041 	.word	0x08006041
 8009be4:	0800998f 	.word	0x0800998f

08009be8 <__sflush_r>:
 8009be8:	898a      	ldrh	r2, [r1, #12]
 8009bea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bec:	4605      	mov	r5, r0
 8009bee:	0710      	lsls	r0, r2, #28
 8009bf0:	460c      	mov	r4, r1
 8009bf2:	d457      	bmi.n	8009ca4 <__sflush_r+0xbc>
 8009bf4:	684b      	ldr	r3, [r1, #4]
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	dc04      	bgt.n	8009c04 <__sflush_r+0x1c>
 8009bfa:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	dc01      	bgt.n	8009c04 <__sflush_r+0x1c>
 8009c00:	2000      	movs	r0, #0
 8009c02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c04:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009c06:	2e00      	cmp	r6, #0
 8009c08:	d0fa      	beq.n	8009c00 <__sflush_r+0x18>
 8009c0a:	2300      	movs	r3, #0
 8009c0c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009c10:	682f      	ldr	r7, [r5, #0]
 8009c12:	6a21      	ldr	r1, [r4, #32]
 8009c14:	602b      	str	r3, [r5, #0]
 8009c16:	d032      	beq.n	8009c7e <__sflush_r+0x96>
 8009c18:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009c1a:	89a3      	ldrh	r3, [r4, #12]
 8009c1c:	075a      	lsls	r2, r3, #29
 8009c1e:	d505      	bpl.n	8009c2c <__sflush_r+0x44>
 8009c20:	6863      	ldr	r3, [r4, #4]
 8009c22:	1ac0      	subs	r0, r0, r3
 8009c24:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009c26:	b10b      	cbz	r3, 8009c2c <__sflush_r+0x44>
 8009c28:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009c2a:	1ac0      	subs	r0, r0, r3
 8009c2c:	2300      	movs	r3, #0
 8009c2e:	4602      	mov	r2, r0
 8009c30:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009c32:	4628      	mov	r0, r5
 8009c34:	6a21      	ldr	r1, [r4, #32]
 8009c36:	47b0      	blx	r6
 8009c38:	1c43      	adds	r3, r0, #1
 8009c3a:	89a3      	ldrh	r3, [r4, #12]
 8009c3c:	d106      	bne.n	8009c4c <__sflush_r+0x64>
 8009c3e:	6829      	ldr	r1, [r5, #0]
 8009c40:	291d      	cmp	r1, #29
 8009c42:	d82b      	bhi.n	8009c9c <__sflush_r+0xb4>
 8009c44:	4a28      	ldr	r2, [pc, #160]	; (8009ce8 <__sflush_r+0x100>)
 8009c46:	410a      	asrs	r2, r1
 8009c48:	07d6      	lsls	r6, r2, #31
 8009c4a:	d427      	bmi.n	8009c9c <__sflush_r+0xb4>
 8009c4c:	2200      	movs	r2, #0
 8009c4e:	6062      	str	r2, [r4, #4]
 8009c50:	6922      	ldr	r2, [r4, #16]
 8009c52:	04d9      	lsls	r1, r3, #19
 8009c54:	6022      	str	r2, [r4, #0]
 8009c56:	d504      	bpl.n	8009c62 <__sflush_r+0x7a>
 8009c58:	1c42      	adds	r2, r0, #1
 8009c5a:	d101      	bne.n	8009c60 <__sflush_r+0x78>
 8009c5c:	682b      	ldr	r3, [r5, #0]
 8009c5e:	b903      	cbnz	r3, 8009c62 <__sflush_r+0x7a>
 8009c60:	6560      	str	r0, [r4, #84]	; 0x54
 8009c62:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009c64:	602f      	str	r7, [r5, #0]
 8009c66:	2900      	cmp	r1, #0
 8009c68:	d0ca      	beq.n	8009c00 <__sflush_r+0x18>
 8009c6a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009c6e:	4299      	cmp	r1, r3
 8009c70:	d002      	beq.n	8009c78 <__sflush_r+0x90>
 8009c72:	4628      	mov	r0, r5
 8009c74:	f7fe f8e8 	bl	8007e48 <_free_r>
 8009c78:	2000      	movs	r0, #0
 8009c7a:	6360      	str	r0, [r4, #52]	; 0x34
 8009c7c:	e7c1      	b.n	8009c02 <__sflush_r+0x1a>
 8009c7e:	2301      	movs	r3, #1
 8009c80:	4628      	mov	r0, r5
 8009c82:	47b0      	blx	r6
 8009c84:	1c41      	adds	r1, r0, #1
 8009c86:	d1c8      	bne.n	8009c1a <__sflush_r+0x32>
 8009c88:	682b      	ldr	r3, [r5, #0]
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d0c5      	beq.n	8009c1a <__sflush_r+0x32>
 8009c8e:	2b1d      	cmp	r3, #29
 8009c90:	d001      	beq.n	8009c96 <__sflush_r+0xae>
 8009c92:	2b16      	cmp	r3, #22
 8009c94:	d101      	bne.n	8009c9a <__sflush_r+0xb2>
 8009c96:	602f      	str	r7, [r5, #0]
 8009c98:	e7b2      	b.n	8009c00 <__sflush_r+0x18>
 8009c9a:	89a3      	ldrh	r3, [r4, #12]
 8009c9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009ca0:	81a3      	strh	r3, [r4, #12]
 8009ca2:	e7ae      	b.n	8009c02 <__sflush_r+0x1a>
 8009ca4:	690f      	ldr	r7, [r1, #16]
 8009ca6:	2f00      	cmp	r7, #0
 8009ca8:	d0aa      	beq.n	8009c00 <__sflush_r+0x18>
 8009caa:	0793      	lsls	r3, r2, #30
 8009cac:	bf18      	it	ne
 8009cae:	2300      	movne	r3, #0
 8009cb0:	680e      	ldr	r6, [r1, #0]
 8009cb2:	bf08      	it	eq
 8009cb4:	694b      	ldreq	r3, [r1, #20]
 8009cb6:	1bf6      	subs	r6, r6, r7
 8009cb8:	600f      	str	r7, [r1, #0]
 8009cba:	608b      	str	r3, [r1, #8]
 8009cbc:	2e00      	cmp	r6, #0
 8009cbe:	dd9f      	ble.n	8009c00 <__sflush_r+0x18>
 8009cc0:	4633      	mov	r3, r6
 8009cc2:	463a      	mov	r2, r7
 8009cc4:	4628      	mov	r0, r5
 8009cc6:	6a21      	ldr	r1, [r4, #32]
 8009cc8:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8009ccc:	47e0      	blx	ip
 8009cce:	2800      	cmp	r0, #0
 8009cd0:	dc06      	bgt.n	8009ce0 <__sflush_r+0xf8>
 8009cd2:	89a3      	ldrh	r3, [r4, #12]
 8009cd4:	f04f 30ff 	mov.w	r0, #4294967295
 8009cd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009cdc:	81a3      	strh	r3, [r4, #12]
 8009cde:	e790      	b.n	8009c02 <__sflush_r+0x1a>
 8009ce0:	4407      	add	r7, r0
 8009ce2:	1a36      	subs	r6, r6, r0
 8009ce4:	e7ea      	b.n	8009cbc <__sflush_r+0xd4>
 8009ce6:	bf00      	nop
 8009ce8:	dfbffffe 	.word	0xdfbffffe

08009cec <_fflush_r>:
 8009cec:	b538      	push	{r3, r4, r5, lr}
 8009cee:	690b      	ldr	r3, [r1, #16]
 8009cf0:	4605      	mov	r5, r0
 8009cf2:	460c      	mov	r4, r1
 8009cf4:	b913      	cbnz	r3, 8009cfc <_fflush_r+0x10>
 8009cf6:	2500      	movs	r5, #0
 8009cf8:	4628      	mov	r0, r5
 8009cfa:	bd38      	pop	{r3, r4, r5, pc}
 8009cfc:	b118      	cbz	r0, 8009d06 <_fflush_r+0x1a>
 8009cfe:	6a03      	ldr	r3, [r0, #32]
 8009d00:	b90b      	cbnz	r3, 8009d06 <_fflush_r+0x1a>
 8009d02:	f7fc fff9 	bl	8006cf8 <__sinit>
 8009d06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d0f3      	beq.n	8009cf6 <_fflush_r+0xa>
 8009d0e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009d10:	07d0      	lsls	r0, r2, #31
 8009d12:	d404      	bmi.n	8009d1e <_fflush_r+0x32>
 8009d14:	0599      	lsls	r1, r3, #22
 8009d16:	d402      	bmi.n	8009d1e <_fflush_r+0x32>
 8009d18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009d1a:	f7fd f9f4 	bl	8007106 <__retarget_lock_acquire_recursive>
 8009d1e:	4628      	mov	r0, r5
 8009d20:	4621      	mov	r1, r4
 8009d22:	f7ff ff61 	bl	8009be8 <__sflush_r>
 8009d26:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009d28:	4605      	mov	r5, r0
 8009d2a:	07da      	lsls	r2, r3, #31
 8009d2c:	d4e4      	bmi.n	8009cf8 <_fflush_r+0xc>
 8009d2e:	89a3      	ldrh	r3, [r4, #12]
 8009d30:	059b      	lsls	r3, r3, #22
 8009d32:	d4e1      	bmi.n	8009cf8 <_fflush_r+0xc>
 8009d34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009d36:	f7fd f9e7 	bl	8007108 <__retarget_lock_release_recursive>
 8009d3a:	e7dd      	b.n	8009cf8 <_fflush_r+0xc>

08009d3c <fiprintf>:
 8009d3c:	b40e      	push	{r1, r2, r3}
 8009d3e:	b503      	push	{r0, r1, lr}
 8009d40:	4601      	mov	r1, r0
 8009d42:	ab03      	add	r3, sp, #12
 8009d44:	4805      	ldr	r0, [pc, #20]	; (8009d5c <fiprintf+0x20>)
 8009d46:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d4a:	6800      	ldr	r0, [r0, #0]
 8009d4c:	9301      	str	r3, [sp, #4]
 8009d4e:	f7ff fe31 	bl	80099b4 <_vfiprintf_r>
 8009d52:	b002      	add	sp, #8
 8009d54:	f85d eb04 	ldr.w	lr, [sp], #4
 8009d58:	b003      	add	sp, #12
 8009d5a:	4770      	bx	lr
 8009d5c:	2000009c 	.word	0x2000009c

08009d60 <__swhatbuf_r>:
 8009d60:	b570      	push	{r4, r5, r6, lr}
 8009d62:	460c      	mov	r4, r1
 8009d64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d68:	4615      	mov	r5, r2
 8009d6a:	2900      	cmp	r1, #0
 8009d6c:	461e      	mov	r6, r3
 8009d6e:	b096      	sub	sp, #88	; 0x58
 8009d70:	da0c      	bge.n	8009d8c <__swhatbuf_r+0x2c>
 8009d72:	89a3      	ldrh	r3, [r4, #12]
 8009d74:	2100      	movs	r1, #0
 8009d76:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009d7a:	bf0c      	ite	eq
 8009d7c:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8009d80:	2340      	movne	r3, #64	; 0x40
 8009d82:	2000      	movs	r0, #0
 8009d84:	6031      	str	r1, [r6, #0]
 8009d86:	602b      	str	r3, [r5, #0]
 8009d88:	b016      	add	sp, #88	; 0x58
 8009d8a:	bd70      	pop	{r4, r5, r6, pc}
 8009d8c:	466a      	mov	r2, sp
 8009d8e:	f000 f875 	bl	8009e7c <_fstat_r>
 8009d92:	2800      	cmp	r0, #0
 8009d94:	dbed      	blt.n	8009d72 <__swhatbuf_r+0x12>
 8009d96:	9901      	ldr	r1, [sp, #4]
 8009d98:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8009d9c:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8009da0:	4259      	negs	r1, r3
 8009da2:	4159      	adcs	r1, r3
 8009da4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009da8:	e7eb      	b.n	8009d82 <__swhatbuf_r+0x22>

08009daa <__smakebuf_r>:
 8009daa:	898b      	ldrh	r3, [r1, #12]
 8009dac:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009dae:	079d      	lsls	r5, r3, #30
 8009db0:	4606      	mov	r6, r0
 8009db2:	460c      	mov	r4, r1
 8009db4:	d507      	bpl.n	8009dc6 <__smakebuf_r+0x1c>
 8009db6:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009dba:	6023      	str	r3, [r4, #0]
 8009dbc:	6123      	str	r3, [r4, #16]
 8009dbe:	2301      	movs	r3, #1
 8009dc0:	6163      	str	r3, [r4, #20]
 8009dc2:	b002      	add	sp, #8
 8009dc4:	bd70      	pop	{r4, r5, r6, pc}
 8009dc6:	466a      	mov	r2, sp
 8009dc8:	ab01      	add	r3, sp, #4
 8009dca:	f7ff ffc9 	bl	8009d60 <__swhatbuf_r>
 8009dce:	9900      	ldr	r1, [sp, #0]
 8009dd0:	4605      	mov	r5, r0
 8009dd2:	4630      	mov	r0, r6
 8009dd4:	f7fe f8a8 	bl	8007f28 <_malloc_r>
 8009dd8:	b948      	cbnz	r0, 8009dee <__smakebuf_r+0x44>
 8009dda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009dde:	059a      	lsls	r2, r3, #22
 8009de0:	d4ef      	bmi.n	8009dc2 <__smakebuf_r+0x18>
 8009de2:	f023 0303 	bic.w	r3, r3, #3
 8009de6:	f043 0302 	orr.w	r3, r3, #2
 8009dea:	81a3      	strh	r3, [r4, #12]
 8009dec:	e7e3      	b.n	8009db6 <__smakebuf_r+0xc>
 8009dee:	89a3      	ldrh	r3, [r4, #12]
 8009df0:	6020      	str	r0, [r4, #0]
 8009df2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009df6:	81a3      	strh	r3, [r4, #12]
 8009df8:	9b00      	ldr	r3, [sp, #0]
 8009dfa:	6120      	str	r0, [r4, #16]
 8009dfc:	6163      	str	r3, [r4, #20]
 8009dfe:	9b01      	ldr	r3, [sp, #4]
 8009e00:	b15b      	cbz	r3, 8009e1a <__smakebuf_r+0x70>
 8009e02:	4630      	mov	r0, r6
 8009e04:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009e08:	f000 f84a 	bl	8009ea0 <_isatty_r>
 8009e0c:	b128      	cbz	r0, 8009e1a <__smakebuf_r+0x70>
 8009e0e:	89a3      	ldrh	r3, [r4, #12]
 8009e10:	f023 0303 	bic.w	r3, r3, #3
 8009e14:	f043 0301 	orr.w	r3, r3, #1
 8009e18:	81a3      	strh	r3, [r4, #12]
 8009e1a:	89a3      	ldrh	r3, [r4, #12]
 8009e1c:	431d      	orrs	r5, r3
 8009e1e:	81a5      	strh	r5, [r4, #12]
 8009e20:	e7cf      	b.n	8009dc2 <__smakebuf_r+0x18>

08009e22 <memmove>:
 8009e22:	4288      	cmp	r0, r1
 8009e24:	b510      	push	{r4, lr}
 8009e26:	eb01 0402 	add.w	r4, r1, r2
 8009e2a:	d902      	bls.n	8009e32 <memmove+0x10>
 8009e2c:	4284      	cmp	r4, r0
 8009e2e:	4623      	mov	r3, r4
 8009e30:	d807      	bhi.n	8009e42 <memmove+0x20>
 8009e32:	1e43      	subs	r3, r0, #1
 8009e34:	42a1      	cmp	r1, r4
 8009e36:	d008      	beq.n	8009e4a <memmove+0x28>
 8009e38:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009e3c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009e40:	e7f8      	b.n	8009e34 <memmove+0x12>
 8009e42:	4601      	mov	r1, r0
 8009e44:	4402      	add	r2, r0
 8009e46:	428a      	cmp	r2, r1
 8009e48:	d100      	bne.n	8009e4c <memmove+0x2a>
 8009e4a:	bd10      	pop	{r4, pc}
 8009e4c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009e50:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009e54:	e7f7      	b.n	8009e46 <memmove+0x24>

08009e56 <strncmp>:
 8009e56:	b510      	push	{r4, lr}
 8009e58:	b16a      	cbz	r2, 8009e76 <strncmp+0x20>
 8009e5a:	3901      	subs	r1, #1
 8009e5c:	1884      	adds	r4, r0, r2
 8009e5e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009e62:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009e66:	429a      	cmp	r2, r3
 8009e68:	d103      	bne.n	8009e72 <strncmp+0x1c>
 8009e6a:	42a0      	cmp	r0, r4
 8009e6c:	d001      	beq.n	8009e72 <strncmp+0x1c>
 8009e6e:	2a00      	cmp	r2, #0
 8009e70:	d1f5      	bne.n	8009e5e <strncmp+0x8>
 8009e72:	1ad0      	subs	r0, r2, r3
 8009e74:	bd10      	pop	{r4, pc}
 8009e76:	4610      	mov	r0, r2
 8009e78:	e7fc      	b.n	8009e74 <strncmp+0x1e>
	...

08009e7c <_fstat_r>:
 8009e7c:	b538      	push	{r3, r4, r5, lr}
 8009e7e:	2300      	movs	r3, #0
 8009e80:	4d06      	ldr	r5, [pc, #24]	; (8009e9c <_fstat_r+0x20>)
 8009e82:	4604      	mov	r4, r0
 8009e84:	4608      	mov	r0, r1
 8009e86:	4611      	mov	r1, r2
 8009e88:	602b      	str	r3, [r5, #0]
 8009e8a:	f7f8 fcb8 	bl	80027fe <_fstat>
 8009e8e:	1c43      	adds	r3, r0, #1
 8009e90:	d102      	bne.n	8009e98 <_fstat_r+0x1c>
 8009e92:	682b      	ldr	r3, [r5, #0]
 8009e94:	b103      	cbz	r3, 8009e98 <_fstat_r+0x1c>
 8009e96:	6023      	str	r3, [r4, #0]
 8009e98:	bd38      	pop	{r3, r4, r5, pc}
 8009e9a:	bf00      	nop
 8009e9c:	2000060c 	.word	0x2000060c

08009ea0 <_isatty_r>:
 8009ea0:	b538      	push	{r3, r4, r5, lr}
 8009ea2:	2300      	movs	r3, #0
 8009ea4:	4d05      	ldr	r5, [pc, #20]	; (8009ebc <_isatty_r+0x1c>)
 8009ea6:	4604      	mov	r4, r0
 8009ea8:	4608      	mov	r0, r1
 8009eaa:	602b      	str	r3, [r5, #0]
 8009eac:	f7f8 fcb6 	bl	800281c <_isatty>
 8009eb0:	1c43      	adds	r3, r0, #1
 8009eb2:	d102      	bne.n	8009eba <_isatty_r+0x1a>
 8009eb4:	682b      	ldr	r3, [r5, #0]
 8009eb6:	b103      	cbz	r3, 8009eba <_isatty_r+0x1a>
 8009eb8:	6023      	str	r3, [r4, #0]
 8009eba:	bd38      	pop	{r3, r4, r5, pc}
 8009ebc:	2000060c 	.word	0x2000060c

08009ec0 <_sbrk_r>:
 8009ec0:	b538      	push	{r3, r4, r5, lr}
 8009ec2:	2300      	movs	r3, #0
 8009ec4:	4d05      	ldr	r5, [pc, #20]	; (8009edc <_sbrk_r+0x1c>)
 8009ec6:	4604      	mov	r4, r0
 8009ec8:	4608      	mov	r0, r1
 8009eca:	602b      	str	r3, [r5, #0]
 8009ecc:	f7f8 fcbc 	bl	8002848 <_sbrk>
 8009ed0:	1c43      	adds	r3, r0, #1
 8009ed2:	d102      	bne.n	8009eda <_sbrk_r+0x1a>
 8009ed4:	682b      	ldr	r3, [r5, #0]
 8009ed6:	b103      	cbz	r3, 8009eda <_sbrk_r+0x1a>
 8009ed8:	6023      	str	r3, [r4, #0]
 8009eda:	bd38      	pop	{r3, r4, r5, pc}
 8009edc:	2000060c 	.word	0x2000060c

08009ee0 <memcpy>:
 8009ee0:	440a      	add	r2, r1
 8009ee2:	4291      	cmp	r1, r2
 8009ee4:	f100 33ff 	add.w	r3, r0, #4294967295
 8009ee8:	d100      	bne.n	8009eec <memcpy+0xc>
 8009eea:	4770      	bx	lr
 8009eec:	b510      	push	{r4, lr}
 8009eee:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009ef2:	4291      	cmp	r1, r2
 8009ef4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009ef8:	d1f9      	bne.n	8009eee <memcpy+0xe>
 8009efa:	bd10      	pop	{r4, pc}

08009efc <nan>:
 8009efc:	2000      	movs	r0, #0
 8009efe:	4901      	ldr	r1, [pc, #4]	; (8009f04 <nan+0x8>)
 8009f00:	4770      	bx	lr
 8009f02:	bf00      	nop
 8009f04:	7ff80000 	.word	0x7ff80000

08009f08 <abort>:
 8009f08:	2006      	movs	r0, #6
 8009f0a:	b508      	push	{r3, lr}
 8009f0c:	f000 fbe8 	bl	800a6e0 <raise>
 8009f10:	2001      	movs	r0, #1
 8009f12:	f7f8 fc26 	bl	8002762 <_exit>

08009f16 <_calloc_r>:
 8009f16:	b570      	push	{r4, r5, r6, lr}
 8009f18:	fba1 5402 	umull	r5, r4, r1, r2
 8009f1c:	b934      	cbnz	r4, 8009f2c <_calloc_r+0x16>
 8009f1e:	4629      	mov	r1, r5
 8009f20:	f7fe f802 	bl	8007f28 <_malloc_r>
 8009f24:	4606      	mov	r6, r0
 8009f26:	b928      	cbnz	r0, 8009f34 <_calloc_r+0x1e>
 8009f28:	4630      	mov	r0, r6
 8009f2a:	bd70      	pop	{r4, r5, r6, pc}
 8009f2c:	220c      	movs	r2, #12
 8009f2e:	2600      	movs	r6, #0
 8009f30:	6002      	str	r2, [r0, #0]
 8009f32:	e7f9      	b.n	8009f28 <_calloc_r+0x12>
 8009f34:	462a      	mov	r2, r5
 8009f36:	4621      	mov	r1, r4
 8009f38:	f7fd f868 	bl	800700c <memset>
 8009f3c:	e7f4      	b.n	8009f28 <_calloc_r+0x12>

08009f3e <rshift>:
 8009f3e:	6903      	ldr	r3, [r0, #16]
 8009f40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009f44:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009f48:	f100 0414 	add.w	r4, r0, #20
 8009f4c:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009f50:	dd46      	ble.n	8009fe0 <rshift+0xa2>
 8009f52:	f011 011f 	ands.w	r1, r1, #31
 8009f56:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009f5a:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009f5e:	d10c      	bne.n	8009f7a <rshift+0x3c>
 8009f60:	4629      	mov	r1, r5
 8009f62:	f100 0710 	add.w	r7, r0, #16
 8009f66:	42b1      	cmp	r1, r6
 8009f68:	d335      	bcc.n	8009fd6 <rshift+0x98>
 8009f6a:	1a9b      	subs	r3, r3, r2
 8009f6c:	009b      	lsls	r3, r3, #2
 8009f6e:	1eea      	subs	r2, r5, #3
 8009f70:	4296      	cmp	r6, r2
 8009f72:	bf38      	it	cc
 8009f74:	2300      	movcc	r3, #0
 8009f76:	4423      	add	r3, r4
 8009f78:	e015      	b.n	8009fa6 <rshift+0x68>
 8009f7a:	46a1      	mov	r9, r4
 8009f7c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009f80:	f1c1 0820 	rsb	r8, r1, #32
 8009f84:	40cf      	lsrs	r7, r1
 8009f86:	f105 0e04 	add.w	lr, r5, #4
 8009f8a:	4576      	cmp	r6, lr
 8009f8c:	46f4      	mov	ip, lr
 8009f8e:	d816      	bhi.n	8009fbe <rshift+0x80>
 8009f90:	1a9a      	subs	r2, r3, r2
 8009f92:	0092      	lsls	r2, r2, #2
 8009f94:	3a04      	subs	r2, #4
 8009f96:	3501      	adds	r5, #1
 8009f98:	42ae      	cmp	r6, r5
 8009f9a:	bf38      	it	cc
 8009f9c:	2200      	movcc	r2, #0
 8009f9e:	18a3      	adds	r3, r4, r2
 8009fa0:	50a7      	str	r7, [r4, r2]
 8009fa2:	b107      	cbz	r7, 8009fa6 <rshift+0x68>
 8009fa4:	3304      	adds	r3, #4
 8009fa6:	42a3      	cmp	r3, r4
 8009fa8:	eba3 0204 	sub.w	r2, r3, r4
 8009fac:	bf08      	it	eq
 8009fae:	2300      	moveq	r3, #0
 8009fb0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009fb4:	6102      	str	r2, [r0, #16]
 8009fb6:	bf08      	it	eq
 8009fb8:	6143      	streq	r3, [r0, #20]
 8009fba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009fbe:	f8dc c000 	ldr.w	ip, [ip]
 8009fc2:	fa0c fc08 	lsl.w	ip, ip, r8
 8009fc6:	ea4c 0707 	orr.w	r7, ip, r7
 8009fca:	f849 7b04 	str.w	r7, [r9], #4
 8009fce:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009fd2:	40cf      	lsrs	r7, r1
 8009fd4:	e7d9      	b.n	8009f8a <rshift+0x4c>
 8009fd6:	f851 cb04 	ldr.w	ip, [r1], #4
 8009fda:	f847 cf04 	str.w	ip, [r7, #4]!
 8009fde:	e7c2      	b.n	8009f66 <rshift+0x28>
 8009fe0:	4623      	mov	r3, r4
 8009fe2:	e7e0      	b.n	8009fa6 <rshift+0x68>

08009fe4 <__hexdig_fun>:
 8009fe4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8009fe8:	2b09      	cmp	r3, #9
 8009fea:	d802      	bhi.n	8009ff2 <__hexdig_fun+0xe>
 8009fec:	3820      	subs	r0, #32
 8009fee:	b2c0      	uxtb	r0, r0
 8009ff0:	4770      	bx	lr
 8009ff2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8009ff6:	2b05      	cmp	r3, #5
 8009ff8:	d801      	bhi.n	8009ffe <__hexdig_fun+0x1a>
 8009ffa:	3847      	subs	r0, #71	; 0x47
 8009ffc:	e7f7      	b.n	8009fee <__hexdig_fun+0xa>
 8009ffe:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800a002:	2b05      	cmp	r3, #5
 800a004:	d801      	bhi.n	800a00a <__hexdig_fun+0x26>
 800a006:	3827      	subs	r0, #39	; 0x27
 800a008:	e7f1      	b.n	8009fee <__hexdig_fun+0xa>
 800a00a:	2000      	movs	r0, #0
 800a00c:	4770      	bx	lr
	...

0800a010 <__gethex>:
 800a010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a014:	4681      	mov	r9, r0
 800a016:	468a      	mov	sl, r1
 800a018:	4617      	mov	r7, r2
 800a01a:	680a      	ldr	r2, [r1, #0]
 800a01c:	b085      	sub	sp, #20
 800a01e:	f102 0b02 	add.w	fp, r2, #2
 800a022:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800a026:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800a02a:	9302      	str	r3, [sp, #8]
 800a02c:	32fe      	adds	r2, #254	; 0xfe
 800a02e:	eb02 030b 	add.w	r3, r2, fp
 800a032:	46d8      	mov	r8, fp
 800a034:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800a038:	9301      	str	r3, [sp, #4]
 800a03a:	2830      	cmp	r0, #48	; 0x30
 800a03c:	d0f7      	beq.n	800a02e <__gethex+0x1e>
 800a03e:	f7ff ffd1 	bl	8009fe4 <__hexdig_fun>
 800a042:	4604      	mov	r4, r0
 800a044:	2800      	cmp	r0, #0
 800a046:	d138      	bne.n	800a0ba <__gethex+0xaa>
 800a048:	2201      	movs	r2, #1
 800a04a:	4640      	mov	r0, r8
 800a04c:	49a7      	ldr	r1, [pc, #668]	; (800a2ec <__gethex+0x2dc>)
 800a04e:	f7ff ff02 	bl	8009e56 <strncmp>
 800a052:	4606      	mov	r6, r0
 800a054:	2800      	cmp	r0, #0
 800a056:	d169      	bne.n	800a12c <__gethex+0x11c>
 800a058:	f898 0001 	ldrb.w	r0, [r8, #1]
 800a05c:	465d      	mov	r5, fp
 800a05e:	f7ff ffc1 	bl	8009fe4 <__hexdig_fun>
 800a062:	2800      	cmp	r0, #0
 800a064:	d064      	beq.n	800a130 <__gethex+0x120>
 800a066:	465a      	mov	r2, fp
 800a068:	7810      	ldrb	r0, [r2, #0]
 800a06a:	4690      	mov	r8, r2
 800a06c:	2830      	cmp	r0, #48	; 0x30
 800a06e:	f102 0201 	add.w	r2, r2, #1
 800a072:	d0f9      	beq.n	800a068 <__gethex+0x58>
 800a074:	f7ff ffb6 	bl	8009fe4 <__hexdig_fun>
 800a078:	2301      	movs	r3, #1
 800a07a:	fab0 f480 	clz	r4, r0
 800a07e:	465e      	mov	r6, fp
 800a080:	0964      	lsrs	r4, r4, #5
 800a082:	9301      	str	r3, [sp, #4]
 800a084:	4642      	mov	r2, r8
 800a086:	4615      	mov	r5, r2
 800a088:	7828      	ldrb	r0, [r5, #0]
 800a08a:	3201      	adds	r2, #1
 800a08c:	f7ff ffaa 	bl	8009fe4 <__hexdig_fun>
 800a090:	2800      	cmp	r0, #0
 800a092:	d1f8      	bne.n	800a086 <__gethex+0x76>
 800a094:	2201      	movs	r2, #1
 800a096:	4628      	mov	r0, r5
 800a098:	4994      	ldr	r1, [pc, #592]	; (800a2ec <__gethex+0x2dc>)
 800a09a:	f7ff fedc 	bl	8009e56 <strncmp>
 800a09e:	b978      	cbnz	r0, 800a0c0 <__gethex+0xb0>
 800a0a0:	b946      	cbnz	r6, 800a0b4 <__gethex+0xa4>
 800a0a2:	1c6e      	adds	r6, r5, #1
 800a0a4:	4632      	mov	r2, r6
 800a0a6:	4615      	mov	r5, r2
 800a0a8:	7828      	ldrb	r0, [r5, #0]
 800a0aa:	3201      	adds	r2, #1
 800a0ac:	f7ff ff9a 	bl	8009fe4 <__hexdig_fun>
 800a0b0:	2800      	cmp	r0, #0
 800a0b2:	d1f8      	bne.n	800a0a6 <__gethex+0x96>
 800a0b4:	1b73      	subs	r3, r6, r5
 800a0b6:	009e      	lsls	r6, r3, #2
 800a0b8:	e004      	b.n	800a0c4 <__gethex+0xb4>
 800a0ba:	2400      	movs	r4, #0
 800a0bc:	4626      	mov	r6, r4
 800a0be:	e7e1      	b.n	800a084 <__gethex+0x74>
 800a0c0:	2e00      	cmp	r6, #0
 800a0c2:	d1f7      	bne.n	800a0b4 <__gethex+0xa4>
 800a0c4:	782b      	ldrb	r3, [r5, #0]
 800a0c6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a0ca:	2b50      	cmp	r3, #80	; 0x50
 800a0cc:	d13d      	bne.n	800a14a <__gethex+0x13a>
 800a0ce:	786b      	ldrb	r3, [r5, #1]
 800a0d0:	2b2b      	cmp	r3, #43	; 0x2b
 800a0d2:	d02f      	beq.n	800a134 <__gethex+0x124>
 800a0d4:	2b2d      	cmp	r3, #45	; 0x2d
 800a0d6:	d031      	beq.n	800a13c <__gethex+0x12c>
 800a0d8:	f04f 0b00 	mov.w	fp, #0
 800a0dc:	1c69      	adds	r1, r5, #1
 800a0de:	7808      	ldrb	r0, [r1, #0]
 800a0e0:	f7ff ff80 	bl	8009fe4 <__hexdig_fun>
 800a0e4:	1e42      	subs	r2, r0, #1
 800a0e6:	b2d2      	uxtb	r2, r2
 800a0e8:	2a18      	cmp	r2, #24
 800a0ea:	d82e      	bhi.n	800a14a <__gethex+0x13a>
 800a0ec:	f1a0 0210 	sub.w	r2, r0, #16
 800a0f0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a0f4:	f7ff ff76 	bl	8009fe4 <__hexdig_fun>
 800a0f8:	f100 3cff 	add.w	ip, r0, #4294967295
 800a0fc:	fa5f fc8c 	uxtb.w	ip, ip
 800a100:	f1bc 0f18 	cmp.w	ip, #24
 800a104:	d91d      	bls.n	800a142 <__gethex+0x132>
 800a106:	f1bb 0f00 	cmp.w	fp, #0
 800a10a:	d000      	beq.n	800a10e <__gethex+0xfe>
 800a10c:	4252      	negs	r2, r2
 800a10e:	4416      	add	r6, r2
 800a110:	f8ca 1000 	str.w	r1, [sl]
 800a114:	b1dc      	cbz	r4, 800a14e <__gethex+0x13e>
 800a116:	9b01      	ldr	r3, [sp, #4]
 800a118:	2b00      	cmp	r3, #0
 800a11a:	bf14      	ite	ne
 800a11c:	f04f 0800 	movne.w	r8, #0
 800a120:	f04f 0806 	moveq.w	r8, #6
 800a124:	4640      	mov	r0, r8
 800a126:	b005      	add	sp, #20
 800a128:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a12c:	4645      	mov	r5, r8
 800a12e:	4626      	mov	r6, r4
 800a130:	2401      	movs	r4, #1
 800a132:	e7c7      	b.n	800a0c4 <__gethex+0xb4>
 800a134:	f04f 0b00 	mov.w	fp, #0
 800a138:	1ca9      	adds	r1, r5, #2
 800a13a:	e7d0      	b.n	800a0de <__gethex+0xce>
 800a13c:	f04f 0b01 	mov.w	fp, #1
 800a140:	e7fa      	b.n	800a138 <__gethex+0x128>
 800a142:	230a      	movs	r3, #10
 800a144:	fb03 0002 	mla	r0, r3, r2, r0
 800a148:	e7d0      	b.n	800a0ec <__gethex+0xdc>
 800a14a:	4629      	mov	r1, r5
 800a14c:	e7e0      	b.n	800a110 <__gethex+0x100>
 800a14e:	4621      	mov	r1, r4
 800a150:	eba5 0308 	sub.w	r3, r5, r8
 800a154:	3b01      	subs	r3, #1
 800a156:	2b07      	cmp	r3, #7
 800a158:	dc0a      	bgt.n	800a170 <__gethex+0x160>
 800a15a:	4648      	mov	r0, r9
 800a15c:	f7fd ff70 	bl	8008040 <_Balloc>
 800a160:	4604      	mov	r4, r0
 800a162:	b940      	cbnz	r0, 800a176 <__gethex+0x166>
 800a164:	4602      	mov	r2, r0
 800a166:	21e4      	movs	r1, #228	; 0xe4
 800a168:	4b61      	ldr	r3, [pc, #388]	; (800a2f0 <__gethex+0x2e0>)
 800a16a:	4862      	ldr	r0, [pc, #392]	; (800a2f4 <__gethex+0x2e4>)
 800a16c:	f7fc ffe0 	bl	8007130 <__assert_func>
 800a170:	3101      	adds	r1, #1
 800a172:	105b      	asrs	r3, r3, #1
 800a174:	e7ef      	b.n	800a156 <__gethex+0x146>
 800a176:	2300      	movs	r3, #0
 800a178:	469b      	mov	fp, r3
 800a17a:	f100 0a14 	add.w	sl, r0, #20
 800a17e:	f8cd a004 	str.w	sl, [sp, #4]
 800a182:	45a8      	cmp	r8, r5
 800a184:	d344      	bcc.n	800a210 <__gethex+0x200>
 800a186:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a18a:	4658      	mov	r0, fp
 800a18c:	f848 bb04 	str.w	fp, [r8], #4
 800a190:	eba8 080a 	sub.w	r8, r8, sl
 800a194:	ea4f 02a8 	mov.w	r2, r8, asr #2
 800a198:	6122      	str	r2, [r4, #16]
 800a19a:	ea4f 1842 	mov.w	r8, r2, lsl #5
 800a19e:	f7fe f841 	bl	8008224 <__hi0bits>
 800a1a2:	683d      	ldr	r5, [r7, #0]
 800a1a4:	eba8 0800 	sub.w	r8, r8, r0
 800a1a8:	45a8      	cmp	r8, r5
 800a1aa:	dd59      	ble.n	800a260 <__gethex+0x250>
 800a1ac:	eba8 0805 	sub.w	r8, r8, r5
 800a1b0:	4641      	mov	r1, r8
 800a1b2:	4620      	mov	r0, r4
 800a1b4:	f7fe fbbf 	bl	8008936 <__any_on>
 800a1b8:	4683      	mov	fp, r0
 800a1ba:	b1b8      	cbz	r0, 800a1ec <__gethex+0x1dc>
 800a1bc:	f04f 0b01 	mov.w	fp, #1
 800a1c0:	f108 33ff 	add.w	r3, r8, #4294967295
 800a1c4:	1159      	asrs	r1, r3, #5
 800a1c6:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800a1ca:	f003 021f 	and.w	r2, r3, #31
 800a1ce:	fa0b f202 	lsl.w	r2, fp, r2
 800a1d2:	420a      	tst	r2, r1
 800a1d4:	d00a      	beq.n	800a1ec <__gethex+0x1dc>
 800a1d6:	455b      	cmp	r3, fp
 800a1d8:	dd06      	ble.n	800a1e8 <__gethex+0x1d8>
 800a1da:	4620      	mov	r0, r4
 800a1dc:	f1a8 0102 	sub.w	r1, r8, #2
 800a1e0:	f7fe fba9 	bl	8008936 <__any_on>
 800a1e4:	2800      	cmp	r0, #0
 800a1e6:	d138      	bne.n	800a25a <__gethex+0x24a>
 800a1e8:	f04f 0b02 	mov.w	fp, #2
 800a1ec:	4641      	mov	r1, r8
 800a1ee:	4620      	mov	r0, r4
 800a1f0:	f7ff fea5 	bl	8009f3e <rshift>
 800a1f4:	4446      	add	r6, r8
 800a1f6:	68bb      	ldr	r3, [r7, #8]
 800a1f8:	42b3      	cmp	r3, r6
 800a1fa:	da41      	bge.n	800a280 <__gethex+0x270>
 800a1fc:	4621      	mov	r1, r4
 800a1fe:	4648      	mov	r0, r9
 800a200:	f7fd ff5e 	bl	80080c0 <_Bfree>
 800a204:	2300      	movs	r3, #0
 800a206:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a208:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800a20c:	6013      	str	r3, [r2, #0]
 800a20e:	e789      	b.n	800a124 <__gethex+0x114>
 800a210:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800a214:	2a2e      	cmp	r2, #46	; 0x2e
 800a216:	d014      	beq.n	800a242 <__gethex+0x232>
 800a218:	2b20      	cmp	r3, #32
 800a21a:	d106      	bne.n	800a22a <__gethex+0x21a>
 800a21c:	9b01      	ldr	r3, [sp, #4]
 800a21e:	f843 bb04 	str.w	fp, [r3], #4
 800a222:	f04f 0b00 	mov.w	fp, #0
 800a226:	9301      	str	r3, [sp, #4]
 800a228:	465b      	mov	r3, fp
 800a22a:	7828      	ldrb	r0, [r5, #0]
 800a22c:	9303      	str	r3, [sp, #12]
 800a22e:	f7ff fed9 	bl	8009fe4 <__hexdig_fun>
 800a232:	9b03      	ldr	r3, [sp, #12]
 800a234:	f000 000f 	and.w	r0, r0, #15
 800a238:	4098      	lsls	r0, r3
 800a23a:	ea4b 0b00 	orr.w	fp, fp, r0
 800a23e:	3304      	adds	r3, #4
 800a240:	e79f      	b.n	800a182 <__gethex+0x172>
 800a242:	45a8      	cmp	r8, r5
 800a244:	d8e8      	bhi.n	800a218 <__gethex+0x208>
 800a246:	2201      	movs	r2, #1
 800a248:	4628      	mov	r0, r5
 800a24a:	4928      	ldr	r1, [pc, #160]	; (800a2ec <__gethex+0x2dc>)
 800a24c:	9303      	str	r3, [sp, #12]
 800a24e:	f7ff fe02 	bl	8009e56 <strncmp>
 800a252:	9b03      	ldr	r3, [sp, #12]
 800a254:	2800      	cmp	r0, #0
 800a256:	d1df      	bne.n	800a218 <__gethex+0x208>
 800a258:	e793      	b.n	800a182 <__gethex+0x172>
 800a25a:	f04f 0b03 	mov.w	fp, #3
 800a25e:	e7c5      	b.n	800a1ec <__gethex+0x1dc>
 800a260:	da0b      	bge.n	800a27a <__gethex+0x26a>
 800a262:	eba5 0808 	sub.w	r8, r5, r8
 800a266:	4621      	mov	r1, r4
 800a268:	4642      	mov	r2, r8
 800a26a:	4648      	mov	r0, r9
 800a26c:	f7fe f940 	bl	80084f0 <__lshift>
 800a270:	4604      	mov	r4, r0
 800a272:	eba6 0608 	sub.w	r6, r6, r8
 800a276:	f100 0a14 	add.w	sl, r0, #20
 800a27a:	f04f 0b00 	mov.w	fp, #0
 800a27e:	e7ba      	b.n	800a1f6 <__gethex+0x1e6>
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	42b3      	cmp	r3, r6
 800a284:	dd74      	ble.n	800a370 <__gethex+0x360>
 800a286:	1b9e      	subs	r6, r3, r6
 800a288:	42b5      	cmp	r5, r6
 800a28a:	dc35      	bgt.n	800a2f8 <__gethex+0x2e8>
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	2b02      	cmp	r3, #2
 800a290:	d023      	beq.n	800a2da <__gethex+0x2ca>
 800a292:	2b03      	cmp	r3, #3
 800a294:	d025      	beq.n	800a2e2 <__gethex+0x2d2>
 800a296:	2b01      	cmp	r3, #1
 800a298:	d115      	bne.n	800a2c6 <__gethex+0x2b6>
 800a29a:	42b5      	cmp	r5, r6
 800a29c:	d113      	bne.n	800a2c6 <__gethex+0x2b6>
 800a29e:	2d01      	cmp	r5, #1
 800a2a0:	d10b      	bne.n	800a2ba <__gethex+0x2aa>
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	9a02      	ldr	r2, [sp, #8]
 800a2a6:	f04f 0862 	mov.w	r8, #98	; 0x62
 800a2aa:	6013      	str	r3, [r2, #0]
 800a2ac:	2301      	movs	r3, #1
 800a2ae:	6123      	str	r3, [r4, #16]
 800a2b0:	f8ca 3000 	str.w	r3, [sl]
 800a2b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a2b6:	601c      	str	r4, [r3, #0]
 800a2b8:	e734      	b.n	800a124 <__gethex+0x114>
 800a2ba:	4620      	mov	r0, r4
 800a2bc:	1e69      	subs	r1, r5, #1
 800a2be:	f7fe fb3a 	bl	8008936 <__any_on>
 800a2c2:	2800      	cmp	r0, #0
 800a2c4:	d1ed      	bne.n	800a2a2 <__gethex+0x292>
 800a2c6:	4621      	mov	r1, r4
 800a2c8:	4648      	mov	r0, r9
 800a2ca:	f7fd fef9 	bl	80080c0 <_Bfree>
 800a2ce:	2300      	movs	r3, #0
 800a2d0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a2d2:	f04f 0850 	mov.w	r8, #80	; 0x50
 800a2d6:	6013      	str	r3, [r2, #0]
 800a2d8:	e724      	b.n	800a124 <__gethex+0x114>
 800a2da:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d1f2      	bne.n	800a2c6 <__gethex+0x2b6>
 800a2e0:	e7df      	b.n	800a2a2 <__gethex+0x292>
 800a2e2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d1dc      	bne.n	800a2a2 <__gethex+0x292>
 800a2e8:	e7ed      	b.n	800a2c6 <__gethex+0x2b6>
 800a2ea:	bf00      	nop
 800a2ec:	0800a9d4 	.word	0x0800a9d4
 800a2f0:	0800a867 	.word	0x0800a867
 800a2f4:	0800ab42 	.word	0x0800ab42
 800a2f8:	f106 38ff 	add.w	r8, r6, #4294967295
 800a2fc:	f1bb 0f00 	cmp.w	fp, #0
 800a300:	d133      	bne.n	800a36a <__gethex+0x35a>
 800a302:	f1b8 0f00 	cmp.w	r8, #0
 800a306:	d004      	beq.n	800a312 <__gethex+0x302>
 800a308:	4641      	mov	r1, r8
 800a30a:	4620      	mov	r0, r4
 800a30c:	f7fe fb13 	bl	8008936 <__any_on>
 800a310:	4683      	mov	fp, r0
 800a312:	2301      	movs	r3, #1
 800a314:	ea4f 1268 	mov.w	r2, r8, asr #5
 800a318:	f008 081f 	and.w	r8, r8, #31
 800a31c:	fa03 f308 	lsl.w	r3, r3, r8
 800a320:	f04f 0802 	mov.w	r8, #2
 800a324:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800a328:	4631      	mov	r1, r6
 800a32a:	4213      	tst	r3, r2
 800a32c:	4620      	mov	r0, r4
 800a32e:	bf18      	it	ne
 800a330:	f04b 0b02 	orrne.w	fp, fp, #2
 800a334:	1bad      	subs	r5, r5, r6
 800a336:	f7ff fe02 	bl	8009f3e <rshift>
 800a33a:	687e      	ldr	r6, [r7, #4]
 800a33c:	f1bb 0f00 	cmp.w	fp, #0
 800a340:	d04a      	beq.n	800a3d8 <__gethex+0x3c8>
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	2b02      	cmp	r3, #2
 800a346:	d016      	beq.n	800a376 <__gethex+0x366>
 800a348:	2b03      	cmp	r3, #3
 800a34a:	d018      	beq.n	800a37e <__gethex+0x36e>
 800a34c:	2b01      	cmp	r3, #1
 800a34e:	d109      	bne.n	800a364 <__gethex+0x354>
 800a350:	f01b 0f02 	tst.w	fp, #2
 800a354:	d006      	beq.n	800a364 <__gethex+0x354>
 800a356:	f8da 3000 	ldr.w	r3, [sl]
 800a35a:	ea4b 0b03 	orr.w	fp, fp, r3
 800a35e:	f01b 0f01 	tst.w	fp, #1
 800a362:	d10f      	bne.n	800a384 <__gethex+0x374>
 800a364:	f048 0810 	orr.w	r8, r8, #16
 800a368:	e036      	b.n	800a3d8 <__gethex+0x3c8>
 800a36a:	f04f 0b01 	mov.w	fp, #1
 800a36e:	e7d0      	b.n	800a312 <__gethex+0x302>
 800a370:	f04f 0801 	mov.w	r8, #1
 800a374:	e7e2      	b.n	800a33c <__gethex+0x32c>
 800a376:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a378:	f1c3 0301 	rsb	r3, r3, #1
 800a37c:	930f      	str	r3, [sp, #60]	; 0x3c
 800a37e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a380:	2b00      	cmp	r3, #0
 800a382:	d0ef      	beq.n	800a364 <__gethex+0x354>
 800a384:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a388:	f104 0214 	add.w	r2, r4, #20
 800a38c:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800a390:	9301      	str	r3, [sp, #4]
 800a392:	2300      	movs	r3, #0
 800a394:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800a398:	4694      	mov	ip, r2
 800a39a:	f852 1b04 	ldr.w	r1, [r2], #4
 800a39e:	f1b1 3fff 	cmp.w	r1, #4294967295
 800a3a2:	d01e      	beq.n	800a3e2 <__gethex+0x3d2>
 800a3a4:	3101      	adds	r1, #1
 800a3a6:	f8cc 1000 	str.w	r1, [ip]
 800a3aa:	f1b8 0f02 	cmp.w	r8, #2
 800a3ae:	f104 0214 	add.w	r2, r4, #20
 800a3b2:	d13d      	bne.n	800a430 <__gethex+0x420>
 800a3b4:	683b      	ldr	r3, [r7, #0]
 800a3b6:	3b01      	subs	r3, #1
 800a3b8:	42ab      	cmp	r3, r5
 800a3ba:	d10b      	bne.n	800a3d4 <__gethex+0x3c4>
 800a3bc:	2301      	movs	r3, #1
 800a3be:	1169      	asrs	r1, r5, #5
 800a3c0:	f005 051f 	and.w	r5, r5, #31
 800a3c4:	fa03 f505 	lsl.w	r5, r3, r5
 800a3c8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a3cc:	421d      	tst	r5, r3
 800a3ce:	bf18      	it	ne
 800a3d0:	f04f 0801 	movne.w	r8, #1
 800a3d4:	f048 0820 	orr.w	r8, r8, #32
 800a3d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a3da:	601c      	str	r4, [r3, #0]
 800a3dc:	9b02      	ldr	r3, [sp, #8]
 800a3de:	601e      	str	r6, [r3, #0]
 800a3e0:	e6a0      	b.n	800a124 <__gethex+0x114>
 800a3e2:	4290      	cmp	r0, r2
 800a3e4:	f842 3c04 	str.w	r3, [r2, #-4]
 800a3e8:	d8d6      	bhi.n	800a398 <__gethex+0x388>
 800a3ea:	68a2      	ldr	r2, [r4, #8]
 800a3ec:	4593      	cmp	fp, r2
 800a3ee:	db17      	blt.n	800a420 <__gethex+0x410>
 800a3f0:	6861      	ldr	r1, [r4, #4]
 800a3f2:	4648      	mov	r0, r9
 800a3f4:	3101      	adds	r1, #1
 800a3f6:	f7fd fe23 	bl	8008040 <_Balloc>
 800a3fa:	4682      	mov	sl, r0
 800a3fc:	b918      	cbnz	r0, 800a406 <__gethex+0x3f6>
 800a3fe:	4602      	mov	r2, r0
 800a400:	2184      	movs	r1, #132	; 0x84
 800a402:	4b1a      	ldr	r3, [pc, #104]	; (800a46c <__gethex+0x45c>)
 800a404:	e6b1      	b.n	800a16a <__gethex+0x15a>
 800a406:	6922      	ldr	r2, [r4, #16]
 800a408:	f104 010c 	add.w	r1, r4, #12
 800a40c:	3202      	adds	r2, #2
 800a40e:	0092      	lsls	r2, r2, #2
 800a410:	300c      	adds	r0, #12
 800a412:	f7ff fd65 	bl	8009ee0 <memcpy>
 800a416:	4621      	mov	r1, r4
 800a418:	4648      	mov	r0, r9
 800a41a:	f7fd fe51 	bl	80080c0 <_Bfree>
 800a41e:	4654      	mov	r4, sl
 800a420:	6922      	ldr	r2, [r4, #16]
 800a422:	1c51      	adds	r1, r2, #1
 800a424:	6121      	str	r1, [r4, #16]
 800a426:	2101      	movs	r1, #1
 800a428:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800a42c:	6151      	str	r1, [r2, #20]
 800a42e:	e7bc      	b.n	800a3aa <__gethex+0x39a>
 800a430:	6921      	ldr	r1, [r4, #16]
 800a432:	4559      	cmp	r1, fp
 800a434:	dd0b      	ble.n	800a44e <__gethex+0x43e>
 800a436:	2101      	movs	r1, #1
 800a438:	4620      	mov	r0, r4
 800a43a:	f7ff fd80 	bl	8009f3e <rshift>
 800a43e:	68bb      	ldr	r3, [r7, #8]
 800a440:	3601      	adds	r6, #1
 800a442:	42b3      	cmp	r3, r6
 800a444:	f6ff aeda 	blt.w	800a1fc <__gethex+0x1ec>
 800a448:	f04f 0801 	mov.w	r8, #1
 800a44c:	e7c2      	b.n	800a3d4 <__gethex+0x3c4>
 800a44e:	f015 051f 	ands.w	r5, r5, #31
 800a452:	d0f9      	beq.n	800a448 <__gethex+0x438>
 800a454:	9b01      	ldr	r3, [sp, #4]
 800a456:	f1c5 0520 	rsb	r5, r5, #32
 800a45a:	441a      	add	r2, r3
 800a45c:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800a460:	f7fd fee0 	bl	8008224 <__hi0bits>
 800a464:	42a8      	cmp	r0, r5
 800a466:	dbe6      	blt.n	800a436 <__gethex+0x426>
 800a468:	e7ee      	b.n	800a448 <__gethex+0x438>
 800a46a:	bf00      	nop
 800a46c:	0800a867 	.word	0x0800a867

0800a470 <L_shift>:
 800a470:	f1c2 0208 	rsb	r2, r2, #8
 800a474:	0092      	lsls	r2, r2, #2
 800a476:	b570      	push	{r4, r5, r6, lr}
 800a478:	f1c2 0620 	rsb	r6, r2, #32
 800a47c:	6843      	ldr	r3, [r0, #4]
 800a47e:	6804      	ldr	r4, [r0, #0]
 800a480:	fa03 f506 	lsl.w	r5, r3, r6
 800a484:	432c      	orrs	r4, r5
 800a486:	40d3      	lsrs	r3, r2
 800a488:	6004      	str	r4, [r0, #0]
 800a48a:	f840 3f04 	str.w	r3, [r0, #4]!
 800a48e:	4288      	cmp	r0, r1
 800a490:	d3f4      	bcc.n	800a47c <L_shift+0xc>
 800a492:	bd70      	pop	{r4, r5, r6, pc}

0800a494 <__match>:
 800a494:	b530      	push	{r4, r5, lr}
 800a496:	6803      	ldr	r3, [r0, #0]
 800a498:	3301      	adds	r3, #1
 800a49a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a49e:	b914      	cbnz	r4, 800a4a6 <__match+0x12>
 800a4a0:	6003      	str	r3, [r0, #0]
 800a4a2:	2001      	movs	r0, #1
 800a4a4:	bd30      	pop	{r4, r5, pc}
 800a4a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a4aa:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800a4ae:	2d19      	cmp	r5, #25
 800a4b0:	bf98      	it	ls
 800a4b2:	3220      	addls	r2, #32
 800a4b4:	42a2      	cmp	r2, r4
 800a4b6:	d0f0      	beq.n	800a49a <__match+0x6>
 800a4b8:	2000      	movs	r0, #0
 800a4ba:	e7f3      	b.n	800a4a4 <__match+0x10>

0800a4bc <__hexnan>:
 800a4bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4c0:	2500      	movs	r5, #0
 800a4c2:	680b      	ldr	r3, [r1, #0]
 800a4c4:	4682      	mov	sl, r0
 800a4c6:	115e      	asrs	r6, r3, #5
 800a4c8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a4cc:	f013 031f 	ands.w	r3, r3, #31
 800a4d0:	bf18      	it	ne
 800a4d2:	3604      	addne	r6, #4
 800a4d4:	1f37      	subs	r7, r6, #4
 800a4d6:	4690      	mov	r8, r2
 800a4d8:	46b9      	mov	r9, r7
 800a4da:	463c      	mov	r4, r7
 800a4dc:	46ab      	mov	fp, r5
 800a4de:	b087      	sub	sp, #28
 800a4e0:	6801      	ldr	r1, [r0, #0]
 800a4e2:	9301      	str	r3, [sp, #4]
 800a4e4:	f846 5c04 	str.w	r5, [r6, #-4]
 800a4e8:	9502      	str	r5, [sp, #8]
 800a4ea:	784a      	ldrb	r2, [r1, #1]
 800a4ec:	1c4b      	adds	r3, r1, #1
 800a4ee:	9303      	str	r3, [sp, #12]
 800a4f0:	b342      	cbz	r2, 800a544 <__hexnan+0x88>
 800a4f2:	4610      	mov	r0, r2
 800a4f4:	9105      	str	r1, [sp, #20]
 800a4f6:	9204      	str	r2, [sp, #16]
 800a4f8:	f7ff fd74 	bl	8009fe4 <__hexdig_fun>
 800a4fc:	2800      	cmp	r0, #0
 800a4fe:	d14f      	bne.n	800a5a0 <__hexnan+0xe4>
 800a500:	9a04      	ldr	r2, [sp, #16]
 800a502:	9905      	ldr	r1, [sp, #20]
 800a504:	2a20      	cmp	r2, #32
 800a506:	d818      	bhi.n	800a53a <__hexnan+0x7e>
 800a508:	9b02      	ldr	r3, [sp, #8]
 800a50a:	459b      	cmp	fp, r3
 800a50c:	dd13      	ble.n	800a536 <__hexnan+0x7a>
 800a50e:	454c      	cmp	r4, r9
 800a510:	d206      	bcs.n	800a520 <__hexnan+0x64>
 800a512:	2d07      	cmp	r5, #7
 800a514:	dc04      	bgt.n	800a520 <__hexnan+0x64>
 800a516:	462a      	mov	r2, r5
 800a518:	4649      	mov	r1, r9
 800a51a:	4620      	mov	r0, r4
 800a51c:	f7ff ffa8 	bl	800a470 <L_shift>
 800a520:	4544      	cmp	r4, r8
 800a522:	d950      	bls.n	800a5c6 <__hexnan+0x10a>
 800a524:	2300      	movs	r3, #0
 800a526:	f1a4 0904 	sub.w	r9, r4, #4
 800a52a:	f844 3c04 	str.w	r3, [r4, #-4]
 800a52e:	461d      	mov	r5, r3
 800a530:	464c      	mov	r4, r9
 800a532:	f8cd b008 	str.w	fp, [sp, #8]
 800a536:	9903      	ldr	r1, [sp, #12]
 800a538:	e7d7      	b.n	800a4ea <__hexnan+0x2e>
 800a53a:	2a29      	cmp	r2, #41	; 0x29
 800a53c:	d155      	bne.n	800a5ea <__hexnan+0x12e>
 800a53e:	3102      	adds	r1, #2
 800a540:	f8ca 1000 	str.w	r1, [sl]
 800a544:	f1bb 0f00 	cmp.w	fp, #0
 800a548:	d04f      	beq.n	800a5ea <__hexnan+0x12e>
 800a54a:	454c      	cmp	r4, r9
 800a54c:	d206      	bcs.n	800a55c <__hexnan+0xa0>
 800a54e:	2d07      	cmp	r5, #7
 800a550:	dc04      	bgt.n	800a55c <__hexnan+0xa0>
 800a552:	462a      	mov	r2, r5
 800a554:	4649      	mov	r1, r9
 800a556:	4620      	mov	r0, r4
 800a558:	f7ff ff8a 	bl	800a470 <L_shift>
 800a55c:	4544      	cmp	r4, r8
 800a55e:	d934      	bls.n	800a5ca <__hexnan+0x10e>
 800a560:	4623      	mov	r3, r4
 800a562:	f1a8 0204 	sub.w	r2, r8, #4
 800a566:	f853 1b04 	ldr.w	r1, [r3], #4
 800a56a:	429f      	cmp	r7, r3
 800a56c:	f842 1f04 	str.w	r1, [r2, #4]!
 800a570:	d2f9      	bcs.n	800a566 <__hexnan+0xaa>
 800a572:	1b3b      	subs	r3, r7, r4
 800a574:	f023 0303 	bic.w	r3, r3, #3
 800a578:	3304      	adds	r3, #4
 800a57a:	3e03      	subs	r6, #3
 800a57c:	3401      	adds	r4, #1
 800a57e:	42a6      	cmp	r6, r4
 800a580:	bf38      	it	cc
 800a582:	2304      	movcc	r3, #4
 800a584:	2200      	movs	r2, #0
 800a586:	4443      	add	r3, r8
 800a588:	f843 2b04 	str.w	r2, [r3], #4
 800a58c:	429f      	cmp	r7, r3
 800a58e:	d2fb      	bcs.n	800a588 <__hexnan+0xcc>
 800a590:	683b      	ldr	r3, [r7, #0]
 800a592:	b91b      	cbnz	r3, 800a59c <__hexnan+0xe0>
 800a594:	4547      	cmp	r7, r8
 800a596:	d126      	bne.n	800a5e6 <__hexnan+0x12a>
 800a598:	2301      	movs	r3, #1
 800a59a:	603b      	str	r3, [r7, #0]
 800a59c:	2005      	movs	r0, #5
 800a59e:	e025      	b.n	800a5ec <__hexnan+0x130>
 800a5a0:	3501      	adds	r5, #1
 800a5a2:	2d08      	cmp	r5, #8
 800a5a4:	f10b 0b01 	add.w	fp, fp, #1
 800a5a8:	dd06      	ble.n	800a5b8 <__hexnan+0xfc>
 800a5aa:	4544      	cmp	r4, r8
 800a5ac:	d9c3      	bls.n	800a536 <__hexnan+0x7a>
 800a5ae:	2300      	movs	r3, #0
 800a5b0:	2501      	movs	r5, #1
 800a5b2:	f844 3c04 	str.w	r3, [r4, #-4]
 800a5b6:	3c04      	subs	r4, #4
 800a5b8:	6822      	ldr	r2, [r4, #0]
 800a5ba:	f000 000f 	and.w	r0, r0, #15
 800a5be:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a5c2:	6020      	str	r0, [r4, #0]
 800a5c4:	e7b7      	b.n	800a536 <__hexnan+0x7a>
 800a5c6:	2508      	movs	r5, #8
 800a5c8:	e7b5      	b.n	800a536 <__hexnan+0x7a>
 800a5ca:	9b01      	ldr	r3, [sp, #4]
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d0df      	beq.n	800a590 <__hexnan+0xd4>
 800a5d0:	f04f 32ff 	mov.w	r2, #4294967295
 800a5d4:	f1c3 0320 	rsb	r3, r3, #32
 800a5d8:	40da      	lsrs	r2, r3
 800a5da:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800a5de:	4013      	ands	r3, r2
 800a5e0:	f846 3c04 	str.w	r3, [r6, #-4]
 800a5e4:	e7d4      	b.n	800a590 <__hexnan+0xd4>
 800a5e6:	3f04      	subs	r7, #4
 800a5e8:	e7d2      	b.n	800a590 <__hexnan+0xd4>
 800a5ea:	2004      	movs	r0, #4
 800a5ec:	b007      	add	sp, #28
 800a5ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a5f2 <__ascii_mbtowc>:
 800a5f2:	b082      	sub	sp, #8
 800a5f4:	b901      	cbnz	r1, 800a5f8 <__ascii_mbtowc+0x6>
 800a5f6:	a901      	add	r1, sp, #4
 800a5f8:	b142      	cbz	r2, 800a60c <__ascii_mbtowc+0x1a>
 800a5fa:	b14b      	cbz	r3, 800a610 <__ascii_mbtowc+0x1e>
 800a5fc:	7813      	ldrb	r3, [r2, #0]
 800a5fe:	600b      	str	r3, [r1, #0]
 800a600:	7812      	ldrb	r2, [r2, #0]
 800a602:	1e10      	subs	r0, r2, #0
 800a604:	bf18      	it	ne
 800a606:	2001      	movne	r0, #1
 800a608:	b002      	add	sp, #8
 800a60a:	4770      	bx	lr
 800a60c:	4610      	mov	r0, r2
 800a60e:	e7fb      	b.n	800a608 <__ascii_mbtowc+0x16>
 800a610:	f06f 0001 	mvn.w	r0, #1
 800a614:	e7f8      	b.n	800a608 <__ascii_mbtowc+0x16>

0800a616 <_realloc_r>:
 800a616:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a61a:	4680      	mov	r8, r0
 800a61c:	4614      	mov	r4, r2
 800a61e:	460e      	mov	r6, r1
 800a620:	b921      	cbnz	r1, 800a62c <_realloc_r+0x16>
 800a622:	4611      	mov	r1, r2
 800a624:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a628:	f7fd bc7e 	b.w	8007f28 <_malloc_r>
 800a62c:	b92a      	cbnz	r2, 800a63a <_realloc_r+0x24>
 800a62e:	f7fd fc0b 	bl	8007e48 <_free_r>
 800a632:	4625      	mov	r5, r4
 800a634:	4628      	mov	r0, r5
 800a636:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a63a:	f000 f86d 	bl	800a718 <_malloc_usable_size_r>
 800a63e:	4284      	cmp	r4, r0
 800a640:	4607      	mov	r7, r0
 800a642:	d802      	bhi.n	800a64a <_realloc_r+0x34>
 800a644:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a648:	d812      	bhi.n	800a670 <_realloc_r+0x5a>
 800a64a:	4621      	mov	r1, r4
 800a64c:	4640      	mov	r0, r8
 800a64e:	f7fd fc6b 	bl	8007f28 <_malloc_r>
 800a652:	4605      	mov	r5, r0
 800a654:	2800      	cmp	r0, #0
 800a656:	d0ed      	beq.n	800a634 <_realloc_r+0x1e>
 800a658:	42bc      	cmp	r4, r7
 800a65a:	4622      	mov	r2, r4
 800a65c:	4631      	mov	r1, r6
 800a65e:	bf28      	it	cs
 800a660:	463a      	movcs	r2, r7
 800a662:	f7ff fc3d 	bl	8009ee0 <memcpy>
 800a666:	4631      	mov	r1, r6
 800a668:	4640      	mov	r0, r8
 800a66a:	f7fd fbed 	bl	8007e48 <_free_r>
 800a66e:	e7e1      	b.n	800a634 <_realloc_r+0x1e>
 800a670:	4635      	mov	r5, r6
 800a672:	e7df      	b.n	800a634 <_realloc_r+0x1e>

0800a674 <__ascii_wctomb>:
 800a674:	4603      	mov	r3, r0
 800a676:	4608      	mov	r0, r1
 800a678:	b141      	cbz	r1, 800a68c <__ascii_wctomb+0x18>
 800a67a:	2aff      	cmp	r2, #255	; 0xff
 800a67c:	d904      	bls.n	800a688 <__ascii_wctomb+0x14>
 800a67e:	228a      	movs	r2, #138	; 0x8a
 800a680:	f04f 30ff 	mov.w	r0, #4294967295
 800a684:	601a      	str	r2, [r3, #0]
 800a686:	4770      	bx	lr
 800a688:	2001      	movs	r0, #1
 800a68a:	700a      	strb	r2, [r1, #0]
 800a68c:	4770      	bx	lr

0800a68e <_raise_r>:
 800a68e:	291f      	cmp	r1, #31
 800a690:	b538      	push	{r3, r4, r5, lr}
 800a692:	4604      	mov	r4, r0
 800a694:	460d      	mov	r5, r1
 800a696:	d904      	bls.n	800a6a2 <_raise_r+0x14>
 800a698:	2316      	movs	r3, #22
 800a69a:	6003      	str	r3, [r0, #0]
 800a69c:	f04f 30ff 	mov.w	r0, #4294967295
 800a6a0:	bd38      	pop	{r3, r4, r5, pc}
 800a6a2:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800a6a4:	b112      	cbz	r2, 800a6ac <_raise_r+0x1e>
 800a6a6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a6aa:	b94b      	cbnz	r3, 800a6c0 <_raise_r+0x32>
 800a6ac:	4620      	mov	r0, r4
 800a6ae:	f000 f831 	bl	800a714 <_getpid_r>
 800a6b2:	462a      	mov	r2, r5
 800a6b4:	4601      	mov	r1, r0
 800a6b6:	4620      	mov	r0, r4
 800a6b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a6bc:	f000 b818 	b.w	800a6f0 <_kill_r>
 800a6c0:	2b01      	cmp	r3, #1
 800a6c2:	d00a      	beq.n	800a6da <_raise_r+0x4c>
 800a6c4:	1c59      	adds	r1, r3, #1
 800a6c6:	d103      	bne.n	800a6d0 <_raise_r+0x42>
 800a6c8:	2316      	movs	r3, #22
 800a6ca:	6003      	str	r3, [r0, #0]
 800a6cc:	2001      	movs	r0, #1
 800a6ce:	e7e7      	b.n	800a6a0 <_raise_r+0x12>
 800a6d0:	2400      	movs	r4, #0
 800a6d2:	4628      	mov	r0, r5
 800a6d4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a6d8:	4798      	blx	r3
 800a6da:	2000      	movs	r0, #0
 800a6dc:	e7e0      	b.n	800a6a0 <_raise_r+0x12>
	...

0800a6e0 <raise>:
 800a6e0:	4b02      	ldr	r3, [pc, #8]	; (800a6ec <raise+0xc>)
 800a6e2:	4601      	mov	r1, r0
 800a6e4:	6818      	ldr	r0, [r3, #0]
 800a6e6:	f7ff bfd2 	b.w	800a68e <_raise_r>
 800a6ea:	bf00      	nop
 800a6ec:	2000009c 	.word	0x2000009c

0800a6f0 <_kill_r>:
 800a6f0:	b538      	push	{r3, r4, r5, lr}
 800a6f2:	2300      	movs	r3, #0
 800a6f4:	4d06      	ldr	r5, [pc, #24]	; (800a710 <_kill_r+0x20>)
 800a6f6:	4604      	mov	r4, r0
 800a6f8:	4608      	mov	r0, r1
 800a6fa:	4611      	mov	r1, r2
 800a6fc:	602b      	str	r3, [r5, #0]
 800a6fe:	f7f8 f820 	bl	8002742 <_kill>
 800a702:	1c43      	adds	r3, r0, #1
 800a704:	d102      	bne.n	800a70c <_kill_r+0x1c>
 800a706:	682b      	ldr	r3, [r5, #0]
 800a708:	b103      	cbz	r3, 800a70c <_kill_r+0x1c>
 800a70a:	6023      	str	r3, [r4, #0]
 800a70c:	bd38      	pop	{r3, r4, r5, pc}
 800a70e:	bf00      	nop
 800a710:	2000060c 	.word	0x2000060c

0800a714 <_getpid_r>:
 800a714:	f7f8 b80e 	b.w	8002734 <_getpid>

0800a718 <_malloc_usable_size_r>:
 800a718:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a71c:	1f18      	subs	r0, r3, #4
 800a71e:	2b00      	cmp	r3, #0
 800a720:	bfbc      	itt	lt
 800a722:	580b      	ldrlt	r3, [r1, r0]
 800a724:	18c0      	addlt	r0, r0, r3
 800a726:	4770      	bx	lr

0800a728 <_init>:
 800a728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a72a:	bf00      	nop
 800a72c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a72e:	bc08      	pop	{r3}
 800a730:	469e      	mov	lr, r3
 800a732:	4770      	bx	lr

0800a734 <_fini>:
 800a734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a736:	bf00      	nop
 800a738:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a73a:	bc08      	pop	{r3}
 800a73c:	469e      	mov	lr, r3
 800a73e:	4770      	bx	lr
