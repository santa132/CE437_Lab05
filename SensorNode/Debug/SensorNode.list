
SensorNode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b488  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000490  0800b598  0800b598  0001b598  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ba28  0800ba28  000201d8  2**0
                  CONTENTS
  4 .ARM          00000000  0800ba28  0800ba28  000201d8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ba28  0800ba28  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ba28  0800ba28  0001ba28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ba2c  0800ba2c  0001ba2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  0800ba30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000354  200001d8  0800bc08  000201d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000052c  0800bc08  0002052c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020201  2**0
                  CONTENTS, READONLY
 13 .debug_info   000147a4  00000000  00000000  00020244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002ef8  00000000  00000000  000349e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001320  00000000  00000000  000378e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ef7  00000000  00000000  00038c00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000040ad  00000000  00000000  00039af7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017d96  00000000  00000000  0003dba4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000973d9  00000000  00000000  0005593a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000066dc  00000000  00000000  000ecd14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  000f33f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d8 	.word	0x200001d8
 800012c:	00000000 	.word	0x00000000
 8000130:	0800b580 	.word	0x0800b580

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001dc 	.word	0x200001dc
 800014c:	0800b580 	.word	0x0800b580

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_fmul>:
 8000b68:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000b6c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000b70:	bf1e      	ittt	ne
 8000b72:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000b76:	ea92 0f0c 	teqne	r2, ip
 8000b7a:	ea93 0f0c 	teqne	r3, ip
 8000b7e:	d06f      	beq.n	8000c60 <__aeabi_fmul+0xf8>
 8000b80:	441a      	add	r2, r3
 8000b82:	ea80 0c01 	eor.w	ip, r0, r1
 8000b86:	0240      	lsls	r0, r0, #9
 8000b88:	bf18      	it	ne
 8000b8a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000b8e:	d01e      	beq.n	8000bce <__aeabi_fmul+0x66>
 8000b90:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000b94:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000b98:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000b9c:	fba0 3101 	umull	r3, r1, r0, r1
 8000ba0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ba4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000ba8:	bf3e      	ittt	cc
 8000baa:	0049      	lslcc	r1, r1, #1
 8000bac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000bb0:	005b      	lslcc	r3, r3, #1
 8000bb2:	ea40 0001 	orr.w	r0, r0, r1
 8000bb6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000bba:	2afd      	cmp	r2, #253	; 0xfd
 8000bbc:	d81d      	bhi.n	8000bfa <__aeabi_fmul+0x92>
 8000bbe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000bc2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bc6:	bf08      	it	eq
 8000bc8:	f020 0001 	biceq.w	r0, r0, #1
 8000bcc:	4770      	bx	lr
 8000bce:	f090 0f00 	teq	r0, #0
 8000bd2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000bd6:	bf08      	it	eq
 8000bd8:	0249      	lsleq	r1, r1, #9
 8000bda:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000bde:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000be2:	3a7f      	subs	r2, #127	; 0x7f
 8000be4:	bfc2      	ittt	gt
 8000be6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000bea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000bee:	4770      	bxgt	lr
 8000bf0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	3a01      	subs	r2, #1
 8000bfa:	dc5d      	bgt.n	8000cb8 <__aeabi_fmul+0x150>
 8000bfc:	f112 0f19 	cmn.w	r2, #25
 8000c00:	bfdc      	itt	le
 8000c02:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000c06:	4770      	bxle	lr
 8000c08:	f1c2 0200 	rsb	r2, r2, #0
 8000c0c:	0041      	lsls	r1, r0, #1
 8000c0e:	fa21 f102 	lsr.w	r1, r1, r2
 8000c12:	f1c2 0220 	rsb	r2, r2, #32
 8000c16:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c1a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c1e:	f140 0000 	adc.w	r0, r0, #0
 8000c22:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000c26:	bf08      	it	eq
 8000c28:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c2c:	4770      	bx	lr
 8000c2e:	f092 0f00 	teq	r2, #0
 8000c32:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000c36:	bf02      	ittt	eq
 8000c38:	0040      	lsleq	r0, r0, #1
 8000c3a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000c3e:	3a01      	subeq	r2, #1
 8000c40:	d0f9      	beq.n	8000c36 <__aeabi_fmul+0xce>
 8000c42:	ea40 000c 	orr.w	r0, r0, ip
 8000c46:	f093 0f00 	teq	r3, #0
 8000c4a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c4e:	bf02      	ittt	eq
 8000c50:	0049      	lsleq	r1, r1, #1
 8000c52:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000c56:	3b01      	subeq	r3, #1
 8000c58:	d0f9      	beq.n	8000c4e <__aeabi_fmul+0xe6>
 8000c5a:	ea41 010c 	orr.w	r1, r1, ip
 8000c5e:	e78f      	b.n	8000b80 <__aeabi_fmul+0x18>
 8000c60:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000c64:	ea92 0f0c 	teq	r2, ip
 8000c68:	bf18      	it	ne
 8000c6a:	ea93 0f0c 	teqne	r3, ip
 8000c6e:	d00a      	beq.n	8000c86 <__aeabi_fmul+0x11e>
 8000c70:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000c74:	bf18      	it	ne
 8000c76:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000c7a:	d1d8      	bne.n	8000c2e <__aeabi_fmul+0xc6>
 8000c7c:	ea80 0001 	eor.w	r0, r0, r1
 8000c80:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000c84:	4770      	bx	lr
 8000c86:	f090 0f00 	teq	r0, #0
 8000c8a:	bf17      	itett	ne
 8000c8c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000c90:	4608      	moveq	r0, r1
 8000c92:	f091 0f00 	teqne	r1, #0
 8000c96:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000c9a:	d014      	beq.n	8000cc6 <__aeabi_fmul+0x15e>
 8000c9c:	ea92 0f0c 	teq	r2, ip
 8000ca0:	d101      	bne.n	8000ca6 <__aeabi_fmul+0x13e>
 8000ca2:	0242      	lsls	r2, r0, #9
 8000ca4:	d10f      	bne.n	8000cc6 <__aeabi_fmul+0x15e>
 8000ca6:	ea93 0f0c 	teq	r3, ip
 8000caa:	d103      	bne.n	8000cb4 <__aeabi_fmul+0x14c>
 8000cac:	024b      	lsls	r3, r1, #9
 8000cae:	bf18      	it	ne
 8000cb0:	4608      	movne	r0, r1
 8000cb2:	d108      	bne.n	8000cc6 <__aeabi_fmul+0x15e>
 8000cb4:	ea80 0001 	eor.w	r0, r0, r1
 8000cb8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cca:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000cce:	4770      	bx	lr

08000cd0 <__aeabi_fdiv>:
 8000cd0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000cd4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cd8:	bf1e      	ittt	ne
 8000cda:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cde:	ea92 0f0c 	teqne	r2, ip
 8000ce2:	ea93 0f0c 	teqne	r3, ip
 8000ce6:	d069      	beq.n	8000dbc <__aeabi_fdiv+0xec>
 8000ce8:	eba2 0203 	sub.w	r2, r2, r3
 8000cec:	ea80 0c01 	eor.w	ip, r0, r1
 8000cf0:	0249      	lsls	r1, r1, #9
 8000cf2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000cf6:	d037      	beq.n	8000d68 <__aeabi_fdiv+0x98>
 8000cf8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000cfc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d00:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d04:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d08:	428b      	cmp	r3, r1
 8000d0a:	bf38      	it	cc
 8000d0c:	005b      	lslcc	r3, r3, #1
 8000d0e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000d12:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000d16:	428b      	cmp	r3, r1
 8000d18:	bf24      	itt	cs
 8000d1a:	1a5b      	subcs	r3, r3, r1
 8000d1c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000d20:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000d24:	bf24      	itt	cs
 8000d26:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000d2a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000d2e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000d32:	bf24      	itt	cs
 8000d34:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000d38:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000d3c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000d40:	bf24      	itt	cs
 8000d42:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000d46:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000d4a:	011b      	lsls	r3, r3, #4
 8000d4c:	bf18      	it	ne
 8000d4e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000d52:	d1e0      	bne.n	8000d16 <__aeabi_fdiv+0x46>
 8000d54:	2afd      	cmp	r2, #253	; 0xfd
 8000d56:	f63f af50 	bhi.w	8000bfa <__aeabi_fmul+0x92>
 8000d5a:	428b      	cmp	r3, r1
 8000d5c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d60:	bf08      	it	eq
 8000d62:	f020 0001 	biceq.w	r0, r0, #1
 8000d66:	4770      	bx	lr
 8000d68:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d6c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d70:	327f      	adds	r2, #127	; 0x7f
 8000d72:	bfc2      	ittt	gt
 8000d74:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d78:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d7c:	4770      	bxgt	lr
 8000d7e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d82:	f04f 0300 	mov.w	r3, #0
 8000d86:	3a01      	subs	r2, #1
 8000d88:	e737      	b.n	8000bfa <__aeabi_fmul+0x92>
 8000d8a:	f092 0f00 	teq	r2, #0
 8000d8e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d92:	bf02      	ittt	eq
 8000d94:	0040      	lsleq	r0, r0, #1
 8000d96:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d9a:	3a01      	subeq	r2, #1
 8000d9c:	d0f9      	beq.n	8000d92 <__aeabi_fdiv+0xc2>
 8000d9e:	ea40 000c 	orr.w	r0, r0, ip
 8000da2:	f093 0f00 	teq	r3, #0
 8000da6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000daa:	bf02      	ittt	eq
 8000dac:	0049      	lsleq	r1, r1, #1
 8000dae:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000db2:	3b01      	subeq	r3, #1
 8000db4:	d0f9      	beq.n	8000daa <__aeabi_fdiv+0xda>
 8000db6:	ea41 010c 	orr.w	r1, r1, ip
 8000dba:	e795      	b.n	8000ce8 <__aeabi_fdiv+0x18>
 8000dbc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000dc0:	ea92 0f0c 	teq	r2, ip
 8000dc4:	d108      	bne.n	8000dd8 <__aeabi_fdiv+0x108>
 8000dc6:	0242      	lsls	r2, r0, #9
 8000dc8:	f47f af7d 	bne.w	8000cc6 <__aeabi_fmul+0x15e>
 8000dcc:	ea93 0f0c 	teq	r3, ip
 8000dd0:	f47f af70 	bne.w	8000cb4 <__aeabi_fmul+0x14c>
 8000dd4:	4608      	mov	r0, r1
 8000dd6:	e776      	b.n	8000cc6 <__aeabi_fmul+0x15e>
 8000dd8:	ea93 0f0c 	teq	r3, ip
 8000ddc:	d104      	bne.n	8000de8 <__aeabi_fdiv+0x118>
 8000dde:	024b      	lsls	r3, r1, #9
 8000de0:	f43f af4c 	beq.w	8000c7c <__aeabi_fmul+0x114>
 8000de4:	4608      	mov	r0, r1
 8000de6:	e76e      	b.n	8000cc6 <__aeabi_fmul+0x15e>
 8000de8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000dec:	bf18      	it	ne
 8000dee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000df2:	d1ca      	bne.n	8000d8a <__aeabi_fdiv+0xba>
 8000df4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000df8:	f47f af5c 	bne.w	8000cb4 <__aeabi_fmul+0x14c>
 8000dfc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000e00:	f47f af3c 	bne.w	8000c7c <__aeabi_fmul+0x114>
 8000e04:	e75f      	b.n	8000cc6 <__aeabi_fmul+0x15e>
 8000e06:	bf00      	nop

08000e08 <__gesf2>:
 8000e08:	f04f 3cff 	mov.w	ip, #4294967295
 8000e0c:	e006      	b.n	8000e1c <__cmpsf2+0x4>
 8000e0e:	bf00      	nop

08000e10 <__lesf2>:
 8000e10:	f04f 0c01 	mov.w	ip, #1
 8000e14:	e002      	b.n	8000e1c <__cmpsf2+0x4>
 8000e16:	bf00      	nop

08000e18 <__cmpsf2>:
 8000e18:	f04f 0c01 	mov.w	ip, #1
 8000e1c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000e20:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e24:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000e28:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e2c:	bf18      	it	ne
 8000e2e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000e32:	d011      	beq.n	8000e58 <__cmpsf2+0x40>
 8000e34:	b001      	add	sp, #4
 8000e36:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000e3a:	bf18      	it	ne
 8000e3c:	ea90 0f01 	teqne	r0, r1
 8000e40:	bf58      	it	pl
 8000e42:	ebb2 0003 	subspl.w	r0, r2, r3
 8000e46:	bf88      	it	hi
 8000e48:	17c8      	asrhi	r0, r1, #31
 8000e4a:	bf38      	it	cc
 8000e4c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000e50:	bf18      	it	ne
 8000e52:	f040 0001 	orrne.w	r0, r0, #1
 8000e56:	4770      	bx	lr
 8000e58:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e5c:	d102      	bne.n	8000e64 <__cmpsf2+0x4c>
 8000e5e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000e62:	d105      	bne.n	8000e70 <__cmpsf2+0x58>
 8000e64:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000e68:	d1e4      	bne.n	8000e34 <__cmpsf2+0x1c>
 8000e6a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000e6e:	d0e1      	beq.n	8000e34 <__cmpsf2+0x1c>
 8000e70:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop

08000e78 <__aeabi_cfrcmple>:
 8000e78:	4684      	mov	ip, r0
 8000e7a:	4608      	mov	r0, r1
 8000e7c:	4661      	mov	r1, ip
 8000e7e:	e7ff      	b.n	8000e80 <__aeabi_cfcmpeq>

08000e80 <__aeabi_cfcmpeq>:
 8000e80:	b50f      	push	{r0, r1, r2, r3, lr}
 8000e82:	f7ff ffc9 	bl	8000e18 <__cmpsf2>
 8000e86:	2800      	cmp	r0, #0
 8000e88:	bf48      	it	mi
 8000e8a:	f110 0f00 	cmnmi.w	r0, #0
 8000e8e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000e90 <__aeabi_fcmpeq>:
 8000e90:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e94:	f7ff fff4 	bl	8000e80 <__aeabi_cfcmpeq>
 8000e98:	bf0c      	ite	eq
 8000e9a:	2001      	moveq	r0, #1
 8000e9c:	2000      	movne	r0, #0
 8000e9e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ea2:	bf00      	nop

08000ea4 <__aeabi_fcmplt>:
 8000ea4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ea8:	f7ff ffea 	bl	8000e80 <__aeabi_cfcmpeq>
 8000eac:	bf34      	ite	cc
 8000eae:	2001      	movcc	r0, #1
 8000eb0:	2000      	movcs	r0, #0
 8000eb2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000eb6:	bf00      	nop

08000eb8 <__aeabi_fcmple>:
 8000eb8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ebc:	f7ff ffe0 	bl	8000e80 <__aeabi_cfcmpeq>
 8000ec0:	bf94      	ite	ls
 8000ec2:	2001      	movls	r0, #1
 8000ec4:	2000      	movhi	r0, #0
 8000ec6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000eca:	bf00      	nop

08000ecc <__aeabi_fcmpge>:
 8000ecc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ed0:	f7ff ffd2 	bl	8000e78 <__aeabi_cfrcmple>
 8000ed4:	bf94      	ite	ls
 8000ed6:	2001      	movls	r0, #1
 8000ed8:	2000      	movhi	r0, #0
 8000eda:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ede:	bf00      	nop

08000ee0 <__aeabi_fcmpgt>:
 8000ee0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ee4:	f7ff ffc8 	bl	8000e78 <__aeabi_cfrcmple>
 8000ee8:	bf34      	ite	cc
 8000eea:	2001      	movcc	r0, #1
 8000eec:	2000      	movcs	r0, #0
 8000eee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ef2:	bf00      	nop

08000ef4 <__aeabi_f2uiz>:
 8000ef4:	0042      	lsls	r2, r0, #1
 8000ef6:	d20e      	bcs.n	8000f16 <__aeabi_f2uiz+0x22>
 8000ef8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000efc:	d30b      	bcc.n	8000f16 <__aeabi_f2uiz+0x22>
 8000efe:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000f02:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f06:	d409      	bmi.n	8000f1c <__aeabi_f2uiz+0x28>
 8000f08:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f0c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f10:	fa23 f002 	lsr.w	r0, r3, r2
 8000f14:	4770      	bx	lr
 8000f16:	f04f 0000 	mov.w	r0, #0
 8000f1a:	4770      	bx	lr
 8000f1c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000f20:	d101      	bne.n	8000f26 <__aeabi_f2uiz+0x32>
 8000f22:	0242      	lsls	r2, r0, #9
 8000f24:	d102      	bne.n	8000f2c <__aeabi_f2uiz+0x38>
 8000f26:	f04f 30ff 	mov.w	r0, #4294967295
 8000f2a:	4770      	bx	lr
 8000f2c:	f04f 0000 	mov.w	r0, #0
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop

08000f34 <__aeabi_d2lz>:
 8000f34:	b538      	push	{r3, r4, r5, lr}
 8000f36:	4605      	mov	r5, r0
 8000f38:	460c      	mov	r4, r1
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	4628      	mov	r0, r5
 8000f40:	4621      	mov	r1, r4
 8000f42:	f7ff fd3b 	bl	80009bc <__aeabi_dcmplt>
 8000f46:	b928      	cbnz	r0, 8000f54 <__aeabi_d2lz+0x20>
 8000f48:	4628      	mov	r0, r5
 8000f4a:	4621      	mov	r1, r4
 8000f4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000f50:	f000 b80a 	b.w	8000f68 <__aeabi_d2ulz>
 8000f54:	4628      	mov	r0, r5
 8000f56:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000f5a:	f000 f805 	bl	8000f68 <__aeabi_d2ulz>
 8000f5e:	4240      	negs	r0, r0
 8000f60:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f64:	bd38      	pop	{r3, r4, r5, pc}
 8000f66:	bf00      	nop

08000f68 <__aeabi_d2ulz>:
 8000f68:	b5d0      	push	{r4, r6, r7, lr}
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	4b0b      	ldr	r3, [pc, #44]	; (8000f9c <__aeabi_d2ulz+0x34>)
 8000f6e:	4606      	mov	r6, r0
 8000f70:	460f      	mov	r7, r1
 8000f72:	f7ff fab1 	bl	80004d8 <__aeabi_dmul>
 8000f76:	f7ff fd87 	bl	8000a88 <__aeabi_d2uiz>
 8000f7a:	4604      	mov	r4, r0
 8000f7c:	f7ff fa32 	bl	80003e4 <__aeabi_ui2d>
 8000f80:	2200      	movs	r2, #0
 8000f82:	4b07      	ldr	r3, [pc, #28]	; (8000fa0 <__aeabi_d2ulz+0x38>)
 8000f84:	f7ff faa8 	bl	80004d8 <__aeabi_dmul>
 8000f88:	4602      	mov	r2, r0
 8000f8a:	460b      	mov	r3, r1
 8000f8c:	4630      	mov	r0, r6
 8000f8e:	4639      	mov	r1, r7
 8000f90:	f7ff f8ea 	bl	8000168 <__aeabi_dsub>
 8000f94:	f7ff fd78 	bl	8000a88 <__aeabi_d2uiz>
 8000f98:	4621      	mov	r1, r4
 8000f9a:	bdd0      	pop	{r4, r6, r7, pc}
 8000f9c:	3df00000 	.word	0x3df00000
 8000fa0:	41f00000 	.word	0x41f00000

08000fa4 <writeReg>:

//---------------------------------------------------------
// I2C communication Functions
//---------------------------------------------------------
// Write an 8-bit register
void writeReg(uint8_t reg, uint8_t value, VL53L0X_t *vl53l0x) {
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b088      	sub	sp, #32
 8000fa8:	af04      	add	r7, sp, #16
 8000faa:	4603      	mov	r3, r0
 8000fac:	603a      	str	r2, [r7, #0]
 8000fae:	71fb      	strb	r3, [r7, #7]
 8000fb0:	460b      	mov	r3, r1
 8000fb2:	71bb      	strb	r3, [r7, #6]

  uint8_t msg = value; // Assign the value to the buffer.
 8000fb4:	79bb      	ldrb	r3, [r7, #6]
 8000fb6:	73fb      	strb	r3, [r7, #15]
  i2cStat = HAL_I2C_Mem_Write(vl53l0x->vl53l0x_i2c, (vl53l0x->Address | I2C_WRITE), reg, 1, &msg, 1, I2C_TIMEOUT);
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	6818      	ldr	r0, [r3, #0]
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	791b      	ldrb	r3, [r3, #4]
 8000fc0:	b299      	uxth	r1, r3
 8000fc2:	79fb      	ldrb	r3, [r7, #7]
 8000fc4:	b29a      	uxth	r2, r3
 8000fc6:	2364      	movs	r3, #100	; 0x64
 8000fc8:	9302      	str	r3, [sp, #8]
 8000fca:	2301      	movs	r3, #1
 8000fcc:	9301      	str	r3, [sp, #4]
 8000fce:	f107 030f 	add.w	r3, r7, #15
 8000fd2:	9300      	str	r3, [sp, #0]
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	f003 fd1b 	bl	8004a10 <HAL_I2C_Mem_Write>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	461a      	mov	r2, r3
 8000fde:	4b03      	ldr	r3, [pc, #12]	; (8000fec <writeReg+0x48>)
 8000fe0:	701a      	strb	r2, [r3, #0]
}
 8000fe2:	bf00      	nop
 8000fe4:	3710      	adds	r7, #16
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	20000204 	.word	0x20000204

08000ff0 <writeReg16Bit>:

// Write a 16-bit register
void writeReg16Bit(uint8_t reg, uint16_t value, VL53L0X_t *vl53l0x){
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b088      	sub	sp, #32
 8000ff4:	af04      	add	r7, sp, #16
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	603a      	str	r2, [r7, #0]
 8000ffa:	71fb      	strb	r3, [r7, #7]
 8000ffc:	460b      	mov	r3, r1
 8000ffe:	80bb      	strh	r3, [r7, #4]

  uint8_t msg[2];
  msg[0] = (value >> 8) & 0xff;
 8001000:	88bb      	ldrh	r3, [r7, #4]
 8001002:	0a1b      	lsrs	r3, r3, #8
 8001004:	b29b      	uxth	r3, r3
 8001006:	b2db      	uxtb	r3, r3
 8001008:	733b      	strb	r3, [r7, #12]
  msg[1] = value & 0xff;
 800100a:	88bb      	ldrh	r3, [r7, #4]
 800100c:	b2db      	uxtb	r3, r3
 800100e:	737b      	strb	r3, [r7, #13]
  i2cStat = HAL_I2C_Mem_Write(vl53l0x->vl53l0x_i2c, (vl53l0x->Address | I2C_WRITE), reg, 1, (uint8_t*)msg, 2, I2C_TIMEOUT);
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	6818      	ldr	r0, [r3, #0]
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	791b      	ldrb	r3, [r3, #4]
 8001018:	b299      	uxth	r1, r3
 800101a:	79fb      	ldrb	r3, [r7, #7]
 800101c:	b29a      	uxth	r2, r3
 800101e:	2364      	movs	r3, #100	; 0x64
 8001020:	9302      	str	r3, [sp, #8]
 8001022:	2302      	movs	r3, #2
 8001024:	9301      	str	r3, [sp, #4]
 8001026:	f107 030c 	add.w	r3, r7, #12
 800102a:	9300      	str	r3, [sp, #0]
 800102c:	2301      	movs	r3, #1
 800102e:	f003 fcef 	bl	8004a10 <HAL_I2C_Mem_Write>
 8001032:	4603      	mov	r3, r0
 8001034:	461a      	mov	r2, r3
 8001036:	4b03      	ldr	r3, [pc, #12]	; (8001044 <writeReg16Bit+0x54>)
 8001038:	701a      	strb	r2, [r3, #0]
}
 800103a:	bf00      	nop
 800103c:	3710      	adds	r7, #16
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	20000204 	.word	0x20000204

08001048 <readReg>:
	msg[3] = value & 0xff;
  i2cStat = HAL_I2C_Mem_Write(vl53l0x->vl53l0x_i2c, (vl53l0x->Address | I2C_WRITE), reg, 1, (uint8_t*)msg, 4, I2C_TIMEOUT);
}

// Read an 8-bit register
uint8_t readReg(uint8_t reg, VL53L0X_t *vl53l0x) {
 8001048:	b580      	push	{r7, lr}
 800104a:	b088      	sub	sp, #32
 800104c:	af04      	add	r7, sp, #16
 800104e:	4603      	mov	r3, r0
 8001050:	6039      	str	r1, [r7, #0]
 8001052:	71fb      	strb	r3, [r7, #7]
  uint8_t value;

  i2cStat = HAL_I2C_Mem_Read(vl53l0x->vl53l0x_i2c, (vl53l0x->Address | I2C_READ), reg, 1, msgBuffer, 1, I2C_TIMEOUT);
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	6818      	ldr	r0, [r3, #0]
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	791b      	ldrb	r3, [r3, #4]
 800105c:	f043 0301 	orr.w	r3, r3, #1
 8001060:	b2db      	uxtb	r3, r3
 8001062:	b299      	uxth	r1, r3
 8001064:	79fb      	ldrb	r3, [r7, #7]
 8001066:	b29a      	uxth	r2, r3
 8001068:	2364      	movs	r3, #100	; 0x64
 800106a:	9302      	str	r3, [sp, #8]
 800106c:	2301      	movs	r3, #1
 800106e:	9301      	str	r3, [sp, #4]
 8001070:	4b08      	ldr	r3, [pc, #32]	; (8001094 <readReg+0x4c>)
 8001072:	9300      	str	r3, [sp, #0]
 8001074:	2301      	movs	r3, #1
 8001076:	f003 fdc5 	bl	8004c04 <HAL_I2C_Mem_Read>
 800107a:	4603      	mov	r3, r0
 800107c:	461a      	mov	r2, r3
 800107e:	4b06      	ldr	r3, [pc, #24]	; (8001098 <readReg+0x50>)
 8001080:	701a      	strb	r2, [r3, #0]
  value = msgBuffer[0];
 8001082:	4b04      	ldr	r3, [pc, #16]	; (8001094 <readReg+0x4c>)
 8001084:	781b      	ldrb	r3, [r3, #0]
 8001086:	73fb      	strb	r3, [r7, #15]

  return value;
 8001088:	7bfb      	ldrb	r3, [r7, #15]
}
 800108a:	4618      	mov	r0, r3
 800108c:	3710      	adds	r7, #16
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	20000200 	.word	0x20000200
 8001098:	20000204 	.word	0x20000204

0800109c <readReg16Bit>:

// Read a 16-bit register
uint16_t readReg16Bit(uint8_t reg, VL53L0X_t *vl53l0x) {
 800109c:	b580      	push	{r7, lr}
 800109e:	b088      	sub	sp, #32
 80010a0:	af04      	add	r7, sp, #16
 80010a2:	4603      	mov	r3, r0
 80010a4:	6039      	str	r1, [r7, #0]
 80010a6:	71fb      	strb	r3, [r7, #7]
  uint16_t value;
  uint8_t msg[2];
  i2cStat = HAL_I2C_Mem_Read(vl53l0x->vl53l0x_i2c, (vl53l0x->Address | I2C_READ), reg, 1, msg, 2, I2C_TIMEOUT);
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	6818      	ldr	r0, [r3, #0]
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	791b      	ldrb	r3, [r3, #4]
 80010b0:	f043 0301 	orr.w	r3, r3, #1
 80010b4:	b2db      	uxtb	r3, r3
 80010b6:	b299      	uxth	r1, r3
 80010b8:	79fb      	ldrb	r3, [r7, #7]
 80010ba:	b29a      	uxth	r2, r3
 80010bc:	2364      	movs	r3, #100	; 0x64
 80010be:	9302      	str	r3, [sp, #8]
 80010c0:	2302      	movs	r3, #2
 80010c2:	9301      	str	r3, [sp, #4]
 80010c4:	f107 030c 	add.w	r3, r7, #12
 80010c8:	9300      	str	r3, [sp, #0]
 80010ca:	2301      	movs	r3, #1
 80010cc:	f003 fd9a 	bl	8004c04 <HAL_I2C_Mem_Read>
 80010d0:	4603      	mov	r3, r0
 80010d2:	461a      	mov	r2, r3
 80010d4:	4b07      	ldr	r3, [pc, #28]	; (80010f4 <readReg16Bit+0x58>)
 80010d6:	701a      	strb	r2, [r3, #0]
  value = (uint16_t)((msg[0] << 8) | msg[1]);
 80010d8:	7b3b      	ldrb	r3, [r7, #12]
 80010da:	021b      	lsls	r3, r3, #8
 80010dc:	b21a      	sxth	r2, r3
 80010de:	7b7b      	ldrb	r3, [r7, #13]
 80010e0:	b21b      	sxth	r3, r3
 80010e2:	4313      	orrs	r3, r2
 80010e4:	b21b      	sxth	r3, r3
 80010e6:	81fb      	strh	r3, [r7, #14]

  return value;
 80010e8:	89fb      	ldrh	r3, [r7, #14]
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	3710      	adds	r7, #16
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	20000204 	.word	0x20000204

080010f8 <writeMulti>:
  return value;
}

// Write an arbitrary number of bytes from the given array to the sensor,
// starting at the given register
void writeMulti(uint8_t reg, uint8_t const *src, uint8_t count, VL53L0X_t *vl53l0x){
 80010f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80010fc:	b08d      	sub	sp, #52	; 0x34
 80010fe:	af04      	add	r7, sp, #16
 8001100:	60b9      	str	r1, [r7, #8]
 8001102:	607b      	str	r3, [r7, #4]
 8001104:	4603      	mov	r3, r0
 8001106:	73fb      	strb	r3, [r7, #15]
 8001108:	4613      	mov	r3, r2
 800110a:	73bb      	strb	r3, [r7, #14]
 800110c:	466b      	mov	r3, sp
 800110e:	461e      	mov	r6, r3
	uint8_t msg[count];
 8001110:	7bb9      	ldrb	r1, [r7, #14]
 8001112:	460b      	mov	r3, r1
 8001114:	3b01      	subs	r3, #1
 8001116:	61bb      	str	r3, [r7, #24]
 8001118:	b2cb      	uxtb	r3, r1
 800111a:	2200      	movs	r2, #0
 800111c:	4698      	mov	r8, r3
 800111e:	4691      	mov	r9, r2
 8001120:	f04f 0200 	mov.w	r2, #0
 8001124:	f04f 0300 	mov.w	r3, #0
 8001128:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800112c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001130:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001134:	b2cb      	uxtb	r3, r1
 8001136:	2200      	movs	r2, #0
 8001138:	461c      	mov	r4, r3
 800113a:	4615      	mov	r5, r2
 800113c:	f04f 0200 	mov.w	r2, #0
 8001140:	f04f 0300 	mov.w	r3, #0
 8001144:	00eb      	lsls	r3, r5, #3
 8001146:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800114a:	00e2      	lsls	r2, r4, #3
 800114c:	460b      	mov	r3, r1
 800114e:	3307      	adds	r3, #7
 8001150:	08db      	lsrs	r3, r3, #3
 8001152:	00db      	lsls	r3, r3, #3
 8001154:	ebad 0d03 	sub.w	sp, sp, r3
 8001158:	ab04      	add	r3, sp, #16
 800115a:	3300      	adds	r3, #0
 800115c:	617b      	str	r3, [r7, #20]
	for (uint8_t i = 0; i < count; i++)
 800115e:	2300      	movs	r3, #0
 8001160:	77fb      	strb	r3, [r7, #31]
 8001162:	e009      	b.n	8001178 <writeMulti+0x80>
	{
		msg[i] = src[i];
 8001164:	7ffb      	ldrb	r3, [r7, #31]
 8001166:	68ba      	ldr	r2, [r7, #8]
 8001168:	441a      	add	r2, r3
 800116a:	7ffb      	ldrb	r3, [r7, #31]
 800116c:	7811      	ldrb	r1, [r2, #0]
 800116e:	697a      	ldr	r2, [r7, #20]
 8001170:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < count; i++)
 8001172:	7ffb      	ldrb	r3, [r7, #31]
 8001174:	3301      	adds	r3, #1
 8001176:	77fb      	strb	r3, [r7, #31]
 8001178:	7ffa      	ldrb	r2, [r7, #31]
 800117a:	7bbb      	ldrb	r3, [r7, #14]
 800117c:	429a      	cmp	r2, r3
 800117e:	d3f1      	bcc.n	8001164 <writeMulti+0x6c>
	}
  i2cStat = HAL_I2C_Mem_Write(vl53l0x->vl53l0x_i2c, vl53l0x->Address | I2C_WRITE, reg, 1, (uint8_t*)msg, count, I2C_TIMEOUT);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	6818      	ldr	r0, [r3, #0]
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	791b      	ldrb	r3, [r3, #4]
 8001188:	b299      	uxth	r1, r3
 800118a:	7bfb      	ldrb	r3, [r7, #15]
 800118c:	b29a      	uxth	r2, r3
 800118e:	7bbb      	ldrb	r3, [r7, #14]
 8001190:	b29b      	uxth	r3, r3
 8001192:	2464      	movs	r4, #100	; 0x64
 8001194:	9402      	str	r4, [sp, #8]
 8001196:	9301      	str	r3, [sp, #4]
 8001198:	697b      	ldr	r3, [r7, #20]
 800119a:	9300      	str	r3, [sp, #0]
 800119c:	2301      	movs	r3, #1
 800119e:	f003 fc37 	bl	8004a10 <HAL_I2C_Mem_Write>
 80011a2:	4603      	mov	r3, r0
 80011a4:	461a      	mov	r2, r3
 80011a6:	4b04      	ldr	r3, [pc, #16]	; (80011b8 <writeMulti+0xc0>)
 80011a8:	701a      	strb	r2, [r3, #0]
 80011aa:	46b5      	mov	sp, r6
}
 80011ac:	bf00      	nop
 80011ae:	3724      	adds	r7, #36	; 0x24
 80011b0:	46bd      	mov	sp, r7
 80011b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80011b6:	bf00      	nop
 80011b8:	20000204 	.word	0x20000204

080011bc <readMulti>:

// Read an arbitrary number of bytes from the sensor, starting at the given
// register, into the given array
void readMulti(uint8_t reg, uint8_t * dst, uint8_t count, VL53L0X_t *vl53l0x) {
 80011bc:	b590      	push	{r4, r7, lr}
 80011be:	b089      	sub	sp, #36	; 0x24
 80011c0:	af04      	add	r7, sp, #16
 80011c2:	60b9      	str	r1, [r7, #8]
 80011c4:	607b      	str	r3, [r7, #4]
 80011c6:	4603      	mov	r3, r0
 80011c8:	73fb      	strb	r3, [r7, #15]
 80011ca:	4613      	mov	r3, r2
 80011cc:	73bb      	strb	r3, [r7, #14]
	i2cStat = HAL_I2C_Mem_Read(vl53l0x->vl53l0x_i2c, vl53l0x->Address | I2C_READ, reg, 1, dst, count, I2C_TIMEOUT);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	6818      	ldr	r0, [r3, #0]
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	791b      	ldrb	r3, [r3, #4]
 80011d6:	f043 0301 	orr.w	r3, r3, #1
 80011da:	b2db      	uxtb	r3, r3
 80011dc:	b299      	uxth	r1, r3
 80011de:	7bfb      	ldrb	r3, [r7, #15]
 80011e0:	b29a      	uxth	r2, r3
 80011e2:	7bbb      	ldrb	r3, [r7, #14]
 80011e4:	b29b      	uxth	r3, r3
 80011e6:	2464      	movs	r4, #100	; 0x64
 80011e8:	9402      	str	r4, [sp, #8]
 80011ea:	9301      	str	r3, [sp, #4]
 80011ec:	68bb      	ldr	r3, [r7, #8]
 80011ee:	9300      	str	r3, [sp, #0]
 80011f0:	2301      	movs	r3, #1
 80011f2:	f003 fd07 	bl	8004c04 <HAL_I2C_Mem_Read>
 80011f6:	4603      	mov	r3, r0
 80011f8:	461a      	mov	r2, r3
 80011fa:	4b03      	ldr	r3, [pc, #12]	; (8001208 <readMulti+0x4c>)
 80011fc:	701a      	strb	r2, [r3, #0]
}
 80011fe:	bf00      	nop
 8001200:	3714      	adds	r7, #20
 8001202:	46bd      	mov	sp, r7
 8001204:	bd90      	pop	{r4, r7, pc}
 8001206:	bf00      	nop
 8001208:	20000204 	.word	0x20000204

0800120c <setAddress>:


// Public Methods //////////////////////////////////////////////////////////////

bool setAddress(uint8_t new_addr, VL53L0X_t *vl53l0x) {
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0
 8001212:	4603      	mov	r3, r0
 8001214:	6039      	str	r1, [r7, #0]
 8001216:	71fb      	strb	r3, [r7, #7]
    writeReg(I2C_SLAVE_DEVICE_ADDRESS, (new_addr >> 1) & 0x7F, vl53l0x);
 8001218:	79fb      	ldrb	r3, [r7, #7]
 800121a:	085b      	lsrs	r3, r3, #1
 800121c:	b2db      	uxtb	r3, r3
 800121e:	683a      	ldr	r2, [r7, #0]
 8001220:	4619      	mov	r1, r3
 8001222:	208a      	movs	r0, #138	; 0x8a
 8001224:	f7ff febe 	bl	8000fa4 <writeReg>
    if (i2cStat != HAL_OK)
 8001228:	4b08      	ldr	r3, [pc, #32]	; (800124c <setAddress+0x40>)
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d001      	beq.n	8001234 <setAddress+0x28>
    {
      return false;
 8001230:	2300      	movs	r3, #0
 8001232:	e006      	b.n	8001242 <setAddress+0x36>
    }
    vl53l0x->Address = new_addr;
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	79fa      	ldrb	r2, [r7, #7]
 8001238:	711a      	strb	r2, [r3, #4]
    g_i2cAddr = new_addr;
 800123a:	4a05      	ldr	r2, [pc, #20]	; (8001250 <setAddress+0x44>)
 800123c:	79fb      	ldrb	r3, [r7, #7]
 800123e:	7013      	strb	r3, [r2, #0]
    return true;
 8001240:	2301      	movs	r3, #1
}
 8001242:	4618      	mov	r0, r3
 8001244:	3708      	adds	r7, #8
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	20000204 	.word	0x20000204
 8001250:	20000000 	.word	0x20000000

08001254 <initVL53L0X>:
// (VL53L0X_PerformRefSpadManagement()), since the API user manual says that it
// is performed by ST on the bare modules; it seems like that should work well
// enough unless a cover glass is added.
// If io_2v8 (optional) is true or not given, the sensor is configured for 2V8
// mode.
uint8_t initVL53L0X(uint8_t io_2v8, VL53L0X_t *vl53l0x, I2C_HandleTypeDef *handler){
 8001254:	b580      	push	{r7, lr}
 8001256:	b088      	sub	sp, #32
 8001258:	af00      	add	r7, sp, #0
 800125a:	4603      	mov	r3, r0
 800125c:	60b9      	str	r1, [r7, #8]
 800125e:	607a      	str	r2, [r7, #4]
 8001260:	73fb      	strb	r3, [r7, #15]
  // VL53L0X_DataInit() begin

  //Handler
	vl53l0x->vl53l0x_i2c = handler;
 8001262:	68bb      	ldr	r3, [r7, #8]
 8001264:	687a      	ldr	r2, [r7, #4]
 8001266:	601a      	str	r2, [r3, #0]

	if (!setAddress(vl53l0x->Address, vl53l0x))
 8001268:	68bb      	ldr	r3, [r7, #8]
 800126a:	791b      	ldrb	r3, [r3, #4]
 800126c:	68b9      	ldr	r1, [r7, #8]
 800126e:	4618      	mov	r0, r3
 8001270:	f7ff ffcc 	bl	800120c <setAddress>
 8001274:	4603      	mov	r3, r0
 8001276:	f083 0301 	eor.w	r3, r3, #1
 800127a:	b2db      	uxtb	r3, r3
 800127c:	2b00      	cmp	r3, #0
 800127e:	d001      	beq.n	8001284 <initVL53L0X+0x30>
	{
		return false;
 8001280:	2300      	movs	r3, #0
 8001282:	e2ca      	b.n	800181a <initVL53L0X+0x5c6>
	}

  // Reset the message buffer.
  msgBuffer[0] = 0;
 8001284:	4b62      	ldr	r3, [pc, #392]	; (8001410 <initVL53L0X+0x1bc>)
 8001286:	2200      	movs	r2, #0
 8001288:	701a      	strb	r2, [r3, #0]
  msgBuffer[1] = 0;
 800128a:	4b61      	ldr	r3, [pc, #388]	; (8001410 <initVL53L0X+0x1bc>)
 800128c:	2200      	movs	r2, #0
 800128e:	705a      	strb	r2, [r3, #1]
  msgBuffer[2] = 0;
 8001290:	4b5f      	ldr	r3, [pc, #380]	; (8001410 <initVL53L0X+0x1bc>)
 8001292:	2200      	movs	r2, #0
 8001294:	709a      	strb	r2, [r3, #2]
  msgBuffer[3] = 0;
 8001296:	4b5e      	ldr	r3, [pc, #376]	; (8001410 <initVL53L0X+0x1bc>)
 8001298:	2200      	movs	r2, #0
 800129a:	70da      	strb	r2, [r3, #3]

	//check model ID reg
	if (readReg(IDENTIFICATION_MODEL_ID, vl53l0x) != 0xEE)
 800129c:	68b9      	ldr	r1, [r7, #8]
 800129e:	20c0      	movs	r0, #192	; 0xc0
 80012a0:	f7ff fed2 	bl	8001048 <readReg>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2bee      	cmp	r3, #238	; 0xee
 80012a8:	d001      	beq.n	80012ae <initVL53L0X+0x5a>
	{
		return false;
 80012aa:	2300      	movs	r3, #0
 80012ac:	e2b5      	b.n	800181a <initVL53L0X+0x5c6>
	}
  // sensor uses 1V8 mode for I/O by default; switch to 2V8 mode if necessary
  if (io_2v8)
 80012ae:	7bfb      	ldrb	r3, [r7, #15]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d00c      	beq.n	80012ce <initVL53L0X+0x7a>
  {
    writeReg(VHV_CONFIG_PAD_SCL_SDA__EXTSUP_HV,
      readReg(VHV_CONFIG_PAD_SCL_SDA__EXTSUP_HV, vl53l0x) | 0x01, vl53l0x); // set bit 0
 80012b4:	68b9      	ldr	r1, [r7, #8]
 80012b6:	2089      	movs	r0, #137	; 0x89
 80012b8:	f7ff fec6 	bl	8001048 <readReg>
 80012bc:	4603      	mov	r3, r0
    writeReg(VHV_CONFIG_PAD_SCL_SDA__EXTSUP_HV,
 80012be:	f043 0301 	orr.w	r3, r3, #1
 80012c2:	b2db      	uxtb	r3, r3
 80012c4:	68ba      	ldr	r2, [r7, #8]
 80012c6:	4619      	mov	r1, r3
 80012c8:	2089      	movs	r0, #137	; 0x89
 80012ca:	f7ff fe6b 	bl	8000fa4 <writeReg>
  }

  // "Set I2C standard mode"
  writeReg(0x88, 0x00, vl53l0x);
 80012ce:	68ba      	ldr	r2, [r7, #8]
 80012d0:	2100      	movs	r1, #0
 80012d2:	2088      	movs	r0, #136	; 0x88
 80012d4:	f7ff fe66 	bl	8000fa4 <writeReg>

  writeReg(0x80, 0x01, vl53l0x);
 80012d8:	68ba      	ldr	r2, [r7, #8]
 80012da:	2101      	movs	r1, #1
 80012dc:	2080      	movs	r0, #128	; 0x80
 80012de:	f7ff fe61 	bl	8000fa4 <writeReg>
  writeReg(0xFF, 0x01, vl53l0x);
 80012e2:	68ba      	ldr	r2, [r7, #8]
 80012e4:	2101      	movs	r1, #1
 80012e6:	20ff      	movs	r0, #255	; 0xff
 80012e8:	f7ff fe5c 	bl	8000fa4 <writeReg>
  writeReg(0x00, 0x00, vl53l0x);
 80012ec:	68ba      	ldr	r2, [r7, #8]
 80012ee:	2100      	movs	r1, #0
 80012f0:	2000      	movs	r0, #0
 80012f2:	f7ff fe57 	bl	8000fa4 <writeReg>
  g_stopVariable = readReg(0x91, vl53l0x);
 80012f6:	68b9      	ldr	r1, [r7, #8]
 80012f8:	2091      	movs	r0, #145	; 0x91
 80012fa:	f7ff fea5 	bl	8001048 <readReg>
 80012fe:	4603      	mov	r3, r0
 8001300:	461a      	mov	r2, r3
 8001302:	4b44      	ldr	r3, [pc, #272]	; (8001414 <initVL53L0X+0x1c0>)
 8001304:	701a      	strb	r2, [r3, #0]
  writeReg(0x00, 0x01, vl53l0x);
 8001306:	68ba      	ldr	r2, [r7, #8]
 8001308:	2101      	movs	r1, #1
 800130a:	2000      	movs	r0, #0
 800130c:	f7ff fe4a 	bl	8000fa4 <writeReg>
  writeReg(0xFF, 0x00, vl53l0x);
 8001310:	68ba      	ldr	r2, [r7, #8]
 8001312:	2100      	movs	r1, #0
 8001314:	20ff      	movs	r0, #255	; 0xff
 8001316:	f7ff fe45 	bl	8000fa4 <writeReg>
  writeReg(0x80, 0x00, vl53l0x);
 800131a:	68ba      	ldr	r2, [r7, #8]
 800131c:	2100      	movs	r1, #0
 800131e:	2080      	movs	r0, #128	; 0x80
 8001320:	f7ff fe40 	bl	8000fa4 <writeReg>

  // disable SIGNAL_RATE_MSRC (bit 1) and SIGNAL_RATE_PRE_RANGE (bit 4) limit checks
  writeReg(MSRC_CONFIG_CONTROL, readReg(MSRC_CONFIG_CONTROL, vl53l0x) | 0x12, vl53l0x);
 8001324:	68b9      	ldr	r1, [r7, #8]
 8001326:	2060      	movs	r0, #96	; 0x60
 8001328:	f7ff fe8e 	bl	8001048 <readReg>
 800132c:	4603      	mov	r3, r0
 800132e:	f043 0312 	orr.w	r3, r3, #18
 8001332:	b2db      	uxtb	r3, r3
 8001334:	68ba      	ldr	r2, [r7, #8]
 8001336:	4619      	mov	r1, r3
 8001338:	2060      	movs	r0, #96	; 0x60
 800133a:	f7ff fe33 	bl	8000fa4 <writeReg>

  // set final range signal rate limit to 0.25 MCPS (million counts per second)
  setSignalRateLimit(0.25, vl53l0x);
 800133e:	68b9      	ldr	r1, [r7, #8]
 8001340:	f04f 507a 	mov.w	r0, #1048576000	; 0x3e800000
 8001344:	f000 fa70 	bl	8001828 <setSignalRateLimit>

  writeReg(SYSTEM_SEQUENCE_CONFIG, 0xFF, vl53l0x);
 8001348:	68ba      	ldr	r2, [r7, #8]
 800134a:	21ff      	movs	r1, #255	; 0xff
 800134c:	2001      	movs	r0, #1
 800134e:	f7ff fe29 	bl	8000fa4 <writeReg>

  // VL53L0X_StaticInit() begin

  uint8_t spad_count;
  bool spad_type_is_aperture;
  if (!getSpadInfo(&spad_count, &spad_type_is_aperture, vl53l0x)) { return false; }
 8001352:	f107 011b 	add.w	r1, r7, #27
 8001356:	f107 031c 	add.w	r3, r7, #28
 800135a:	68ba      	ldr	r2, [r7, #8]
 800135c:	4618      	mov	r0, r3
 800135e:	f000 fc83 	bl	8001c68 <getSpadInfo>
 8001362:	4603      	mov	r3, r0
 8001364:	f083 0301 	eor.w	r3, r3, #1
 8001368:	b2db      	uxtb	r3, r3
 800136a:	2b00      	cmp	r3, #0
 800136c:	d001      	beq.n	8001372 <initVL53L0X+0x11e>
 800136e:	2300      	movs	r3, #0
 8001370:	e253      	b.n	800181a <initVL53L0X+0x5c6>

  // The SPAD map (RefGoodSpadMap) is read by VL53L0X_get_info_from_device() in
  // the API, but the same data seems to be more easily readable from
  // GLOBAL_CONFIG_SPAD_ENABLES_REF_0 through _6, so read it from there
  uint8_t ref_spad_map[6];
  readMulti(GLOBAL_CONFIG_SPAD_ENABLES_REF_0, ref_spad_map, 6, vl53l0x);
 8001372:	f107 0114 	add.w	r1, r7, #20
 8001376:	68bb      	ldr	r3, [r7, #8]
 8001378:	2206      	movs	r2, #6
 800137a:	20b0      	movs	r0, #176	; 0xb0
 800137c:	f7ff ff1e 	bl	80011bc <readMulti>

  // -- VL53L0X_set_reference_spads() begin (assume NVM values are valid)

  writeReg(0xFF, 0x01, vl53l0x);
 8001380:	68ba      	ldr	r2, [r7, #8]
 8001382:	2101      	movs	r1, #1
 8001384:	20ff      	movs	r0, #255	; 0xff
 8001386:	f7ff fe0d 	bl	8000fa4 <writeReg>
  writeReg(DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00, vl53l0x);
 800138a:	68ba      	ldr	r2, [r7, #8]
 800138c:	2100      	movs	r1, #0
 800138e:	204f      	movs	r0, #79	; 0x4f
 8001390:	f7ff fe08 	bl	8000fa4 <writeReg>
  writeReg(DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C, vl53l0x);
 8001394:	68ba      	ldr	r2, [r7, #8]
 8001396:	212c      	movs	r1, #44	; 0x2c
 8001398:	204e      	movs	r0, #78	; 0x4e
 800139a:	f7ff fe03 	bl	8000fa4 <writeReg>
  writeReg(0xFF, 0x00, vl53l0x);
 800139e:	68ba      	ldr	r2, [r7, #8]
 80013a0:	2100      	movs	r1, #0
 80013a2:	20ff      	movs	r0, #255	; 0xff
 80013a4:	f7ff fdfe 	bl	8000fa4 <writeReg>
  writeReg(GLOBAL_CONFIG_REF_EN_START_SELECT, 0xB4, vl53l0x);
 80013a8:	68ba      	ldr	r2, [r7, #8]
 80013aa:	21b4      	movs	r1, #180	; 0xb4
 80013ac:	20b6      	movs	r0, #182	; 0xb6
 80013ae:	f7ff fdf9 	bl	8000fa4 <writeReg>

  uint8_t first_spad_to_enable = spad_type_is_aperture ? 12 : 0; // 12 is the first aperture spad
 80013b2:	7efb      	ldrb	r3, [r7, #27]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d001      	beq.n	80013bc <initVL53L0X+0x168>
 80013b8:	230c      	movs	r3, #12
 80013ba:	e000      	b.n	80013be <initVL53L0X+0x16a>
 80013bc:	2300      	movs	r3, #0
 80013be:	777b      	strb	r3, [r7, #29]
  uint8_t spads_enabled = 0;
 80013c0:	2300      	movs	r3, #0
 80013c2:	77fb      	strb	r3, [r7, #31]

  for (uint8_t i = 0; i < 48; i++)
 80013c4:	2300      	movs	r3, #0
 80013c6:	77bb      	strb	r3, [r7, #30]
 80013c8:	e03d      	b.n	8001446 <initVL53L0X+0x1f2>
  {
    if (i < first_spad_to_enable || spads_enabled == spad_count)
 80013ca:	7fba      	ldrb	r2, [r7, #30]
 80013cc:	7f7b      	ldrb	r3, [r7, #29]
 80013ce:	429a      	cmp	r2, r3
 80013d0:	d303      	bcc.n	80013da <initVL53L0X+0x186>
 80013d2:	7f3b      	ldrb	r3, [r7, #28]
 80013d4:	7ffa      	ldrb	r2, [r7, #31]
 80013d6:	429a      	cmp	r2, r3
 80013d8:	d11e      	bne.n	8001418 <initVL53L0X+0x1c4>
    {
      // This bit is lower than the first one that should be enabled, or
      // (reference_spad_count) bits have already been enabled, so zero this bit
      ref_spad_map[i / 8] &= ~(1 << (i % 8));
 80013da:	7fbb      	ldrb	r3, [r7, #30]
 80013dc:	08db      	lsrs	r3, r3, #3
 80013de:	b2d8      	uxtb	r0, r3
 80013e0:	4603      	mov	r3, r0
 80013e2:	3320      	adds	r3, #32
 80013e4:	443b      	add	r3, r7
 80013e6:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80013ea:	b25a      	sxtb	r2, r3
 80013ec:	7fbb      	ldrb	r3, [r7, #30]
 80013ee:	f003 0307 	and.w	r3, r3, #7
 80013f2:	2101      	movs	r1, #1
 80013f4:	fa01 f303 	lsl.w	r3, r1, r3
 80013f8:	b25b      	sxtb	r3, r3
 80013fa:	43db      	mvns	r3, r3
 80013fc:	b25b      	sxtb	r3, r3
 80013fe:	4013      	ands	r3, r2
 8001400:	b25a      	sxtb	r2, r3
 8001402:	4603      	mov	r3, r0
 8001404:	b2d2      	uxtb	r2, r2
 8001406:	3320      	adds	r3, #32
 8001408:	443b      	add	r3, r7
 800140a:	f803 2c0c 	strb.w	r2, [r3, #-12]
 800140e:	e017      	b.n	8001440 <initVL53L0X+0x1ec>
 8001410:	20000200 	.word	0x20000200
 8001414:	200001fa 	.word	0x200001fa
    }
    else if ((ref_spad_map[i / 8] >> (i % 8)) & 0x1)
 8001418:	7fbb      	ldrb	r3, [r7, #30]
 800141a:	08db      	lsrs	r3, r3, #3
 800141c:	b2db      	uxtb	r3, r3
 800141e:	3320      	adds	r3, #32
 8001420:	443b      	add	r3, r7
 8001422:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8001426:	461a      	mov	r2, r3
 8001428:	7fbb      	ldrb	r3, [r7, #30]
 800142a:	f003 0307 	and.w	r3, r3, #7
 800142e:	fa42 f303 	asr.w	r3, r2, r3
 8001432:	f003 0301 	and.w	r3, r3, #1
 8001436:	2b00      	cmp	r3, #0
 8001438:	d002      	beq.n	8001440 <initVL53L0X+0x1ec>
    {
      spads_enabled++;
 800143a:	7ffb      	ldrb	r3, [r7, #31]
 800143c:	3301      	adds	r3, #1
 800143e:	77fb      	strb	r3, [r7, #31]
  for (uint8_t i = 0; i < 48; i++)
 8001440:	7fbb      	ldrb	r3, [r7, #30]
 8001442:	3301      	adds	r3, #1
 8001444:	77bb      	strb	r3, [r7, #30]
 8001446:	7fbb      	ldrb	r3, [r7, #30]
 8001448:	2b2f      	cmp	r3, #47	; 0x2f
 800144a:	d9be      	bls.n	80013ca <initVL53L0X+0x176>
    }
  }

  writeMulti(GLOBAL_CONFIG_SPAD_ENABLES_REF_0, ref_spad_map, 6, vl53l0x);
 800144c:	f107 0114 	add.w	r1, r7, #20
 8001450:	68bb      	ldr	r3, [r7, #8]
 8001452:	2206      	movs	r2, #6
 8001454:	20b0      	movs	r0, #176	; 0xb0
 8001456:	f7ff fe4f 	bl	80010f8 <writeMulti>
  // -- VL53L0X_set_reference_spads() end

  // -- VL53L0X_load_tuning_settings() begin
  // DefaultTuningSettings from vl53l0x_tuning.h

  writeReg(0xFF, 0x01, vl53l0x);
 800145a:	68ba      	ldr	r2, [r7, #8]
 800145c:	2101      	movs	r1, #1
 800145e:	20ff      	movs	r0, #255	; 0xff
 8001460:	f7ff fda0 	bl	8000fa4 <writeReg>
  writeReg(0x00, 0x00, vl53l0x);
 8001464:	68ba      	ldr	r2, [r7, #8]
 8001466:	2100      	movs	r1, #0
 8001468:	2000      	movs	r0, #0
 800146a:	f7ff fd9b 	bl	8000fa4 <writeReg>

  writeReg(0xFF, 0x00, vl53l0x);
 800146e:	68ba      	ldr	r2, [r7, #8]
 8001470:	2100      	movs	r1, #0
 8001472:	20ff      	movs	r0, #255	; 0xff
 8001474:	f7ff fd96 	bl	8000fa4 <writeReg>
  writeReg(0x09, 0x00, vl53l0x);
 8001478:	68ba      	ldr	r2, [r7, #8]
 800147a:	2100      	movs	r1, #0
 800147c:	2009      	movs	r0, #9
 800147e:	f7ff fd91 	bl	8000fa4 <writeReg>
  writeReg(0x10, 0x00, vl53l0x);
 8001482:	68ba      	ldr	r2, [r7, #8]
 8001484:	2100      	movs	r1, #0
 8001486:	2010      	movs	r0, #16
 8001488:	f7ff fd8c 	bl	8000fa4 <writeReg>
  writeReg(0x11, 0x00, vl53l0x);
 800148c:	68ba      	ldr	r2, [r7, #8]
 800148e:	2100      	movs	r1, #0
 8001490:	2011      	movs	r0, #17
 8001492:	f7ff fd87 	bl	8000fa4 <writeReg>

  writeReg(0x24, 0x01, vl53l0x);
 8001496:	68ba      	ldr	r2, [r7, #8]
 8001498:	2101      	movs	r1, #1
 800149a:	2024      	movs	r0, #36	; 0x24
 800149c:	f7ff fd82 	bl	8000fa4 <writeReg>
  writeReg(0x25, 0xFF, vl53l0x);
 80014a0:	68ba      	ldr	r2, [r7, #8]
 80014a2:	21ff      	movs	r1, #255	; 0xff
 80014a4:	2025      	movs	r0, #37	; 0x25
 80014a6:	f7ff fd7d 	bl	8000fa4 <writeReg>
  writeReg(0x75, 0x00, vl53l0x);
 80014aa:	68ba      	ldr	r2, [r7, #8]
 80014ac:	2100      	movs	r1, #0
 80014ae:	2075      	movs	r0, #117	; 0x75
 80014b0:	f7ff fd78 	bl	8000fa4 <writeReg>

  writeReg(0xFF, 0x01, vl53l0x);
 80014b4:	68ba      	ldr	r2, [r7, #8]
 80014b6:	2101      	movs	r1, #1
 80014b8:	20ff      	movs	r0, #255	; 0xff
 80014ba:	f7ff fd73 	bl	8000fa4 <writeReg>
  writeReg(0x4E, 0x2C, vl53l0x);
 80014be:	68ba      	ldr	r2, [r7, #8]
 80014c0:	212c      	movs	r1, #44	; 0x2c
 80014c2:	204e      	movs	r0, #78	; 0x4e
 80014c4:	f7ff fd6e 	bl	8000fa4 <writeReg>
  writeReg(0x48, 0x00, vl53l0x);
 80014c8:	68ba      	ldr	r2, [r7, #8]
 80014ca:	2100      	movs	r1, #0
 80014cc:	2048      	movs	r0, #72	; 0x48
 80014ce:	f7ff fd69 	bl	8000fa4 <writeReg>
  writeReg(0x30, 0x20, vl53l0x);
 80014d2:	68ba      	ldr	r2, [r7, #8]
 80014d4:	2120      	movs	r1, #32
 80014d6:	2030      	movs	r0, #48	; 0x30
 80014d8:	f7ff fd64 	bl	8000fa4 <writeReg>

  writeReg(0xFF, 0x00, vl53l0x);
 80014dc:	68ba      	ldr	r2, [r7, #8]
 80014de:	2100      	movs	r1, #0
 80014e0:	20ff      	movs	r0, #255	; 0xff
 80014e2:	f7ff fd5f 	bl	8000fa4 <writeReg>
  writeReg(0x30, 0x09, vl53l0x);
 80014e6:	68ba      	ldr	r2, [r7, #8]
 80014e8:	2109      	movs	r1, #9
 80014ea:	2030      	movs	r0, #48	; 0x30
 80014ec:	f7ff fd5a 	bl	8000fa4 <writeReg>
  writeReg(0x54, 0x00, vl53l0x);
 80014f0:	68ba      	ldr	r2, [r7, #8]
 80014f2:	2100      	movs	r1, #0
 80014f4:	2054      	movs	r0, #84	; 0x54
 80014f6:	f7ff fd55 	bl	8000fa4 <writeReg>
  writeReg(0x31, 0x04, vl53l0x);
 80014fa:	68ba      	ldr	r2, [r7, #8]
 80014fc:	2104      	movs	r1, #4
 80014fe:	2031      	movs	r0, #49	; 0x31
 8001500:	f7ff fd50 	bl	8000fa4 <writeReg>
  writeReg(0x32, 0x03, vl53l0x);
 8001504:	68ba      	ldr	r2, [r7, #8]
 8001506:	2103      	movs	r1, #3
 8001508:	2032      	movs	r0, #50	; 0x32
 800150a:	f7ff fd4b 	bl	8000fa4 <writeReg>
  writeReg(0x40, 0x83, vl53l0x);
 800150e:	68ba      	ldr	r2, [r7, #8]
 8001510:	2183      	movs	r1, #131	; 0x83
 8001512:	2040      	movs	r0, #64	; 0x40
 8001514:	f7ff fd46 	bl	8000fa4 <writeReg>
  writeReg(0x46, 0x25, vl53l0x);
 8001518:	68ba      	ldr	r2, [r7, #8]
 800151a:	2125      	movs	r1, #37	; 0x25
 800151c:	2046      	movs	r0, #70	; 0x46
 800151e:	f7ff fd41 	bl	8000fa4 <writeReg>
  writeReg(0x60, 0x00, vl53l0x);
 8001522:	68ba      	ldr	r2, [r7, #8]
 8001524:	2100      	movs	r1, #0
 8001526:	2060      	movs	r0, #96	; 0x60
 8001528:	f7ff fd3c 	bl	8000fa4 <writeReg>
  writeReg(0x27, 0x00, vl53l0x);
 800152c:	68ba      	ldr	r2, [r7, #8]
 800152e:	2100      	movs	r1, #0
 8001530:	2027      	movs	r0, #39	; 0x27
 8001532:	f7ff fd37 	bl	8000fa4 <writeReg>
  writeReg(0x50, 0x06, vl53l0x);
 8001536:	68ba      	ldr	r2, [r7, #8]
 8001538:	2106      	movs	r1, #6
 800153a:	2050      	movs	r0, #80	; 0x50
 800153c:	f7ff fd32 	bl	8000fa4 <writeReg>
  writeReg(0x51, 0x00, vl53l0x);
 8001540:	68ba      	ldr	r2, [r7, #8]
 8001542:	2100      	movs	r1, #0
 8001544:	2051      	movs	r0, #81	; 0x51
 8001546:	f7ff fd2d 	bl	8000fa4 <writeReg>
  writeReg(0x52, 0x96, vl53l0x);
 800154a:	68ba      	ldr	r2, [r7, #8]
 800154c:	2196      	movs	r1, #150	; 0x96
 800154e:	2052      	movs	r0, #82	; 0x52
 8001550:	f7ff fd28 	bl	8000fa4 <writeReg>
  writeReg(0x56, 0x08, vl53l0x);
 8001554:	68ba      	ldr	r2, [r7, #8]
 8001556:	2108      	movs	r1, #8
 8001558:	2056      	movs	r0, #86	; 0x56
 800155a:	f7ff fd23 	bl	8000fa4 <writeReg>
  writeReg(0x57, 0x30, vl53l0x);
 800155e:	68ba      	ldr	r2, [r7, #8]
 8001560:	2130      	movs	r1, #48	; 0x30
 8001562:	2057      	movs	r0, #87	; 0x57
 8001564:	f7ff fd1e 	bl	8000fa4 <writeReg>
  writeReg(0x61, 0x00, vl53l0x);
 8001568:	68ba      	ldr	r2, [r7, #8]
 800156a:	2100      	movs	r1, #0
 800156c:	2061      	movs	r0, #97	; 0x61
 800156e:	f7ff fd19 	bl	8000fa4 <writeReg>
  writeReg(0x62, 0x00, vl53l0x);
 8001572:	68ba      	ldr	r2, [r7, #8]
 8001574:	2100      	movs	r1, #0
 8001576:	2062      	movs	r0, #98	; 0x62
 8001578:	f7ff fd14 	bl	8000fa4 <writeReg>
  writeReg(0x64, 0x00, vl53l0x);
 800157c:	68ba      	ldr	r2, [r7, #8]
 800157e:	2100      	movs	r1, #0
 8001580:	2064      	movs	r0, #100	; 0x64
 8001582:	f7ff fd0f 	bl	8000fa4 <writeReg>
  writeReg(0x65, 0x00, vl53l0x);
 8001586:	68ba      	ldr	r2, [r7, #8]
 8001588:	2100      	movs	r1, #0
 800158a:	2065      	movs	r0, #101	; 0x65
 800158c:	f7ff fd0a 	bl	8000fa4 <writeReg>
  writeReg(0x66, 0xA0, vl53l0x);
 8001590:	68ba      	ldr	r2, [r7, #8]
 8001592:	21a0      	movs	r1, #160	; 0xa0
 8001594:	2066      	movs	r0, #102	; 0x66
 8001596:	f7ff fd05 	bl	8000fa4 <writeReg>

  writeReg(0xFF, 0x01, vl53l0x);
 800159a:	68ba      	ldr	r2, [r7, #8]
 800159c:	2101      	movs	r1, #1
 800159e:	20ff      	movs	r0, #255	; 0xff
 80015a0:	f7ff fd00 	bl	8000fa4 <writeReg>
  writeReg(0x22, 0x32, vl53l0x);
 80015a4:	68ba      	ldr	r2, [r7, #8]
 80015a6:	2132      	movs	r1, #50	; 0x32
 80015a8:	2022      	movs	r0, #34	; 0x22
 80015aa:	f7ff fcfb 	bl	8000fa4 <writeReg>
  writeReg(0x47, 0x14, vl53l0x);
 80015ae:	68ba      	ldr	r2, [r7, #8]
 80015b0:	2114      	movs	r1, #20
 80015b2:	2047      	movs	r0, #71	; 0x47
 80015b4:	f7ff fcf6 	bl	8000fa4 <writeReg>
  writeReg(0x49, 0xFF, vl53l0x);
 80015b8:	68ba      	ldr	r2, [r7, #8]
 80015ba:	21ff      	movs	r1, #255	; 0xff
 80015bc:	2049      	movs	r0, #73	; 0x49
 80015be:	f7ff fcf1 	bl	8000fa4 <writeReg>
  writeReg(0x4A, 0x00, vl53l0x);
 80015c2:	68ba      	ldr	r2, [r7, #8]
 80015c4:	2100      	movs	r1, #0
 80015c6:	204a      	movs	r0, #74	; 0x4a
 80015c8:	f7ff fcec 	bl	8000fa4 <writeReg>

  writeReg(0xFF, 0x00, vl53l0x);
 80015cc:	68ba      	ldr	r2, [r7, #8]
 80015ce:	2100      	movs	r1, #0
 80015d0:	20ff      	movs	r0, #255	; 0xff
 80015d2:	f7ff fce7 	bl	8000fa4 <writeReg>
  writeReg(0x7A, 0x0A, vl53l0x);
 80015d6:	68ba      	ldr	r2, [r7, #8]
 80015d8:	210a      	movs	r1, #10
 80015da:	207a      	movs	r0, #122	; 0x7a
 80015dc:	f7ff fce2 	bl	8000fa4 <writeReg>
  writeReg(0x7B, 0x00, vl53l0x);
 80015e0:	68ba      	ldr	r2, [r7, #8]
 80015e2:	2100      	movs	r1, #0
 80015e4:	207b      	movs	r0, #123	; 0x7b
 80015e6:	f7ff fcdd 	bl	8000fa4 <writeReg>
  writeReg(0x78, 0x21, vl53l0x);
 80015ea:	68ba      	ldr	r2, [r7, #8]
 80015ec:	2121      	movs	r1, #33	; 0x21
 80015ee:	2078      	movs	r0, #120	; 0x78
 80015f0:	f7ff fcd8 	bl	8000fa4 <writeReg>

  writeReg(0xFF, 0x01, vl53l0x);
 80015f4:	68ba      	ldr	r2, [r7, #8]
 80015f6:	2101      	movs	r1, #1
 80015f8:	20ff      	movs	r0, #255	; 0xff
 80015fa:	f7ff fcd3 	bl	8000fa4 <writeReg>
  writeReg(0x23, 0x34, vl53l0x);
 80015fe:	68ba      	ldr	r2, [r7, #8]
 8001600:	2134      	movs	r1, #52	; 0x34
 8001602:	2023      	movs	r0, #35	; 0x23
 8001604:	f7ff fcce 	bl	8000fa4 <writeReg>
  writeReg(0x42, 0x00, vl53l0x);
 8001608:	68ba      	ldr	r2, [r7, #8]
 800160a:	2100      	movs	r1, #0
 800160c:	2042      	movs	r0, #66	; 0x42
 800160e:	f7ff fcc9 	bl	8000fa4 <writeReg>
  writeReg(0x44, 0xFF, vl53l0x);
 8001612:	68ba      	ldr	r2, [r7, #8]
 8001614:	21ff      	movs	r1, #255	; 0xff
 8001616:	2044      	movs	r0, #68	; 0x44
 8001618:	f7ff fcc4 	bl	8000fa4 <writeReg>
  writeReg(0x45, 0x26, vl53l0x);
 800161c:	68ba      	ldr	r2, [r7, #8]
 800161e:	2126      	movs	r1, #38	; 0x26
 8001620:	2045      	movs	r0, #69	; 0x45
 8001622:	f7ff fcbf 	bl	8000fa4 <writeReg>
  writeReg(0x46, 0x05, vl53l0x);
 8001626:	68ba      	ldr	r2, [r7, #8]
 8001628:	2105      	movs	r1, #5
 800162a:	2046      	movs	r0, #70	; 0x46
 800162c:	f7ff fcba 	bl	8000fa4 <writeReg>
  writeReg(0x40, 0x40, vl53l0x);
 8001630:	68ba      	ldr	r2, [r7, #8]
 8001632:	2140      	movs	r1, #64	; 0x40
 8001634:	2040      	movs	r0, #64	; 0x40
 8001636:	f7ff fcb5 	bl	8000fa4 <writeReg>
  writeReg(0x0E, 0x06, vl53l0x);
 800163a:	68ba      	ldr	r2, [r7, #8]
 800163c:	2106      	movs	r1, #6
 800163e:	200e      	movs	r0, #14
 8001640:	f7ff fcb0 	bl	8000fa4 <writeReg>
  writeReg(0x20, 0x1A, vl53l0x);
 8001644:	68ba      	ldr	r2, [r7, #8]
 8001646:	211a      	movs	r1, #26
 8001648:	2020      	movs	r0, #32
 800164a:	f7ff fcab 	bl	8000fa4 <writeReg>
  writeReg(0x43, 0x40, vl53l0x);
 800164e:	68ba      	ldr	r2, [r7, #8]
 8001650:	2140      	movs	r1, #64	; 0x40
 8001652:	2043      	movs	r0, #67	; 0x43
 8001654:	f7ff fca6 	bl	8000fa4 <writeReg>

  writeReg(0xFF, 0x00, vl53l0x);
 8001658:	68ba      	ldr	r2, [r7, #8]
 800165a:	2100      	movs	r1, #0
 800165c:	20ff      	movs	r0, #255	; 0xff
 800165e:	f7ff fca1 	bl	8000fa4 <writeReg>
  writeReg(0x34, 0x03, vl53l0x);
 8001662:	68ba      	ldr	r2, [r7, #8]
 8001664:	2103      	movs	r1, #3
 8001666:	2034      	movs	r0, #52	; 0x34
 8001668:	f7ff fc9c 	bl	8000fa4 <writeReg>
  writeReg(0x35, 0x44, vl53l0x);
 800166c:	68ba      	ldr	r2, [r7, #8]
 800166e:	2144      	movs	r1, #68	; 0x44
 8001670:	2035      	movs	r0, #53	; 0x35
 8001672:	f7ff fc97 	bl	8000fa4 <writeReg>

  writeReg(0xFF, 0x01, vl53l0x);
 8001676:	68ba      	ldr	r2, [r7, #8]
 8001678:	2101      	movs	r1, #1
 800167a:	20ff      	movs	r0, #255	; 0xff
 800167c:	f7ff fc92 	bl	8000fa4 <writeReg>
  writeReg(0x31, 0x04, vl53l0x);
 8001680:	68ba      	ldr	r2, [r7, #8]
 8001682:	2104      	movs	r1, #4
 8001684:	2031      	movs	r0, #49	; 0x31
 8001686:	f7ff fc8d 	bl	8000fa4 <writeReg>
  writeReg(0x4B, 0x09, vl53l0x);
 800168a:	68ba      	ldr	r2, [r7, #8]
 800168c:	2109      	movs	r1, #9
 800168e:	204b      	movs	r0, #75	; 0x4b
 8001690:	f7ff fc88 	bl	8000fa4 <writeReg>
  writeReg(0x4C, 0x05, vl53l0x);
 8001694:	68ba      	ldr	r2, [r7, #8]
 8001696:	2105      	movs	r1, #5
 8001698:	204c      	movs	r0, #76	; 0x4c
 800169a:	f7ff fc83 	bl	8000fa4 <writeReg>
  writeReg(0x4D, 0x04, vl53l0x);
 800169e:	68ba      	ldr	r2, [r7, #8]
 80016a0:	2104      	movs	r1, #4
 80016a2:	204d      	movs	r0, #77	; 0x4d
 80016a4:	f7ff fc7e 	bl	8000fa4 <writeReg>

  writeReg(0xFF, 0x00, vl53l0x);
 80016a8:	68ba      	ldr	r2, [r7, #8]
 80016aa:	2100      	movs	r1, #0
 80016ac:	20ff      	movs	r0, #255	; 0xff
 80016ae:	f7ff fc79 	bl	8000fa4 <writeReg>
  writeReg(0x44, 0x00, vl53l0x);
 80016b2:	68ba      	ldr	r2, [r7, #8]
 80016b4:	2100      	movs	r1, #0
 80016b6:	2044      	movs	r0, #68	; 0x44
 80016b8:	f7ff fc74 	bl	8000fa4 <writeReg>
  writeReg(0x45, 0x20, vl53l0x);
 80016bc:	68ba      	ldr	r2, [r7, #8]
 80016be:	2120      	movs	r1, #32
 80016c0:	2045      	movs	r0, #69	; 0x45
 80016c2:	f7ff fc6f 	bl	8000fa4 <writeReg>
  writeReg(0x47, 0x08, vl53l0x);
 80016c6:	68ba      	ldr	r2, [r7, #8]
 80016c8:	2108      	movs	r1, #8
 80016ca:	2047      	movs	r0, #71	; 0x47
 80016cc:	f7ff fc6a 	bl	8000fa4 <writeReg>
  writeReg(0x48, 0x28, vl53l0x);
 80016d0:	68ba      	ldr	r2, [r7, #8]
 80016d2:	2128      	movs	r1, #40	; 0x28
 80016d4:	2048      	movs	r0, #72	; 0x48
 80016d6:	f7ff fc65 	bl	8000fa4 <writeReg>
  writeReg(0x67, 0x00, vl53l0x);
 80016da:	68ba      	ldr	r2, [r7, #8]
 80016dc:	2100      	movs	r1, #0
 80016de:	2067      	movs	r0, #103	; 0x67
 80016e0:	f7ff fc60 	bl	8000fa4 <writeReg>
  writeReg(0x70, 0x04, vl53l0x);
 80016e4:	68ba      	ldr	r2, [r7, #8]
 80016e6:	2104      	movs	r1, #4
 80016e8:	2070      	movs	r0, #112	; 0x70
 80016ea:	f7ff fc5b 	bl	8000fa4 <writeReg>
  writeReg(0x71, 0x01, vl53l0x);
 80016ee:	68ba      	ldr	r2, [r7, #8]
 80016f0:	2101      	movs	r1, #1
 80016f2:	2071      	movs	r0, #113	; 0x71
 80016f4:	f7ff fc56 	bl	8000fa4 <writeReg>
  writeReg(0x72, 0xFE, vl53l0x);
 80016f8:	68ba      	ldr	r2, [r7, #8]
 80016fa:	21fe      	movs	r1, #254	; 0xfe
 80016fc:	2072      	movs	r0, #114	; 0x72
 80016fe:	f7ff fc51 	bl	8000fa4 <writeReg>
  writeReg(0x76, 0x00, vl53l0x);
 8001702:	68ba      	ldr	r2, [r7, #8]
 8001704:	2100      	movs	r1, #0
 8001706:	2076      	movs	r0, #118	; 0x76
 8001708:	f7ff fc4c 	bl	8000fa4 <writeReg>
  writeReg(0x77, 0x00, vl53l0x);
 800170c:	68ba      	ldr	r2, [r7, #8]
 800170e:	2100      	movs	r1, #0
 8001710:	2077      	movs	r0, #119	; 0x77
 8001712:	f7ff fc47 	bl	8000fa4 <writeReg>

  writeReg(0xFF, 0x01, vl53l0x);
 8001716:	68ba      	ldr	r2, [r7, #8]
 8001718:	2101      	movs	r1, #1
 800171a:	20ff      	movs	r0, #255	; 0xff
 800171c:	f7ff fc42 	bl	8000fa4 <writeReg>
  writeReg(0x0D, 0x01, vl53l0x);
 8001720:	68ba      	ldr	r2, [r7, #8]
 8001722:	2101      	movs	r1, #1
 8001724:	200d      	movs	r0, #13
 8001726:	f7ff fc3d 	bl	8000fa4 <writeReg>

  writeReg(0xFF, 0x00, vl53l0x);
 800172a:	68ba      	ldr	r2, [r7, #8]
 800172c:	2100      	movs	r1, #0
 800172e:	20ff      	movs	r0, #255	; 0xff
 8001730:	f7ff fc38 	bl	8000fa4 <writeReg>
  writeReg(0x80, 0x01, vl53l0x);
 8001734:	68ba      	ldr	r2, [r7, #8]
 8001736:	2101      	movs	r1, #1
 8001738:	2080      	movs	r0, #128	; 0x80
 800173a:	f7ff fc33 	bl	8000fa4 <writeReg>
  writeReg(0x01, 0xF8, vl53l0x);
 800173e:	68ba      	ldr	r2, [r7, #8]
 8001740:	21f8      	movs	r1, #248	; 0xf8
 8001742:	2001      	movs	r0, #1
 8001744:	f7ff fc2e 	bl	8000fa4 <writeReg>

  writeReg(0xFF, 0x01, vl53l0x);
 8001748:	68ba      	ldr	r2, [r7, #8]
 800174a:	2101      	movs	r1, #1
 800174c:	20ff      	movs	r0, #255	; 0xff
 800174e:	f7ff fc29 	bl	8000fa4 <writeReg>
  writeReg(0x8E, 0x01, vl53l0x);
 8001752:	68ba      	ldr	r2, [r7, #8]
 8001754:	2101      	movs	r1, #1
 8001756:	208e      	movs	r0, #142	; 0x8e
 8001758:	f7ff fc24 	bl	8000fa4 <writeReg>
  writeReg(0x00, 0x01, vl53l0x);
 800175c:	68ba      	ldr	r2, [r7, #8]
 800175e:	2101      	movs	r1, #1
 8001760:	2000      	movs	r0, #0
 8001762:	f7ff fc1f 	bl	8000fa4 <writeReg>
  writeReg(0xFF, 0x00, vl53l0x);
 8001766:	68ba      	ldr	r2, [r7, #8]
 8001768:	2100      	movs	r1, #0
 800176a:	20ff      	movs	r0, #255	; 0xff
 800176c:	f7ff fc1a 	bl	8000fa4 <writeReg>
  writeReg(0x80, 0x00, vl53l0x);
 8001770:	68ba      	ldr	r2, [r7, #8]
 8001772:	2100      	movs	r1, #0
 8001774:	2080      	movs	r0, #128	; 0x80
 8001776:	f7ff fc15 	bl	8000fa4 <writeReg>
  // -- VL53L0X_load_tuning_settings() end

  // "Set interrupt config to new sample ready"
  // -- VL53L0X_SetGpioConfig() begin

  writeReg(SYSTEM_INTERRUPT_CONFIG_GPIO, 0x04, vl53l0x);
 800177a:	68ba      	ldr	r2, [r7, #8]
 800177c:	2104      	movs	r1, #4
 800177e:	200a      	movs	r0, #10
 8001780:	f7ff fc10 	bl	8000fa4 <writeReg>
  writeReg(GPIO_HV_MUX_ACTIVE_HIGH, readReg(GPIO_HV_MUX_ACTIVE_HIGH, vl53l0x) & ~0x10, vl53l0x); // active low
 8001784:	68b9      	ldr	r1, [r7, #8]
 8001786:	2084      	movs	r0, #132	; 0x84
 8001788:	f7ff fc5e 	bl	8001048 <readReg>
 800178c:	4603      	mov	r3, r0
 800178e:	f023 0310 	bic.w	r3, r3, #16
 8001792:	b2db      	uxtb	r3, r3
 8001794:	68ba      	ldr	r2, [r7, #8]
 8001796:	4619      	mov	r1, r3
 8001798:	2084      	movs	r0, #132	; 0x84
 800179a:	f7ff fc03 	bl	8000fa4 <writeReg>
  writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01, vl53l0x);
 800179e:	68ba      	ldr	r2, [r7, #8]
 80017a0:	2101      	movs	r1, #1
 80017a2:	200b      	movs	r0, #11
 80017a4:	f7ff fbfe 	bl	8000fa4 <writeReg>

  // -- VL53L0X_SetGpioConfig() end

  g_measTimBudUs = getMeasurementTimingBudget(vl53l0x);
 80017a8:	68b8      	ldr	r0, [r7, #8]
 80017aa:	f000 f90d 	bl	80019c8 <getMeasurementTimingBudget>
 80017ae:	4603      	mov	r3, r0
 80017b0:	4a1c      	ldr	r2, [pc, #112]	; (8001824 <initVL53L0X+0x5d0>)
 80017b2:	6013      	str	r3, [r2, #0]
  // "Disable MSRC and TCC by default"
  // MSRC = Minimum Signal Rate Check
  // TCC = Target CentreCheck
  // -- VL53L0X_SetSequenceStepEnable() begin

  writeReg(SYSTEM_SEQUENCE_CONFIG, 0xE8, vl53l0x);
 80017b4:	68ba      	ldr	r2, [r7, #8]
 80017b6:	21e8      	movs	r1, #232	; 0xe8
 80017b8:	2001      	movs	r0, #1
 80017ba:	f7ff fbf3 	bl	8000fa4 <writeReg>

  // -- VL53L0X_SetSequenceStepEnable() end

  // "Recalculate timing budget"
  setMeasurementTimingBudget(g_measTimBudUs, vl53l0x);
 80017be:	4b19      	ldr	r3, [pc, #100]	; (8001824 <initVL53L0X+0x5d0>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	68b9      	ldr	r1, [r7, #8]
 80017c4:	4618      	mov	r0, r3
 80017c6:	f000 f863 	bl	8001890 <setMeasurementTimingBudget>

  // VL53L0X_PerformRefCalibration() begin (VL53L0X_perform_ref_calibration())

  // -- VL53L0X_perform_vhv_calibration() begin

  writeReg(SYSTEM_SEQUENCE_CONFIG, 0x01, vl53l0x);
 80017ca:	68ba      	ldr	r2, [r7, #8]
 80017cc:	2101      	movs	r1, #1
 80017ce:	2001      	movs	r0, #1
 80017d0:	f7ff fbe8 	bl	8000fa4 <writeReg>
  if (!performSingleRefCalibration(0x40, vl53l0x)) { return false; }
 80017d4:	68b9      	ldr	r1, [r7, #8]
 80017d6:	2040      	movs	r0, #64	; 0x40
 80017d8:	f000 fc24 	bl	8002024 <performSingleRefCalibration>
 80017dc:	4603      	mov	r3, r0
 80017de:	f083 0301 	eor.w	r3, r3, #1
 80017e2:	b2db      	uxtb	r3, r3
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d001      	beq.n	80017ec <initVL53L0X+0x598>
 80017e8:	2300      	movs	r3, #0
 80017ea:	e016      	b.n	800181a <initVL53L0X+0x5c6>

  // -- VL53L0X_perform_vhv_calibration() end

  // -- VL53L0X_perform_phase_calibration() begin

  writeReg(SYSTEM_SEQUENCE_CONFIG, 0x02, vl53l0x);
 80017ec:	68ba      	ldr	r2, [r7, #8]
 80017ee:	2102      	movs	r1, #2
 80017f0:	2001      	movs	r0, #1
 80017f2:	f7ff fbd7 	bl	8000fa4 <writeReg>
  if (!performSingleRefCalibration(0x00, vl53l0x)) { return false; }
 80017f6:	68b9      	ldr	r1, [r7, #8]
 80017f8:	2000      	movs	r0, #0
 80017fa:	f000 fc13 	bl	8002024 <performSingleRefCalibration>
 80017fe:	4603      	mov	r3, r0
 8001800:	f083 0301 	eor.w	r3, r3, #1
 8001804:	b2db      	uxtb	r3, r3
 8001806:	2b00      	cmp	r3, #0
 8001808:	d001      	beq.n	800180e <initVL53L0X+0x5ba>
 800180a:	2300      	movs	r3, #0
 800180c:	e005      	b.n	800181a <initVL53L0X+0x5c6>

  // -- VL53L0X_perform_phase_calibration() end

  // "restore the previous Sequence Config"
  writeReg(SYSTEM_SEQUENCE_CONFIG, 0xE8, vl53l0x);
 800180e:	68ba      	ldr	r2, [r7, #8]
 8001810:	21e8      	movs	r1, #232	; 0xe8
 8001812:	2001      	movs	r0, #1
 8001814:	f7ff fbc6 	bl	8000fa4 <writeReg>

  // VL53L0X_PerformRefCalibration() end


  return true;
 8001818:	2301      	movs	r3, #1
}
 800181a:	4618      	mov	r0, r3
 800181c:	3720      	adds	r7, #32
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	200001fc 	.word	0x200001fc

08001828 <setSignalRateLimit>:
// Setting a lower limit increases the potential range of the sensor but also
// seems to increase the likelihood of getting an inaccurate reading because of
// unwanted reflections from objects other than the intended target.
// Defaults to 0.25 MCPS as initialized by the ST API and this library.
bool setSignalRateLimit(float limit_Mcps, VL53L0X_t *vl53l0x)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b082      	sub	sp, #8
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
 8001830:	6039      	str	r1, [r7, #0]
  if (limit_Mcps < 0 || limit_Mcps > 511.99) { return false; }
 8001832:	f04f 0100 	mov.w	r1, #0
 8001836:	6878      	ldr	r0, [r7, #4]
 8001838:	f7ff fb34 	bl	8000ea4 <__aeabi_fcmplt>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d10a      	bne.n	8001858 <setSignalRateLimit+0x30>
 8001842:	6878      	ldr	r0, [r7, #4]
 8001844:	f7fe fdf0 	bl	8000428 <__aeabi_f2d>
 8001848:	a30f      	add	r3, pc, #60	; (adr r3, 8001888 <setSignalRateLimit+0x60>)
 800184a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800184e:	f7ff f8d3 	bl	80009f8 <__aeabi_dcmpgt>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	d001      	beq.n	800185c <setSignalRateLimit+0x34>
 8001858:	2300      	movs	r3, #0
 800185a:	e010      	b.n	800187e <setSignalRateLimit+0x56>

  // Q9.7 fixed point format (9 integer bits, 7 fractional bits)
  writeReg16Bit(FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT, limit_Mcps * (1 << 7), vl53l0x);
 800185c:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
 8001860:	6878      	ldr	r0, [r7, #4]
 8001862:	f7ff f981 	bl	8000b68 <__aeabi_fmul>
 8001866:	4603      	mov	r3, r0
 8001868:	4618      	mov	r0, r3
 800186a:	f7ff fb43 	bl	8000ef4 <__aeabi_f2uiz>
 800186e:	4603      	mov	r3, r0
 8001870:	b29b      	uxth	r3, r3
 8001872:	683a      	ldr	r2, [r7, #0]
 8001874:	4619      	mov	r1, r3
 8001876:	2044      	movs	r0, #68	; 0x44
 8001878:	f7ff fbba 	bl	8000ff0 <writeReg16Bit>
  return true;
 800187c:	2301      	movs	r3, #1
}
 800187e:	4618      	mov	r0, r3
 8001880:	3708      	adds	r7, #8
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	0a3d70a4 	.word	0x0a3d70a4
 800188c:	407fffd7 	.word	0x407fffd7

08001890 <setMeasurementTimingBudget>:
// budget allows for more accurate measurements. Increasing the budget by a
// factor of N decreases the range measurement standard deviation by a factor of
// sqrt(N). Defaults to about 33 milliseconds; the minimum is 20 ms.
// based on VL53L0X_set_measurement_timing_budget_micro_seconds()
bool setMeasurementTimingBudget(uint32_t budget_us, VL53L0X_t *vl53l0x)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b092      	sub	sp, #72	; 0x48
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
 8001898:	6039      	str	r1, [r7, #0]
  SequenceStepEnables enables;
  SequenceStepTimeouts timeouts;

  uint16_t const StartOverhead      = 1320; // note that this is different than the value in get_
 800189a:	f44f 63a5 	mov.w	r3, #1320	; 0x528
 800189e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  uint16_t const EndOverhead        = 960;
 80018a2:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80018a6:	87fb      	strh	r3, [r7, #62]	; 0x3e
  uint16_t const MsrcOverhead       = 660;
 80018a8:	f44f 7325 	mov.w	r3, #660	; 0x294
 80018ac:	87bb      	strh	r3, [r7, #60]	; 0x3c
  uint16_t const TccOverhead        = 590;
 80018ae:	f240 234e 	movw	r3, #590	; 0x24e
 80018b2:	877b      	strh	r3, [r7, #58]	; 0x3a
  uint16_t const DssOverhead        = 690;
 80018b4:	f240 23b2 	movw	r3, #690	; 0x2b2
 80018b8:	873b      	strh	r3, [r7, #56]	; 0x38
  uint16_t const PreRangeOverhead   = 660;
 80018ba:	f44f 7325 	mov.w	r3, #660	; 0x294
 80018be:	86fb      	strh	r3, [r7, #54]	; 0x36
  uint16_t const FinalRangeOverhead = 550;
 80018c0:	f240 2326 	movw	r3, #550	; 0x226
 80018c4:	86bb      	strh	r3, [r7, #52]	; 0x34

  uint32_t const MinTimingBudget = 20000;
 80018c6:	f644 6320 	movw	r3, #20000	; 0x4e20
 80018ca:	633b      	str	r3, [r7, #48]	; 0x30

  if (budget_us < MinTimingBudget) { return false; }
 80018cc:	687a      	ldr	r2, [r7, #4]
 80018ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018d0:	429a      	cmp	r2, r3
 80018d2:	d201      	bcs.n	80018d8 <setMeasurementTimingBudget+0x48>
 80018d4:	2300      	movs	r3, #0
 80018d6:	e070      	b.n	80019ba <setMeasurementTimingBudget+0x12a>

  uint32_t used_budget_us = StartOverhead + EndOverhead;
 80018d8:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80018dc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80018de:	4413      	add	r3, r2
 80018e0:	647b      	str	r3, [r7, #68]	; 0x44

  getSequenceStepEnables(&enables, vl53l0x);
 80018e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018e6:	6839      	ldr	r1, [r7, #0]
 80018e8:	4618      	mov	r0, r3
 80018ea:	f000 fa6f 	bl	8001dcc <getSequenceStepEnables>
  getSequenceStepTimeouts(&enables, &timeouts, vl53l0x);
 80018ee:	f107 010c 	add.w	r1, r7, #12
 80018f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018f6:	683a      	ldr	r2, [r7, #0]
 80018f8:	4618      	mov	r0, r3
 80018fa:	f000 fa9b 	bl	8001e34 <getSequenceStepTimeouts>

  if (enables.tcc)
 80018fe:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001902:	2b00      	cmp	r3, #0
 8001904:	d005      	beq.n	8001912 <setMeasurementTimingBudget+0x82>
  {
    used_budget_us += (timeouts.msrc_dss_tcc_us + TccOverhead);
 8001906:	69ba      	ldr	r2, [r7, #24]
 8001908:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800190a:	4413      	add	r3, r2
 800190c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800190e:	4413      	add	r3, r2
 8001910:	647b      	str	r3, [r7, #68]	; 0x44
  }

  if (enables.dss)
 8001912:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001916:	2b00      	cmp	r3, #0
 8001918:	d007      	beq.n	800192a <setMeasurementTimingBudget+0x9a>
  {
    used_budget_us += 2 * (timeouts.msrc_dss_tcc_us + DssOverhead);
 800191a:	69ba      	ldr	r2, [r7, #24]
 800191c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800191e:	4413      	add	r3, r2
 8001920:	005b      	lsls	r3, r3, #1
 8001922:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001924:	4413      	add	r3, r2
 8001926:	647b      	str	r3, [r7, #68]	; 0x44
 8001928:	e009      	b.n	800193e <setMeasurementTimingBudget+0xae>
  }
  else if (enables.msrc)
 800192a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800192e:	2b00      	cmp	r3, #0
 8001930:	d005      	beq.n	800193e <setMeasurementTimingBudget+0xae>
  {
    used_budget_us += (timeouts.msrc_dss_tcc_us + MsrcOverhead);
 8001932:	69ba      	ldr	r2, [r7, #24]
 8001934:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001936:	4413      	add	r3, r2
 8001938:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800193a:	4413      	add	r3, r2
 800193c:	647b      	str	r3, [r7, #68]	; 0x44
  }

  if (enables.pre_range)
 800193e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001942:	2b00      	cmp	r3, #0
 8001944:	d005      	beq.n	8001952 <setMeasurementTimingBudget+0xc2>
  {
    used_budget_us += (timeouts.pre_range_us + PreRangeOverhead);
 8001946:	69fa      	ldr	r2, [r7, #28]
 8001948:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800194a:	4413      	add	r3, r2
 800194c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800194e:	4413      	add	r3, r2
 8001950:	647b      	str	r3, [r7, #68]	; 0x44
  }

  if (enables.final_range)
 8001952:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001956:	2b00      	cmp	r3, #0
 8001958:	d02e      	beq.n	80019b8 <setMeasurementTimingBudget+0x128>
  {
    used_budget_us += FinalRangeOverhead;
 800195a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800195c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800195e:	4413      	add	r3, r2
 8001960:	647b      	str	r3, [r7, #68]	; 0x44
    // budget and the sum of all other timeouts within the sequence.
    // If there is no room for the final range timeout, then an error
    // will be set. Otherwise the remaining time will be applied to
    // the final range."

    if (used_budget_us > budget_us)
 8001962:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	429a      	cmp	r2, r3
 8001968:	d901      	bls.n	800196e <setMeasurementTimingBudget+0xde>
    {
      // "Requested timeout too big."
      return false;
 800196a:	2300      	movs	r3, #0
 800196c:	e025      	b.n	80019ba <setMeasurementTimingBudget+0x12a>
    }

    uint32_t final_range_timeout_us = budget_us - used_budget_us;
 800196e:	687a      	ldr	r2, [r7, #4]
 8001970:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001972:	1ad3      	subs	r3, r2, r3
 8001974:	62fb      	str	r3, [r7, #44]	; 0x2c
    //  timeouts must be expressed in macro periods MClks
    //  because they have different vcsel periods."

    uint16_t final_range_timeout_mclks =
      timeoutMicrosecondsToMclks(final_range_timeout_us,
                                 timeouts.final_range_vcsel_period_pclks);
 8001976:	89fb      	ldrh	r3, [r7, #14]
      timeoutMicrosecondsToMclks(final_range_timeout_us,
 8001978:	b2db      	uxtb	r3, r3
 800197a:	4619      	mov	r1, r3
 800197c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800197e:	f000 fb2b 	bl	8001fd8 <timeoutMicrosecondsToMclks>
 8001982:	4603      	mov	r3, r0
    uint16_t final_range_timeout_mclks =
 8001984:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

    if (enables.pre_range)
 8001988:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800198c:	2b00      	cmp	r3, #0
 800198e:	d005      	beq.n	800199c <setMeasurementTimingBudget+0x10c>
    {
      final_range_timeout_mclks += timeouts.pre_range_mclks;
 8001990:	8a7a      	ldrh	r2, [r7, #18]
 8001992:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8001996:	4413      	add	r3, r2
 8001998:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    }

    writeReg16Bit(FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
 800199c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80019a0:	4618      	mov	r0, r3
 80019a2:	f000 fac6 	bl	8001f32 <encodeTimeout>
 80019a6:	4603      	mov	r3, r0
 80019a8:	683a      	ldr	r2, [r7, #0]
 80019aa:	4619      	mov	r1, r3
 80019ac:	2071      	movs	r0, #113	; 0x71
 80019ae:	f7ff fb1f 	bl	8000ff0 <writeReg16Bit>
      encodeTimeout(final_range_timeout_mclks), vl53l0x);

    // set_sequence_step_timeout() end

    g_measTimBudUs = budget_us; // store for internal reuse
 80019b2:	4a04      	ldr	r2, [pc, #16]	; (80019c4 <setMeasurementTimingBudget+0x134>)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6013      	str	r3, [r2, #0]
  }
  return true;
 80019b8:	2301      	movs	r3, #1
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	3748      	adds	r7, #72	; 0x48
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	200001fc 	.word	0x200001fc

080019c8 <getMeasurementTimingBudget>:

// Get the measurement timing budget in microseconds
// based on VL53L0X_get_measurement_timing_budget_micro_seconds()
// in us
uint32_t getMeasurementTimingBudget(VL53L0X_t *vl53l0x)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b08e      	sub	sp, #56	; 0x38
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  SequenceStepEnables enables;
  SequenceStepTimeouts timeouts;

  uint16_t const StartOverhead     = 1910; // note that this is different than the value in set_
 80019d0:	f240 7376 	movw	r3, #1910	; 0x776
 80019d4:	867b      	strh	r3, [r7, #50]	; 0x32
  uint16_t const EndOverhead        = 960;
 80019d6:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80019da:	863b      	strh	r3, [r7, #48]	; 0x30
  uint16_t const MsrcOverhead       = 660;
 80019dc:	f44f 7325 	mov.w	r3, #660	; 0x294
 80019e0:	85fb      	strh	r3, [r7, #46]	; 0x2e
  uint16_t const TccOverhead        = 590;
 80019e2:	f240 234e 	movw	r3, #590	; 0x24e
 80019e6:	85bb      	strh	r3, [r7, #44]	; 0x2c
  uint16_t const DssOverhead        = 690;
 80019e8:	f240 23b2 	movw	r3, #690	; 0x2b2
 80019ec:	857b      	strh	r3, [r7, #42]	; 0x2a
  uint16_t const PreRangeOverhead   = 660;
 80019ee:	f44f 7325 	mov.w	r3, #660	; 0x294
 80019f2:	853b      	strh	r3, [r7, #40]	; 0x28
  uint16_t const FinalRangeOverhead = 550;
 80019f4:	f240 2326 	movw	r3, #550	; 0x226
 80019f8:	84fb      	strh	r3, [r7, #38]	; 0x26

  // "Start and end overhead times always present"
  uint32_t budget_us = StartOverhead + EndOverhead;
 80019fa:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 80019fc:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80019fe:	4413      	add	r3, r2
 8001a00:	637b      	str	r3, [r7, #52]	; 0x34

  getSequenceStepEnables(&enables, vl53l0x);
 8001a02:	f107 0320 	add.w	r3, r7, #32
 8001a06:	6879      	ldr	r1, [r7, #4]
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f000 f9df 	bl	8001dcc <getSequenceStepEnables>
  getSequenceStepTimeouts(&enables, &timeouts, vl53l0x);
 8001a0e:	f107 0108 	add.w	r1, r7, #8
 8001a12:	f107 0320 	add.w	r3, r7, #32
 8001a16:	687a      	ldr	r2, [r7, #4]
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f000 fa0b 	bl	8001e34 <getSequenceStepTimeouts>

  if (enables.tcc)
 8001a1e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d005      	beq.n	8001a32 <getMeasurementTimingBudget+0x6a>
  {
    budget_us += (timeouts.msrc_dss_tcc_us + TccOverhead);
 8001a26:	697a      	ldr	r2, [r7, #20]
 8001a28:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001a2a:	4413      	add	r3, r2
 8001a2c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001a2e:	4413      	add	r3, r2
 8001a30:	637b      	str	r3, [r7, #52]	; 0x34
  }

  if (enables.dss)
 8001a32:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d007      	beq.n	8001a4a <getMeasurementTimingBudget+0x82>
  {
    budget_us += 2 * (timeouts.msrc_dss_tcc_us + DssOverhead);
 8001a3a:	697a      	ldr	r2, [r7, #20]
 8001a3c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001a3e:	4413      	add	r3, r2
 8001a40:	005b      	lsls	r3, r3, #1
 8001a42:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001a44:	4413      	add	r3, r2
 8001a46:	637b      	str	r3, [r7, #52]	; 0x34
 8001a48:	e009      	b.n	8001a5e <getMeasurementTimingBudget+0x96>
  }
  else if (enables.msrc)
 8001a4a:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d005      	beq.n	8001a5e <getMeasurementTimingBudget+0x96>
  {
    budget_us += (timeouts.msrc_dss_tcc_us + MsrcOverhead);
 8001a52:	697a      	ldr	r2, [r7, #20]
 8001a54:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001a56:	4413      	add	r3, r2
 8001a58:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001a5a:	4413      	add	r3, r2
 8001a5c:	637b      	str	r3, [r7, #52]	; 0x34
  }

  if (enables.pre_range)
 8001a5e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d005      	beq.n	8001a72 <getMeasurementTimingBudget+0xaa>
  {
    budget_us += (timeouts.pre_range_us + PreRangeOverhead);
 8001a66:	69ba      	ldr	r2, [r7, #24]
 8001a68:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001a6a:	4413      	add	r3, r2
 8001a6c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001a6e:	4413      	add	r3, r2
 8001a70:	637b      	str	r3, [r7, #52]	; 0x34
  }

  if (enables.final_range)
 8001a72:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d005      	beq.n	8001a86 <getMeasurementTimingBudget+0xbe>
  {
    budget_us += (timeouts.final_range_us + FinalRangeOverhead);
 8001a7a:	69fa      	ldr	r2, [r7, #28]
 8001a7c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001a7e:	4413      	add	r3, r2
 8001a80:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001a82:	4413      	add	r3, r2
 8001a84:	637b      	str	r3, [r7, #52]	; 0x34
  }

  g_measTimBudUs = budget_us; // store for internal reuse
 8001a86:	4a04      	ldr	r2, [pc, #16]	; (8001a98 <getMeasurementTimingBudget+0xd0>)
 8001a88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a8a:	6013      	str	r3, [r2, #0]
  return budget_us;
 8001a8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3738      	adds	r7, #56	; 0x38
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	200001fc 	.word	0x200001fc

08001a9c <getVcselPulsePeriod>:
}

// Get the VCSEL pulse period in PCLKs for the given period type.
// based on VL53L0X_get_vcsel_pulse_period()
uint8_t getVcselPulsePeriod(vcselPeriodType type, VL53L0X_t *vl53l0x)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b082      	sub	sp, #8
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	6039      	str	r1, [r7, #0]
 8001aa6:	71fb      	strb	r3, [r7, #7]
  if (type == VcselPeriodPreRange)
 8001aa8:	79fb      	ldrb	r3, [r7, #7]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d109      	bne.n	8001ac2 <getVcselPulsePeriod+0x26>
  {
    return decodeVcselPeriod(readReg(PRE_RANGE_CONFIG_VCSEL_PERIOD, vl53l0x));
 8001aae:	6839      	ldr	r1, [r7, #0]
 8001ab0:	2050      	movs	r0, #80	; 0x50
 8001ab2:	f7ff fac9 	bl	8001048 <readReg>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	3301      	adds	r3, #1
 8001aba:	b2db      	uxtb	r3, r3
 8001abc:	005b      	lsls	r3, r3, #1
 8001abe:	b2db      	uxtb	r3, r3
 8001ac0:	e00d      	b.n	8001ade <getVcselPulsePeriod+0x42>
  }
  else if (type == VcselPeriodFinalRange)
 8001ac2:	79fb      	ldrb	r3, [r7, #7]
 8001ac4:	2b01      	cmp	r3, #1
 8001ac6:	d109      	bne.n	8001adc <getVcselPulsePeriod+0x40>
  {
    return decodeVcselPeriod(readReg(FINAL_RANGE_CONFIG_VCSEL_PERIOD, vl53l0x));
 8001ac8:	6839      	ldr	r1, [r7, #0]
 8001aca:	2070      	movs	r0, #112	; 0x70
 8001acc:	f7ff fabc 	bl	8001048 <readReg>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	3301      	adds	r3, #1
 8001ad4:	b2db      	uxtb	r3, r3
 8001ad6:	005b      	lsls	r3, r3, #1
 8001ad8:	b2db      	uxtb	r3, r3
 8001ada:	e000      	b.n	8001ade <getVcselPulsePeriod+0x42>
  }
  else { return 255; }
 8001adc:	23ff      	movs	r3, #255	; 0xff
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	3708      	adds	r7, #8
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
	...

08001ae8 <readRangeContinuousMillimeters>:

// Returns a range reading in millimeters when continuous mode is active
// (readRangeSingleMillimeters() also calls this function after starting a
// single-shot range measurement)
// extraStats provides additional info for this measurment. Set to 0 if not needed.
uint16_t readRangeContinuousMillimeters(VL53L0X_t *vl53l0x) {
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b084      	sub	sp, #16
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
//  uint8_t tempBuffer[12];
  uint16_t temp, result;
  startTimeout();
 8001af0:	f001 fb06 	bl	8003100 <HAL_GetTick>
 8001af4:	4603      	mov	r3, r0
 8001af6:	b29a      	uxth	r2, r3
 8001af8:	4b25      	ldr	r3, [pc, #148]	; (8001b90 <readRangeContinuousMillimeters+0xa8>)
 8001afa:	801a      	strh	r2, [r3, #0]
  while ((readReg(RESULT_INTERRUPT_STATUS, vl53l0x) & 0x07) == 0) {
 8001afc:	e015      	b.n	8001b2a <readRangeContinuousMillimeters+0x42>
    if (checkTimeoutExpired())
 8001afe:	4b25      	ldr	r3, [pc, #148]	; (8001b94 <readRangeContinuousMillimeters+0xac>)
 8001b00:	881b      	ldrh	r3, [r3, #0]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d011      	beq.n	8001b2a <readRangeContinuousMillimeters+0x42>
 8001b06:	f001 fafb 	bl	8003100 <HAL_GetTick>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	b29b      	uxth	r3, r3
 8001b0e:	461a      	mov	r2, r3
 8001b10:	4b1f      	ldr	r3, [pc, #124]	; (8001b90 <readRangeContinuousMillimeters+0xa8>)
 8001b12:	881b      	ldrh	r3, [r3, #0]
 8001b14:	1ad3      	subs	r3, r2, r3
 8001b16:	4a1f      	ldr	r2, [pc, #124]	; (8001b94 <readRangeContinuousMillimeters+0xac>)
 8001b18:	8812      	ldrh	r2, [r2, #0]
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	dd05      	ble.n	8001b2a <readRangeContinuousMillimeters+0x42>
    {
      g_isTimeout = true;
 8001b1e:	4b1e      	ldr	r3, [pc, #120]	; (8001b98 <readRangeContinuousMillimeters+0xb0>)
 8001b20:	2201      	movs	r2, #1
 8001b22:	701a      	strb	r2, [r3, #0]
      return 65535;
 8001b24:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b28:	e02d      	b.n	8001b86 <readRangeContinuousMillimeters+0x9e>
  while ((readReg(RESULT_INTERRUPT_STATUS, vl53l0x) & 0x07) == 0) {
 8001b2a:	6879      	ldr	r1, [r7, #4]
 8001b2c:	2013      	movs	r0, #19
 8001b2e:	f7ff fa8b 	bl	8001048 <readReg>
 8001b32:	4603      	mov	r3, r0
 8001b34:	f003 0307 	and.w	r3, r3, #7
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d0e0      	beq.n	8001afe <readRangeContinuousMillimeters+0x16>
    }
  }
  temp = readReg16Bit(RESULT_RANGE_STATUS + 10, vl53l0x);
 8001b3c:	6879      	ldr	r1, [r7, #4]
 8001b3e:	201e      	movs	r0, #30
 8001b40:	f7ff faac 	bl	800109c <readReg16Bit>
 8001b44:	4603      	mov	r3, r0
 8001b46:	81bb      	strh	r3, [r7, #12]

  switch(i2cStat)
 8001b48:	4b14      	ldr	r3, [pc, #80]	; (8001b9c <readRangeContinuousMillimeters+0xb4>)
 8001b4a:	781b      	ldrb	r3, [r3, #0]
 8001b4c:	2b03      	cmp	r3, #3
 8001b4e:	d00e      	beq.n	8001b6e <readRangeContinuousMillimeters+0x86>
 8001b50:	2b03      	cmp	r3, #3
 8001b52:	dc10      	bgt.n	8001b76 <readRangeContinuousMillimeters+0x8e>
 8001b54:	2b01      	cmp	r3, #1
 8001b56:	d002      	beq.n	8001b5e <readRangeContinuousMillimeters+0x76>
 8001b58:	2b02      	cmp	r3, #2
 8001b5a:	d004      	beq.n	8001b66 <readRangeContinuousMillimeters+0x7e>
 8001b5c:	e00b      	b.n	8001b76 <readRangeContinuousMillimeters+0x8e>
  {
  	  case HAL_ERROR:
  		  result = 404;
 8001b5e:	f44f 73ca 	mov.w	r3, #404	; 0x194
 8001b62:	81fb      	strh	r3, [r7, #14]
  		  break;
 8001b64:	e009      	b.n	8001b7a <readRangeContinuousMillimeters+0x92>
  	  case HAL_BUSY:
  		  result = 405;
 8001b66:	f240 1395 	movw	r3, #405	; 0x195
 8001b6a:	81fb      	strh	r3, [r7, #14]
		  break;
 8001b6c:	e005      	b.n	8001b7a <readRangeContinuousMillimeters+0x92>
  	  case HAL_TIMEOUT:
  		  result = 406;
 8001b6e:	f44f 73cb 	mov.w	r3, #406	; 0x196
 8001b72:	81fb      	strh	r3, [r7, #14]
  		  break;
 8001b74:	e001      	b.n	8001b7a <readRangeContinuousMillimeters+0x92>
  	  default:
  		  result = temp;
 8001b76:	89bb      	ldrh	r3, [r7, #12]
 8001b78:	81fb      	strh	r3, [r7, #14]
  }


  writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01, vl53l0x);
 8001b7a:	687a      	ldr	r2, [r7, #4]
 8001b7c:	2101      	movs	r1, #1
 8001b7e:	200b      	movs	r0, #11
 8001b80:	f7ff fa10 	bl	8000fa4 <writeReg>

  return result;
 8001b84:	89fb      	ldrh	r3, [r7, #14]
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	3710      	adds	r7, #16
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	200001f8 	.word	0x200001f8
 8001b94:	200001f4 	.word	0x200001f4
 8001b98:	200001f6 	.word	0x200001f6
 8001b9c:	20000204 	.word	0x20000204

08001ba0 <readRangeSingleMillimeters>:

// Performs a single-shot range measurement and returns the reading in
// millimeters
// based on VL53L0X_PerformSingleRangingMeasurement()
// extraStats provides additional info for this measurment. Set to 0 if not needed.
uint16_t readRangeSingleMillimeters(VL53L0X_t *vl53l0x) {
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b082      	sub	sp, #8
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  writeReg(0x80, 0x01, vl53l0x);
 8001ba8:	687a      	ldr	r2, [r7, #4]
 8001baa:	2101      	movs	r1, #1
 8001bac:	2080      	movs	r0, #128	; 0x80
 8001bae:	f7ff f9f9 	bl	8000fa4 <writeReg>
  writeReg(0xFF, 0x01, vl53l0x);
 8001bb2:	687a      	ldr	r2, [r7, #4]
 8001bb4:	2101      	movs	r1, #1
 8001bb6:	20ff      	movs	r0, #255	; 0xff
 8001bb8:	f7ff f9f4 	bl	8000fa4 <writeReg>
  writeReg(0x00, 0x00, vl53l0x);
 8001bbc:	687a      	ldr	r2, [r7, #4]
 8001bbe:	2100      	movs	r1, #0
 8001bc0:	2000      	movs	r0, #0
 8001bc2:	f7ff f9ef 	bl	8000fa4 <writeReg>
  writeReg(0x91, g_stopVariable, vl53l0x);
 8001bc6:	4b24      	ldr	r3, [pc, #144]	; (8001c58 <readRangeSingleMillimeters+0xb8>)
 8001bc8:	781b      	ldrb	r3, [r3, #0]
 8001bca:	687a      	ldr	r2, [r7, #4]
 8001bcc:	4619      	mov	r1, r3
 8001bce:	2091      	movs	r0, #145	; 0x91
 8001bd0:	f7ff f9e8 	bl	8000fa4 <writeReg>
  writeReg(0x00, 0x01, vl53l0x);
 8001bd4:	687a      	ldr	r2, [r7, #4]
 8001bd6:	2101      	movs	r1, #1
 8001bd8:	2000      	movs	r0, #0
 8001bda:	f7ff f9e3 	bl	8000fa4 <writeReg>
  writeReg(0xFF, 0x00, vl53l0x);
 8001bde:	687a      	ldr	r2, [r7, #4]
 8001be0:	2100      	movs	r1, #0
 8001be2:	20ff      	movs	r0, #255	; 0xff
 8001be4:	f7ff f9de 	bl	8000fa4 <writeReg>
  writeReg(0x80, 0x00, vl53l0x);
 8001be8:	687a      	ldr	r2, [r7, #4]
 8001bea:	2100      	movs	r1, #0
 8001bec:	2080      	movs	r0, #128	; 0x80
 8001bee:	f7ff f9d9 	bl	8000fa4 <writeReg>
  writeReg(SYSRANGE_START, 0x01, vl53l0x);
 8001bf2:	687a      	ldr	r2, [r7, #4]
 8001bf4:	2101      	movs	r1, #1
 8001bf6:	2000      	movs	r0, #0
 8001bf8:	f7ff f9d4 	bl	8000fa4 <writeReg>
  // "Wait until start bit has been cleared"
  startTimeout();
 8001bfc:	f001 fa80 	bl	8003100 <HAL_GetTick>
 8001c00:	4603      	mov	r3, r0
 8001c02:	b29a      	uxth	r2, r3
 8001c04:	4b15      	ldr	r3, [pc, #84]	; (8001c5c <readRangeSingleMillimeters+0xbc>)
 8001c06:	801a      	strh	r2, [r3, #0]
  while (readReg(SYSRANGE_START, vl53l0x) & 0x01){
 8001c08:	e015      	b.n	8001c36 <readRangeSingleMillimeters+0x96>
    if (checkTimeoutExpired()){
 8001c0a:	4b15      	ldr	r3, [pc, #84]	; (8001c60 <readRangeSingleMillimeters+0xc0>)
 8001c0c:	881b      	ldrh	r3, [r3, #0]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d011      	beq.n	8001c36 <readRangeSingleMillimeters+0x96>
 8001c12:	f001 fa75 	bl	8003100 <HAL_GetTick>
 8001c16:	4603      	mov	r3, r0
 8001c18:	b29b      	uxth	r3, r3
 8001c1a:	461a      	mov	r2, r3
 8001c1c:	4b0f      	ldr	r3, [pc, #60]	; (8001c5c <readRangeSingleMillimeters+0xbc>)
 8001c1e:	881b      	ldrh	r3, [r3, #0]
 8001c20:	1ad3      	subs	r3, r2, r3
 8001c22:	4a0f      	ldr	r2, [pc, #60]	; (8001c60 <readRangeSingleMillimeters+0xc0>)
 8001c24:	8812      	ldrh	r2, [r2, #0]
 8001c26:	4293      	cmp	r3, r2
 8001c28:	dd05      	ble.n	8001c36 <readRangeSingleMillimeters+0x96>
      g_isTimeout = true;
 8001c2a:	4b0e      	ldr	r3, [pc, #56]	; (8001c64 <readRangeSingleMillimeters+0xc4>)
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	701a      	strb	r2, [r3, #0]
      return 65535;
 8001c30:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c34:	e00c      	b.n	8001c50 <readRangeSingleMillimeters+0xb0>
  while (readReg(SYSRANGE_START, vl53l0x) & 0x01){
 8001c36:	6879      	ldr	r1, [r7, #4]
 8001c38:	2000      	movs	r0, #0
 8001c3a:	f7ff fa05 	bl	8001048 <readReg>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	f003 0301 	and.w	r3, r3, #1
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d1e0      	bne.n	8001c0a <readRangeSingleMillimeters+0x6a>
    }
  }
  return readRangeContinuousMillimeters(vl53l0x);
 8001c48:	6878      	ldr	r0, [r7, #4]
 8001c4a:	f7ff ff4d 	bl	8001ae8 <readRangeContinuousMillimeters>
 8001c4e:	4603      	mov	r3, r0
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	3708      	adds	r7, #8
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	200001fa 	.word	0x200001fa
 8001c5c:	200001f8 	.word	0x200001f8
 8001c60:	200001f4 	.word	0x200001f4
 8001c64:	200001f6 	.word	0x200001f6

08001c68 <getSpadInfo>:

// Get reference SPAD (single photon avalanche diode) count and type
// based on VL53L0X_get_info_from_device(),
// but only gets reference SPAD count and type
bool getSpadInfo(uint8_t * count, bool * type_is_aperture,VL53L0X_t *vl53l0x)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b086      	sub	sp, #24
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	60f8      	str	r0, [r7, #12]
 8001c70:	60b9      	str	r1, [r7, #8]
 8001c72:	607a      	str	r2, [r7, #4]
  uint8_t tmp;

  writeReg(0x80, 0x01, vl53l0x);
 8001c74:	687a      	ldr	r2, [r7, #4]
 8001c76:	2101      	movs	r1, #1
 8001c78:	2080      	movs	r0, #128	; 0x80
 8001c7a:	f7ff f993 	bl	8000fa4 <writeReg>
  writeReg(0xFF, 0x01, vl53l0x);
 8001c7e:	687a      	ldr	r2, [r7, #4]
 8001c80:	2101      	movs	r1, #1
 8001c82:	20ff      	movs	r0, #255	; 0xff
 8001c84:	f7ff f98e 	bl	8000fa4 <writeReg>
  writeReg(0x00, 0x00, vl53l0x);
 8001c88:	687a      	ldr	r2, [r7, #4]
 8001c8a:	2100      	movs	r1, #0
 8001c8c:	2000      	movs	r0, #0
 8001c8e:	f7ff f989 	bl	8000fa4 <writeReg>

  writeReg(0xFF, 0x06, vl53l0x);
 8001c92:	687a      	ldr	r2, [r7, #4]
 8001c94:	2106      	movs	r1, #6
 8001c96:	20ff      	movs	r0, #255	; 0xff
 8001c98:	f7ff f984 	bl	8000fa4 <writeReg>
  writeReg(0x83, readReg(0x83, vl53l0x) | 0x04, vl53l0x);
 8001c9c:	6879      	ldr	r1, [r7, #4]
 8001c9e:	2083      	movs	r0, #131	; 0x83
 8001ca0:	f7ff f9d2 	bl	8001048 <readReg>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	f043 0304 	orr.w	r3, r3, #4
 8001caa:	b2db      	uxtb	r3, r3
 8001cac:	687a      	ldr	r2, [r7, #4]
 8001cae:	4619      	mov	r1, r3
 8001cb0:	2083      	movs	r0, #131	; 0x83
 8001cb2:	f7ff f977 	bl	8000fa4 <writeReg>
  writeReg(0xFF, 0x07, vl53l0x);
 8001cb6:	687a      	ldr	r2, [r7, #4]
 8001cb8:	2107      	movs	r1, #7
 8001cba:	20ff      	movs	r0, #255	; 0xff
 8001cbc:	f7ff f972 	bl	8000fa4 <writeReg>
  writeReg(0x81, 0x01, vl53l0x);
 8001cc0:	687a      	ldr	r2, [r7, #4]
 8001cc2:	2101      	movs	r1, #1
 8001cc4:	2081      	movs	r0, #129	; 0x81
 8001cc6:	f7ff f96d 	bl	8000fa4 <writeReg>

  writeReg(0x80, 0x01, vl53l0x);
 8001cca:	687a      	ldr	r2, [r7, #4]
 8001ccc:	2101      	movs	r1, #1
 8001cce:	2080      	movs	r0, #128	; 0x80
 8001cd0:	f7ff f968 	bl	8000fa4 <writeReg>

  writeReg(0x94, 0x6b, vl53l0x);
 8001cd4:	687a      	ldr	r2, [r7, #4]
 8001cd6:	216b      	movs	r1, #107	; 0x6b
 8001cd8:	2094      	movs	r0, #148	; 0x94
 8001cda:	f7ff f963 	bl	8000fa4 <writeReg>
  writeReg(0x83, 0x00, vl53l0x);
 8001cde:	687a      	ldr	r2, [r7, #4]
 8001ce0:	2100      	movs	r1, #0
 8001ce2:	2083      	movs	r0, #131	; 0x83
 8001ce4:	f7ff f95e 	bl	8000fa4 <writeReg>
  startTimeout();
 8001ce8:	f001 fa0a 	bl	8003100 <HAL_GetTick>
 8001cec:	4603      	mov	r3, r0
 8001cee:	b29a      	uxth	r2, r3
 8001cf0:	4b34      	ldr	r3, [pc, #208]	; (8001dc4 <getSpadInfo+0x15c>)
 8001cf2:	801a      	strh	r2, [r3, #0]
  while (readReg(0x83, vl53l0x) == 0x00)
 8001cf4:	e011      	b.n	8001d1a <getSpadInfo+0xb2>
  {
    if (checkTimeoutExpired()) { return false; }
 8001cf6:	4b34      	ldr	r3, [pc, #208]	; (8001dc8 <getSpadInfo+0x160>)
 8001cf8:	881b      	ldrh	r3, [r3, #0]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d00d      	beq.n	8001d1a <getSpadInfo+0xb2>
 8001cfe:	f001 f9ff 	bl	8003100 <HAL_GetTick>
 8001d02:	4603      	mov	r3, r0
 8001d04:	b29b      	uxth	r3, r3
 8001d06:	461a      	mov	r2, r3
 8001d08:	4b2e      	ldr	r3, [pc, #184]	; (8001dc4 <getSpadInfo+0x15c>)
 8001d0a:	881b      	ldrh	r3, [r3, #0]
 8001d0c:	1ad3      	subs	r3, r2, r3
 8001d0e:	4a2e      	ldr	r2, [pc, #184]	; (8001dc8 <getSpadInfo+0x160>)
 8001d10:	8812      	ldrh	r2, [r2, #0]
 8001d12:	4293      	cmp	r3, r2
 8001d14:	dd01      	ble.n	8001d1a <getSpadInfo+0xb2>
 8001d16:	2300      	movs	r3, #0
 8001d18:	e04f      	b.n	8001dba <getSpadInfo+0x152>
  while (readReg(0x83, vl53l0x) == 0x00)
 8001d1a:	6879      	ldr	r1, [r7, #4]
 8001d1c:	2083      	movs	r0, #131	; 0x83
 8001d1e:	f7ff f993 	bl	8001048 <readReg>
 8001d22:	4603      	mov	r3, r0
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d0e6      	beq.n	8001cf6 <getSpadInfo+0x8e>
  }
  writeReg(0x83, 0x01, vl53l0x);
 8001d28:	687a      	ldr	r2, [r7, #4]
 8001d2a:	2101      	movs	r1, #1
 8001d2c:	2083      	movs	r0, #131	; 0x83
 8001d2e:	f7ff f939 	bl	8000fa4 <writeReg>
  tmp = readReg(0x92, vl53l0x);
 8001d32:	6879      	ldr	r1, [r7, #4]
 8001d34:	2092      	movs	r0, #146	; 0x92
 8001d36:	f7ff f987 	bl	8001048 <readReg>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	75fb      	strb	r3, [r7, #23]

  *count = tmp & 0x7f;
 8001d3e:	7dfb      	ldrb	r3, [r7, #23]
 8001d40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001d44:	b2da      	uxtb	r2, r3
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	701a      	strb	r2, [r3, #0]
  *type_is_aperture = (tmp >> 7) & 0x01;
 8001d4a:	7dfb      	ldrb	r3, [r7, #23]
 8001d4c:	09db      	lsrs	r3, r3, #7
 8001d4e:	b2db      	uxtb	r3, r3
 8001d50:	f003 0301 	and.w	r3, r3, #1
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	bf14      	ite	ne
 8001d58:	2301      	movne	r3, #1
 8001d5a:	2300      	moveq	r3, #0
 8001d5c:	b2da      	uxtb	r2, r3
 8001d5e:	68bb      	ldr	r3, [r7, #8]
 8001d60:	701a      	strb	r2, [r3, #0]

  writeReg(0x81, 0x00, vl53l0x);
 8001d62:	687a      	ldr	r2, [r7, #4]
 8001d64:	2100      	movs	r1, #0
 8001d66:	2081      	movs	r0, #129	; 0x81
 8001d68:	f7ff f91c 	bl	8000fa4 <writeReg>
  writeReg(0xFF, 0x06, vl53l0x);
 8001d6c:	687a      	ldr	r2, [r7, #4]
 8001d6e:	2106      	movs	r1, #6
 8001d70:	20ff      	movs	r0, #255	; 0xff
 8001d72:	f7ff f917 	bl	8000fa4 <writeReg>
  writeReg(0x83, readReg(0x83, vl53l0x)  & ~0x04, vl53l0x);
 8001d76:	6879      	ldr	r1, [r7, #4]
 8001d78:	2083      	movs	r0, #131	; 0x83
 8001d7a:	f7ff f965 	bl	8001048 <readReg>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	f023 0304 	bic.w	r3, r3, #4
 8001d84:	b2db      	uxtb	r3, r3
 8001d86:	687a      	ldr	r2, [r7, #4]
 8001d88:	4619      	mov	r1, r3
 8001d8a:	2083      	movs	r0, #131	; 0x83
 8001d8c:	f7ff f90a 	bl	8000fa4 <writeReg>
  writeReg(0xFF, 0x01, vl53l0x);
 8001d90:	687a      	ldr	r2, [r7, #4]
 8001d92:	2101      	movs	r1, #1
 8001d94:	20ff      	movs	r0, #255	; 0xff
 8001d96:	f7ff f905 	bl	8000fa4 <writeReg>
  writeReg(0x00, 0x01, vl53l0x);
 8001d9a:	687a      	ldr	r2, [r7, #4]
 8001d9c:	2101      	movs	r1, #1
 8001d9e:	2000      	movs	r0, #0
 8001da0:	f7ff f900 	bl	8000fa4 <writeReg>

  writeReg(0xFF, 0x00, vl53l0x);
 8001da4:	687a      	ldr	r2, [r7, #4]
 8001da6:	2100      	movs	r1, #0
 8001da8:	20ff      	movs	r0, #255	; 0xff
 8001daa:	f7ff f8fb 	bl	8000fa4 <writeReg>
  writeReg(0x80, 0x00, vl53l0x);
 8001dae:	687a      	ldr	r2, [r7, #4]
 8001db0:	2100      	movs	r1, #0
 8001db2:	2080      	movs	r0, #128	; 0x80
 8001db4:	f7ff f8f6 	bl	8000fa4 <writeReg>

  return true;
 8001db8:	2301      	movs	r3, #1
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	3718      	adds	r7, #24
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	200001f8 	.word	0x200001f8
 8001dc8:	200001f4 	.word	0x200001f4

08001dcc <getSequenceStepEnables>:

// Get sequence step enables
// based on VL53L0X_GetSequenceStepEnables()
void getSequenceStepEnables(SequenceStepEnables * enables, VL53L0X_t *vl53l0x)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b084      	sub	sp, #16
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
 8001dd4:	6039      	str	r1, [r7, #0]
  uint8_t sequence_config = readReg(SYSTEM_SEQUENCE_CONFIG, vl53l0x);
 8001dd6:	6839      	ldr	r1, [r7, #0]
 8001dd8:	2001      	movs	r0, #1
 8001dda:	f7ff f935 	bl	8001048 <readReg>
 8001dde:	4603      	mov	r3, r0
 8001de0:	73fb      	strb	r3, [r7, #15]

  enables->tcc          = (sequence_config >> 4) & 0x1;
 8001de2:	7bfb      	ldrb	r3, [r7, #15]
 8001de4:	091b      	lsrs	r3, r3, #4
 8001de6:	b2db      	uxtb	r3, r3
 8001de8:	f003 0301 	and.w	r3, r3, #1
 8001dec:	b2da      	uxtb	r2, r3
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	701a      	strb	r2, [r3, #0]
  enables->dss          = (sequence_config >> 3) & 0x1;
 8001df2:	7bfb      	ldrb	r3, [r7, #15]
 8001df4:	08db      	lsrs	r3, r3, #3
 8001df6:	b2db      	uxtb	r3, r3
 8001df8:	f003 0301 	and.w	r3, r3, #1
 8001dfc:	b2da      	uxtb	r2, r3
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	709a      	strb	r2, [r3, #2]
  enables->msrc         = (sequence_config >> 2) & 0x1;
 8001e02:	7bfb      	ldrb	r3, [r7, #15]
 8001e04:	089b      	lsrs	r3, r3, #2
 8001e06:	b2db      	uxtb	r3, r3
 8001e08:	f003 0301 	and.w	r3, r3, #1
 8001e0c:	b2da      	uxtb	r2, r3
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	705a      	strb	r2, [r3, #1]
  enables->pre_range    = (sequence_config >> 6) & 0x1;
 8001e12:	7bfb      	ldrb	r3, [r7, #15]
 8001e14:	099b      	lsrs	r3, r3, #6
 8001e16:	b2db      	uxtb	r3, r3
 8001e18:	f003 0301 	and.w	r3, r3, #1
 8001e1c:	b2da      	uxtb	r2, r3
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	70da      	strb	r2, [r3, #3]
  enables->final_range  = (sequence_config >> 7) & 0x1;
 8001e22:	7bfb      	ldrb	r3, [r7, #15]
 8001e24:	09db      	lsrs	r3, r3, #7
 8001e26:	b2da      	uxtb	r2, r3
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	711a      	strb	r2, [r3, #4]
}
 8001e2c:	bf00      	nop
 8001e2e:	3710      	adds	r7, #16
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}

08001e34 <getSequenceStepTimeouts>:
// Get sequence step timeouts
// based on get_sequence_step_timeout(),
// but gets all timeouts instead of just the requested one, and also stores
// intermediate values
void getSequenceStepTimeouts(SequenceStepEnables const * enables, SequenceStepTimeouts * timeouts, VL53L0X_t *vl53l0x)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b084      	sub	sp, #16
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	60f8      	str	r0, [r7, #12]
 8001e3c:	60b9      	str	r1, [r7, #8]
 8001e3e:	607a      	str	r2, [r7, #4]
  timeouts->pre_range_vcsel_period_pclks = getVcselPulsePeriod(VcselPeriodPreRange, vl53l0x);
 8001e40:	6879      	ldr	r1, [r7, #4]
 8001e42:	2000      	movs	r0, #0
 8001e44:	f7ff fe2a 	bl	8001a9c <getVcselPulsePeriod>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	b29a      	uxth	r2, r3
 8001e4c:	68bb      	ldr	r3, [r7, #8]
 8001e4e:	801a      	strh	r2, [r3, #0]

  timeouts->msrc_dss_tcc_mclks = readReg(MSRC_CONFIG_TIMEOUT_MACROP, vl53l0x) + 1;
 8001e50:	6879      	ldr	r1, [r7, #4]
 8001e52:	2046      	movs	r0, #70	; 0x46
 8001e54:	f7ff f8f8 	bl	8001048 <readReg>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	b29b      	uxth	r3, r3
 8001e5c:	3301      	adds	r3, #1
 8001e5e:	b29a      	uxth	r2, r3
 8001e60:	68bb      	ldr	r3, [r7, #8]
 8001e62:	809a      	strh	r2, [r3, #4]
  timeouts->msrc_dss_tcc_us =
    timeoutMclksToMicroseconds(timeouts->msrc_dss_tcc_mclks,
 8001e64:	68bb      	ldr	r3, [r7, #8]
 8001e66:	889a      	ldrh	r2, [r3, #4]
                               timeouts->pre_range_vcsel_period_pclks);
 8001e68:	68bb      	ldr	r3, [r7, #8]
 8001e6a:	881b      	ldrh	r3, [r3, #0]
    timeoutMclksToMicroseconds(timeouts->msrc_dss_tcc_mclks,
 8001e6c:	b2db      	uxtb	r3, r3
 8001e6e:	4619      	mov	r1, r3
 8001e70:	4610      	mov	r0, r2
 8001e72:	f000 f889 	bl	8001f88 <timeoutMclksToMicroseconds>
 8001e76:	4602      	mov	r2, r0
  timeouts->msrc_dss_tcc_us =
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	60da      	str	r2, [r3, #12]

  timeouts->pre_range_mclks =
    decodeTimeout(readReg16Bit(PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI, vl53l0x));
 8001e7c:	6879      	ldr	r1, [r7, #4]
 8001e7e:	2051      	movs	r0, #81	; 0x51
 8001e80:	f7ff f90c 	bl	800109c <readReg16Bit>
 8001e84:	4603      	mov	r3, r0
 8001e86:	4618      	mov	r0, r3
 8001e88:	f000 f840 	bl	8001f0c <decodeTimeout>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	461a      	mov	r2, r3
  timeouts->pre_range_mclks =
 8001e90:	68bb      	ldr	r3, [r7, #8]
 8001e92:	80da      	strh	r2, [r3, #6]
  timeouts->pre_range_us =
    timeoutMclksToMicroseconds(timeouts->pre_range_mclks,
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	88da      	ldrh	r2, [r3, #6]
                               timeouts->pre_range_vcsel_period_pclks);
 8001e98:	68bb      	ldr	r3, [r7, #8]
 8001e9a:	881b      	ldrh	r3, [r3, #0]
    timeoutMclksToMicroseconds(timeouts->pre_range_mclks,
 8001e9c:	b2db      	uxtb	r3, r3
 8001e9e:	4619      	mov	r1, r3
 8001ea0:	4610      	mov	r0, r2
 8001ea2:	f000 f871 	bl	8001f88 <timeoutMclksToMicroseconds>
 8001ea6:	4602      	mov	r2, r0
  timeouts->pre_range_us =
 8001ea8:	68bb      	ldr	r3, [r7, #8]
 8001eaa:	611a      	str	r2, [r3, #16]

  timeouts->final_range_vcsel_period_pclks = getVcselPulsePeriod(VcselPeriodFinalRange, vl53l0x);
 8001eac:	6879      	ldr	r1, [r7, #4]
 8001eae:	2001      	movs	r0, #1
 8001eb0:	f7ff fdf4 	bl	8001a9c <getVcselPulsePeriod>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	b29a      	uxth	r2, r3
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	805a      	strh	r2, [r3, #2]

  timeouts->final_range_mclks =
    decodeTimeout(readReg16Bit(FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI, vl53l0x));
 8001ebc:	6879      	ldr	r1, [r7, #4]
 8001ebe:	2071      	movs	r0, #113	; 0x71
 8001ec0:	f7ff f8ec 	bl	800109c <readReg16Bit>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f000 f820 	bl	8001f0c <decodeTimeout>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	461a      	mov	r2, r3
  timeouts->final_range_mclks =
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	811a      	strh	r2, [r3, #8]

  if (enables->pre_range)
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	78db      	ldrb	r3, [r3, #3]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d007      	beq.n	8001eec <getSequenceStepTimeouts+0xb8>
  {
    timeouts->final_range_mclks -= timeouts->pre_range_mclks;
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	891a      	ldrh	r2, [r3, #8]
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	88db      	ldrh	r3, [r3, #6]
 8001ee4:	1ad3      	subs	r3, r2, r3
 8001ee6:	b29a      	uxth	r2, r3
 8001ee8:	68bb      	ldr	r3, [r7, #8]
 8001eea:	811a      	strh	r2, [r3, #8]
  }

  timeouts->final_range_us =
    timeoutMclksToMicroseconds(timeouts->final_range_mclks,
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	891a      	ldrh	r2, [r3, #8]
                               timeouts->final_range_vcsel_period_pclks);
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	885b      	ldrh	r3, [r3, #2]
    timeoutMclksToMicroseconds(timeouts->final_range_mclks,
 8001ef4:	b2db      	uxtb	r3, r3
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	4610      	mov	r0, r2
 8001efa:	f000 f845 	bl	8001f88 <timeoutMclksToMicroseconds>
 8001efe:	4602      	mov	r2, r0
  timeouts->final_range_us =
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	615a      	str	r2, [r3, #20]
}
 8001f04:	bf00      	nop
 8001f06:	3710      	adds	r7, #16
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}

08001f0c <decodeTimeout>:
// Decode sequence step timeout in MCLKs from register value
// based on VL53L0X_decode_timeout()
// Note: the original function returned a uint32_t, but the return value is
// always stored in a uint16_t.
uint16_t decodeTimeout(uint16_t reg_val)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b083      	sub	sp, #12
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	4603      	mov	r3, r0
 8001f14:	80fb      	strh	r3, [r7, #6]
  // format: "(LSByte * 2^MSByte) + 1"
  return (uint16_t)((reg_val & 0x00FF) <<
 8001f16:	88fb      	ldrh	r3, [r7, #6]
 8001f18:	b2db      	uxtb	r3, r3
         (uint16_t)((reg_val & 0xFF00) >> 8)) + 1;
 8001f1a:	88fa      	ldrh	r2, [r7, #6]
 8001f1c:	0a12      	lsrs	r2, r2, #8
 8001f1e:	b292      	uxth	r2, r2
  return (uint16_t)((reg_val & 0x00FF) <<
 8001f20:	4093      	lsls	r3, r2
 8001f22:	b29b      	uxth	r3, r3
         (uint16_t)((reg_val & 0xFF00) >> 8)) + 1;
 8001f24:	3301      	adds	r3, #1
 8001f26:	b29b      	uxth	r3, r3
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	370c      	adds	r7, #12
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bc80      	pop	{r7}
 8001f30:	4770      	bx	lr

08001f32 <encodeTimeout>:
// Encode sequence step timeout register value from timeout in MCLKs
// based on VL53L0X_encode_timeout()
// Note: the original function took a uint16_t, but the argument passed to it
// is always a uint16_t.
uint16_t encodeTimeout(uint16_t timeout_mclks)
{
 8001f32:	b480      	push	{r7}
 8001f34:	b085      	sub	sp, #20
 8001f36:	af00      	add	r7, sp, #0
 8001f38:	4603      	mov	r3, r0
 8001f3a:	80fb      	strh	r3, [r7, #6]
  // format: "(LSByte * 2^MSByte) + 1"

  uint32_t ls_byte = 0;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	60fb      	str	r3, [r7, #12]
  uint16_t ms_byte = 0;
 8001f40:	2300      	movs	r3, #0
 8001f42:	817b      	strh	r3, [r7, #10]

  if (timeout_mclks > 0)
 8001f44:	88fb      	ldrh	r3, [r7, #6]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d018      	beq.n	8001f7c <encodeTimeout+0x4a>
  {
    ls_byte = timeout_mclks - 1;
 8001f4a:	88fb      	ldrh	r3, [r7, #6]
 8001f4c:	3b01      	subs	r3, #1
 8001f4e:	60fb      	str	r3, [r7, #12]

    while ((ls_byte & 0xFFFFFF00) > 0)
 8001f50:	e005      	b.n	8001f5e <encodeTimeout+0x2c>
    {
      ls_byte >>= 1;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	085b      	lsrs	r3, r3, #1
 8001f56:	60fb      	str	r3, [r7, #12]
      ms_byte++;
 8001f58:	897b      	ldrh	r3, [r7, #10]
 8001f5a:	3301      	adds	r3, #1
 8001f5c:	817b      	strh	r3, [r7, #10]
    while ((ls_byte & 0xFFFFFF00) > 0)
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d1f4      	bne.n	8001f52 <encodeTimeout+0x20>
    }

    return (ms_byte << 8) | (ls_byte & 0xFF);
 8001f68:	897b      	ldrh	r3, [r7, #10]
 8001f6a:	021b      	lsls	r3, r3, #8
 8001f6c:	b29a      	uxth	r2, r3
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	b29b      	uxth	r3, r3
 8001f72:	b2db      	uxtb	r3, r3
 8001f74:	b29b      	uxth	r3, r3
 8001f76:	4313      	orrs	r3, r2
 8001f78:	b29b      	uxth	r3, r3
 8001f7a:	e000      	b.n	8001f7e <encodeTimeout+0x4c>
  }
  else { return 0; }
 8001f7c:	2300      	movs	r3, #0
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	3714      	adds	r7, #20
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bc80      	pop	{r7}
 8001f86:	4770      	bx	lr

08001f88 <timeoutMclksToMicroseconds>:

// Convert sequence step timeout from MCLKs to microseconds with given VCSEL period in PCLKs
// based on VL53L0X_calc_timeout_us()
uint32_t timeoutMclksToMicroseconds(uint16_t timeout_period_mclks, uint8_t vcsel_period_pclks)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b085      	sub	sp, #20
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	4603      	mov	r3, r0
 8001f90:	460a      	mov	r2, r1
 8001f92:	80fb      	strh	r3, [r7, #6]
 8001f94:	4613      	mov	r3, r2
 8001f96:	717b      	strb	r3, [r7, #5]
  uint32_t macro_period_ns = calcMacroPeriod(vcsel_period_pclks);
 8001f98:	797b      	ldrb	r3, [r7, #5]
 8001f9a:	4a0d      	ldr	r2, [pc, #52]	; (8001fd0 <timeoutMclksToMicroseconds+0x48>)
 8001f9c:	fb02 f303 	mul.w	r3, r2, r3
 8001fa0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8001fa4:	4a0b      	ldr	r2, [pc, #44]	; (8001fd4 <timeoutMclksToMicroseconds+0x4c>)
 8001fa6:	fba2 2303 	umull	r2, r3, r2, r3
 8001faa:	099b      	lsrs	r3, r3, #6
 8001fac:	60fb      	str	r3, [r7, #12]

  return ((timeout_period_mclks * macro_period_ns) + (macro_period_ns / 2)) / 1000;
 8001fae:	88fb      	ldrh	r3, [r7, #6]
 8001fb0:	68fa      	ldr	r2, [r7, #12]
 8001fb2:	fb03 f202 	mul.w	r2, r3, r2
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	085b      	lsrs	r3, r3, #1
 8001fba:	4413      	add	r3, r2
 8001fbc:	4a05      	ldr	r2, [pc, #20]	; (8001fd4 <timeoutMclksToMicroseconds+0x4c>)
 8001fbe:	fba2 2303 	umull	r2, r3, r2, r3
 8001fc2:	099b      	lsrs	r3, r3, #6
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	3714      	adds	r7, #20
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bc80      	pop	{r7}
 8001fcc:	4770      	bx	lr
 8001fce:	bf00      	nop
 8001fd0:	003a2f00 	.word	0x003a2f00
 8001fd4:	10624dd3 	.word	0x10624dd3

08001fd8 <timeoutMicrosecondsToMclks>:

// Convert sequence step timeout from microseconds to MCLKs with given VCSEL period in PCLKs
// based on VL53L0X_calc_timeout_mclks()
uint32_t timeoutMicrosecondsToMclks(uint32_t timeout_period_us, uint8_t vcsel_period_pclks)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b085      	sub	sp, #20
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
 8001fe0:	460b      	mov	r3, r1
 8001fe2:	70fb      	strb	r3, [r7, #3]
  uint32_t macro_period_ns = calcMacroPeriod(vcsel_period_pclks);
 8001fe4:	78fb      	ldrb	r3, [r7, #3]
 8001fe6:	4a0d      	ldr	r2, [pc, #52]	; (800201c <timeoutMicrosecondsToMclks+0x44>)
 8001fe8:	fb02 f303 	mul.w	r3, r2, r3
 8001fec:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8001ff0:	4a0b      	ldr	r2, [pc, #44]	; (8002020 <timeoutMicrosecondsToMclks+0x48>)
 8001ff2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ff6:	099b      	lsrs	r3, r3, #6
 8001ff8:	60fb      	str	r3, [r7, #12]

  return (((timeout_period_us * 1000) + (macro_period_ns / 2)) / macro_period_ns);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002000:	fb03 f202 	mul.w	r2, r3, r2
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	085b      	lsrs	r3, r3, #1
 8002008:	441a      	add	r2, r3
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8002010:	4618      	mov	r0, r3
 8002012:	3714      	adds	r7, #20
 8002014:	46bd      	mov	sp, r7
 8002016:	bc80      	pop	{r7}
 8002018:	4770      	bx	lr
 800201a:	bf00      	nop
 800201c:	003a2f00 	.word	0x003a2f00
 8002020:	10624dd3 	.word	0x10624dd3

08002024 <performSingleRefCalibration>:


// based on VL53L0X_perform_single_ref_calibration()
bool performSingleRefCalibration(uint8_t vhv_init_byte, VL53L0X_t *vl53l0x)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b082      	sub	sp, #8
 8002028:	af00      	add	r7, sp, #0
 800202a:	4603      	mov	r3, r0
 800202c:	6039      	str	r1, [r7, #0]
 800202e:	71fb      	strb	r3, [r7, #7]
  writeReg(SYSRANGE_START, 0x01 | vhv_init_byte, vl53l0x); // VL53L0X_REG_SYSRANGE_MODE_START_STOP
 8002030:	79fb      	ldrb	r3, [r7, #7]
 8002032:	f043 0301 	orr.w	r3, r3, #1
 8002036:	b2db      	uxtb	r3, r3
 8002038:	683a      	ldr	r2, [r7, #0]
 800203a:	4619      	mov	r1, r3
 800203c:	2000      	movs	r0, #0
 800203e:	f7fe ffb1 	bl	8000fa4 <writeReg>

  startTimeout();
 8002042:	f001 f85d 	bl	8003100 <HAL_GetTick>
 8002046:	4603      	mov	r3, r0
 8002048:	b29a      	uxth	r2, r3
 800204a:	4b16      	ldr	r3, [pc, #88]	; (80020a4 <performSingleRefCalibration+0x80>)
 800204c:	801a      	strh	r2, [r3, #0]
  while ((readReg(RESULT_INTERRUPT_STATUS, vl53l0x) & 0x07) == 0)
 800204e:	e011      	b.n	8002074 <performSingleRefCalibration+0x50>
  {
    if (checkTimeoutExpired()) { return false; }
 8002050:	4b15      	ldr	r3, [pc, #84]	; (80020a8 <performSingleRefCalibration+0x84>)
 8002052:	881b      	ldrh	r3, [r3, #0]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d00d      	beq.n	8002074 <performSingleRefCalibration+0x50>
 8002058:	f001 f852 	bl	8003100 <HAL_GetTick>
 800205c:	4603      	mov	r3, r0
 800205e:	b29b      	uxth	r3, r3
 8002060:	461a      	mov	r2, r3
 8002062:	4b10      	ldr	r3, [pc, #64]	; (80020a4 <performSingleRefCalibration+0x80>)
 8002064:	881b      	ldrh	r3, [r3, #0]
 8002066:	1ad3      	subs	r3, r2, r3
 8002068:	4a0f      	ldr	r2, [pc, #60]	; (80020a8 <performSingleRefCalibration+0x84>)
 800206a:	8812      	ldrh	r2, [r2, #0]
 800206c:	4293      	cmp	r3, r2
 800206e:	dd01      	ble.n	8002074 <performSingleRefCalibration+0x50>
 8002070:	2300      	movs	r3, #0
 8002072:	e013      	b.n	800209c <performSingleRefCalibration+0x78>
  while ((readReg(RESULT_INTERRUPT_STATUS, vl53l0x) & 0x07) == 0)
 8002074:	6839      	ldr	r1, [r7, #0]
 8002076:	2013      	movs	r0, #19
 8002078:	f7fe ffe6 	bl	8001048 <readReg>
 800207c:	4603      	mov	r3, r0
 800207e:	f003 0307 	and.w	r3, r3, #7
 8002082:	2b00      	cmp	r3, #0
 8002084:	d0e4      	beq.n	8002050 <performSingleRefCalibration+0x2c>
  }

  writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01, vl53l0x);
 8002086:	683a      	ldr	r2, [r7, #0]
 8002088:	2101      	movs	r1, #1
 800208a:	200b      	movs	r0, #11
 800208c:	f7fe ff8a 	bl	8000fa4 <writeReg>

  writeReg(SYSRANGE_START, 0x00, vl53l0x);
 8002090:	683a      	ldr	r2, [r7, #0]
 8002092:	2100      	movs	r1, #0
 8002094:	2000      	movs	r0, #0
 8002096:	f7fe ff85 	bl	8000fa4 <writeReg>

  return true;
 800209a:	2301      	movs	r3, #1
}
 800209c:	4618      	mov	r0, r3
 800209e:	3708      	adds	r7, #8
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	200001f8 	.word	0x200001f8
 80020a8:	200001f4 	.word	0x200001f4

080020ac <CAN_Transmit>:
	return crc;
}

void CAN_Transmit(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
        		const uint8_t aData[], uint32_t *pTxMailbox)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b084      	sub	sp, #16
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	60f8      	str	r0, [r7, #12]
 80020b4:	60b9      	str	r1, [r7, #8]
 80020b6:	607a      	str	r2, [r7, #4]
 80020b8:	603b      	str	r3, [r7, #0]
	HAL_CAN_AddTxMessage(hcan, pHeader, aData, pTxMailbox);
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	687a      	ldr	r2, [r7, #4]
 80020be:	68b9      	ldr	r1, [r7, #8]
 80020c0:	68f8      	ldr	r0, [r7, #12]
 80020c2:	f001 fc64 	bl	800398e <HAL_CAN_AddTxMessage>
}
 80020c6:	bf00      	nop
 80020c8:	3710      	adds	r7, #16
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
	...

080020d0 <CANSensorTransmit>:
extern CAN_RxHeaderTypeDef CANRxHeader;
volatile uint8_t CANDataRcvFlag;


void CANSensorTransmit(CAN_HandleTypeDef *hcan, CANSensorData* controlData)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b08c      	sub	sp, #48	; 0x30
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
 80020d8:	6039      	str	r1, [r7, #0]
	uint8_t CANTxControl[CAN_DATA_LENGTH];
	CAN_TxHeaderTypeDef CANTxHeaderControl;
	uint32_t CANTxMailboxesControl = CAN_TX_MAILBOX1;
 80020da:	2302      	movs	r3, #2
 80020dc:	60fb      	str	r3, [r7, #12]

	CANTxHeaderControl.StdId = CAN_PROJECT_SENSOR_STDID;
 80020de:	f240 73a2 	movw	r3, #1954	; 0x7a2
 80020e2:	613b      	str	r3, [r7, #16]
	CANTxHeaderControl.IDE 	 = CAN_ID_STD;
 80020e4:	2300      	movs	r3, #0
 80020e6:	61bb      	str	r3, [r7, #24]
	CANTxHeaderControl.RTR 	 = CAN_RTR_DATA;
 80020e8:	2300      	movs	r3, #0
 80020ea:	61fb      	str	r3, [r7, #28]
	CANTxHeaderControl.DLC 	 = CAN_DATA_LENGTH;
 80020ec:	2308      	movs	r3, #8
 80020ee:	623b      	str	r3, [r7, #32]

	CANTxControl[0] 	= (controlData->sequence >> 8) & 0xff;
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	881b      	ldrh	r3, [r3, #0]
 80020f4:	0a1b      	lsrs	r3, r3, #8
 80020f6:	b29b      	uxth	r3, r3
 80020f8:	b2db      	uxtb	r3, r3
 80020fa:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	CANTxControl[1] 	= (controlData->sequence) & 0xff;
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	881b      	ldrh	r3, [r3, #0]
 8002102:	b2db      	uxtb	r3, r3
 8002104:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	CANTxControl[2] 	= controlData->priority;
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	789b      	ldrb	r3, [r3, #2]
 800210c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	CANTxControl[3]		= controlData->speed;
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	78db      	ldrb	r3, [r3, #3]
 8002114:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	CANTxControl[4]		= controlData->direction1;
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	791b      	ldrb	r3, [r3, #4]
 800211c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	CANTxControl[5]		= controlData->direction2;
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	795b      	ldrb	r3, [r3, #5]
 8002124:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	CANTxControl[6]		= UNUSED_DATA;
 8002128:	2355      	movs	r3, #85	; 0x55
 800212a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	CANTxControl[7]		= UNUSED_DATA;
 800212e:	2355      	movs	r3, #85	; 0x55
 8002130:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	CAN_Transmit(hcan, &CANTxHeaderControl, CANTxControl, &CANTxMailboxesControl);
 8002134:	f107 030c 	add.w	r3, r7, #12
 8002138:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800213c:	f107 0110 	add.w	r1, r7, #16
 8002140:	6878      	ldr	r0, [r7, #4]
 8002142:	f7ff ffb3 	bl	80020ac <CAN_Transmit>
	HAL_GPIO_TogglePin(GPIO_Port, LEDR_Pin);
 8002146:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800214a:	4803      	ldr	r0, [pc, #12]	; (8002158 <CANSensorTransmit+0x88>)
 800214c:	f002 fb02 	bl	8004754 <HAL_GPIO_TogglePin>
}
 8002150:	bf00      	nop
 8002152:	3730      	adds	r7, #48	; 0x30
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}
 8002158:	40010c00 	.word	0x40010c00

0800215c <HAL_CAN_RxFifo1MsgPendingCallback>:
{
//	HAL_GPIO_TogglePin(GPIO_Port, LEDG_Pin);
}

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b082      	sub	sp, #8
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &CANRxHeader, CANRxBuffer) != HAL_OK)
 8002164:	4b0b      	ldr	r3, [pc, #44]	; (8002194 <HAL_CAN_RxFifo1MsgPendingCallback+0x38>)
 8002166:	4a0c      	ldr	r2, [pc, #48]	; (8002198 <HAL_CAN_RxFifo1MsgPendingCallback+0x3c>)
 8002168:	2101      	movs	r1, #1
 800216a:	6878      	ldr	r0, [r7, #4]
 800216c:	f001 fcde 	bl	8003b2c <HAL_CAN_GetRxMessage>
 8002170:	4603      	mov	r3, r0
 8002172:	2b00      	cmp	r3, #0
 8002174:	d001      	beq.n	800217a <HAL_CAN_RxFifo1MsgPendingCallback+0x1e>
	{
		Error_Handler();
 8002176:	f000 fc6d 	bl	8002a54 <Error_Handler>
	}

	if (CANRxHeader.StdId == CAN_PROJECT_ACTUATOR_STDID)
 800217a:	4b07      	ldr	r3, [pc, #28]	; (8002198 <HAL_CAN_RxFifo1MsgPendingCallback+0x3c>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f240 7212 	movw	r2, #1810	; 0x712
 8002182:	4293      	cmp	r3, r2
 8002184:	d102      	bne.n	800218c <HAL_CAN_RxFifo1MsgPendingCallback+0x30>
	{
		CANDataRcvFlag = 1;
 8002186:	4b05      	ldr	r3, [pc, #20]	; (800219c <HAL_CAN_RxFifo1MsgPendingCallback+0x40>)
 8002188:	2201      	movs	r2, #1
 800218a:	701a      	strb	r2, [r3, #0]
	}
}
 800218c:	bf00      	nop
 800218e:	3708      	adds	r7, #8
 8002190:	46bd      	mov	sp, r7
 8002192:	bd80      	pop	{r7, pc}
 8002194:	20000208 	.word	0x20000208
 8002198:	20000210 	.word	0x20000210
 800219c:	2000022c 	.word	0x2000022c

080021a0 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80021a4:	f000 ff54 	bl	8003050 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80021a8:	f000 f928 	bl	80023fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80021ac:	f000 fae6 	bl	800277c <MX_GPIO_Init>
  MX_ADC1_Init();
 80021b0:	f000 f980 	bl	80024b4 <MX_ADC1_Init>
  MX_CAN_Init();
 80021b4:	f000 f9bc 	bl	8002530 <MX_CAN_Init>
  MX_I2C1_Init();
 80021b8:	f000 fa10 	bl	80025dc <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80021bc:	f000 fa8a 	bl	80026d4 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80021c0:	f000 fab2 	bl	8002728 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 80021c4:	f000 fa38 	bl	8002638 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 80021c8:	487b      	ldr	r0, [pc, #492]	; (80023b8 <main+0x218>)
 80021ca:	f004 f84d 	bl	8006268 <HAL_TIM_Base_Start_IT>
  if (HAL_CAN_Start(&hcan) != HAL_OK)
 80021ce:	487b      	ldr	r0, [pc, #492]	; (80023bc <main+0x21c>)
 80021d0:	f001 fb99 	bl	8003906 <HAL_CAN_Start>
 80021d4:	4603      	mov	r3, r0
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d001      	beq.n	80021de <main+0x3e>
  {
    Error_Handler();
 80021da:	f000 fc3b 	bl	8002a54 <Error_Handler>
  }
  HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO1_MSG_PENDING);
 80021de:	2110      	movs	r1, #16
 80021e0:	4876      	ldr	r0, [pc, #472]	; (80023bc <main+0x21c>)
 80021e2:	f001 fdc4 	bl	8003d6e <HAL_CAN_ActivateNotification>

  printf("Sensor\n");
 80021e6:	4876      	ldr	r0, [pc, #472]	; (80023c0 <main+0x220>)
 80021e8:	f005 fd3e 	bl	8007c68 <puts>
  // Sensor
  init2Sensor(&lox1, &lox2, &hi2c1);
 80021ec:	4a75      	ldr	r2, [pc, #468]	; (80023c4 <main+0x224>)
 80021ee:	4976      	ldr	r1, [pc, #472]	; (80023c8 <main+0x228>)
 80021f0:	4876      	ldr	r0, [pc, #472]	; (80023cc <main+0x22c>)
 80021f2:	f000 fb77 	bl	80028e4 <init2Sensor>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    left_dis = readRangeSingleMillimeters(&lox2);
 80021f6:	4874      	ldr	r0, [pc, #464]	; (80023c8 <main+0x228>)
 80021f8:	f7ff fcd2 	bl	8001ba0 <readRangeSingleMillimeters>
 80021fc:	4603      	mov	r3, r0
 80021fe:	461a      	mov	r2, r3
 8002200:	4b73      	ldr	r3, [pc, #460]	; (80023d0 <main+0x230>)
 8002202:	801a      	strh	r2, [r3, #0]
    right_dis = readRangeSingleMillimeters(&lox1);
 8002204:	4871      	ldr	r0, [pc, #452]	; (80023cc <main+0x22c>)
 8002206:	f7ff fccb 	bl	8001ba0 <readRangeSingleMillimeters>
 800220a:	4603      	mov	r3, r0
 800220c:	461a      	mov	r2, r3
 800220e:	4b71      	ldr	r3, [pc, #452]	; (80023d4 <main+0x234>)
 8002210:	801a      	strh	r2, [r3, #0]
    CANTxData.sequence++;
 8002212:	4b71      	ldr	r3, [pc, #452]	; (80023d8 <main+0x238>)
 8002214:	881b      	ldrh	r3, [r3, #0]
 8002216:	3301      	adds	r3, #1
 8002218:	b29a      	uxth	r2, r3
 800221a:	4b6f      	ldr	r3, [pc, #444]	; (80023d8 <main+0x238>)
 800221c:	801a      	strh	r2, [r3, #0]
    CANTxData.priority = CONTROL_PRIOR_NORMAL;
 800221e:	4b6e      	ldr	r3, [pc, #440]	; (80023d8 <main+0x238>)
 8002220:	2202      	movs	r2, #2
 8002222:	709a      	strb	r2, [r3, #2]
    if (CANDataRcvFlag == 1)
 8002224:	4b6d      	ldr	r3, [pc, #436]	; (80023dc <main+0x23c>)
 8002226:	781b      	ldrb	r3, [r3, #0]
 8002228:	2b01      	cmp	r3, #1
 800222a:	f040 80c0 	bne.w	80023ae <main+0x20e>
    {
      CANDataRcvFlag = 0;
 800222e:	4b6b      	ldr	r3, [pc, #428]	; (80023dc <main+0x23c>)
 8002230:	2200      	movs	r2, #0
 8002232:	701a      	strb	r2, [r3, #0]
      cur_seq = CANRxBuffer[CAN_DATA_SEQ_IDX] << 8 |
 8002234:	4b6a      	ldr	r3, [pc, #424]	; (80023e0 <main+0x240>)
 8002236:	781b      	ldrb	r3, [r3, #0]
 8002238:	021b      	lsls	r3, r3, #8
 800223a:	b25a      	sxtb	r2, r3
                CANRxBuffer[CAN_DATA_SEQ_IDX + 1];
 800223c:	4b68      	ldr	r3, [pc, #416]	; (80023e0 <main+0x240>)
 800223e:	785b      	ldrb	r3, [r3, #1]
 8002240:	b25b      	sxtb	r3, r3
      cur_seq = CANRxBuffer[CAN_DATA_SEQ_IDX] << 8 |
 8002242:	4313      	orrs	r3, r2
 8002244:	b25b      	sxtb	r3, r3
 8002246:	b2da      	uxtb	r2, r3
 8002248:	4b66      	ldr	r3, [pc, #408]	; (80023e4 <main+0x244>)
 800224a:	701a      	strb	r2, [r3, #0]
      cur_speed = CANRxBuffer[CAN_ACTUATOR_DATA_SPEED_IDX];
 800224c:	4b64      	ldr	r3, [pc, #400]	; (80023e0 <main+0x240>)
 800224e:	789a      	ldrb	r2, [r3, #2]
 8002250:	4b65      	ldr	r3, [pc, #404]	; (80023e8 <main+0x248>)
 8002252:	701a      	strb	r2, [r3, #0]

      if (cur_seq == last_seq)
 8002254:	4b63      	ldr	r3, [pc, #396]	; (80023e4 <main+0x244>)
 8002256:	781a      	ldrb	r2, [r3, #0]
 8002258:	4b64      	ldr	r3, [pc, #400]	; (80023ec <main+0x24c>)
 800225a:	781b      	ldrb	r3, [r3, #0]
 800225c:	429a      	cmp	r2, r3
 800225e:	d101      	bne.n	8002264 <main+0xc4>
      {
        __NOP(); // do nothing
 8002260:	bf00      	nop
 8002262:	e0a4      	b.n	80023ae <main+0x20e>
      }
      else
      {
        HAL_GPIO_TogglePin(GPIO_Port, LEDG_Pin);
 8002264:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002268:	4861      	ldr	r0, [pc, #388]	; (80023f0 <main+0x250>)
 800226a:	f002 fa73 	bl	8004754 <HAL_GPIO_TogglePin>
        HAL_GPIO_TogglePin(GPIO_Port, LEDB_Pin);
 800226e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002272:	485f      	ldr	r0, [pc, #380]	; (80023f0 <main+0x250>)
 8002274:	f002 fa6e 	bl	8004754 <HAL_GPIO_TogglePin>
        // điều chỉnh hướng đi lùi
        if (urgent_out == 1)
 8002278:	4b5e      	ldr	r3, [pc, #376]	; (80023f4 <main+0x254>)
 800227a:	781b      	ldrb	r3, [r3, #0]
 800227c:	2b01      	cmp	r3, #1
 800227e:	d11d      	bne.n	80022bc <main+0x11c>
		{
        	// Gửi gói tin đi lùi cho đến khi cả 2 cảm biến không còn vật cản
        	if (left_dis <= forward_threshold || right_dis <= forward_threshold)
 8002280:	4b53      	ldr	r3, [pc, #332]	; (80023d0 <main+0x230>)
 8002282:	881b      	ldrh	r3, [r3, #0]
 8002284:	f240 424c 	movw	r2, #1100	; 0x44c
 8002288:	4293      	cmp	r3, r2
 800228a:	d905      	bls.n	8002298 <main+0xf8>
 800228c:	4b51      	ldr	r3, [pc, #324]	; (80023d4 <main+0x234>)
 800228e:	881b      	ldrh	r3, [r3, #0]
 8002290:	f240 424c 	movw	r2, #1100	; 0x44c
 8002294:	4293      	cmp	r3, r2
 8002296:	d80d      	bhi.n	80022b4 <main+0x114>
        	{
        		CANTxData.priority = CONTROL_PRIOR_NORMAL;
 8002298:	4b4f      	ldr	r3, [pc, #316]	; (80023d8 <main+0x238>)
 800229a:	2202      	movs	r2, #2
 800229c:	709a      	strb	r2, [r3, #2]
				CANTxData.speed = CAN_SPEED_NORMAL;
 800229e:	4b4e      	ldr	r3, [pc, #312]	; (80023d8 <main+0x238>)
 80022a0:	220d      	movs	r2, #13
 80022a2:	70da      	strb	r2, [r3, #3]
				CANTxData.direction1 = CONTROL_DIR_BACKWARD;
 80022a4:	4b4c      	ldr	r3, [pc, #304]	; (80023d8 <main+0x238>)
 80022a6:	2201      	movs	r2, #1
 80022a8:	711a      	strb	r2, [r3, #4]
				CANTxData.direction2 = direction2;
 80022aa:	4b53      	ldr	r3, [pc, #332]	; (80023f8 <main+0x258>)
 80022ac:	781a      	ldrb	r2, [r3, #0]
 80022ae:	4b4a      	ldr	r3, [pc, #296]	; (80023d8 <main+0x238>)
 80022b0:	715a      	strb	r2, [r3, #5]
 80022b2:	e07c      	b.n	80023ae <main+0x20e>
        	}
        	else
        	{
        		// hết vật cản thì thoát urgent
        		urgent_out = 0;
 80022b4:	4b4f      	ldr	r3, [pc, #316]	; (80023f4 <main+0x254>)
 80022b6:	2200      	movs	r2, #0
 80022b8:	701a      	strb	r2, [r3, #0]
 80022ba:	e078      	b.n	80023ae <main+0x20e>
        	}
		}
        // nếu cả 2 gặp vật cản ko thể rẽ
        else if (left_dis < turn_threshold && right_dis < turn_threshold)
 80022bc:	4b44      	ldr	r3, [pc, #272]	; (80023d0 <main+0x230>)
 80022be:	881b      	ldrh	r3, [r3, #0]
 80022c0:	f44f 7216 	mov.w	r2, #600	; 0x258
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d224      	bcs.n	8002312 <main+0x172>
 80022c8:	4b42      	ldr	r3, [pc, #264]	; (80023d4 <main+0x234>)
 80022ca:	881b      	ldrh	r3, [r3, #0]
 80022cc:	f44f 7216 	mov.w	r2, #600	; 0x258
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d21e      	bcs.n	8002312 <main+0x172>
        {
        	// Nếu vật cản nằm bên trái thì ghi lại hướng
        	// bẻ lái qua trái, ngược lại thì ghi nhận hướng bẻ lái qua phải
        	// để đi lùi
        	if (left_dis < right_dis)
 80022d4:	4b3e      	ldr	r3, [pc, #248]	; (80023d0 <main+0x230>)
 80022d6:	881a      	ldrh	r2, [r3, #0]
 80022d8:	4b3e      	ldr	r3, [pc, #248]	; (80023d4 <main+0x234>)
 80022da:	881b      	ldrh	r3, [r3, #0]
 80022dc:	429a      	cmp	r2, r3
 80022de:	d203      	bcs.n	80022e8 <main+0x148>
        	{
        		direction2 = CONTROL_DIR_LEFT;
 80022e0:	4b45      	ldr	r3, [pc, #276]	; (80023f8 <main+0x258>)
 80022e2:	2200      	movs	r2, #0
 80022e4:	701a      	strb	r2, [r3, #0]
 80022e6:	e002      	b.n	80022ee <main+0x14e>
        	}
        	else
        	{
        		direction2 = CONTROL_DIR_RIGHT;
 80022e8:	4b43      	ldr	r3, [pc, #268]	; (80023f8 <main+0x258>)
 80022ea:	2201      	movs	r2, #1
 80022ec:	701a      	strb	r2, [r3, #0]
        	}
        	// nếu xe đang di chuyển thì tiếp tục gửi gói tin URGENT
        	if (cur_speed > CAN_SPEED_MIN)
 80022ee:	4b3e      	ldr	r3, [pc, #248]	; (80023e8 <main+0x248>)
 80022f0:	781b      	ldrb	r3, [r3, #0]
 80022f2:	2b07      	cmp	r3, #7
 80022f4:	d909      	bls.n	800230a <main+0x16a>
        	{
				CANTxData.priority = CONTROL_PRIOR_URGENT;
 80022f6:	4b38      	ldr	r3, [pc, #224]	; (80023d8 <main+0x238>)
 80022f8:	2200      	movs	r2, #0
 80022fa:	709a      	strb	r2, [r3, #2]
				CANTxData.speed = CAN_SPEED_NORMAL;
 80022fc:	4b36      	ldr	r3, [pc, #216]	; (80023d8 <main+0x238>)
 80022fe:	220d      	movs	r2, #13
 8002300:	70da      	strb	r2, [r3, #3]
				CANTxData.direction1 = CONTROL_DIR_BACKWARD;
 8002302:	4b35      	ldr	r3, [pc, #212]	; (80023d8 <main+0x238>)
 8002304:	2201      	movs	r2, #1
 8002306:	711a      	strb	r2, [r3, #4]
        	if (cur_speed > CAN_SPEED_MIN)
 8002308:	e051      	b.n	80023ae <main+0x20e>
        	}
        	// khi nào xe stop để chuyển hướng thì out URGENT
        	else
        	{
        		urgent_out = 1;
 800230a:	4b3a      	ldr	r3, [pc, #232]	; (80023f4 <main+0x254>)
 800230c:	2201      	movs	r2, #1
 800230e:	701a      	strb	r2, [r3, #0]
        	if (cur_speed > CAN_SPEED_MIN)
 8002310:	e04d      	b.n	80023ae <main+0x20e>
        	}
        }
        else if (left_dis >= forward_threshold && right_dis >= forward_threshold) // go Straight
 8002312:	4b2f      	ldr	r3, [pc, #188]	; (80023d0 <main+0x230>)
 8002314:	881b      	ldrh	r3, [r3, #0]
 8002316:	f240 424c 	movw	r2, #1100	; 0x44c
 800231a:	4293      	cmp	r3, r2
 800231c:	d312      	bcc.n	8002344 <main+0x1a4>
 800231e:	4b2d      	ldr	r3, [pc, #180]	; (80023d4 <main+0x234>)
 8002320:	881b      	ldrh	r3, [r3, #0]
 8002322:	f240 424c 	movw	r2, #1100	; 0x44c
 8002326:	4293      	cmp	r3, r2
 8002328:	d30c      	bcc.n	8002344 <main+0x1a4>
        {
          CANTxData.priority = CONTROL_PRIOR_NORMAL;
 800232a:	4b2b      	ldr	r3, [pc, #172]	; (80023d8 <main+0x238>)
 800232c:	2202      	movs	r2, #2
 800232e:	709a      	strb	r2, [r3, #2]
          CANTxData.speed = CAN_SPEED_NORMAL;
 8002330:	4b29      	ldr	r3, [pc, #164]	; (80023d8 <main+0x238>)
 8002332:	220d      	movs	r2, #13
 8002334:	70da      	strb	r2, [r3, #3]
          CANTxData.direction1 = CONTROL_DIR_FORWARD;
 8002336:	4b28      	ldr	r3, [pc, #160]	; (80023d8 <main+0x238>)
 8002338:	2200      	movs	r2, #0
 800233a:	711a      	strb	r2, [r3, #4]
		  CANTxData.direction2 = CONTROL_DIR_STRAIGHT;
 800233c:	4b26      	ldr	r3, [pc, #152]	; (80023d8 <main+0x238>)
 800233e:	2202      	movs	r2, #2
 8002340:	715a      	strb	r2, [r3, #5]
 8002342:	e034      	b.n	80023ae <main+0x20e>
        }
        else if (((left_dis - right_dis) > diff_LeftRight) && (right_dis < 900)) // Turn LEFT
 8002344:	4b22      	ldr	r3, [pc, #136]	; (80023d0 <main+0x230>)
 8002346:	881b      	ldrh	r3, [r3, #0]
 8002348:	461a      	mov	r2, r3
 800234a:	4b22      	ldr	r3, [pc, #136]	; (80023d4 <main+0x234>)
 800234c:	881b      	ldrh	r3, [r3, #0]
 800234e:	1ad3      	subs	r3, r2, r3
 8002350:	2264      	movs	r2, #100	; 0x64
 8002352:	4293      	cmp	r3, r2
 8002354:	dd11      	ble.n	800237a <main+0x1da>
 8002356:	4b1f      	ldr	r3, [pc, #124]	; (80023d4 <main+0x234>)
 8002358:	881b      	ldrh	r3, [r3, #0]
 800235a:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 800235e:	d20c      	bcs.n	800237a <main+0x1da>
        {
          CANTxData.priority = CONTROL_PRIOR_NORMAL;
 8002360:	4b1d      	ldr	r3, [pc, #116]	; (80023d8 <main+0x238>)
 8002362:	2202      	movs	r2, #2
 8002364:	709a      	strb	r2, [r3, #2]
          CANTxData.speed = CAN_SPEED_NORMAL;
 8002366:	4b1c      	ldr	r3, [pc, #112]	; (80023d8 <main+0x238>)
 8002368:	220d      	movs	r2, #13
 800236a:	70da      	strb	r2, [r3, #3]
          CANTxData.direction1 = CONTROL_DIR_FORWARD;
 800236c:	4b1a      	ldr	r3, [pc, #104]	; (80023d8 <main+0x238>)
 800236e:	2200      	movs	r2, #0
 8002370:	711a      	strb	r2, [r3, #4]
		  CANTxData.direction2 = CONTROL_DIR_LEFT;
 8002372:	4b19      	ldr	r3, [pc, #100]	; (80023d8 <main+0x238>)
 8002374:	2200      	movs	r2, #0
 8002376:	715a      	strb	r2, [r3, #5]
 8002378:	e019      	b.n	80023ae <main+0x20e>
        }
        else if (((right_dis - left_dis) > diff_LeftRight) && (left_dis < 900)) // Turn RIGHT
 800237a:	4b16      	ldr	r3, [pc, #88]	; (80023d4 <main+0x234>)
 800237c:	881b      	ldrh	r3, [r3, #0]
 800237e:	461a      	mov	r2, r3
 8002380:	4b13      	ldr	r3, [pc, #76]	; (80023d0 <main+0x230>)
 8002382:	881b      	ldrh	r3, [r3, #0]
 8002384:	1ad3      	subs	r3, r2, r3
 8002386:	2264      	movs	r2, #100	; 0x64
 8002388:	4293      	cmp	r3, r2
 800238a:	dd10      	ble.n	80023ae <main+0x20e>
 800238c:	4b10      	ldr	r3, [pc, #64]	; (80023d0 <main+0x230>)
 800238e:	881b      	ldrh	r3, [r3, #0]
 8002390:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8002394:	d20b      	bcs.n	80023ae <main+0x20e>
        {
          CANTxData.priority = CONTROL_PRIOR_NORMAL;
 8002396:	4b10      	ldr	r3, [pc, #64]	; (80023d8 <main+0x238>)
 8002398:	2202      	movs	r2, #2
 800239a:	709a      	strb	r2, [r3, #2]
          CANTxData.speed = CAN_SPEED_NORMAL;
 800239c:	4b0e      	ldr	r3, [pc, #56]	; (80023d8 <main+0x238>)
 800239e:	220d      	movs	r2, #13
 80023a0:	70da      	strb	r2, [r3, #3]
          CANTxData.direction1 = CONTROL_DIR_FORWARD;
 80023a2:	4b0d      	ldr	r3, [pc, #52]	; (80023d8 <main+0x238>)
 80023a4:	2200      	movs	r2, #0
 80023a6:	711a      	strb	r2, [r3, #4]
          CANTxData.direction2 = CONTROL_DIR_RIGHT;
 80023a8:	4b0b      	ldr	r3, [pc, #44]	; (80023d8 <main+0x238>)
 80023aa:	2201      	movs	r2, #1
 80023ac:	715a      	strb	r2, [r3, #5]
        }
      }
    }
    CANSensorTransmit(&hcan, &CANTxData);
 80023ae:	490a      	ldr	r1, [pc, #40]	; (80023d8 <main+0x238>)
 80023b0:	4802      	ldr	r0, [pc, #8]	; (80023bc <main+0x21c>)
 80023b2:	f7ff fe8d 	bl	80020d0 <CANSensorTransmit>
    left_dis = readRangeSingleMillimeters(&lox2);
 80023b6:	e71e      	b.n	80021f6 <main+0x56>
 80023b8:	200002dc 	.word	0x200002dc
 80023bc:	20000260 	.word	0x20000260
 80023c0:	0800b598 	.word	0x0800b598
 80023c4:	20000288 	.word	0x20000288
 80023c8:	200003cc 	.word	0x200003cc
 80023cc:	200003c4 	.word	0x200003c4
 80023d0:	200003bc 	.word	0x200003bc
 80023d4:	200003be 	.word	0x200003be
 80023d8:	200003b4 	.word	0x200003b4
 80023dc:	2000022c 	.word	0x2000022c
 80023e0:	20000208 	.word	0x20000208
 80023e4:	200003bb 	.word	0x200003bb
 80023e8:	20000001 	.word	0x20000001
 80023ec:	200003ba 	.word	0x200003ba
 80023f0:	40010c00 	.word	0x40010c00
 80023f4:	200003c0 	.word	0x200003c0
 80023f8:	200003c1 	.word	0x200003c1

080023fc <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b094      	sub	sp, #80	; 0x50
 8002400:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002402:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002406:	2228      	movs	r2, #40	; 0x28
 8002408:	2100      	movs	r1, #0
 800240a:	4618      	mov	r0, r3
 800240c:	f005 fd2c 	bl	8007e68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002410:	f107 0314 	add.w	r3, r7, #20
 8002414:	2200      	movs	r2, #0
 8002416:	601a      	str	r2, [r3, #0]
 8002418:	605a      	str	r2, [r3, #4]
 800241a:	609a      	str	r2, [r3, #8]
 800241c:	60da      	str	r2, [r3, #12]
 800241e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002420:	1d3b      	adds	r3, r7, #4
 8002422:	2200      	movs	r2, #0
 8002424:	601a      	str	r2, [r3, #0]
 8002426:	605a      	str	r2, [r3, #4]
 8002428:	609a      	str	r2, [r3, #8]
 800242a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800242c:	2301      	movs	r3, #1
 800242e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002430:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002434:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002436:	2300      	movs	r3, #0
 8002438:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800243a:	2301      	movs	r3, #1
 800243c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800243e:	2302      	movs	r3, #2
 8002440:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002442:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002446:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002448:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800244c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800244e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002452:	4618      	mov	r0, r3
 8002454:	f003 f9f2 	bl	800583c <HAL_RCC_OscConfig>
 8002458:	4603      	mov	r3, r0
 800245a:	2b00      	cmp	r3, #0
 800245c:	d001      	beq.n	8002462 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800245e:	f000 faf9 	bl	8002a54 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002462:	230f      	movs	r3, #15
 8002464:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002466:	2302      	movs	r3, #2
 8002468:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800246a:	2300      	movs	r3, #0
 800246c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800246e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002472:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002474:	2300      	movs	r3, #0
 8002476:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002478:	f107 0314 	add.w	r3, r7, #20
 800247c:	2102      	movs	r1, #2
 800247e:	4618      	mov	r0, r3
 8002480:	f003 fc5e 	bl	8005d40 <HAL_RCC_ClockConfig>
 8002484:	4603      	mov	r3, r0
 8002486:	2b00      	cmp	r3, #0
 8002488:	d001      	beq.n	800248e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800248a:	f000 fae3 	bl	8002a54 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800248e:	2302      	movs	r3, #2
 8002490:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8002492:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002496:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002498:	1d3b      	adds	r3, r7, #4
 800249a:	4618      	mov	r0, r3
 800249c:	f003 fdde 	bl	800605c <HAL_RCCEx_PeriphCLKConfig>
 80024a0:	4603      	mov	r3, r0
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d001      	beq.n	80024aa <SystemClock_Config+0xae>
  {
    Error_Handler();
 80024a6:	f000 fad5 	bl	8002a54 <Error_Handler>
  }
}
 80024aa:	bf00      	nop
 80024ac:	3750      	adds	r7, #80	; 0x50
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}
	...

080024b4 <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b084      	sub	sp, #16
 80024b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80024ba:	1d3b      	adds	r3, r7, #4
 80024bc:	2200      	movs	r2, #0
 80024be:	601a      	str	r2, [r3, #0]
 80024c0:	605a      	str	r2, [r3, #4]
 80024c2:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
   */
  hadc1.Instance = ADC1;
 80024c4:	4b18      	ldr	r3, [pc, #96]	; (8002528 <MX_ADC1_Init+0x74>)
 80024c6:	4a19      	ldr	r2, [pc, #100]	; (800252c <MX_ADC1_Init+0x78>)
 80024c8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80024ca:	4b17      	ldr	r3, [pc, #92]	; (8002528 <MX_ADC1_Init+0x74>)
 80024cc:	2200      	movs	r2, #0
 80024ce:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80024d0:	4b15      	ldr	r3, [pc, #84]	; (8002528 <MX_ADC1_Init+0x74>)
 80024d2:	2200      	movs	r2, #0
 80024d4:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80024d6:	4b14      	ldr	r3, [pc, #80]	; (8002528 <MX_ADC1_Init+0x74>)
 80024d8:	2200      	movs	r2, #0
 80024da:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80024dc:	4b12      	ldr	r3, [pc, #72]	; (8002528 <MX_ADC1_Init+0x74>)
 80024de:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80024e2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80024e4:	4b10      	ldr	r3, [pc, #64]	; (8002528 <MX_ADC1_Init+0x74>)
 80024e6:	2200      	movs	r2, #0
 80024e8:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80024ea:	4b0f      	ldr	r3, [pc, #60]	; (8002528 <MX_ADC1_Init+0x74>)
 80024ec:	2201      	movs	r2, #1
 80024ee:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80024f0:	480d      	ldr	r0, [pc, #52]	; (8002528 <MX_ADC1_Init+0x74>)
 80024f2:	f000 fe33 	bl	800315c <HAL_ADC_Init>
 80024f6:	4603      	mov	r3, r0
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d001      	beq.n	8002500 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80024fc:	f000 faaa 	bl	8002a54 <Error_Handler>
  }

  /** Configure Regular Channel
   */
  sConfig.Channel = ADC_CHANNEL_4;
 8002500:	2304      	movs	r3, #4
 8002502:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002504:	2301      	movs	r3, #1
 8002506:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002508:	2300      	movs	r3, #0
 800250a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800250c:	1d3b      	adds	r3, r7, #4
 800250e:	4619      	mov	r1, r3
 8002510:	4805      	ldr	r0, [pc, #20]	; (8002528 <MX_ADC1_Init+0x74>)
 8002512:	f000 fefb 	bl	800330c <HAL_ADC_ConfigChannel>
 8002516:	4603      	mov	r3, r0
 8002518:	2b00      	cmp	r3, #0
 800251a:	d001      	beq.n	8002520 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 800251c:	f000 fa9a 	bl	8002a54 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */
}
 8002520:	bf00      	nop
 8002522:	3710      	adds	r7, #16
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}
 8002528:	20000230 	.word	0x20000230
 800252c:	40012400 	.word	0x40012400

08002530 <MX_CAN_Init>:
 * @brief CAN Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN_Init(void)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b08a      	sub	sp, #40	; 0x28
 8002534:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8002536:	4b27      	ldr	r3, [pc, #156]	; (80025d4 <MX_CAN_Init+0xa4>)
 8002538:	4a27      	ldr	r2, [pc, #156]	; (80025d8 <MX_CAN_Init+0xa8>)
 800253a:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 800253c:	4b25      	ldr	r3, [pc, #148]	; (80025d4 <MX_CAN_Init+0xa4>)
 800253e:	2204      	movs	r2, #4
 8002540:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8002542:	4b24      	ldr	r3, [pc, #144]	; (80025d4 <MX_CAN_Init+0xa4>)
 8002544:	2200      	movs	r2, #0
 8002546:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_2TQ;
 8002548:	4b22      	ldr	r3, [pc, #136]	; (80025d4 <MX_CAN_Init+0xa4>)
 800254a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800254e:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 8002550:	4b20      	ldr	r3, [pc, #128]	; (80025d4 <MX_CAN_Init+0xa4>)
 8002552:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8002556:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_4TQ;
 8002558:	4b1e      	ldr	r3, [pc, #120]	; (80025d4 <MX_CAN_Init+0xa4>)
 800255a:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 800255e:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8002560:	4b1c      	ldr	r3, [pc, #112]	; (80025d4 <MX_CAN_Init+0xa4>)
 8002562:	2200      	movs	r2, #0
 8002564:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8002566:	4b1b      	ldr	r3, [pc, #108]	; (80025d4 <MX_CAN_Init+0xa4>)
 8002568:	2200      	movs	r2, #0
 800256a:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 800256c:	4b19      	ldr	r3, [pc, #100]	; (80025d4 <MX_CAN_Init+0xa4>)
 800256e:	2200      	movs	r2, #0
 8002570:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8002572:	4b18      	ldr	r3, [pc, #96]	; (80025d4 <MX_CAN_Init+0xa4>)
 8002574:	2200      	movs	r2, #0
 8002576:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8002578:	4b16      	ldr	r3, [pc, #88]	; (80025d4 <MX_CAN_Init+0xa4>)
 800257a:	2200      	movs	r2, #0
 800257c:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800257e:	4b15      	ldr	r3, [pc, #84]	; (80025d4 <MX_CAN_Init+0xa4>)
 8002580:	2200      	movs	r2, #0
 8002582:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8002584:	4813      	ldr	r0, [pc, #76]	; (80025d4 <MX_CAN_Init+0xa4>)
 8002586:	f000 fffa 	bl	800357e <HAL_CAN_Init>
 800258a:	4603      	mov	r3, r0
 800258c:	2b00      	cmp	r3, #0
 800258e:	d001      	beq.n	8002594 <MX_CAN_Init+0x64>
  {
    Error_Handler();
 8002590:	f000 fa60 	bl	8002a54 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  CAN_FilterTypeDef canfilterconfig;

  canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8002594:	2301      	movs	r3, #1
 8002596:	623b      	str	r3, [r7, #32]
  canfilterconfig.FilterBank = 12; // which filter bank to use from the assigned ones
 8002598:	230c      	movs	r3, #12
 800259a:	617b      	str	r3, [r7, #20]
  canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO1;
 800259c:	2301      	movs	r3, #1
 800259e:	613b      	str	r3, [r7, #16]
  canfilterconfig.FilterIdHigh = CAN_PROJECT_ACTUATOR_STDID << 5;
 80025a0:	f24e 2340 	movw	r3, #57920	; 0xe240
 80025a4:	603b      	str	r3, [r7, #0]
  canfilterconfig.FilterIdLow = 0;
 80025a6:	2300      	movs	r3, #0
 80025a8:	607b      	str	r3, [r7, #4]
  canfilterconfig.FilterMaskIdHigh = CAN_PROJECT_ACTUATOR_STDID << 5;
 80025aa:	f24e 2340 	movw	r3, #57920	; 0xe240
 80025ae:	60bb      	str	r3, [r7, #8]
  canfilterconfig.FilterMaskIdLow = 0x0000;
 80025b0:	2300      	movs	r3, #0
 80025b2:	60fb      	str	r3, [r7, #12]
  canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80025b4:	2300      	movs	r3, #0
 80025b6:	61bb      	str	r3, [r7, #24]
  canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80025b8:	2301      	movs	r3, #1
 80025ba:	61fb      	str	r3, [r7, #28]
  canfilterconfig.SlaveStartFilterBank = 13; // how many filters to assign to the CAN1 (master can)
 80025bc:	230d      	movs	r3, #13
 80025be:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_CAN_ConfigFilter(&hcan, &canfilterconfig);
 80025c0:	463b      	mov	r3, r7
 80025c2:	4619      	mov	r1, r3
 80025c4:	4803      	ldr	r0, [pc, #12]	; (80025d4 <MX_CAN_Init+0xa4>)
 80025c6:	f001 f8d5 	bl	8003774 <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN_Init 2 */
}
 80025ca:	bf00      	nop
 80025cc:	3728      	adds	r7, #40	; 0x28
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	20000260 	.word	0x20000260
 80025d8:	40006400 	.word	0x40006400

080025dc <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80025e0:	4b12      	ldr	r3, [pc, #72]	; (800262c <MX_I2C1_Init+0x50>)
 80025e2:	4a13      	ldr	r2, [pc, #76]	; (8002630 <MX_I2C1_Init+0x54>)
 80025e4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80025e6:	4b11      	ldr	r3, [pc, #68]	; (800262c <MX_I2C1_Init+0x50>)
 80025e8:	4a12      	ldr	r2, [pc, #72]	; (8002634 <MX_I2C1_Init+0x58>)
 80025ea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80025ec:	4b0f      	ldr	r3, [pc, #60]	; (800262c <MX_I2C1_Init+0x50>)
 80025ee:	2200      	movs	r2, #0
 80025f0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80025f2:	4b0e      	ldr	r3, [pc, #56]	; (800262c <MX_I2C1_Init+0x50>)
 80025f4:	2200      	movs	r2, #0
 80025f6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80025f8:	4b0c      	ldr	r3, [pc, #48]	; (800262c <MX_I2C1_Init+0x50>)
 80025fa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80025fe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002600:	4b0a      	ldr	r3, [pc, #40]	; (800262c <MX_I2C1_Init+0x50>)
 8002602:	2200      	movs	r2, #0
 8002604:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002606:	4b09      	ldr	r3, [pc, #36]	; (800262c <MX_I2C1_Init+0x50>)
 8002608:	2200      	movs	r2, #0
 800260a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800260c:	4b07      	ldr	r3, [pc, #28]	; (800262c <MX_I2C1_Init+0x50>)
 800260e:	2200      	movs	r2, #0
 8002610:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002612:	4b06      	ldr	r3, [pc, #24]	; (800262c <MX_I2C1_Init+0x50>)
 8002614:	2200      	movs	r2, #0
 8002616:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002618:	4804      	ldr	r0, [pc, #16]	; (800262c <MX_I2C1_Init+0x50>)
 800261a:	f002 f8b5 	bl	8004788 <HAL_I2C_Init>
 800261e:	4603      	mov	r3, r0
 8002620:	2b00      	cmp	r3, #0
 8002622:	d001      	beq.n	8002628 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002624:	f000 fa16 	bl	8002a54 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */
}
 8002628:	bf00      	nop
 800262a:	bd80      	pop	{r7, pc}
 800262c:	20000288 	.word	0x20000288
 8002630:	40005400 	.word	0x40005400
 8002634:	000186a0 	.word	0x000186a0

08002638 <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b086      	sub	sp, #24
 800263c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800263e:	f107 0308 	add.w	r3, r7, #8
 8002642:	2200      	movs	r2, #0
 8002644:	601a      	str	r2, [r3, #0]
 8002646:	605a      	str	r2, [r3, #4]
 8002648:	609a      	str	r2, [r3, #8]
 800264a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800264c:	463b      	mov	r3, r7
 800264e:	2200      	movs	r2, #0
 8002650:	601a      	str	r2, [r3, #0]
 8002652:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002654:	4b1d      	ldr	r3, [pc, #116]	; (80026cc <MX_TIM3_Init+0x94>)
 8002656:	4a1e      	ldr	r2, [pc, #120]	; (80026d0 <MX_TIM3_Init+0x98>)
 8002658:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 35999;
 800265a:	4b1c      	ldr	r3, [pc, #112]	; (80026cc <MX_TIM3_Init+0x94>)
 800265c:	f648 429f 	movw	r2, #35999	; 0x8c9f
 8002660:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002662:	4b1a      	ldr	r3, [pc, #104]	; (80026cc <MX_TIM3_Init+0x94>)
 8002664:	2200      	movs	r2, #0
 8002666:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 199;
 8002668:	4b18      	ldr	r3, [pc, #96]	; (80026cc <MX_TIM3_Init+0x94>)
 800266a:	22c7      	movs	r2, #199	; 0xc7
 800266c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800266e:	4b17      	ldr	r3, [pc, #92]	; (80026cc <MX_TIM3_Init+0x94>)
 8002670:	2200      	movs	r2, #0
 8002672:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002674:	4b15      	ldr	r3, [pc, #84]	; (80026cc <MX_TIM3_Init+0x94>)
 8002676:	2200      	movs	r2, #0
 8002678:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800267a:	4814      	ldr	r0, [pc, #80]	; (80026cc <MX_TIM3_Init+0x94>)
 800267c:	f003 fda4 	bl	80061c8 <HAL_TIM_Base_Init>
 8002680:	4603      	mov	r3, r0
 8002682:	2b00      	cmp	r3, #0
 8002684:	d001      	beq.n	800268a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8002686:	f000 f9e5 	bl	8002a54 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800268a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800268e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002690:	f107 0308 	add.w	r3, r7, #8
 8002694:	4619      	mov	r1, r3
 8002696:	480d      	ldr	r0, [pc, #52]	; (80026cc <MX_TIM3_Init+0x94>)
 8002698:	f003 ff40 	bl	800651c <HAL_TIM_ConfigClockSource>
 800269c:	4603      	mov	r3, r0
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d001      	beq.n	80026a6 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80026a2:	f000 f9d7 	bl	8002a54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026a6:	2300      	movs	r3, #0
 80026a8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026aa:	2300      	movs	r3, #0
 80026ac:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80026ae:	463b      	mov	r3, r7
 80026b0:	4619      	mov	r1, r3
 80026b2:	4806      	ldr	r0, [pc, #24]	; (80026cc <MX_TIM3_Init+0x94>)
 80026b4:	f004 f916 	bl	80068e4 <HAL_TIMEx_MasterConfigSynchronization>
 80026b8:	4603      	mov	r3, r0
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d001      	beq.n	80026c2 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80026be:	f000 f9c9 	bl	8002a54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
}
 80026c2:	bf00      	nop
 80026c4:	3718      	adds	r7, #24
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	bf00      	nop
 80026cc:	200002dc 	.word	0x200002dc
 80026d0:	40000400 	.word	0x40000400

080026d4 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80026d8:	4b11      	ldr	r3, [pc, #68]	; (8002720 <MX_USART1_UART_Init+0x4c>)
 80026da:	4a12      	ldr	r2, [pc, #72]	; (8002724 <MX_USART1_UART_Init+0x50>)
 80026dc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80026de:	4b10      	ldr	r3, [pc, #64]	; (8002720 <MX_USART1_UART_Init+0x4c>)
 80026e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80026e4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80026e6:	4b0e      	ldr	r3, [pc, #56]	; (8002720 <MX_USART1_UART_Init+0x4c>)
 80026e8:	2200      	movs	r2, #0
 80026ea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80026ec:	4b0c      	ldr	r3, [pc, #48]	; (8002720 <MX_USART1_UART_Init+0x4c>)
 80026ee:	2200      	movs	r2, #0
 80026f0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80026f2:	4b0b      	ldr	r3, [pc, #44]	; (8002720 <MX_USART1_UART_Init+0x4c>)
 80026f4:	2200      	movs	r2, #0
 80026f6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80026f8:	4b09      	ldr	r3, [pc, #36]	; (8002720 <MX_USART1_UART_Init+0x4c>)
 80026fa:	220c      	movs	r2, #12
 80026fc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026fe:	4b08      	ldr	r3, [pc, #32]	; (8002720 <MX_USART1_UART_Init+0x4c>)
 8002700:	2200      	movs	r2, #0
 8002702:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002704:	4b06      	ldr	r3, [pc, #24]	; (8002720 <MX_USART1_UART_Init+0x4c>)
 8002706:	2200      	movs	r2, #0
 8002708:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800270a:	4805      	ldr	r0, [pc, #20]	; (8002720 <MX_USART1_UART_Init+0x4c>)
 800270c:	f004 f95a 	bl	80069c4 <HAL_UART_Init>
 8002710:	4603      	mov	r3, r0
 8002712:	2b00      	cmp	r3, #0
 8002714:	d001      	beq.n	800271a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002716:	f000 f99d 	bl	8002a54 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */
}
 800271a:	bf00      	nop
 800271c:	bd80      	pop	{r7, pc}
 800271e:	bf00      	nop
 8002720:	20000324 	.word	0x20000324
 8002724:	40013800 	.word	0x40013800

08002728 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800272c:	4b11      	ldr	r3, [pc, #68]	; (8002774 <MX_USART2_UART_Init+0x4c>)
 800272e:	4a12      	ldr	r2, [pc, #72]	; (8002778 <MX_USART2_UART_Init+0x50>)
 8002730:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002732:	4b10      	ldr	r3, [pc, #64]	; (8002774 <MX_USART2_UART_Init+0x4c>)
 8002734:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002738:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800273a:	4b0e      	ldr	r3, [pc, #56]	; (8002774 <MX_USART2_UART_Init+0x4c>)
 800273c:	2200      	movs	r2, #0
 800273e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002740:	4b0c      	ldr	r3, [pc, #48]	; (8002774 <MX_USART2_UART_Init+0x4c>)
 8002742:	2200      	movs	r2, #0
 8002744:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002746:	4b0b      	ldr	r3, [pc, #44]	; (8002774 <MX_USART2_UART_Init+0x4c>)
 8002748:	2200      	movs	r2, #0
 800274a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800274c:	4b09      	ldr	r3, [pc, #36]	; (8002774 <MX_USART2_UART_Init+0x4c>)
 800274e:	220c      	movs	r2, #12
 8002750:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002752:	4b08      	ldr	r3, [pc, #32]	; (8002774 <MX_USART2_UART_Init+0x4c>)
 8002754:	2200      	movs	r2, #0
 8002756:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002758:	4b06      	ldr	r3, [pc, #24]	; (8002774 <MX_USART2_UART_Init+0x4c>)
 800275a:	2200      	movs	r2, #0
 800275c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800275e:	4805      	ldr	r0, [pc, #20]	; (8002774 <MX_USART2_UART_Init+0x4c>)
 8002760:	f004 f930 	bl	80069c4 <HAL_UART_Init>
 8002764:	4603      	mov	r3, r0
 8002766:	2b00      	cmp	r3, #0
 8002768:	d001      	beq.n	800276e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800276a:	f000 f973 	bl	8002a54 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */
}
 800276e:	bf00      	nop
 8002770:	bd80      	pop	{r7, pc}
 8002772:	bf00      	nop
 8002774:	2000036c 	.word	0x2000036c
 8002778:	40004400 	.word	0x40004400

0800277c <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b088      	sub	sp, #32
 8002780:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002782:	f107 0310 	add.w	r3, r7, #16
 8002786:	2200      	movs	r2, #0
 8002788:	601a      	str	r2, [r3, #0]
 800278a:	605a      	str	r2, [r3, #4]
 800278c:	609a      	str	r2, [r3, #8]
 800278e:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002790:	4b4f      	ldr	r3, [pc, #316]	; (80028d0 <MX_GPIO_Init+0x154>)
 8002792:	699b      	ldr	r3, [r3, #24]
 8002794:	4a4e      	ldr	r2, [pc, #312]	; (80028d0 <MX_GPIO_Init+0x154>)
 8002796:	f043 0310 	orr.w	r3, r3, #16
 800279a:	6193      	str	r3, [r2, #24]
 800279c:	4b4c      	ldr	r3, [pc, #304]	; (80028d0 <MX_GPIO_Init+0x154>)
 800279e:	699b      	ldr	r3, [r3, #24]
 80027a0:	f003 0310 	and.w	r3, r3, #16
 80027a4:	60fb      	str	r3, [r7, #12]
 80027a6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80027a8:	4b49      	ldr	r3, [pc, #292]	; (80028d0 <MX_GPIO_Init+0x154>)
 80027aa:	699b      	ldr	r3, [r3, #24]
 80027ac:	4a48      	ldr	r2, [pc, #288]	; (80028d0 <MX_GPIO_Init+0x154>)
 80027ae:	f043 0320 	orr.w	r3, r3, #32
 80027b2:	6193      	str	r3, [r2, #24]
 80027b4:	4b46      	ldr	r3, [pc, #280]	; (80028d0 <MX_GPIO_Init+0x154>)
 80027b6:	699b      	ldr	r3, [r3, #24]
 80027b8:	f003 0320 	and.w	r3, r3, #32
 80027bc:	60bb      	str	r3, [r7, #8]
 80027be:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80027c0:	4b43      	ldr	r3, [pc, #268]	; (80028d0 <MX_GPIO_Init+0x154>)
 80027c2:	699b      	ldr	r3, [r3, #24]
 80027c4:	4a42      	ldr	r2, [pc, #264]	; (80028d0 <MX_GPIO_Init+0x154>)
 80027c6:	f043 0304 	orr.w	r3, r3, #4
 80027ca:	6193      	str	r3, [r2, #24]
 80027cc:	4b40      	ldr	r3, [pc, #256]	; (80028d0 <MX_GPIO_Init+0x154>)
 80027ce:	699b      	ldr	r3, [r3, #24]
 80027d0:	f003 0304 	and.w	r3, r3, #4
 80027d4:	607b      	str	r3, [r7, #4]
 80027d6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80027d8:	4b3d      	ldr	r3, [pc, #244]	; (80028d0 <MX_GPIO_Init+0x154>)
 80027da:	699b      	ldr	r3, [r3, #24]
 80027dc:	4a3c      	ldr	r2, [pc, #240]	; (80028d0 <MX_GPIO_Init+0x154>)
 80027de:	f043 0308 	orr.w	r3, r3, #8
 80027e2:	6193      	str	r3, [r2, #24]
 80027e4:	4b3a      	ldr	r3, [pc, #232]	; (80028d0 <MX_GPIO_Init+0x154>)
 80027e6:	699b      	ldr	r3, [r3, #24]
 80027e8:	f003 0308 	and.w	r3, r3, #8
 80027ec:	603b      	str	r3, [r7, #0]
 80027ee:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LedOnBoard_Pin | XSHUT_MCU1_0_Pin, GPIO_PIN_SET);
 80027f0:	2201      	movs	r2, #1
 80027f2:	f44f 4120 	mov.w	r1, #40960	; 0xa000
 80027f6:	4837      	ldr	r0, [pc, #220]	; (80028d4 <MX_GPIO_Init+0x158>)
 80027f8:	f001 ff94 	bl	8004724 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LEDB_Pin | LEDG_Pin | LEDR_Pin | GPIO_PIN_3 | XSHUT_MCU1_1_Pin, GPIO_PIN_SET);
 80027fc:	2201      	movs	r2, #1
 80027fe:	f641 5108 	movw	r1, #7432	; 0x1d08
 8002802:	4835      	ldr	r0, [pc, #212]	; (80028d8 <MX_GPIO_Init+0x15c>)
 8002804:	f001 ff8e 	bl	8004724 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MPU_BOOT_Pin | MPU_RST_Pin, GPIO_PIN_RESET);
 8002808:	2200      	movs	r2, #0
 800280a:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 800280e:	4832      	ldr	r0, [pc, #200]	; (80028d8 <MX_GPIO_Init+0x15c>)
 8002810:	f001 ff88 	bl	8004724 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 8002814:	2200      	movs	r2, #0
 8002816:	f44f 7180 	mov.w	r1, #256	; 0x100
 800281a:	4830      	ldr	r0, [pc, #192]	; (80028dc <MX_GPIO_Init+0x160>)
 800281c:	f001 ff82 	bl	8004724 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LedOnBoard_Pin XSHUT_MCU1_0_Pin */
  GPIO_InitStruct.Pin = LedOnBoard_Pin | XSHUT_MCU1_0_Pin;
 8002820:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8002824:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002826:	2301      	movs	r3, #1
 8002828:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800282a:	2300      	movs	r3, #0
 800282c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800282e:	2302      	movs	r3, #2
 8002830:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002832:	f107 0310 	add.w	r3, r7, #16
 8002836:	4619      	mov	r1, r3
 8002838:	4826      	ldr	r0, [pc, #152]	; (80028d4 <MX_GPIO_Init+0x158>)
 800283a:	f001 fdef 	bl	800441c <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO1_MCU1_0_Pin */
  GPIO_InitStruct.Pin = GPIO1_MCU1_0_Pin;
 800283e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002842:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002844:	4b26      	ldr	r3, [pc, #152]	; (80028e0 <MX_GPIO_Init+0x164>)
 8002846:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002848:	2300      	movs	r3, #0
 800284a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIO1_MCU1_0_GPIO_Port, &GPIO_InitStruct);
 800284c:	f107 0310 	add.w	r3, r7, #16
 8002850:	4619      	mov	r1, r3
 8002852:	4820      	ldr	r0, [pc, #128]	; (80028d4 <MX_GPIO_Init+0x158>)
 8002854:	f001 fde2 	bl	800441c <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN2_Pin BTN1_Pin */
  GPIO_InitStruct.Pin = BTN2_Pin | BTN1_Pin;
 8002858:	2303      	movs	r3, #3
 800285a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800285c:	2300      	movs	r3, #0
 800285e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002860:	2300      	movs	r3, #0
 8002862:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002864:	f107 0310 	add.w	r3, r7, #16
 8002868:	4619      	mov	r1, r3
 800286a:	481b      	ldr	r0, [pc, #108]	; (80028d8 <MX_GPIO_Init+0x15c>)
 800286c:	f001 fdd6 	bl	800441c <HAL_GPIO_Init>

  /*Configure GPIO pins : LEDB_Pin LEDG_Pin LEDR_Pin MPU_BOOT_Pin
                           MPU_RST_Pin PB3 XSHUT_MCU1_1_Pin */
  GPIO_InitStruct.Pin = LEDB_Pin | LEDG_Pin | LEDR_Pin | MPU_BOOT_Pin | MPU_RST_Pin | GPIO_PIN_3 | XSHUT_MCU1_1_Pin;
 8002870:	f64d 5308 	movw	r3, #56584	; 0xdd08
 8002874:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002876:	2301      	movs	r3, #1
 8002878:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800287a:	2300      	movs	r3, #0
 800287c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800287e:	2302      	movs	r3, #2
 8002880:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002882:	f107 0310 	add.w	r3, r7, #16
 8002886:	4619      	mov	r1, r3
 8002888:	4813      	ldr	r0, [pc, #76]	; (80028d8 <MX_GPIO_Init+0x15c>)
 800288a:	f001 fdc7 	bl	800441c <HAL_GPIO_Init>

  /*Configure GPIO pins : MPU_INT_Pin GPIO1_MCU1_1_Pin */
  GPIO_InitStruct.Pin = MPU_INT_Pin | GPIO1_MCU1_1_Pin;
 800288e:	f44f 5308 	mov.w	r3, #8704	; 0x2200
 8002892:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002894:	4b12      	ldr	r3, [pc, #72]	; (80028e0 <MX_GPIO_Init+0x164>)
 8002896:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002898:	2300      	movs	r3, #0
 800289a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800289c:	f107 0310 	add.w	r3, r7, #16
 80028a0:	4619      	mov	r1, r3
 80028a2:	480d      	ldr	r0, [pc, #52]	; (80028d8 <MX_GPIO_Init+0x15c>)
 80028a4:	f001 fdba 	bl	800441c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_CS_Pin */
  GPIO_InitStruct.Pin = SPI_CS_Pin;
 80028a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80028ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028ae:	2301      	movs	r3, #1
 80028b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028b2:	2300      	movs	r3, #0
 80028b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028b6:	2302      	movs	r3, #2
 80028b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 80028ba:	f107 0310 	add.w	r3, r7, #16
 80028be:	4619      	mov	r1, r3
 80028c0:	4806      	ldr	r0, [pc, #24]	; (80028dc <MX_GPIO_Init+0x160>)
 80028c2:	f001 fdab 	bl	800441c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 80028c6:	bf00      	nop
 80028c8:	3720      	adds	r7, #32
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}
 80028ce:	bf00      	nop
 80028d0:	40021000 	.word	0x40021000
 80028d4:	40011000 	.word	0x40011000
 80028d8:	40010c00 	.word	0x40010c00
 80028dc:	40010800 	.word	0x40010800
 80028e0:	10110000 	.word	0x10110000

080028e4 <init2Sensor>:

/* USER CODE BEGIN 4 */
void init2Sensor(VL53L0X_t *lox1, VL53L0X_t *lox2, I2C_HandleTypeDef *i2cx)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b084      	sub	sp, #16
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	60f8      	str	r0, [r7, #12]
 80028ec:	60b9      	str	r1, [r7, #8]
 80028ee:	607a      	str	r2, [r7, #4]

  // Reset sensor
  lox1->Address = ADDRESS_DEFAULT;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	2252      	movs	r2, #82	; 0x52
 80028f4:	711a      	strb	r2, [r3, #4]
  lox2->Address = ADDRESS_DEFAULT;
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	2252      	movs	r2, #82	; 0x52
 80028fa:	711a      	strb	r2, [r3, #4]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, 0);
 80028fc:	2200      	movs	r2, #0
 80028fe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002902:	484e      	ldr	r0, [pc, #312]	; (8002a3c <init2Sensor+0x158>)
 8002904:	f001 ff0e 	bl	8004724 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, 0);
 8002908:	2200      	movs	r2, #0
 800290a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800290e:	484c      	ldr	r0, [pc, #304]	; (8002a40 <init2Sensor+0x15c>)
 8002910:	f001 ff08 	bl	8004724 <HAL_GPIO_WritePin>
  HAL_Delay(20);
 8002914:	2014      	movs	r0, #20
 8002916:	f000 fbfd 	bl	8003114 <HAL_Delay>

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, 1);
 800291a:	2201      	movs	r2, #1
 800291c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002920:	4847      	ldr	r0, [pc, #284]	; (8002a40 <init2Sensor+0x15c>)
 8002922:	f001 feff 	bl	8004724 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, 1);
 8002926:	2201      	movs	r2, #1
 8002928:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800292c:	4843      	ldr	r0, [pc, #268]	; (8002a3c <init2Sensor+0x158>)
 800292e:	f001 fef9 	bl	8004724 <HAL_GPIO_WritePin>
  HAL_Delay(20);
 8002932:	2014      	movs	r0, #20
 8002934:	f000 fbee 	bl	8003114 <HAL_Delay>

  // init first sensor
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, 0);
 8002938:	2200      	movs	r2, #0
 800293a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800293e:	4840      	ldr	r0, [pc, #256]	; (8002a40 <init2Sensor+0x15c>)
 8002940:	f001 fef0 	bl	8004724 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, 1);
 8002944:	2201      	movs	r2, #1
 8002946:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800294a:	483c      	ldr	r0, [pc, #240]	; (8002a3c <init2Sensor+0x158>)
 800294c:	f001 feea 	bl	8004724 <HAL_GPIO_WritePin>
  HAL_Delay(20);
 8002950:	2014      	movs	r0, #20
 8002952:	f000 fbdf 	bl	8003114 <HAL_Delay>
  while (!initVL53L0X(1, lox1, i2cx))
 8002956:	e008      	b.n	800296a <init2Sensor+0x86>
  {
    HAL_GPIO_WritePin(LEDR_GPIO_Port, LEDR_Pin, 0); // on led
 8002958:	2200      	movs	r2, #0
 800295a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800295e:	4838      	ldr	r0, [pc, #224]	; (8002a40 <init2Sensor+0x15c>)
 8002960:	f001 fee0 	bl	8004724 <HAL_GPIO_WritePin>
    printf("Failed 1!\n");
 8002964:	4837      	ldr	r0, [pc, #220]	; (8002a44 <init2Sensor+0x160>)
 8002966:	f005 f97f 	bl	8007c68 <puts>
  while (!initVL53L0X(1, lox1, i2cx))
 800296a:	687a      	ldr	r2, [r7, #4]
 800296c:	68f9      	ldr	r1, [r7, #12]
 800296e:	2001      	movs	r0, #1
 8002970:	f7fe fc70 	bl	8001254 <initVL53L0X>
 8002974:	4603      	mov	r3, r0
 8002976:	2b00      	cmp	r3, #0
 8002978:	d0ee      	beq.n	8002958 <init2Sensor+0x74>
  }
  setAddress(0x50, lox1);
 800297a:	68f9      	ldr	r1, [r7, #12]
 800297c:	2050      	movs	r0, #80	; 0x50
 800297e:	f7fe fc45 	bl	800120c <setAddress>

  while (!initVL53L0X(1, lox1, i2cx))
 8002982:	e008      	b.n	8002996 <init2Sensor+0xb2>
  {
    HAL_GPIO_WritePin(LEDR_GPIO_Port, LEDR_Pin, 0); // on led
 8002984:	2200      	movs	r2, #0
 8002986:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800298a:	482d      	ldr	r0, [pc, #180]	; (8002a40 <init2Sensor+0x15c>)
 800298c:	f001 feca 	bl	8004724 <HAL_GPIO_WritePin>
    printf("Failed 2!\n");
 8002990:	482d      	ldr	r0, [pc, #180]	; (8002a48 <init2Sensor+0x164>)
 8002992:	f005 f969 	bl	8007c68 <puts>
  while (!initVL53L0X(1, lox1, i2cx))
 8002996:	687a      	ldr	r2, [r7, #4]
 8002998:	68f9      	ldr	r1, [r7, #12]
 800299a:	2001      	movs	r0, #1
 800299c:	f7fe fc5a 	bl	8001254 <initVL53L0X>
 80029a0:	4603      	mov	r3, r0
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d0ee      	beq.n	8002984 <init2Sensor+0xa0>
  }

  // init second sensor
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, 1);
 80029a6:	2201      	movs	r2, #1
 80029a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80029ac:	4824      	ldr	r0, [pc, #144]	; (8002a40 <init2Sensor+0x15c>)
 80029ae:	f001 feb9 	bl	8004724 <HAL_GPIO_WritePin>
  HAL_Delay(20);
 80029b2:	2014      	movs	r0, #20
 80029b4:	f000 fbae 	bl	8003114 <HAL_Delay>

  while (!initVL53L0X(1, lox2, i2cx))
 80029b8:	e008      	b.n	80029cc <init2Sensor+0xe8>
  {
    HAL_GPIO_WritePin(LEDR_GPIO_Port, LEDR_Pin, 0); // on led
 80029ba:	2200      	movs	r2, #0
 80029bc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80029c0:	481f      	ldr	r0, [pc, #124]	; (8002a40 <init2Sensor+0x15c>)
 80029c2:	f001 feaf 	bl	8004724 <HAL_GPIO_WritePin>
    printf("Failed 3!\n");
 80029c6:	4821      	ldr	r0, [pc, #132]	; (8002a4c <init2Sensor+0x168>)
 80029c8:	f005 f94e 	bl	8007c68 <puts>
  while (!initVL53L0X(1, lox2, i2cx))
 80029cc:	687a      	ldr	r2, [r7, #4]
 80029ce:	68b9      	ldr	r1, [r7, #8]
 80029d0:	2001      	movs	r0, #1
 80029d2:	f7fe fc3f 	bl	8001254 <initVL53L0X>
 80029d6:	4603      	mov	r3, r0
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d0ee      	beq.n	80029ba <init2Sensor+0xd6>
  }
  setAddress(0x42, lox2);
 80029dc:	68b9      	ldr	r1, [r7, #8]
 80029de:	2042      	movs	r0, #66	; 0x42
 80029e0:	f7fe fc14 	bl	800120c <setAddress>

  while (!initVL53L0X(1, lox2, i2cx))
 80029e4:	e008      	b.n	80029f8 <init2Sensor+0x114>
  {
    HAL_GPIO_WritePin(LEDR_GPIO_Port, LEDR_Pin, 0); // on led
 80029e6:	2200      	movs	r2, #0
 80029e8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80029ec:	4814      	ldr	r0, [pc, #80]	; (8002a40 <init2Sensor+0x15c>)
 80029ee:	f001 fe99 	bl	8004724 <HAL_GPIO_WritePin>
    printf("Failed 4!\n");
 80029f2:	4817      	ldr	r0, [pc, #92]	; (8002a50 <init2Sensor+0x16c>)
 80029f4:	f005 f938 	bl	8007c68 <puts>
  while (!initVL53L0X(1, lox2, i2cx))
 80029f8:	687a      	ldr	r2, [r7, #4]
 80029fa:	68b9      	ldr	r1, [r7, #8]
 80029fc:	2001      	movs	r0, #1
 80029fe:	f7fe fc29 	bl	8001254 <initVL53L0X>
 8002a02:	4603      	mov	r3, r0
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d0ee      	beq.n	80029e6 <init2Sensor+0x102>
  }

  // turn on 2 sensor
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, 1);
 8002a08:	2201      	movs	r2, #1
 8002a0a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002a0e:	480c      	ldr	r0, [pc, #48]	; (8002a40 <init2Sensor+0x15c>)
 8002a10:	f001 fe88 	bl	8004724 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, 1);
 8002a14:	2201      	movs	r2, #1
 8002a16:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002a1a:	4808      	ldr	r0, [pc, #32]	; (8002a3c <init2Sensor+0x158>)
 8002a1c:	f001 fe82 	bl	8004724 <HAL_GPIO_WritePin>
  HAL_Delay(20);
 8002a20:	2014      	movs	r0, #20
 8002a22:	f000 fb77 	bl	8003114 <HAL_Delay>
  HAL_GPIO_WritePin(LEDR_GPIO_Port, LEDR_Pin, 1); // off led
 8002a26:	2201      	movs	r2, #1
 8002a28:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002a2c:	4804      	ldr	r0, [pc, #16]	; (8002a40 <init2Sensor+0x15c>)
 8002a2e:	f001 fe79 	bl	8004724 <HAL_GPIO_WritePin>
}
 8002a32:	bf00      	nop
 8002a34:	3710      	adds	r7, #16
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}
 8002a3a:	bf00      	nop
 8002a3c:	40011000 	.word	0x40011000
 8002a40:	40010c00 	.word	0x40010c00
 8002a44:	0800b5a0 	.word	0x0800b5a0
 8002a48:	0800b5ac 	.word	0x0800b5ac
 8002a4c:	0800b5b8 	.word	0x0800b5b8
 8002a50:	0800b5c4 	.word	0x0800b5c4

08002a54 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002a58:	b672      	cpsid	i
}
 8002a5a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
    HAL_GPIO_TogglePin(LEDG_GPIO_Port, LEDG_Pin);
 8002a5c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002a60:	4803      	ldr	r0, [pc, #12]	; (8002a70 <Error_Handler+0x1c>)
 8002a62:	f001 fe77 	bl	8004754 <HAL_GPIO_TogglePin>
    HAL_Delay(200);
 8002a66:	20c8      	movs	r0, #200	; 0xc8
 8002a68:	f000 fb54 	bl	8003114 <HAL_Delay>
    HAL_GPIO_TogglePin(LEDG_GPIO_Port, LEDG_Pin);
 8002a6c:	e7f6      	b.n	8002a5c <Error_Handler+0x8>
 8002a6e:	bf00      	nop
 8002a70:	40010c00 	.word	0x40010c00

08002a74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b083      	sub	sp, #12
 8002a78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002a7a:	4b0e      	ldr	r3, [pc, #56]	; (8002ab4 <HAL_MspInit+0x40>)
 8002a7c:	699b      	ldr	r3, [r3, #24]
 8002a7e:	4a0d      	ldr	r2, [pc, #52]	; (8002ab4 <HAL_MspInit+0x40>)
 8002a80:	f043 0301 	orr.w	r3, r3, #1
 8002a84:	6193      	str	r3, [r2, #24]
 8002a86:	4b0b      	ldr	r3, [pc, #44]	; (8002ab4 <HAL_MspInit+0x40>)
 8002a88:	699b      	ldr	r3, [r3, #24]
 8002a8a:	f003 0301 	and.w	r3, r3, #1
 8002a8e:	607b      	str	r3, [r7, #4]
 8002a90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a92:	4b08      	ldr	r3, [pc, #32]	; (8002ab4 <HAL_MspInit+0x40>)
 8002a94:	69db      	ldr	r3, [r3, #28]
 8002a96:	4a07      	ldr	r2, [pc, #28]	; (8002ab4 <HAL_MspInit+0x40>)
 8002a98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a9c:	61d3      	str	r3, [r2, #28]
 8002a9e:	4b05      	ldr	r3, [pc, #20]	; (8002ab4 <HAL_MspInit+0x40>)
 8002aa0:	69db      	ldr	r3, [r3, #28]
 8002aa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aa6:	603b      	str	r3, [r7, #0]
 8002aa8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002aaa:	bf00      	nop
 8002aac:	370c      	adds	r7, #12
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bc80      	pop	{r7}
 8002ab2:	4770      	bx	lr
 8002ab4:	40021000 	.word	0x40021000

08002ab8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b088      	sub	sp, #32
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ac0:	f107 0310 	add.w	r3, r7, #16
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	601a      	str	r2, [r3, #0]
 8002ac8:	605a      	str	r2, [r3, #4]
 8002aca:	609a      	str	r2, [r3, #8]
 8002acc:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a14      	ldr	r2, [pc, #80]	; (8002b24 <HAL_ADC_MspInit+0x6c>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d121      	bne.n	8002b1c <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002ad8:	4b13      	ldr	r3, [pc, #76]	; (8002b28 <HAL_ADC_MspInit+0x70>)
 8002ada:	699b      	ldr	r3, [r3, #24]
 8002adc:	4a12      	ldr	r2, [pc, #72]	; (8002b28 <HAL_ADC_MspInit+0x70>)
 8002ade:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ae2:	6193      	str	r3, [r2, #24]
 8002ae4:	4b10      	ldr	r3, [pc, #64]	; (8002b28 <HAL_ADC_MspInit+0x70>)
 8002ae6:	699b      	ldr	r3, [r3, #24]
 8002ae8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002aec:	60fb      	str	r3, [r7, #12]
 8002aee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002af0:	4b0d      	ldr	r3, [pc, #52]	; (8002b28 <HAL_ADC_MspInit+0x70>)
 8002af2:	699b      	ldr	r3, [r3, #24]
 8002af4:	4a0c      	ldr	r2, [pc, #48]	; (8002b28 <HAL_ADC_MspInit+0x70>)
 8002af6:	f043 0304 	orr.w	r3, r3, #4
 8002afa:	6193      	str	r3, [r2, #24]
 8002afc:	4b0a      	ldr	r3, [pc, #40]	; (8002b28 <HAL_ADC_MspInit+0x70>)
 8002afe:	699b      	ldr	r3, [r3, #24]
 8002b00:	f003 0304 	and.w	r3, r3, #4
 8002b04:	60bb      	str	r3, [r7, #8]
 8002b06:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = ADC_TEMPT_Pin;
 8002b08:	2310      	movs	r3, #16
 8002b0a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002b0c:	2303      	movs	r3, #3
 8002b0e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(ADC_TEMPT_GPIO_Port, &GPIO_InitStruct);
 8002b10:	f107 0310 	add.w	r3, r7, #16
 8002b14:	4619      	mov	r1, r3
 8002b16:	4805      	ldr	r0, [pc, #20]	; (8002b2c <HAL_ADC_MspInit+0x74>)
 8002b18:	f001 fc80 	bl	800441c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002b1c:	bf00      	nop
 8002b1e:	3720      	adds	r7, #32
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}
 8002b24:	40012400 	.word	0x40012400
 8002b28:	40021000 	.word	0x40021000
 8002b2c:	40010800 	.word	0x40010800

08002b30 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b088      	sub	sp, #32
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b38:	f107 0310 	add.w	r3, r7, #16
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	601a      	str	r2, [r3, #0]
 8002b40:	605a      	str	r2, [r3, #4]
 8002b42:	609a      	str	r2, [r3, #8]
 8002b44:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4a20      	ldr	r2, [pc, #128]	; (8002bcc <HAL_CAN_MspInit+0x9c>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d139      	bne.n	8002bc4 <HAL_CAN_MspInit+0x94>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002b50:	4b1f      	ldr	r3, [pc, #124]	; (8002bd0 <HAL_CAN_MspInit+0xa0>)
 8002b52:	69db      	ldr	r3, [r3, #28]
 8002b54:	4a1e      	ldr	r2, [pc, #120]	; (8002bd0 <HAL_CAN_MspInit+0xa0>)
 8002b56:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002b5a:	61d3      	str	r3, [r2, #28]
 8002b5c:	4b1c      	ldr	r3, [pc, #112]	; (8002bd0 <HAL_CAN_MspInit+0xa0>)
 8002b5e:	69db      	ldr	r3, [r3, #28]
 8002b60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b64:	60fb      	str	r3, [r7, #12]
 8002b66:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b68:	4b19      	ldr	r3, [pc, #100]	; (8002bd0 <HAL_CAN_MspInit+0xa0>)
 8002b6a:	699b      	ldr	r3, [r3, #24]
 8002b6c:	4a18      	ldr	r2, [pc, #96]	; (8002bd0 <HAL_CAN_MspInit+0xa0>)
 8002b6e:	f043 0304 	orr.w	r3, r3, #4
 8002b72:	6193      	str	r3, [r2, #24]
 8002b74:	4b16      	ldr	r3, [pc, #88]	; (8002bd0 <HAL_CAN_MspInit+0xa0>)
 8002b76:	699b      	ldr	r3, [r3, #24]
 8002b78:	f003 0304 	and.w	r3, r3, #4
 8002b7c:	60bb      	str	r3, [r7, #8]
 8002b7e:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002b80:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002b84:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b86:	2300      	movs	r3, #0
 8002b88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b8e:	f107 0310 	add.w	r3, r7, #16
 8002b92:	4619      	mov	r1, r3
 8002b94:	480f      	ldr	r0, [pc, #60]	; (8002bd4 <HAL_CAN_MspInit+0xa4>)
 8002b96:	f001 fc41 	bl	800441c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002b9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b9e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ba0:	2302      	movs	r3, #2
 8002ba2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002ba4:	2303      	movs	r3, #3
 8002ba6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ba8:	f107 0310 	add.w	r3, r7, #16
 8002bac:	4619      	mov	r1, r3
 8002bae:	4809      	ldr	r0, [pc, #36]	; (8002bd4 <HAL_CAN_MspInit+0xa4>)
 8002bb0:	f001 fc34 	bl	800441c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	2100      	movs	r1, #0
 8002bb8:	2015      	movs	r0, #21
 8002bba:	f001 fbf8 	bl	80043ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8002bbe:	2015      	movs	r0, #21
 8002bc0:	f001 fc11 	bl	80043e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8002bc4:	bf00      	nop
 8002bc6:	3720      	adds	r7, #32
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd80      	pop	{r7, pc}
 8002bcc:	40006400 	.word	0x40006400
 8002bd0:	40021000 	.word	0x40021000
 8002bd4:	40010800 	.word	0x40010800

08002bd8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b088      	sub	sp, #32
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002be0:	f107 0310 	add.w	r3, r7, #16
 8002be4:	2200      	movs	r2, #0
 8002be6:	601a      	str	r2, [r3, #0]
 8002be8:	605a      	str	r2, [r3, #4]
 8002bea:	609a      	str	r2, [r3, #8]
 8002bec:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a15      	ldr	r2, [pc, #84]	; (8002c48 <HAL_I2C_MspInit+0x70>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d123      	bne.n	8002c40 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bf8:	4b14      	ldr	r3, [pc, #80]	; (8002c4c <HAL_I2C_MspInit+0x74>)
 8002bfa:	699b      	ldr	r3, [r3, #24]
 8002bfc:	4a13      	ldr	r2, [pc, #76]	; (8002c4c <HAL_I2C_MspInit+0x74>)
 8002bfe:	f043 0308 	orr.w	r3, r3, #8
 8002c02:	6193      	str	r3, [r2, #24]
 8002c04:	4b11      	ldr	r3, [pc, #68]	; (8002c4c <HAL_I2C_MspInit+0x74>)
 8002c06:	699b      	ldr	r3, [r3, #24]
 8002c08:	f003 0308 	and.w	r3, r3, #8
 8002c0c:	60fb      	str	r3, [r7, #12]
 8002c0e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002c10:	23c0      	movs	r3, #192	; 0xc0
 8002c12:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002c14:	2312      	movs	r3, #18
 8002c16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002c18:	2303      	movs	r3, #3
 8002c1a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c1c:	f107 0310 	add.w	r3, r7, #16
 8002c20:	4619      	mov	r1, r3
 8002c22:	480b      	ldr	r0, [pc, #44]	; (8002c50 <HAL_I2C_MspInit+0x78>)
 8002c24:	f001 fbfa 	bl	800441c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002c28:	4b08      	ldr	r3, [pc, #32]	; (8002c4c <HAL_I2C_MspInit+0x74>)
 8002c2a:	69db      	ldr	r3, [r3, #28]
 8002c2c:	4a07      	ldr	r2, [pc, #28]	; (8002c4c <HAL_I2C_MspInit+0x74>)
 8002c2e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002c32:	61d3      	str	r3, [r2, #28]
 8002c34:	4b05      	ldr	r3, [pc, #20]	; (8002c4c <HAL_I2C_MspInit+0x74>)
 8002c36:	69db      	ldr	r3, [r3, #28]
 8002c38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c3c:	60bb      	str	r3, [r7, #8]
 8002c3e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002c40:	bf00      	nop
 8002c42:	3720      	adds	r7, #32
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}
 8002c48:	40005400 	.word	0x40005400
 8002c4c:	40021000 	.word	0x40021000
 8002c50:	40010c00 	.word	0x40010c00

08002c54 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b084      	sub	sp, #16
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a0d      	ldr	r2, [pc, #52]	; (8002c98 <HAL_TIM_Base_MspInit+0x44>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d113      	bne.n	8002c8e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002c66:	4b0d      	ldr	r3, [pc, #52]	; (8002c9c <HAL_TIM_Base_MspInit+0x48>)
 8002c68:	69db      	ldr	r3, [r3, #28]
 8002c6a:	4a0c      	ldr	r2, [pc, #48]	; (8002c9c <HAL_TIM_Base_MspInit+0x48>)
 8002c6c:	f043 0302 	orr.w	r3, r3, #2
 8002c70:	61d3      	str	r3, [r2, #28]
 8002c72:	4b0a      	ldr	r3, [pc, #40]	; (8002c9c <HAL_TIM_Base_MspInit+0x48>)
 8002c74:	69db      	ldr	r3, [r3, #28]
 8002c76:	f003 0302 	and.w	r3, r3, #2
 8002c7a:	60fb      	str	r3, [r7, #12]
 8002c7c:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002c7e:	2200      	movs	r2, #0
 8002c80:	2100      	movs	r1, #0
 8002c82:	201d      	movs	r0, #29
 8002c84:	f001 fb93 	bl	80043ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002c88:	201d      	movs	r0, #29
 8002c8a:	f001 fbac 	bl	80043e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002c8e:	bf00      	nop
 8002c90:	3710      	adds	r7, #16
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}
 8002c96:	bf00      	nop
 8002c98:	40000400 	.word	0x40000400
 8002c9c:	40021000 	.word	0x40021000

08002ca0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b08a      	sub	sp, #40	; 0x28
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ca8:	f107 0318 	add.w	r3, r7, #24
 8002cac:	2200      	movs	r2, #0
 8002cae:	601a      	str	r2, [r3, #0]
 8002cb0:	605a      	str	r2, [r3, #4]
 8002cb2:	609a      	str	r2, [r3, #8]
 8002cb4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4a37      	ldr	r2, [pc, #220]	; (8002d98 <HAL_UART_MspInit+0xf8>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d132      	bne.n	8002d26 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002cc0:	4b36      	ldr	r3, [pc, #216]	; (8002d9c <HAL_UART_MspInit+0xfc>)
 8002cc2:	699b      	ldr	r3, [r3, #24]
 8002cc4:	4a35      	ldr	r2, [pc, #212]	; (8002d9c <HAL_UART_MspInit+0xfc>)
 8002cc6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002cca:	6193      	str	r3, [r2, #24]
 8002ccc:	4b33      	ldr	r3, [pc, #204]	; (8002d9c <HAL_UART_MspInit+0xfc>)
 8002cce:	699b      	ldr	r3, [r3, #24]
 8002cd0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cd4:	617b      	str	r3, [r7, #20]
 8002cd6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cd8:	4b30      	ldr	r3, [pc, #192]	; (8002d9c <HAL_UART_MspInit+0xfc>)
 8002cda:	699b      	ldr	r3, [r3, #24]
 8002cdc:	4a2f      	ldr	r2, [pc, #188]	; (8002d9c <HAL_UART_MspInit+0xfc>)
 8002cde:	f043 0304 	orr.w	r3, r3, #4
 8002ce2:	6193      	str	r3, [r2, #24]
 8002ce4:	4b2d      	ldr	r3, [pc, #180]	; (8002d9c <HAL_UART_MspInit+0xfc>)
 8002ce6:	699b      	ldr	r3, [r3, #24]
 8002ce8:	f003 0304 	and.w	r3, r3, #4
 8002cec:	613b      	str	r3, [r7, #16]
 8002cee:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002cf0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002cf4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cf6:	2302      	movs	r3, #2
 8002cf8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002cfa:	2303      	movs	r3, #3
 8002cfc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cfe:	f107 0318 	add.w	r3, r7, #24
 8002d02:	4619      	mov	r1, r3
 8002d04:	4826      	ldr	r0, [pc, #152]	; (8002da0 <HAL_UART_MspInit+0x100>)
 8002d06:	f001 fb89 	bl	800441c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002d0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d10:	2300      	movs	r3, #0
 8002d12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d14:	2300      	movs	r3, #0
 8002d16:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d18:	f107 0318 	add.w	r3, r7, #24
 8002d1c:	4619      	mov	r1, r3
 8002d1e:	4820      	ldr	r0, [pc, #128]	; (8002da0 <HAL_UART_MspInit+0x100>)
 8002d20:	f001 fb7c 	bl	800441c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002d24:	e034      	b.n	8002d90 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a1e      	ldr	r2, [pc, #120]	; (8002da4 <HAL_UART_MspInit+0x104>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d12f      	bne.n	8002d90 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002d30:	4b1a      	ldr	r3, [pc, #104]	; (8002d9c <HAL_UART_MspInit+0xfc>)
 8002d32:	69db      	ldr	r3, [r3, #28]
 8002d34:	4a19      	ldr	r2, [pc, #100]	; (8002d9c <HAL_UART_MspInit+0xfc>)
 8002d36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d3a:	61d3      	str	r3, [r2, #28]
 8002d3c:	4b17      	ldr	r3, [pc, #92]	; (8002d9c <HAL_UART_MspInit+0xfc>)
 8002d3e:	69db      	ldr	r3, [r3, #28]
 8002d40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d44:	60fb      	str	r3, [r7, #12]
 8002d46:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d48:	4b14      	ldr	r3, [pc, #80]	; (8002d9c <HAL_UART_MspInit+0xfc>)
 8002d4a:	699b      	ldr	r3, [r3, #24]
 8002d4c:	4a13      	ldr	r2, [pc, #76]	; (8002d9c <HAL_UART_MspInit+0xfc>)
 8002d4e:	f043 0304 	orr.w	r3, r3, #4
 8002d52:	6193      	str	r3, [r2, #24]
 8002d54:	4b11      	ldr	r3, [pc, #68]	; (8002d9c <HAL_UART_MspInit+0xfc>)
 8002d56:	699b      	ldr	r3, [r3, #24]
 8002d58:	f003 0304 	and.w	r3, r3, #4
 8002d5c:	60bb      	str	r3, [r7, #8]
 8002d5e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002d60:	2304      	movs	r3, #4
 8002d62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d64:	2302      	movs	r3, #2
 8002d66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002d68:	2303      	movs	r3, #3
 8002d6a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d6c:	f107 0318 	add.w	r3, r7, #24
 8002d70:	4619      	mov	r1, r3
 8002d72:	480b      	ldr	r0, [pc, #44]	; (8002da0 <HAL_UART_MspInit+0x100>)
 8002d74:	f001 fb52 	bl	800441c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002d78:	2308      	movs	r3, #8
 8002d7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d80:	2300      	movs	r3, #0
 8002d82:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d84:	f107 0318 	add.w	r3, r7, #24
 8002d88:	4619      	mov	r1, r3
 8002d8a:	4805      	ldr	r0, [pc, #20]	; (8002da0 <HAL_UART_MspInit+0x100>)
 8002d8c:	f001 fb46 	bl	800441c <HAL_GPIO_Init>
}
 8002d90:	bf00      	nop
 8002d92:	3728      	adds	r7, #40	; 0x28
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bd80      	pop	{r7, pc}
 8002d98:	40013800 	.word	0x40013800
 8002d9c:	40021000 	.word	0x40021000
 8002da0:	40010800 	.word	0x40010800
 8002da4:	40004400 	.word	0x40004400

08002da8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002da8:	b480      	push	{r7}
 8002daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002dac:	e7fe      	b.n	8002dac <NMI_Handler+0x4>

08002dae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002dae:	b480      	push	{r7}
 8002db0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002db2:	e7fe      	b.n	8002db2 <HardFault_Handler+0x4>

08002db4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002db4:	b480      	push	{r7}
 8002db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002db8:	e7fe      	b.n	8002db8 <MemManage_Handler+0x4>

08002dba <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002dba:	b480      	push	{r7}
 8002dbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002dbe:	e7fe      	b.n	8002dbe <BusFault_Handler+0x4>

08002dc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002dc4:	e7fe      	b.n	8002dc4 <UsageFault_Handler+0x4>

08002dc6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002dc6:	b480      	push	{r7}
 8002dc8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002dca:	bf00      	nop
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bc80      	pop	{r7}
 8002dd0:	4770      	bx	lr

08002dd2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002dd2:	b480      	push	{r7}
 8002dd4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002dd6:	bf00      	nop
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bc80      	pop	{r7}
 8002ddc:	4770      	bx	lr

08002dde <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002dde:	b480      	push	{r7}
 8002de0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002de2:	bf00      	nop
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bc80      	pop	{r7}
 8002de8:	4770      	bx	lr

08002dea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002dea:	b580      	push	{r7, lr}
 8002dec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002dee:	f000 f975 	bl	80030dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
//  timeElapsed++;
  /* USER CODE END SysTick_IRQn 1 */
}
 8002df2:	bf00      	nop
 8002df4:	bd80      	pop	{r7, pc}
	...

08002df8 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8002dfc:	4802      	ldr	r0, [pc, #8]	; (8002e08 <CAN1_RX1_IRQHandler+0x10>)
 8002dfe:	f000 ffdb 	bl	8003db8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8002e02:	bf00      	nop
 8002e04:	bd80      	pop	{r7, pc}
 8002e06:	bf00      	nop
 8002e08:	20000260 	.word	0x20000260

08002e0c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002e10:	4802      	ldr	r0, [pc, #8]	; (8002e1c <TIM3_IRQHandler+0x10>)
 8002e12:	f003 fa7b 	bl	800630c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002e16:	bf00      	nop
 8002e18:	bd80      	pop	{r7, pc}
 8002e1a:	bf00      	nop
 8002e1c:	200002dc 	.word	0x200002dc

08002e20 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002e20:	b480      	push	{r7}
 8002e22:	af00      	add	r7, sp, #0
  return 1;
 8002e24:	2301      	movs	r3, #1
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bc80      	pop	{r7}
 8002e2c:	4770      	bx	lr

08002e2e <_kill>:

int _kill(int pid, int sig)
{
 8002e2e:	b580      	push	{r7, lr}
 8002e30:	b082      	sub	sp, #8
 8002e32:	af00      	add	r7, sp, #0
 8002e34:	6078      	str	r0, [r7, #4]
 8002e36:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002e38:	f005 f868 	bl	8007f0c <__errno>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	2216      	movs	r2, #22
 8002e40:	601a      	str	r2, [r3, #0]
  return -1;
 8002e42:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	3708      	adds	r7, #8
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}

08002e4e <_exit>:

void _exit (int status)
{
 8002e4e:	b580      	push	{r7, lr}
 8002e50:	b082      	sub	sp, #8
 8002e52:	af00      	add	r7, sp, #0
 8002e54:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002e56:	f04f 31ff 	mov.w	r1, #4294967295
 8002e5a:	6878      	ldr	r0, [r7, #4]
 8002e5c:	f7ff ffe7 	bl	8002e2e <_kill>
  while (1) {}    /* Make sure we hang here */
 8002e60:	e7fe      	b.n	8002e60 <_exit+0x12>

08002e62 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002e62:	b580      	push	{r7, lr}
 8002e64:	b086      	sub	sp, #24
 8002e66:	af00      	add	r7, sp, #0
 8002e68:	60f8      	str	r0, [r7, #12]
 8002e6a:	60b9      	str	r1, [r7, #8]
 8002e6c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e6e:	2300      	movs	r3, #0
 8002e70:	617b      	str	r3, [r7, #20]
 8002e72:	e00a      	b.n	8002e8a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002e74:	f3af 8000 	nop.w
 8002e78:	4601      	mov	r1, r0
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	1c5a      	adds	r2, r3, #1
 8002e7e:	60ba      	str	r2, [r7, #8]
 8002e80:	b2ca      	uxtb	r2, r1
 8002e82:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	3301      	adds	r3, #1
 8002e88:	617b      	str	r3, [r7, #20]
 8002e8a:	697a      	ldr	r2, [r7, #20]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	429a      	cmp	r2, r3
 8002e90:	dbf0      	blt.n	8002e74 <_read+0x12>
  }

  return len;
 8002e92:	687b      	ldr	r3, [r7, #4]
}
 8002e94:	4618      	mov	r0, r3
 8002e96:	3718      	adds	r7, #24
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bd80      	pop	{r7, pc}

08002e9c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b086      	sub	sp, #24
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	60f8      	str	r0, [r7, #12]
 8002ea4:	60b9      	str	r1, [r7, #8]
 8002ea6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	617b      	str	r3, [r7, #20]
 8002eac:	e009      	b.n	8002ec2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002eae:	68bb      	ldr	r3, [r7, #8]
 8002eb0:	1c5a      	adds	r2, r3, #1
 8002eb2:	60ba      	str	r2, [r7, #8]
 8002eb4:	781b      	ldrb	r3, [r3, #0]
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f000 f892 	bl	8002fe0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	3301      	adds	r3, #1
 8002ec0:	617b      	str	r3, [r7, #20]
 8002ec2:	697a      	ldr	r2, [r7, #20]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	429a      	cmp	r2, r3
 8002ec8:	dbf1      	blt.n	8002eae <_write+0x12>
  }
  return len;
 8002eca:	687b      	ldr	r3, [r7, #4]
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	3718      	adds	r7, #24
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bd80      	pop	{r7, pc}

08002ed4 <_close>:

int _close(int file)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b083      	sub	sp, #12
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002edc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	370c      	adds	r7, #12
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bc80      	pop	{r7}
 8002ee8:	4770      	bx	lr

08002eea <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002eea:	b480      	push	{r7}
 8002eec:	b083      	sub	sp, #12
 8002eee:	af00      	add	r7, sp, #0
 8002ef0:	6078      	str	r0, [r7, #4]
 8002ef2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002efa:	605a      	str	r2, [r3, #4]
  return 0;
 8002efc:	2300      	movs	r3, #0
}
 8002efe:	4618      	mov	r0, r3
 8002f00:	370c      	adds	r7, #12
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bc80      	pop	{r7}
 8002f06:	4770      	bx	lr

08002f08 <_isatty>:

int _isatty(int file)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b083      	sub	sp, #12
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002f10:	2301      	movs	r3, #1
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	370c      	adds	r7, #12
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bc80      	pop	{r7}
 8002f1a:	4770      	bx	lr

08002f1c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b085      	sub	sp, #20
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	60f8      	str	r0, [r7, #12]
 8002f24:	60b9      	str	r1, [r7, #8]
 8002f26:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002f28:	2300      	movs	r3, #0
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	3714      	adds	r7, #20
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bc80      	pop	{r7}
 8002f32:	4770      	bx	lr

08002f34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b086      	sub	sp, #24
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002f3c:	4a14      	ldr	r2, [pc, #80]	; (8002f90 <_sbrk+0x5c>)
 8002f3e:	4b15      	ldr	r3, [pc, #84]	; (8002f94 <_sbrk+0x60>)
 8002f40:	1ad3      	subs	r3, r2, r3
 8002f42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002f44:	697b      	ldr	r3, [r7, #20]
 8002f46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002f48:	4b13      	ldr	r3, [pc, #76]	; (8002f98 <_sbrk+0x64>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d102      	bne.n	8002f56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002f50:	4b11      	ldr	r3, [pc, #68]	; (8002f98 <_sbrk+0x64>)
 8002f52:	4a12      	ldr	r2, [pc, #72]	; (8002f9c <_sbrk+0x68>)
 8002f54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002f56:	4b10      	ldr	r3, [pc, #64]	; (8002f98 <_sbrk+0x64>)
 8002f58:	681a      	ldr	r2, [r3, #0]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	4413      	add	r3, r2
 8002f5e:	693a      	ldr	r2, [r7, #16]
 8002f60:	429a      	cmp	r2, r3
 8002f62:	d207      	bcs.n	8002f74 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002f64:	f004 ffd2 	bl	8007f0c <__errno>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	220c      	movs	r2, #12
 8002f6c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002f6e:	f04f 33ff 	mov.w	r3, #4294967295
 8002f72:	e009      	b.n	8002f88 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002f74:	4b08      	ldr	r3, [pc, #32]	; (8002f98 <_sbrk+0x64>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002f7a:	4b07      	ldr	r3, [pc, #28]	; (8002f98 <_sbrk+0x64>)
 8002f7c:	681a      	ldr	r2, [r3, #0]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	4413      	add	r3, r2
 8002f82:	4a05      	ldr	r2, [pc, #20]	; (8002f98 <_sbrk+0x64>)
 8002f84:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002f86:	68fb      	ldr	r3, [r7, #12]
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	3718      	adds	r7, #24
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd80      	pop	{r7, pc}
 8002f90:	20005000 	.word	0x20005000
 8002f94:	00000400 	.word	0x00000400
 8002f98:	200003d4 	.word	0x200003d4
 8002f9c:	20000530 	.word	0x20000530

08002fa0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002fa4:	bf00      	nop
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bc80      	pop	{r7}
 8002faa:	4770      	bx	lr

08002fac <HAL_TIM_PeriodElapsedCallback>:
/**
 * @brief Timer ISR
 * @param htim Timer_HandleTypeDef pointer
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002fac:	b480      	push	{r7}
 8002fae:	b083      	sub	sp, #12
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
	if (htim->Instance == htim3.Instance)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681a      	ldr	r2, [r3, #0]
 8002fb8:	4b07      	ldr	r3, [pc, #28]	; (8002fd8 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	429a      	cmp	r2, r3
 8002fbe:	d105      	bne.n	8002fcc <HAL_TIM_PeriodElapsedCallback+0x20>
	{
		timeElapsed += 100;
 8002fc0:	4b06      	ldr	r3, [pc, #24]	; (8002fdc <HAL_TIM_PeriodElapsedCallback+0x30>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	3364      	adds	r3, #100	; 0x64
 8002fc6:	4a05      	ldr	r2, [pc, #20]	; (8002fdc <HAL_TIM_PeriodElapsedCallback+0x30>)
 8002fc8:	6013      	str	r3, [r2, #0]
	}
	else
	{
		__NOP();
	}
}
 8002fca:	e000      	b.n	8002fce <HAL_TIM_PeriodElapsedCallback+0x22>
		__NOP();
 8002fcc:	bf00      	nop
}
 8002fce:	bf00      	nop
 8002fd0:	370c      	adds	r7, #12
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bc80      	pop	{r7}
 8002fd6:	4770      	bx	lr
 8002fd8:	200002dc 	.word	0x200002dc
 8002fdc:	200003d8 	.word	0x200003d8

08002fe0 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b082      	sub	sp, #8
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8002fe8:	1d39      	adds	r1, r7, #4
 8002fea:	f04f 33ff 	mov.w	r3, #4294967295
 8002fee:	2201      	movs	r2, #1
 8002ff0:	4803      	ldr	r0, [pc, #12]	; (8003000 <__io_putchar+0x20>)
 8002ff2:	f003 fd37 	bl	8006a64 <HAL_UART_Transmit>
	return ch;
 8002ff6:	687b      	ldr	r3, [r7, #4]
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	3708      	adds	r7, #8
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd80      	pop	{r7, pc}
 8003000:	20000324 	.word	0x20000324

08003004 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003004:	f7ff ffcc 	bl	8002fa0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003008:	480b      	ldr	r0, [pc, #44]	; (8003038 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800300a:	490c      	ldr	r1, [pc, #48]	; (800303c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800300c:	4a0c      	ldr	r2, [pc, #48]	; (8003040 <LoopFillZerobss+0x16>)
  movs r3, #0
 800300e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003010:	e002      	b.n	8003018 <LoopCopyDataInit>

08003012 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003012:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003014:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003016:	3304      	adds	r3, #4

08003018 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003018:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800301a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800301c:	d3f9      	bcc.n	8003012 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800301e:	4a09      	ldr	r2, [pc, #36]	; (8003044 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8003020:	4c09      	ldr	r4, [pc, #36]	; (8003048 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003022:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003024:	e001      	b.n	800302a <LoopFillZerobss>

08003026 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003026:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003028:	3204      	adds	r2, #4

0800302a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800302a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800302c:	d3fb      	bcc.n	8003026 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800302e:	f004 ff73 	bl	8007f18 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003032:	f7ff f8b5 	bl	80021a0 <main>
  bx lr
 8003036:	4770      	bx	lr
  ldr r0, =_sdata
 8003038:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800303c:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8003040:	0800ba30 	.word	0x0800ba30
  ldr r2, =_sbss
 8003044:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8003048:	2000052c 	.word	0x2000052c

0800304c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800304c:	e7fe      	b.n	800304c <ADC1_2_IRQHandler>
	...

08003050 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003054:	4b08      	ldr	r3, [pc, #32]	; (8003078 <HAL_Init+0x28>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a07      	ldr	r2, [pc, #28]	; (8003078 <HAL_Init+0x28>)
 800305a:	f043 0310 	orr.w	r3, r3, #16
 800305e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003060:	2003      	movs	r0, #3
 8003062:	f001 f999 	bl	8004398 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003066:	200f      	movs	r0, #15
 8003068:	f000 f808 	bl	800307c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800306c:	f7ff fd02 	bl	8002a74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003070:	2300      	movs	r3, #0
}
 8003072:	4618      	mov	r0, r3
 8003074:	bd80      	pop	{r7, pc}
 8003076:	bf00      	nop
 8003078:	40022000 	.word	0x40022000

0800307c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b082      	sub	sp, #8
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003084:	4b12      	ldr	r3, [pc, #72]	; (80030d0 <HAL_InitTick+0x54>)
 8003086:	681a      	ldr	r2, [r3, #0]
 8003088:	4b12      	ldr	r3, [pc, #72]	; (80030d4 <HAL_InitTick+0x58>)
 800308a:	781b      	ldrb	r3, [r3, #0]
 800308c:	4619      	mov	r1, r3
 800308e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003092:	fbb3 f3f1 	udiv	r3, r3, r1
 8003096:	fbb2 f3f3 	udiv	r3, r2, r3
 800309a:	4618      	mov	r0, r3
 800309c:	f001 f9b1 	bl	8004402 <HAL_SYSTICK_Config>
 80030a0:	4603      	mov	r3, r0
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d001      	beq.n	80030aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	e00e      	b.n	80030c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2b0f      	cmp	r3, #15
 80030ae:	d80a      	bhi.n	80030c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80030b0:	2200      	movs	r2, #0
 80030b2:	6879      	ldr	r1, [r7, #4]
 80030b4:	f04f 30ff 	mov.w	r0, #4294967295
 80030b8:	f001 f979 	bl	80043ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80030bc:	4a06      	ldr	r2, [pc, #24]	; (80030d8 <HAL_InitTick+0x5c>)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80030c2:	2300      	movs	r3, #0
 80030c4:	e000      	b.n	80030c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	3708      	adds	r7, #8
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}
 80030d0:	20000004 	.word	0x20000004
 80030d4:	2000000c 	.word	0x2000000c
 80030d8:	20000008 	.word	0x20000008

080030dc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80030dc:	b480      	push	{r7}
 80030de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80030e0:	4b05      	ldr	r3, [pc, #20]	; (80030f8 <HAL_IncTick+0x1c>)
 80030e2:	781b      	ldrb	r3, [r3, #0]
 80030e4:	461a      	mov	r2, r3
 80030e6:	4b05      	ldr	r3, [pc, #20]	; (80030fc <HAL_IncTick+0x20>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4413      	add	r3, r2
 80030ec:	4a03      	ldr	r2, [pc, #12]	; (80030fc <HAL_IncTick+0x20>)
 80030ee:	6013      	str	r3, [r2, #0]
}
 80030f0:	bf00      	nop
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bc80      	pop	{r7}
 80030f6:	4770      	bx	lr
 80030f8:	2000000c 	.word	0x2000000c
 80030fc:	200003dc 	.word	0x200003dc

08003100 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003100:	b480      	push	{r7}
 8003102:	af00      	add	r7, sp, #0
  return uwTick;
 8003104:	4b02      	ldr	r3, [pc, #8]	; (8003110 <HAL_GetTick+0x10>)
 8003106:	681b      	ldr	r3, [r3, #0]
}
 8003108:	4618      	mov	r0, r3
 800310a:	46bd      	mov	sp, r7
 800310c:	bc80      	pop	{r7}
 800310e:	4770      	bx	lr
 8003110:	200003dc 	.word	0x200003dc

08003114 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b084      	sub	sp, #16
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800311c:	f7ff fff0 	bl	8003100 <HAL_GetTick>
 8003120:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	f1b3 3fff 	cmp.w	r3, #4294967295
 800312c:	d005      	beq.n	800313a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800312e:	4b0a      	ldr	r3, [pc, #40]	; (8003158 <HAL_Delay+0x44>)
 8003130:	781b      	ldrb	r3, [r3, #0]
 8003132:	461a      	mov	r2, r3
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	4413      	add	r3, r2
 8003138:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800313a:	bf00      	nop
 800313c:	f7ff ffe0 	bl	8003100 <HAL_GetTick>
 8003140:	4602      	mov	r2, r0
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	1ad3      	subs	r3, r2, r3
 8003146:	68fa      	ldr	r2, [r7, #12]
 8003148:	429a      	cmp	r2, r3
 800314a:	d8f7      	bhi.n	800313c <HAL_Delay+0x28>
  {
  }
}
 800314c:	bf00      	nop
 800314e:	bf00      	nop
 8003150:	3710      	adds	r7, #16
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}
 8003156:	bf00      	nop
 8003158:	2000000c 	.word	0x2000000c

0800315c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b086      	sub	sp, #24
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003164:	2300      	movs	r3, #0
 8003166:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8003168:	2300      	movs	r3, #0
 800316a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800316c:	2300      	movs	r3, #0
 800316e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8003170:	2300      	movs	r3, #0
 8003172:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d101      	bne.n	800317e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	e0be      	b.n	80032fc <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003188:	2b00      	cmp	r3, #0
 800318a:	d109      	bne.n	80031a0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2200      	movs	r2, #0
 8003190:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2200      	movs	r2, #0
 8003196:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800319a:	6878      	ldr	r0, [r7, #4]
 800319c:	f7ff fc8c 	bl	8002ab8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80031a0:	6878      	ldr	r0, [r7, #4]
 80031a2:	f000 f9ab 	bl	80034fc <ADC_ConversionStop_Disable>
 80031a6:	4603      	mov	r3, r0
 80031a8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ae:	f003 0310 	and.w	r3, r3, #16
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	f040 8099 	bne.w	80032ea <HAL_ADC_Init+0x18e>
 80031b8:	7dfb      	ldrb	r3, [r7, #23]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	f040 8095 	bne.w	80032ea <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031c4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80031c8:	f023 0302 	bic.w	r3, r3, #2
 80031cc:	f043 0202 	orr.w	r2, r3, #2
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80031dc:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	7b1b      	ldrb	r3, [r3, #12]
 80031e2:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80031e4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80031e6:	68ba      	ldr	r2, [r7, #8]
 80031e8:	4313      	orrs	r3, r2
 80031ea:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031f4:	d003      	beq.n	80031fe <HAL_ADC_Init+0xa2>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	2b01      	cmp	r3, #1
 80031fc:	d102      	bne.n	8003204 <HAL_ADC_Init+0xa8>
 80031fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003202:	e000      	b.n	8003206 <HAL_ADC_Init+0xaa>
 8003204:	2300      	movs	r3, #0
 8003206:	693a      	ldr	r2, [r7, #16]
 8003208:	4313      	orrs	r3, r2
 800320a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	7d1b      	ldrb	r3, [r3, #20]
 8003210:	2b01      	cmp	r3, #1
 8003212:	d119      	bne.n	8003248 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	7b1b      	ldrb	r3, [r3, #12]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d109      	bne.n	8003230 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	699b      	ldr	r3, [r3, #24]
 8003220:	3b01      	subs	r3, #1
 8003222:	035a      	lsls	r2, r3, #13
 8003224:	693b      	ldr	r3, [r7, #16]
 8003226:	4313      	orrs	r3, r2
 8003228:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800322c:	613b      	str	r3, [r7, #16]
 800322e:	e00b      	b.n	8003248 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003234:	f043 0220 	orr.w	r2, r3, #32
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003240:	f043 0201 	orr.w	r2, r3, #1
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	693a      	ldr	r2, [r7, #16]
 8003258:	430a      	orrs	r2, r1
 800325a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	689a      	ldr	r2, [r3, #8]
 8003262:	4b28      	ldr	r3, [pc, #160]	; (8003304 <HAL_ADC_Init+0x1a8>)
 8003264:	4013      	ands	r3, r2
 8003266:	687a      	ldr	r2, [r7, #4]
 8003268:	6812      	ldr	r2, [r2, #0]
 800326a:	68b9      	ldr	r1, [r7, #8]
 800326c:	430b      	orrs	r3, r1
 800326e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	689b      	ldr	r3, [r3, #8]
 8003274:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003278:	d003      	beq.n	8003282 <HAL_ADC_Init+0x126>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	689b      	ldr	r3, [r3, #8]
 800327e:	2b01      	cmp	r3, #1
 8003280:	d104      	bne.n	800328c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	691b      	ldr	r3, [r3, #16]
 8003286:	3b01      	subs	r3, #1
 8003288:	051b      	lsls	r3, r3, #20
 800328a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003292:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	68fa      	ldr	r2, [r7, #12]
 800329c:	430a      	orrs	r2, r1
 800329e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	689a      	ldr	r2, [r3, #8]
 80032a6:	4b18      	ldr	r3, [pc, #96]	; (8003308 <HAL_ADC_Init+0x1ac>)
 80032a8:	4013      	ands	r3, r2
 80032aa:	68ba      	ldr	r2, [r7, #8]
 80032ac:	429a      	cmp	r2, r3
 80032ae:	d10b      	bne.n	80032c8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2200      	movs	r2, #0
 80032b4:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032ba:	f023 0303 	bic.w	r3, r3, #3
 80032be:	f043 0201 	orr.w	r2, r3, #1
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80032c6:	e018      	b.n	80032fa <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032cc:	f023 0312 	bic.w	r3, r3, #18
 80032d0:	f043 0210 	orr.w	r2, r3, #16
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032dc:	f043 0201 	orr.w	r2, r3, #1
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80032e4:	2301      	movs	r3, #1
 80032e6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80032e8:	e007      	b.n	80032fa <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032ee:	f043 0210 	orr.w	r2, r3, #16
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80032fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80032fc:	4618      	mov	r0, r3
 80032fe:	3718      	adds	r7, #24
 8003300:	46bd      	mov	sp, r7
 8003302:	bd80      	pop	{r7, pc}
 8003304:	ffe1f7fd 	.word	0xffe1f7fd
 8003308:	ff1f0efe 	.word	0xff1f0efe

0800330c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800330c:	b480      	push	{r7}
 800330e:	b085      	sub	sp, #20
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
 8003314:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003316:	2300      	movs	r3, #0
 8003318:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800331a:	2300      	movs	r3, #0
 800331c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003324:	2b01      	cmp	r3, #1
 8003326:	d101      	bne.n	800332c <HAL_ADC_ConfigChannel+0x20>
 8003328:	2302      	movs	r3, #2
 800332a:	e0dc      	b.n	80034e6 <HAL_ADC_ConfigChannel+0x1da>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2201      	movs	r2, #1
 8003330:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	2b06      	cmp	r3, #6
 800333a:	d81c      	bhi.n	8003376 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	685a      	ldr	r2, [r3, #4]
 8003346:	4613      	mov	r3, r2
 8003348:	009b      	lsls	r3, r3, #2
 800334a:	4413      	add	r3, r2
 800334c:	3b05      	subs	r3, #5
 800334e:	221f      	movs	r2, #31
 8003350:	fa02 f303 	lsl.w	r3, r2, r3
 8003354:	43db      	mvns	r3, r3
 8003356:	4019      	ands	r1, r3
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	6818      	ldr	r0, [r3, #0]
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	685a      	ldr	r2, [r3, #4]
 8003360:	4613      	mov	r3, r2
 8003362:	009b      	lsls	r3, r3, #2
 8003364:	4413      	add	r3, r2
 8003366:	3b05      	subs	r3, #5
 8003368:	fa00 f203 	lsl.w	r2, r0, r3
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	430a      	orrs	r2, r1
 8003372:	635a      	str	r2, [r3, #52]	; 0x34
 8003374:	e03c      	b.n	80033f0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	2b0c      	cmp	r3, #12
 800337c:	d81c      	bhi.n	80033b8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	685a      	ldr	r2, [r3, #4]
 8003388:	4613      	mov	r3, r2
 800338a:	009b      	lsls	r3, r3, #2
 800338c:	4413      	add	r3, r2
 800338e:	3b23      	subs	r3, #35	; 0x23
 8003390:	221f      	movs	r2, #31
 8003392:	fa02 f303 	lsl.w	r3, r2, r3
 8003396:	43db      	mvns	r3, r3
 8003398:	4019      	ands	r1, r3
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	6818      	ldr	r0, [r3, #0]
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	685a      	ldr	r2, [r3, #4]
 80033a2:	4613      	mov	r3, r2
 80033a4:	009b      	lsls	r3, r3, #2
 80033a6:	4413      	add	r3, r2
 80033a8:	3b23      	subs	r3, #35	; 0x23
 80033aa:	fa00 f203 	lsl.w	r2, r0, r3
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	430a      	orrs	r2, r1
 80033b4:	631a      	str	r2, [r3, #48]	; 0x30
 80033b6:	e01b      	b.n	80033f0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	685a      	ldr	r2, [r3, #4]
 80033c2:	4613      	mov	r3, r2
 80033c4:	009b      	lsls	r3, r3, #2
 80033c6:	4413      	add	r3, r2
 80033c8:	3b41      	subs	r3, #65	; 0x41
 80033ca:	221f      	movs	r2, #31
 80033cc:	fa02 f303 	lsl.w	r3, r2, r3
 80033d0:	43db      	mvns	r3, r3
 80033d2:	4019      	ands	r1, r3
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	6818      	ldr	r0, [r3, #0]
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	685a      	ldr	r2, [r3, #4]
 80033dc:	4613      	mov	r3, r2
 80033de:	009b      	lsls	r3, r3, #2
 80033e0:	4413      	add	r3, r2
 80033e2:	3b41      	subs	r3, #65	; 0x41
 80033e4:	fa00 f203 	lsl.w	r2, r0, r3
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	430a      	orrs	r2, r1
 80033ee:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	2b09      	cmp	r3, #9
 80033f6:	d91c      	bls.n	8003432 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	68d9      	ldr	r1, [r3, #12]
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	681a      	ldr	r2, [r3, #0]
 8003402:	4613      	mov	r3, r2
 8003404:	005b      	lsls	r3, r3, #1
 8003406:	4413      	add	r3, r2
 8003408:	3b1e      	subs	r3, #30
 800340a:	2207      	movs	r2, #7
 800340c:	fa02 f303 	lsl.w	r3, r2, r3
 8003410:	43db      	mvns	r3, r3
 8003412:	4019      	ands	r1, r3
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	6898      	ldr	r0, [r3, #8]
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	681a      	ldr	r2, [r3, #0]
 800341c:	4613      	mov	r3, r2
 800341e:	005b      	lsls	r3, r3, #1
 8003420:	4413      	add	r3, r2
 8003422:	3b1e      	subs	r3, #30
 8003424:	fa00 f203 	lsl.w	r2, r0, r3
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	430a      	orrs	r2, r1
 800342e:	60da      	str	r2, [r3, #12]
 8003430:	e019      	b.n	8003466 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	6919      	ldr	r1, [r3, #16]
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	681a      	ldr	r2, [r3, #0]
 800343c:	4613      	mov	r3, r2
 800343e:	005b      	lsls	r3, r3, #1
 8003440:	4413      	add	r3, r2
 8003442:	2207      	movs	r2, #7
 8003444:	fa02 f303 	lsl.w	r3, r2, r3
 8003448:	43db      	mvns	r3, r3
 800344a:	4019      	ands	r1, r3
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	6898      	ldr	r0, [r3, #8]
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	681a      	ldr	r2, [r3, #0]
 8003454:	4613      	mov	r3, r2
 8003456:	005b      	lsls	r3, r3, #1
 8003458:	4413      	add	r3, r2
 800345a:	fa00 f203 	lsl.w	r2, r0, r3
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	430a      	orrs	r2, r1
 8003464:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	2b10      	cmp	r3, #16
 800346c:	d003      	beq.n	8003476 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003472:	2b11      	cmp	r3, #17
 8003474:	d132      	bne.n	80034dc <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a1d      	ldr	r2, [pc, #116]	; (80034f0 <HAL_ADC_ConfigChannel+0x1e4>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d125      	bne.n	80034cc <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	689b      	ldr	r3, [r3, #8]
 8003486:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800348a:	2b00      	cmp	r3, #0
 800348c:	d126      	bne.n	80034dc <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	689a      	ldr	r2, [r3, #8]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800349c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	2b10      	cmp	r3, #16
 80034a4:	d11a      	bne.n	80034dc <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80034a6:	4b13      	ldr	r3, [pc, #76]	; (80034f4 <HAL_ADC_ConfigChannel+0x1e8>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a13      	ldr	r2, [pc, #76]	; (80034f8 <HAL_ADC_ConfigChannel+0x1ec>)
 80034ac:	fba2 2303 	umull	r2, r3, r2, r3
 80034b0:	0c9a      	lsrs	r2, r3, #18
 80034b2:	4613      	mov	r3, r2
 80034b4:	009b      	lsls	r3, r3, #2
 80034b6:	4413      	add	r3, r2
 80034b8:	005b      	lsls	r3, r3, #1
 80034ba:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80034bc:	e002      	b.n	80034c4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	3b01      	subs	r3, #1
 80034c2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d1f9      	bne.n	80034be <HAL_ADC_ConfigChannel+0x1b2>
 80034ca:	e007      	b.n	80034dc <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034d0:	f043 0220 	orr.w	r2, r3, #32
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80034d8:	2301      	movs	r3, #1
 80034da:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2200      	movs	r2, #0
 80034e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80034e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	3714      	adds	r7, #20
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bc80      	pop	{r7}
 80034ee:	4770      	bx	lr
 80034f0:	40012400 	.word	0x40012400
 80034f4:	20000004 	.word	0x20000004
 80034f8:	431bde83 	.word	0x431bde83

080034fc <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b084      	sub	sp, #16
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003504:	2300      	movs	r3, #0
 8003506:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	689b      	ldr	r3, [r3, #8]
 800350e:	f003 0301 	and.w	r3, r3, #1
 8003512:	2b01      	cmp	r3, #1
 8003514:	d12e      	bne.n	8003574 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	689a      	ldr	r2, [r3, #8]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f022 0201 	bic.w	r2, r2, #1
 8003524:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003526:	f7ff fdeb 	bl	8003100 <HAL_GetTick>
 800352a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800352c:	e01b      	b.n	8003566 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800352e:	f7ff fde7 	bl	8003100 <HAL_GetTick>
 8003532:	4602      	mov	r2, r0
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	1ad3      	subs	r3, r2, r3
 8003538:	2b02      	cmp	r3, #2
 800353a:	d914      	bls.n	8003566 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	689b      	ldr	r3, [r3, #8]
 8003542:	f003 0301 	and.w	r3, r3, #1
 8003546:	2b01      	cmp	r3, #1
 8003548:	d10d      	bne.n	8003566 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800354e:	f043 0210 	orr.w	r2, r3, #16
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800355a:	f043 0201 	orr.w	r2, r3, #1
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	e007      	b.n	8003576 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	f003 0301 	and.w	r3, r3, #1
 8003570:	2b01      	cmp	r3, #1
 8003572:	d0dc      	beq.n	800352e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003574:	2300      	movs	r3, #0
}
 8003576:	4618      	mov	r0, r3
 8003578:	3710      	adds	r7, #16
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}

0800357e <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800357e:	b580      	push	{r7, lr}
 8003580:	b084      	sub	sp, #16
 8003582:	af00      	add	r7, sp, #0
 8003584:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d101      	bne.n	8003590 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800358c:	2301      	movs	r3, #1
 800358e:	e0ed      	b.n	800376c <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003596:	b2db      	uxtb	r3, r3
 8003598:	2b00      	cmp	r3, #0
 800359a:	d102      	bne.n	80035a2 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800359c:	6878      	ldr	r0, [r7, #4]
 800359e:	f7ff fac7 	bl	8002b30 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	681a      	ldr	r2, [r3, #0]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f042 0201 	orr.w	r2, r2, #1
 80035b0:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80035b2:	f7ff fda5 	bl	8003100 <HAL_GetTick>
 80035b6:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80035b8:	e012      	b.n	80035e0 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80035ba:	f7ff fda1 	bl	8003100 <HAL_GetTick>
 80035be:	4602      	mov	r2, r0
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	1ad3      	subs	r3, r2, r3
 80035c4:	2b0a      	cmp	r3, #10
 80035c6:	d90b      	bls.n	80035e0 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035cc:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2205      	movs	r2, #5
 80035d8:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80035dc:	2301      	movs	r3, #1
 80035de:	e0c5      	b.n	800376c <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	f003 0301 	and.w	r3, r3, #1
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d0e5      	beq.n	80035ba <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	681a      	ldr	r2, [r3, #0]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f022 0202 	bic.w	r2, r2, #2
 80035fc:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80035fe:	f7ff fd7f 	bl	8003100 <HAL_GetTick>
 8003602:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003604:	e012      	b.n	800362c <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003606:	f7ff fd7b 	bl	8003100 <HAL_GetTick>
 800360a:	4602      	mov	r2, r0
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	1ad3      	subs	r3, r2, r3
 8003610:	2b0a      	cmp	r3, #10
 8003612:	d90b      	bls.n	800362c <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003618:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2205      	movs	r2, #5
 8003624:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003628:	2301      	movs	r3, #1
 800362a:	e09f      	b.n	800376c <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	f003 0302 	and.w	r3, r3, #2
 8003636:	2b00      	cmp	r3, #0
 8003638:	d1e5      	bne.n	8003606 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	7e1b      	ldrb	r3, [r3, #24]
 800363e:	2b01      	cmp	r3, #1
 8003640:	d108      	bne.n	8003654 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	681a      	ldr	r2, [r3, #0]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003650:	601a      	str	r2, [r3, #0]
 8003652:	e007      	b.n	8003664 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	681a      	ldr	r2, [r3, #0]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003662:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	7e5b      	ldrb	r3, [r3, #25]
 8003668:	2b01      	cmp	r3, #1
 800366a:	d108      	bne.n	800367e <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	681a      	ldr	r2, [r3, #0]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800367a:	601a      	str	r2, [r3, #0]
 800367c:	e007      	b.n	800368e <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	681a      	ldr	r2, [r3, #0]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800368c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	7e9b      	ldrb	r3, [r3, #26]
 8003692:	2b01      	cmp	r3, #1
 8003694:	d108      	bne.n	80036a8 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	681a      	ldr	r2, [r3, #0]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f042 0220 	orr.w	r2, r2, #32
 80036a4:	601a      	str	r2, [r3, #0]
 80036a6:	e007      	b.n	80036b8 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	681a      	ldr	r2, [r3, #0]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f022 0220 	bic.w	r2, r2, #32
 80036b6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	7edb      	ldrb	r3, [r3, #27]
 80036bc:	2b01      	cmp	r3, #1
 80036be:	d108      	bne.n	80036d2 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	681a      	ldr	r2, [r3, #0]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f022 0210 	bic.w	r2, r2, #16
 80036ce:	601a      	str	r2, [r3, #0]
 80036d0:	e007      	b.n	80036e2 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	681a      	ldr	r2, [r3, #0]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f042 0210 	orr.w	r2, r2, #16
 80036e0:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	7f1b      	ldrb	r3, [r3, #28]
 80036e6:	2b01      	cmp	r3, #1
 80036e8:	d108      	bne.n	80036fc <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	681a      	ldr	r2, [r3, #0]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f042 0208 	orr.w	r2, r2, #8
 80036f8:	601a      	str	r2, [r3, #0]
 80036fa:	e007      	b.n	800370c <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	681a      	ldr	r2, [r3, #0]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f022 0208 	bic.w	r2, r2, #8
 800370a:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	7f5b      	ldrb	r3, [r3, #29]
 8003710:	2b01      	cmp	r3, #1
 8003712:	d108      	bne.n	8003726 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	681a      	ldr	r2, [r3, #0]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f042 0204 	orr.w	r2, r2, #4
 8003722:	601a      	str	r2, [r3, #0]
 8003724:	e007      	b.n	8003736 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	681a      	ldr	r2, [r3, #0]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f022 0204 	bic.w	r2, r2, #4
 8003734:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	689a      	ldr	r2, [r3, #8]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	68db      	ldr	r3, [r3, #12]
 800373e:	431a      	orrs	r2, r3
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	691b      	ldr	r3, [r3, #16]
 8003744:	431a      	orrs	r2, r3
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	695b      	ldr	r3, [r3, #20]
 800374a:	ea42 0103 	orr.w	r1, r2, r3
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	1e5a      	subs	r2, r3, #1
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	430a      	orrs	r2, r1
 800375a:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2200      	movs	r2, #0
 8003760:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2201      	movs	r2, #1
 8003766:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800376a:	2300      	movs	r3, #0
}
 800376c:	4618      	mov	r0, r3
 800376e:	3710      	adds	r7, #16
 8003770:	46bd      	mov	sp, r7
 8003772:	bd80      	pop	{r7, pc}

08003774 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8003774:	b480      	push	{r7}
 8003776:	b087      	sub	sp, #28
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
 800377c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	f893 3020 	ldrb.w	r3, [r3, #32]
 800378a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800378c:	7cfb      	ldrb	r3, [r7, #19]
 800378e:	2b01      	cmp	r3, #1
 8003790:	d003      	beq.n	800379a <HAL_CAN_ConfigFilter+0x26>
 8003792:	7cfb      	ldrb	r3, [r7, #19]
 8003794:	2b02      	cmp	r3, #2
 8003796:	f040 80aa 	bne.w	80038ee <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800379a:	697b      	ldr	r3, [r7, #20]
 800379c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80037a0:	f043 0201 	orr.w	r2, r3, #1
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	695b      	ldr	r3, [r3, #20]
 80037ae:	f003 031f 	and.w	r3, r3, #31
 80037b2:	2201      	movs	r2, #1
 80037b4:	fa02 f303 	lsl.w	r3, r2, r3
 80037b8:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	43db      	mvns	r3, r3
 80037c4:	401a      	ands	r2, r3
 80037c6:	697b      	ldr	r3, [r7, #20]
 80037c8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	69db      	ldr	r3, [r3, #28]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d123      	bne.n	800381c <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80037d4:	697b      	ldr	r3, [r7, #20]
 80037d6:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	43db      	mvns	r3, r3
 80037de:	401a      	ands	r2, r3
 80037e0:	697b      	ldr	r3, [r7, #20]
 80037e2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	68db      	ldr	r3, [r3, #12]
 80037ea:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80037f2:	683a      	ldr	r2, [r7, #0]
 80037f4:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80037f6:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	3248      	adds	r2, #72	; 0x48
 80037fc:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	689b      	ldr	r3, [r3, #8]
 8003804:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003810:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003812:	6979      	ldr	r1, [r7, #20]
 8003814:	3348      	adds	r3, #72	; 0x48
 8003816:	00db      	lsls	r3, r3, #3
 8003818:	440b      	add	r3, r1
 800381a:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	69db      	ldr	r3, [r3, #28]
 8003820:	2b01      	cmp	r3, #1
 8003822:	d122      	bne.n	800386a <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	431a      	orrs	r2, r3
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003840:	683a      	ldr	r2, [r7, #0]
 8003842:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003844:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	3248      	adds	r2, #72	; 0x48
 800384a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	689b      	ldr	r3, [r3, #8]
 8003852:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	68db      	ldr	r3, [r3, #12]
 8003858:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800385e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003860:	6979      	ldr	r1, [r7, #20]
 8003862:	3348      	adds	r3, #72	; 0x48
 8003864:	00db      	lsls	r3, r3, #3
 8003866:	440b      	add	r3, r1
 8003868:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	699b      	ldr	r3, [r3, #24]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d109      	bne.n	8003886 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	43db      	mvns	r3, r3
 800387c:	401a      	ands	r2, r3
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8003884:	e007      	b.n	8003896 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	431a      	orrs	r2, r3
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	691b      	ldr	r3, [r3, #16]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d109      	bne.n	80038b2 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800389e:	697b      	ldr	r3, [r7, #20]
 80038a0:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	43db      	mvns	r3, r3
 80038a8:	401a      	ands	r2, r3
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80038b0:	e007      	b.n	80038c2 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80038b2:	697b      	ldr	r3, [r7, #20]
 80038b4:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	431a      	orrs	r2, r3
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	6a1b      	ldr	r3, [r3, #32]
 80038c6:	2b01      	cmp	r3, #1
 80038c8:	d107      	bne.n	80038da <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	431a      	orrs	r2, r3
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80038da:	697b      	ldr	r3, [r7, #20]
 80038dc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80038e0:	f023 0201 	bic.w	r2, r3, #1
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80038ea:	2300      	movs	r3, #0
 80038ec:	e006      	b.n	80038fc <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
  }
}
 80038fc:	4618      	mov	r0, r3
 80038fe:	371c      	adds	r7, #28
 8003900:	46bd      	mov	sp, r7
 8003902:	bc80      	pop	{r7}
 8003904:	4770      	bx	lr

08003906 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003906:	b580      	push	{r7, lr}
 8003908:	b084      	sub	sp, #16
 800390a:	af00      	add	r7, sp, #0
 800390c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003914:	b2db      	uxtb	r3, r3
 8003916:	2b01      	cmp	r3, #1
 8003918:	d12e      	bne.n	8003978 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2202      	movs	r2, #2
 800391e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	681a      	ldr	r2, [r3, #0]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f022 0201 	bic.w	r2, r2, #1
 8003930:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003932:	f7ff fbe5 	bl	8003100 <HAL_GetTick>
 8003936:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003938:	e012      	b.n	8003960 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800393a:	f7ff fbe1 	bl	8003100 <HAL_GetTick>
 800393e:	4602      	mov	r2, r0
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	1ad3      	subs	r3, r2, r3
 8003944:	2b0a      	cmp	r3, #10
 8003946:	d90b      	bls.n	8003960 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800394c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2205      	movs	r2, #5
 8003958:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800395c:	2301      	movs	r3, #1
 800395e:	e012      	b.n	8003986 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	f003 0301 	and.w	r3, r3, #1
 800396a:	2b00      	cmp	r3, #0
 800396c:	d1e5      	bne.n	800393a <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2200      	movs	r2, #0
 8003972:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8003974:	2300      	movs	r3, #0
 8003976:	e006      	b.n	8003986 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800397c:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003984:	2301      	movs	r3, #1
  }
}
 8003986:	4618      	mov	r0, r3
 8003988:	3710      	adds	r7, #16
 800398a:	46bd      	mov	sp, r7
 800398c:	bd80      	pop	{r7, pc}

0800398e <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 800398e:	b480      	push	{r7}
 8003990:	b089      	sub	sp, #36	; 0x24
 8003992:	af00      	add	r7, sp, #0
 8003994:	60f8      	str	r0, [r7, #12]
 8003996:	60b9      	str	r1, [r7, #8]
 8003998:	607a      	str	r2, [r7, #4]
 800399a:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	f893 3020 	ldrb.w	r3, [r3, #32]
 80039a2:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	689b      	ldr	r3, [r3, #8]
 80039aa:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80039ac:	7ffb      	ldrb	r3, [r7, #31]
 80039ae:	2b01      	cmp	r3, #1
 80039b0:	d003      	beq.n	80039ba <HAL_CAN_AddTxMessage+0x2c>
 80039b2:	7ffb      	ldrb	r3, [r7, #31]
 80039b4:	2b02      	cmp	r3, #2
 80039b6:	f040 80ad 	bne.w	8003b14 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80039ba:	69bb      	ldr	r3, [r7, #24]
 80039bc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d10a      	bne.n	80039da <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80039c4:	69bb      	ldr	r3, [r7, #24]
 80039c6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d105      	bne.n	80039da <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80039ce:	69bb      	ldr	r3, [r7, #24]
 80039d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	f000 8095 	beq.w	8003b04 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80039da:	69bb      	ldr	r3, [r7, #24]
 80039dc:	0e1b      	lsrs	r3, r3, #24
 80039de:	f003 0303 	and.w	r3, r3, #3
 80039e2:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80039e4:	2201      	movs	r2, #1
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	409a      	lsls	r2, r3
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d10d      	bne.n	8003a12 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003a00:	68f9      	ldr	r1, [r7, #12]
 8003a02:	6809      	ldr	r1, [r1, #0]
 8003a04:	431a      	orrs	r2, r3
 8003a06:	697b      	ldr	r3, [r7, #20]
 8003a08:	3318      	adds	r3, #24
 8003a0a:	011b      	lsls	r3, r3, #4
 8003a0c:	440b      	add	r3, r1
 8003a0e:	601a      	str	r2, [r3, #0]
 8003a10:	e00f      	b.n	8003a32 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003a1c:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003a22:	68f9      	ldr	r1, [r7, #12]
 8003a24:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8003a26:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	3318      	adds	r3, #24
 8003a2c:	011b      	lsls	r3, r3, #4
 8003a2e:	440b      	add	r3, r1
 8003a30:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	6819      	ldr	r1, [r3, #0]
 8003a36:	68bb      	ldr	r3, [r7, #8]
 8003a38:	691a      	ldr	r2, [r3, #16]
 8003a3a:	697b      	ldr	r3, [r7, #20]
 8003a3c:	3318      	adds	r3, #24
 8003a3e:	011b      	lsls	r3, r3, #4
 8003a40:	440b      	add	r3, r1
 8003a42:	3304      	adds	r3, #4
 8003a44:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	7d1b      	ldrb	r3, [r3, #20]
 8003a4a:	2b01      	cmp	r3, #1
 8003a4c:	d111      	bne.n	8003a72 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681a      	ldr	r2, [r3, #0]
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	3318      	adds	r3, #24
 8003a56:	011b      	lsls	r3, r3, #4
 8003a58:	4413      	add	r3, r2
 8003a5a:	3304      	adds	r3, #4
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	68fa      	ldr	r2, [r7, #12]
 8003a60:	6811      	ldr	r1, [r2, #0]
 8003a62:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	3318      	adds	r3, #24
 8003a6a:	011b      	lsls	r3, r3, #4
 8003a6c:	440b      	add	r3, r1
 8003a6e:	3304      	adds	r3, #4
 8003a70:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	3307      	adds	r3, #7
 8003a76:	781b      	ldrb	r3, [r3, #0]
 8003a78:	061a      	lsls	r2, r3, #24
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	3306      	adds	r3, #6
 8003a7e:	781b      	ldrb	r3, [r3, #0]
 8003a80:	041b      	lsls	r3, r3, #16
 8003a82:	431a      	orrs	r2, r3
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	3305      	adds	r3, #5
 8003a88:	781b      	ldrb	r3, [r3, #0]
 8003a8a:	021b      	lsls	r3, r3, #8
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	687a      	ldr	r2, [r7, #4]
 8003a90:	3204      	adds	r2, #4
 8003a92:	7812      	ldrb	r2, [r2, #0]
 8003a94:	4610      	mov	r0, r2
 8003a96:	68fa      	ldr	r2, [r7, #12]
 8003a98:	6811      	ldr	r1, [r2, #0]
 8003a9a:	ea43 0200 	orr.w	r2, r3, r0
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	011b      	lsls	r3, r3, #4
 8003aa2:	440b      	add	r3, r1
 8003aa4:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8003aa8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	3303      	adds	r3, #3
 8003aae:	781b      	ldrb	r3, [r3, #0]
 8003ab0:	061a      	lsls	r2, r3, #24
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	3302      	adds	r3, #2
 8003ab6:	781b      	ldrb	r3, [r3, #0]
 8003ab8:	041b      	lsls	r3, r3, #16
 8003aba:	431a      	orrs	r2, r3
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	3301      	adds	r3, #1
 8003ac0:	781b      	ldrb	r3, [r3, #0]
 8003ac2:	021b      	lsls	r3, r3, #8
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	687a      	ldr	r2, [r7, #4]
 8003ac8:	7812      	ldrb	r2, [r2, #0]
 8003aca:	4610      	mov	r0, r2
 8003acc:	68fa      	ldr	r2, [r7, #12]
 8003ace:	6811      	ldr	r1, [r2, #0]
 8003ad0:	ea43 0200 	orr.w	r2, r3, r0
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	011b      	lsls	r3, r3, #4
 8003ad8:	440b      	add	r3, r1
 8003ada:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8003ade:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681a      	ldr	r2, [r3, #0]
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	3318      	adds	r3, #24
 8003ae8:	011b      	lsls	r3, r3, #4
 8003aea:	4413      	add	r3, r2
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	68fa      	ldr	r2, [r7, #12]
 8003af0:	6811      	ldr	r1, [r2, #0]
 8003af2:	f043 0201 	orr.w	r2, r3, #1
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	3318      	adds	r3, #24
 8003afa:	011b      	lsls	r3, r3, #4
 8003afc:	440b      	add	r3, r1
 8003afe:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8003b00:	2300      	movs	r3, #0
 8003b02:	e00e      	b.n	8003b22 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b08:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8003b10:	2301      	movs	r3, #1
 8003b12:	e006      	b.n	8003b22 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b18:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003b20:	2301      	movs	r3, #1
  }
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	3724      	adds	r7, #36	; 0x24
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bc80      	pop	{r7}
 8003b2a:	4770      	bx	lr

08003b2c <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b087      	sub	sp, #28
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	60f8      	str	r0, [r7, #12]
 8003b34:	60b9      	str	r1, [r7, #8]
 8003b36:	607a      	str	r2, [r7, #4]
 8003b38:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b40:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003b42:	7dfb      	ldrb	r3, [r7, #23]
 8003b44:	2b01      	cmp	r3, #1
 8003b46:	d003      	beq.n	8003b50 <HAL_CAN_GetRxMessage+0x24>
 8003b48:	7dfb      	ldrb	r3, [r7, #23]
 8003b4a:	2b02      	cmp	r3, #2
 8003b4c:	f040 8103 	bne.w	8003d56 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d10e      	bne.n	8003b74 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	68db      	ldr	r3, [r3, #12]
 8003b5c:	f003 0303 	and.w	r3, r3, #3
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d116      	bne.n	8003b92 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b68:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003b70:	2301      	movs	r3, #1
 8003b72:	e0f7      	b.n	8003d64 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	691b      	ldr	r3, [r3, #16]
 8003b7a:	f003 0303 	and.w	r3, r3, #3
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d107      	bne.n	8003b92 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b86:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	e0e8      	b.n	8003d64 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681a      	ldr	r2, [r3, #0]
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	331b      	adds	r3, #27
 8003b9a:	011b      	lsls	r3, r3, #4
 8003b9c:	4413      	add	r3, r2
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f003 0204 	and.w	r2, r3, #4
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d10c      	bne.n	8003bca <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681a      	ldr	r2, [r3, #0]
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	331b      	adds	r3, #27
 8003bb8:	011b      	lsls	r3, r3, #4
 8003bba:	4413      	add	r3, r2
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	0d5b      	lsrs	r3, r3, #21
 8003bc0:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	601a      	str	r2, [r3, #0]
 8003bc8:	e00b      	b.n	8003be2 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681a      	ldr	r2, [r3, #0]
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	331b      	adds	r3, #27
 8003bd2:	011b      	lsls	r3, r3, #4
 8003bd4:	4413      	add	r3, r2
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	08db      	lsrs	r3, r3, #3
 8003bda:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681a      	ldr	r2, [r3, #0]
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	331b      	adds	r3, #27
 8003bea:	011b      	lsls	r3, r3, #4
 8003bec:	4413      	add	r3, r2
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f003 0202 	and.w	r2, r3, #2
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681a      	ldr	r2, [r3, #0]
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	331b      	adds	r3, #27
 8003c00:	011b      	lsls	r3, r3, #4
 8003c02:	4413      	add	r3, r2
 8003c04:	3304      	adds	r3, #4
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f003 0308 	and.w	r3, r3, #8
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d003      	beq.n	8003c18 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2208      	movs	r2, #8
 8003c14:	611a      	str	r2, [r3, #16]
 8003c16:	e00b      	b.n	8003c30 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681a      	ldr	r2, [r3, #0]
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	331b      	adds	r3, #27
 8003c20:	011b      	lsls	r3, r3, #4
 8003c22:	4413      	add	r3, r2
 8003c24:	3304      	adds	r3, #4
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f003 020f 	and.w	r2, r3, #15
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681a      	ldr	r2, [r3, #0]
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	331b      	adds	r3, #27
 8003c38:	011b      	lsls	r3, r3, #4
 8003c3a:	4413      	add	r3, r2
 8003c3c:	3304      	adds	r3, #4
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	0a1b      	lsrs	r3, r3, #8
 8003c42:	b2da      	uxtb	r2, r3
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681a      	ldr	r2, [r3, #0]
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	331b      	adds	r3, #27
 8003c50:	011b      	lsls	r3, r3, #4
 8003c52:	4413      	add	r3, r2
 8003c54:	3304      	adds	r3, #4
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	0c1b      	lsrs	r3, r3, #16
 8003c5a:	b29a      	uxth	r2, r3
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681a      	ldr	r2, [r3, #0]
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	011b      	lsls	r3, r3, #4
 8003c68:	4413      	add	r3, r2
 8003c6a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	b2da      	uxtb	r2, r3
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681a      	ldr	r2, [r3, #0]
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	011b      	lsls	r3, r3, #4
 8003c7e:	4413      	add	r3, r2
 8003c80:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	0a1a      	lsrs	r2, r3, #8
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	3301      	adds	r3, #1
 8003c8c:	b2d2      	uxtb	r2, r2
 8003c8e:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681a      	ldr	r2, [r3, #0]
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	011b      	lsls	r3, r3, #4
 8003c98:	4413      	add	r3, r2
 8003c9a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	0c1a      	lsrs	r2, r3, #16
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	3302      	adds	r3, #2
 8003ca6:	b2d2      	uxtb	r2, r2
 8003ca8:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681a      	ldr	r2, [r3, #0]
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	011b      	lsls	r3, r3, #4
 8003cb2:	4413      	add	r3, r2
 8003cb4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	0e1a      	lsrs	r2, r3, #24
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	3303      	adds	r3, #3
 8003cc0:	b2d2      	uxtb	r2, r2
 8003cc2:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681a      	ldr	r2, [r3, #0]
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	011b      	lsls	r3, r3, #4
 8003ccc:	4413      	add	r3, r2
 8003cce:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003cd2:	681a      	ldr	r2, [r3, #0]
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	3304      	adds	r3, #4
 8003cd8:	b2d2      	uxtb	r2, r2
 8003cda:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681a      	ldr	r2, [r3, #0]
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	011b      	lsls	r3, r3, #4
 8003ce4:	4413      	add	r3, r2
 8003ce6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	0a1a      	lsrs	r2, r3, #8
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	3305      	adds	r3, #5
 8003cf2:	b2d2      	uxtb	r2, r2
 8003cf4:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681a      	ldr	r2, [r3, #0]
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	011b      	lsls	r3, r3, #4
 8003cfe:	4413      	add	r3, r2
 8003d00:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	0c1a      	lsrs	r2, r3, #16
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	3306      	adds	r3, #6
 8003d0c:	b2d2      	uxtb	r2, r2
 8003d0e:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681a      	ldr	r2, [r3, #0]
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	011b      	lsls	r3, r3, #4
 8003d18:	4413      	add	r3, r2
 8003d1a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	0e1a      	lsrs	r2, r3, #24
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	3307      	adds	r3, #7
 8003d26:	b2d2      	uxtb	r2, r2
 8003d28:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003d2a:	68bb      	ldr	r3, [r7, #8]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d108      	bne.n	8003d42 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	68da      	ldr	r2, [r3, #12]
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f042 0220 	orr.w	r2, r2, #32
 8003d3e:	60da      	str	r2, [r3, #12]
 8003d40:	e007      	b.n	8003d52 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	691a      	ldr	r2, [r3, #16]
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f042 0220 	orr.w	r2, r2, #32
 8003d50:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003d52:	2300      	movs	r3, #0
 8003d54:	e006      	b.n	8003d64 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d5a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003d62:	2301      	movs	r3, #1
  }
}
 8003d64:	4618      	mov	r0, r3
 8003d66:	371c      	adds	r7, #28
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bc80      	pop	{r7}
 8003d6c:	4770      	bx	lr

08003d6e <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8003d6e:	b480      	push	{r7}
 8003d70:	b085      	sub	sp, #20
 8003d72:	af00      	add	r7, sp, #0
 8003d74:	6078      	str	r0, [r7, #4]
 8003d76:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003d7e:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8003d80:	7bfb      	ldrb	r3, [r7, #15]
 8003d82:	2b01      	cmp	r3, #1
 8003d84:	d002      	beq.n	8003d8c <HAL_CAN_ActivateNotification+0x1e>
 8003d86:	7bfb      	ldrb	r3, [r7, #15]
 8003d88:	2b02      	cmp	r3, #2
 8003d8a:	d109      	bne.n	8003da0 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	6959      	ldr	r1, [r3, #20]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	683a      	ldr	r2, [r7, #0]
 8003d98:	430a      	orrs	r2, r1
 8003d9a:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	e006      	b.n	8003dae <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003dac:	2301      	movs	r3, #1
  }
}
 8003dae:	4618      	mov	r0, r3
 8003db0:	3714      	adds	r7, #20
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bc80      	pop	{r7}
 8003db6:	4770      	bx	lr

08003db8 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b08a      	sub	sp, #40	; 0x28
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	695b      	ldr	r3, [r3, #20]
 8003dca:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	689b      	ldr	r3, [r3, #8]
 8003dda:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	68db      	ldr	r3, [r3, #12]
 8003de2:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	691b      	ldr	r3, [r3, #16]
 8003dea:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	699b      	ldr	r3, [r3, #24]
 8003df2:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003df4:	6a3b      	ldr	r3, [r7, #32]
 8003df6:	f003 0301 	and.w	r3, r3, #1
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d07c      	beq.n	8003ef8 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003dfe:	69bb      	ldr	r3, [r7, #24]
 8003e00:	f003 0301 	and.w	r3, r3, #1
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d023      	beq.n	8003e50 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	2201      	movs	r2, #1
 8003e0e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003e10:	69bb      	ldr	r3, [r7, #24]
 8003e12:	f003 0302 	and.w	r3, r3, #2
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d003      	beq.n	8003e22 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003e1a:	6878      	ldr	r0, [r7, #4]
 8003e1c:	f000 f983 	bl	8004126 <HAL_CAN_TxMailbox0CompleteCallback>
 8003e20:	e016      	b.n	8003e50 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003e22:	69bb      	ldr	r3, [r7, #24]
 8003e24:	f003 0304 	and.w	r3, r3, #4
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d004      	beq.n	8003e36 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e2e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003e32:	627b      	str	r3, [r7, #36]	; 0x24
 8003e34:	e00c      	b.n	8003e50 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003e36:	69bb      	ldr	r3, [r7, #24]
 8003e38:	f003 0308 	and.w	r3, r3, #8
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d004      	beq.n	8003e4a <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e42:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003e46:	627b      	str	r3, [r7, #36]	; 0x24
 8003e48:	e002      	b.n	8003e50 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003e4a:	6878      	ldr	r0, [r7, #4]
 8003e4c:	f000 f986 	bl	800415c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003e50:	69bb      	ldr	r3, [r7, #24]
 8003e52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d024      	beq.n	8003ea4 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003e62:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003e64:	69bb      	ldr	r3, [r7, #24]
 8003e66:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d003      	beq.n	8003e76 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003e6e:	6878      	ldr	r0, [r7, #4]
 8003e70:	f000 f962 	bl	8004138 <HAL_CAN_TxMailbox1CompleteCallback>
 8003e74:	e016      	b.n	8003ea4 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003e76:	69bb      	ldr	r3, [r7, #24]
 8003e78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d004      	beq.n	8003e8a <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e82:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003e86:	627b      	str	r3, [r7, #36]	; 0x24
 8003e88:	e00c      	b.n	8003ea4 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003e8a:	69bb      	ldr	r3, [r7, #24]
 8003e8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d004      	beq.n	8003e9e <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e96:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003e9a:	627b      	str	r3, [r7, #36]	; 0x24
 8003e9c:	e002      	b.n	8003ea4 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003e9e:	6878      	ldr	r0, [r7, #4]
 8003ea0:	f000 f965 	bl	800416e <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003ea4:	69bb      	ldr	r3, [r7, #24]
 8003ea6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d024      	beq.n	8003ef8 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003eb6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003eb8:	69bb      	ldr	r3, [r7, #24]
 8003eba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d003      	beq.n	8003eca <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003ec2:	6878      	ldr	r0, [r7, #4]
 8003ec4:	f000 f941 	bl	800414a <HAL_CAN_TxMailbox2CompleteCallback>
 8003ec8:	e016      	b.n	8003ef8 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003eca:	69bb      	ldr	r3, [r7, #24]
 8003ecc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d004      	beq.n	8003ede <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003eda:	627b      	str	r3, [r7, #36]	; 0x24
 8003edc:	e00c      	b.n	8003ef8 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003ede:	69bb      	ldr	r3, [r7, #24]
 8003ee0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d004      	beq.n	8003ef2 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003eee:	627b      	str	r3, [r7, #36]	; 0x24
 8003ef0:	e002      	b.n	8003ef8 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003ef2:	6878      	ldr	r0, [r7, #4]
 8003ef4:	f000 f944 	bl	8004180 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003ef8:	6a3b      	ldr	r3, [r7, #32]
 8003efa:	f003 0308 	and.w	r3, r3, #8
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d00c      	beq.n	8003f1c <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003f02:	697b      	ldr	r3, [r7, #20]
 8003f04:	f003 0310 	and.w	r3, r3, #16
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d007      	beq.n	8003f1c <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003f12:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	2210      	movs	r2, #16
 8003f1a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003f1c:	6a3b      	ldr	r3, [r7, #32]
 8003f1e:	f003 0304 	and.w	r3, r3, #4
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d00b      	beq.n	8003f3e <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003f26:	697b      	ldr	r3, [r7, #20]
 8003f28:	f003 0308 	and.w	r3, r3, #8
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d006      	beq.n	8003f3e <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	2208      	movs	r2, #8
 8003f36:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003f38:	6878      	ldr	r0, [r7, #4]
 8003f3a:	f000 f933 	bl	80041a4 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003f3e:	6a3b      	ldr	r3, [r7, #32]
 8003f40:	f003 0302 	and.w	r3, r3, #2
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d009      	beq.n	8003f5c <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	68db      	ldr	r3, [r3, #12]
 8003f4e:	f003 0303 	and.w	r3, r3, #3
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d002      	beq.n	8003f5c <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003f56:	6878      	ldr	r0, [r7, #4]
 8003f58:	f000 f91b 	bl	8004192 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003f5c:	6a3b      	ldr	r3, [r7, #32]
 8003f5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d00c      	beq.n	8003f80 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003f66:	693b      	ldr	r3, [r7, #16]
 8003f68:	f003 0310 	and.w	r3, r3, #16
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d007      	beq.n	8003f80 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f72:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003f76:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	2210      	movs	r2, #16
 8003f7e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003f80:	6a3b      	ldr	r3, [r7, #32]
 8003f82:	f003 0320 	and.w	r3, r3, #32
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d00b      	beq.n	8003fa2 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003f8a:	693b      	ldr	r3, [r7, #16]
 8003f8c:	f003 0308 	and.w	r3, r3, #8
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d006      	beq.n	8003fa2 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	2208      	movs	r2, #8
 8003f9a:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003f9c:	6878      	ldr	r0, [r7, #4]
 8003f9e:	f000 f90a 	bl	80041b6 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003fa2:	6a3b      	ldr	r3, [r7, #32]
 8003fa4:	f003 0310 	and.w	r3, r3, #16
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d009      	beq.n	8003fc0 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	691b      	ldr	r3, [r3, #16]
 8003fb2:	f003 0303 	and.w	r3, r3, #3
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d002      	beq.n	8003fc0 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003fba:	6878      	ldr	r0, [r7, #4]
 8003fbc:	f7fe f8ce 	bl	800215c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003fc0:	6a3b      	ldr	r3, [r7, #32]
 8003fc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d00b      	beq.n	8003fe2 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003fca:	69fb      	ldr	r3, [r7, #28]
 8003fcc:	f003 0310 	and.w	r3, r3, #16
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d006      	beq.n	8003fe2 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	2210      	movs	r2, #16
 8003fda:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003fdc:	6878      	ldr	r0, [r7, #4]
 8003fde:	f000 f8f3 	bl	80041c8 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003fe2:	6a3b      	ldr	r3, [r7, #32]
 8003fe4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d00b      	beq.n	8004004 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003fec:	69fb      	ldr	r3, [r7, #28]
 8003fee:	f003 0308 	and.w	r3, r3, #8
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d006      	beq.n	8004004 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	2208      	movs	r2, #8
 8003ffc:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	f000 f8eb 	bl	80041da <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8004004:	6a3b      	ldr	r3, [r7, #32]
 8004006:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800400a:	2b00      	cmp	r3, #0
 800400c:	d07b      	beq.n	8004106 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800400e:	69fb      	ldr	r3, [r7, #28]
 8004010:	f003 0304 	and.w	r3, r3, #4
 8004014:	2b00      	cmp	r3, #0
 8004016:	d072      	beq.n	80040fe <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004018:	6a3b      	ldr	r3, [r7, #32]
 800401a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800401e:	2b00      	cmp	r3, #0
 8004020:	d008      	beq.n	8004034 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004028:	2b00      	cmp	r3, #0
 800402a:	d003      	beq.n	8004034 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800402c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800402e:	f043 0301 	orr.w	r3, r3, #1
 8004032:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004034:	6a3b      	ldr	r3, [r7, #32]
 8004036:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800403a:	2b00      	cmp	r3, #0
 800403c:	d008      	beq.n	8004050 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004044:	2b00      	cmp	r3, #0
 8004046:	d003      	beq.n	8004050 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8004048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800404a:	f043 0302 	orr.w	r3, r3, #2
 800404e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004050:	6a3b      	ldr	r3, [r7, #32]
 8004052:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004056:	2b00      	cmp	r3, #0
 8004058:	d008      	beq.n	800406c <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004060:	2b00      	cmp	r3, #0
 8004062:	d003      	beq.n	800406c <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8004064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004066:	f043 0304 	orr.w	r3, r3, #4
 800406a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800406c:	6a3b      	ldr	r3, [r7, #32]
 800406e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004072:	2b00      	cmp	r3, #0
 8004074:	d043      	beq.n	80040fe <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800407c:	2b00      	cmp	r3, #0
 800407e:	d03e      	beq.n	80040fe <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004086:	2b60      	cmp	r3, #96	; 0x60
 8004088:	d02b      	beq.n	80040e2 <HAL_CAN_IRQHandler+0x32a>
 800408a:	2b60      	cmp	r3, #96	; 0x60
 800408c:	d82e      	bhi.n	80040ec <HAL_CAN_IRQHandler+0x334>
 800408e:	2b50      	cmp	r3, #80	; 0x50
 8004090:	d022      	beq.n	80040d8 <HAL_CAN_IRQHandler+0x320>
 8004092:	2b50      	cmp	r3, #80	; 0x50
 8004094:	d82a      	bhi.n	80040ec <HAL_CAN_IRQHandler+0x334>
 8004096:	2b40      	cmp	r3, #64	; 0x40
 8004098:	d019      	beq.n	80040ce <HAL_CAN_IRQHandler+0x316>
 800409a:	2b40      	cmp	r3, #64	; 0x40
 800409c:	d826      	bhi.n	80040ec <HAL_CAN_IRQHandler+0x334>
 800409e:	2b30      	cmp	r3, #48	; 0x30
 80040a0:	d010      	beq.n	80040c4 <HAL_CAN_IRQHandler+0x30c>
 80040a2:	2b30      	cmp	r3, #48	; 0x30
 80040a4:	d822      	bhi.n	80040ec <HAL_CAN_IRQHandler+0x334>
 80040a6:	2b10      	cmp	r3, #16
 80040a8:	d002      	beq.n	80040b0 <HAL_CAN_IRQHandler+0x2f8>
 80040aa:	2b20      	cmp	r3, #32
 80040ac:	d005      	beq.n	80040ba <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80040ae:	e01d      	b.n	80040ec <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80040b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040b2:	f043 0308 	orr.w	r3, r3, #8
 80040b6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80040b8:	e019      	b.n	80040ee <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80040ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040bc:	f043 0310 	orr.w	r3, r3, #16
 80040c0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80040c2:	e014      	b.n	80040ee <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80040c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c6:	f043 0320 	orr.w	r3, r3, #32
 80040ca:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80040cc:	e00f      	b.n	80040ee <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80040ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80040d4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80040d6:	e00a      	b.n	80040ee <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80040d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040de:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80040e0:	e005      	b.n	80040ee <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80040e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040e8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80040ea:	e000      	b.n	80040ee <HAL_CAN_IRQHandler+0x336>
            break;
 80040ec:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	699a      	ldr	r2, [r3, #24]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80040fc:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	2204      	movs	r2, #4
 8004104:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8004106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004108:	2b00      	cmp	r3, #0
 800410a:	d008      	beq.n	800411e <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004112:	431a      	orrs	r2, r3
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8004118:	6878      	ldr	r0, [r7, #4]
 800411a:	f000 f867 	bl	80041ec <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800411e:	bf00      	nop
 8004120:	3728      	adds	r7, #40	; 0x28
 8004122:	46bd      	mov	sp, r7
 8004124:	bd80      	pop	{r7, pc}

08004126 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004126:	b480      	push	{r7}
 8004128:	b083      	sub	sp, #12
 800412a:	af00      	add	r7, sp, #0
 800412c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800412e:	bf00      	nop
 8004130:	370c      	adds	r7, #12
 8004132:	46bd      	mov	sp, r7
 8004134:	bc80      	pop	{r7}
 8004136:	4770      	bx	lr

08004138 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004138:	b480      	push	{r7}
 800413a:	b083      	sub	sp, #12
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8004140:	bf00      	nop
 8004142:	370c      	adds	r7, #12
 8004144:	46bd      	mov	sp, r7
 8004146:	bc80      	pop	{r7}
 8004148:	4770      	bx	lr

0800414a <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800414a:	b480      	push	{r7}
 800414c:	b083      	sub	sp, #12
 800414e:	af00      	add	r7, sp, #0
 8004150:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8004152:	bf00      	nop
 8004154:	370c      	adds	r7, #12
 8004156:	46bd      	mov	sp, r7
 8004158:	bc80      	pop	{r7}
 800415a:	4770      	bx	lr

0800415c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800415c:	b480      	push	{r7}
 800415e:	b083      	sub	sp, #12
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8004164:	bf00      	nop
 8004166:	370c      	adds	r7, #12
 8004168:	46bd      	mov	sp, r7
 800416a:	bc80      	pop	{r7}
 800416c:	4770      	bx	lr

0800416e <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800416e:	b480      	push	{r7}
 8004170:	b083      	sub	sp, #12
 8004172:	af00      	add	r7, sp, #0
 8004174:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8004176:	bf00      	nop
 8004178:	370c      	adds	r7, #12
 800417a:	46bd      	mov	sp, r7
 800417c:	bc80      	pop	{r7}
 800417e:	4770      	bx	lr

08004180 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004180:	b480      	push	{r7}
 8004182:	b083      	sub	sp, #12
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8004188:	bf00      	nop
 800418a:	370c      	adds	r7, #12
 800418c:	46bd      	mov	sp, r7
 800418e:	bc80      	pop	{r7}
 8004190:	4770      	bx	lr

08004192 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8004192:	b480      	push	{r7}
 8004194:	b083      	sub	sp, #12
 8004196:	af00      	add	r7, sp, #0
 8004198:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 800419a:	bf00      	nop
 800419c:	370c      	adds	r7, #12
 800419e:	46bd      	mov	sp, r7
 80041a0:	bc80      	pop	{r7}
 80041a2:	4770      	bx	lr

080041a4 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80041a4:	b480      	push	{r7}
 80041a6:	b083      	sub	sp, #12
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80041ac:	bf00      	nop
 80041ae:	370c      	adds	r7, #12
 80041b0:	46bd      	mov	sp, r7
 80041b2:	bc80      	pop	{r7}
 80041b4:	4770      	bx	lr

080041b6 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80041b6:	b480      	push	{r7}
 80041b8:	b083      	sub	sp, #12
 80041ba:	af00      	add	r7, sp, #0
 80041bc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80041be:	bf00      	nop
 80041c0:	370c      	adds	r7, #12
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bc80      	pop	{r7}
 80041c6:	4770      	bx	lr

080041c8 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80041c8:	b480      	push	{r7}
 80041ca:	b083      	sub	sp, #12
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80041d0:	bf00      	nop
 80041d2:	370c      	adds	r7, #12
 80041d4:	46bd      	mov	sp, r7
 80041d6:	bc80      	pop	{r7}
 80041d8:	4770      	bx	lr

080041da <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80041da:	b480      	push	{r7}
 80041dc:	b083      	sub	sp, #12
 80041de:	af00      	add	r7, sp, #0
 80041e0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80041e2:	bf00      	nop
 80041e4:	370c      	adds	r7, #12
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bc80      	pop	{r7}
 80041ea:	4770      	bx	lr

080041ec <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b083      	sub	sp, #12
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80041f4:	bf00      	nop
 80041f6:	370c      	adds	r7, #12
 80041f8:	46bd      	mov	sp, r7
 80041fa:	bc80      	pop	{r7}
 80041fc:	4770      	bx	lr
	...

08004200 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004200:	b480      	push	{r7}
 8004202:	b085      	sub	sp, #20
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	f003 0307 	and.w	r3, r3, #7
 800420e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004210:	4b0c      	ldr	r3, [pc, #48]	; (8004244 <__NVIC_SetPriorityGrouping+0x44>)
 8004212:	68db      	ldr	r3, [r3, #12]
 8004214:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004216:	68ba      	ldr	r2, [r7, #8]
 8004218:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800421c:	4013      	ands	r3, r2
 800421e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004228:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800422c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004230:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004232:	4a04      	ldr	r2, [pc, #16]	; (8004244 <__NVIC_SetPriorityGrouping+0x44>)
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	60d3      	str	r3, [r2, #12]
}
 8004238:	bf00      	nop
 800423a:	3714      	adds	r7, #20
 800423c:	46bd      	mov	sp, r7
 800423e:	bc80      	pop	{r7}
 8004240:	4770      	bx	lr
 8004242:	bf00      	nop
 8004244:	e000ed00 	.word	0xe000ed00

08004248 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004248:	b480      	push	{r7}
 800424a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800424c:	4b04      	ldr	r3, [pc, #16]	; (8004260 <__NVIC_GetPriorityGrouping+0x18>)
 800424e:	68db      	ldr	r3, [r3, #12]
 8004250:	0a1b      	lsrs	r3, r3, #8
 8004252:	f003 0307 	and.w	r3, r3, #7
}
 8004256:	4618      	mov	r0, r3
 8004258:	46bd      	mov	sp, r7
 800425a:	bc80      	pop	{r7}
 800425c:	4770      	bx	lr
 800425e:	bf00      	nop
 8004260:	e000ed00 	.word	0xe000ed00

08004264 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004264:	b480      	push	{r7}
 8004266:	b083      	sub	sp, #12
 8004268:	af00      	add	r7, sp, #0
 800426a:	4603      	mov	r3, r0
 800426c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800426e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004272:	2b00      	cmp	r3, #0
 8004274:	db0b      	blt.n	800428e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004276:	79fb      	ldrb	r3, [r7, #7]
 8004278:	f003 021f 	and.w	r2, r3, #31
 800427c:	4906      	ldr	r1, [pc, #24]	; (8004298 <__NVIC_EnableIRQ+0x34>)
 800427e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004282:	095b      	lsrs	r3, r3, #5
 8004284:	2001      	movs	r0, #1
 8004286:	fa00 f202 	lsl.w	r2, r0, r2
 800428a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800428e:	bf00      	nop
 8004290:	370c      	adds	r7, #12
 8004292:	46bd      	mov	sp, r7
 8004294:	bc80      	pop	{r7}
 8004296:	4770      	bx	lr
 8004298:	e000e100 	.word	0xe000e100

0800429c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800429c:	b480      	push	{r7}
 800429e:	b083      	sub	sp, #12
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	4603      	mov	r3, r0
 80042a4:	6039      	str	r1, [r7, #0]
 80042a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80042a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	db0a      	blt.n	80042c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	b2da      	uxtb	r2, r3
 80042b4:	490c      	ldr	r1, [pc, #48]	; (80042e8 <__NVIC_SetPriority+0x4c>)
 80042b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042ba:	0112      	lsls	r2, r2, #4
 80042bc:	b2d2      	uxtb	r2, r2
 80042be:	440b      	add	r3, r1
 80042c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80042c4:	e00a      	b.n	80042dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	b2da      	uxtb	r2, r3
 80042ca:	4908      	ldr	r1, [pc, #32]	; (80042ec <__NVIC_SetPriority+0x50>)
 80042cc:	79fb      	ldrb	r3, [r7, #7]
 80042ce:	f003 030f 	and.w	r3, r3, #15
 80042d2:	3b04      	subs	r3, #4
 80042d4:	0112      	lsls	r2, r2, #4
 80042d6:	b2d2      	uxtb	r2, r2
 80042d8:	440b      	add	r3, r1
 80042da:	761a      	strb	r2, [r3, #24]
}
 80042dc:	bf00      	nop
 80042de:	370c      	adds	r7, #12
 80042e0:	46bd      	mov	sp, r7
 80042e2:	bc80      	pop	{r7}
 80042e4:	4770      	bx	lr
 80042e6:	bf00      	nop
 80042e8:	e000e100 	.word	0xe000e100
 80042ec:	e000ed00 	.word	0xe000ed00

080042f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80042f0:	b480      	push	{r7}
 80042f2:	b089      	sub	sp, #36	; 0x24
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	60f8      	str	r0, [r7, #12]
 80042f8:	60b9      	str	r1, [r7, #8]
 80042fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	f003 0307 	and.w	r3, r3, #7
 8004302:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004304:	69fb      	ldr	r3, [r7, #28]
 8004306:	f1c3 0307 	rsb	r3, r3, #7
 800430a:	2b04      	cmp	r3, #4
 800430c:	bf28      	it	cs
 800430e:	2304      	movcs	r3, #4
 8004310:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004312:	69fb      	ldr	r3, [r7, #28]
 8004314:	3304      	adds	r3, #4
 8004316:	2b06      	cmp	r3, #6
 8004318:	d902      	bls.n	8004320 <NVIC_EncodePriority+0x30>
 800431a:	69fb      	ldr	r3, [r7, #28]
 800431c:	3b03      	subs	r3, #3
 800431e:	e000      	b.n	8004322 <NVIC_EncodePriority+0x32>
 8004320:	2300      	movs	r3, #0
 8004322:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004324:	f04f 32ff 	mov.w	r2, #4294967295
 8004328:	69bb      	ldr	r3, [r7, #24]
 800432a:	fa02 f303 	lsl.w	r3, r2, r3
 800432e:	43da      	mvns	r2, r3
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	401a      	ands	r2, r3
 8004334:	697b      	ldr	r3, [r7, #20]
 8004336:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004338:	f04f 31ff 	mov.w	r1, #4294967295
 800433c:	697b      	ldr	r3, [r7, #20]
 800433e:	fa01 f303 	lsl.w	r3, r1, r3
 8004342:	43d9      	mvns	r1, r3
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004348:	4313      	orrs	r3, r2
         );
}
 800434a:	4618      	mov	r0, r3
 800434c:	3724      	adds	r7, #36	; 0x24
 800434e:	46bd      	mov	sp, r7
 8004350:	bc80      	pop	{r7}
 8004352:	4770      	bx	lr

08004354 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b082      	sub	sp, #8
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	3b01      	subs	r3, #1
 8004360:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004364:	d301      	bcc.n	800436a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004366:	2301      	movs	r3, #1
 8004368:	e00f      	b.n	800438a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800436a:	4a0a      	ldr	r2, [pc, #40]	; (8004394 <SysTick_Config+0x40>)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	3b01      	subs	r3, #1
 8004370:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004372:	210f      	movs	r1, #15
 8004374:	f04f 30ff 	mov.w	r0, #4294967295
 8004378:	f7ff ff90 	bl	800429c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800437c:	4b05      	ldr	r3, [pc, #20]	; (8004394 <SysTick_Config+0x40>)
 800437e:	2200      	movs	r2, #0
 8004380:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004382:	4b04      	ldr	r3, [pc, #16]	; (8004394 <SysTick_Config+0x40>)
 8004384:	2207      	movs	r2, #7
 8004386:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004388:	2300      	movs	r3, #0
}
 800438a:	4618      	mov	r0, r3
 800438c:	3708      	adds	r7, #8
 800438e:	46bd      	mov	sp, r7
 8004390:	bd80      	pop	{r7, pc}
 8004392:	bf00      	nop
 8004394:	e000e010 	.word	0xe000e010

08004398 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b082      	sub	sp, #8
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80043a0:	6878      	ldr	r0, [r7, #4]
 80043a2:	f7ff ff2d 	bl	8004200 <__NVIC_SetPriorityGrouping>
}
 80043a6:	bf00      	nop
 80043a8:	3708      	adds	r7, #8
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bd80      	pop	{r7, pc}

080043ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80043ae:	b580      	push	{r7, lr}
 80043b0:	b086      	sub	sp, #24
 80043b2:	af00      	add	r7, sp, #0
 80043b4:	4603      	mov	r3, r0
 80043b6:	60b9      	str	r1, [r7, #8]
 80043b8:	607a      	str	r2, [r7, #4]
 80043ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80043bc:	2300      	movs	r3, #0
 80043be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80043c0:	f7ff ff42 	bl	8004248 <__NVIC_GetPriorityGrouping>
 80043c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80043c6:	687a      	ldr	r2, [r7, #4]
 80043c8:	68b9      	ldr	r1, [r7, #8]
 80043ca:	6978      	ldr	r0, [r7, #20]
 80043cc:	f7ff ff90 	bl	80042f0 <NVIC_EncodePriority>
 80043d0:	4602      	mov	r2, r0
 80043d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80043d6:	4611      	mov	r1, r2
 80043d8:	4618      	mov	r0, r3
 80043da:	f7ff ff5f 	bl	800429c <__NVIC_SetPriority>
}
 80043de:	bf00      	nop
 80043e0:	3718      	adds	r7, #24
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bd80      	pop	{r7, pc}

080043e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80043e6:	b580      	push	{r7, lr}
 80043e8:	b082      	sub	sp, #8
 80043ea:	af00      	add	r7, sp, #0
 80043ec:	4603      	mov	r3, r0
 80043ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80043f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043f4:	4618      	mov	r0, r3
 80043f6:	f7ff ff35 	bl	8004264 <__NVIC_EnableIRQ>
}
 80043fa:	bf00      	nop
 80043fc:	3708      	adds	r7, #8
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}

08004402 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004402:	b580      	push	{r7, lr}
 8004404:	b082      	sub	sp, #8
 8004406:	af00      	add	r7, sp, #0
 8004408:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800440a:	6878      	ldr	r0, [r7, #4]
 800440c:	f7ff ffa2 	bl	8004354 <SysTick_Config>
 8004410:	4603      	mov	r3, r0
}
 8004412:	4618      	mov	r0, r3
 8004414:	3708      	adds	r7, #8
 8004416:	46bd      	mov	sp, r7
 8004418:	bd80      	pop	{r7, pc}
	...

0800441c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800441c:	b480      	push	{r7}
 800441e:	b08b      	sub	sp, #44	; 0x2c
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
 8004424:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004426:	2300      	movs	r3, #0
 8004428:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800442a:	2300      	movs	r3, #0
 800442c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800442e:	e169      	b.n	8004704 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004430:	2201      	movs	r2, #1
 8004432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004434:	fa02 f303 	lsl.w	r3, r2, r3
 8004438:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	69fa      	ldr	r2, [r7, #28]
 8004440:	4013      	ands	r3, r2
 8004442:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004444:	69ba      	ldr	r2, [r7, #24]
 8004446:	69fb      	ldr	r3, [r7, #28]
 8004448:	429a      	cmp	r2, r3
 800444a:	f040 8158 	bne.w	80046fe <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	4a9a      	ldr	r2, [pc, #616]	; (80046bc <HAL_GPIO_Init+0x2a0>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d05e      	beq.n	8004516 <HAL_GPIO_Init+0xfa>
 8004458:	4a98      	ldr	r2, [pc, #608]	; (80046bc <HAL_GPIO_Init+0x2a0>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d875      	bhi.n	800454a <HAL_GPIO_Init+0x12e>
 800445e:	4a98      	ldr	r2, [pc, #608]	; (80046c0 <HAL_GPIO_Init+0x2a4>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d058      	beq.n	8004516 <HAL_GPIO_Init+0xfa>
 8004464:	4a96      	ldr	r2, [pc, #600]	; (80046c0 <HAL_GPIO_Init+0x2a4>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d86f      	bhi.n	800454a <HAL_GPIO_Init+0x12e>
 800446a:	4a96      	ldr	r2, [pc, #600]	; (80046c4 <HAL_GPIO_Init+0x2a8>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d052      	beq.n	8004516 <HAL_GPIO_Init+0xfa>
 8004470:	4a94      	ldr	r2, [pc, #592]	; (80046c4 <HAL_GPIO_Init+0x2a8>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d869      	bhi.n	800454a <HAL_GPIO_Init+0x12e>
 8004476:	4a94      	ldr	r2, [pc, #592]	; (80046c8 <HAL_GPIO_Init+0x2ac>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d04c      	beq.n	8004516 <HAL_GPIO_Init+0xfa>
 800447c:	4a92      	ldr	r2, [pc, #584]	; (80046c8 <HAL_GPIO_Init+0x2ac>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d863      	bhi.n	800454a <HAL_GPIO_Init+0x12e>
 8004482:	4a92      	ldr	r2, [pc, #584]	; (80046cc <HAL_GPIO_Init+0x2b0>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d046      	beq.n	8004516 <HAL_GPIO_Init+0xfa>
 8004488:	4a90      	ldr	r2, [pc, #576]	; (80046cc <HAL_GPIO_Init+0x2b0>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d85d      	bhi.n	800454a <HAL_GPIO_Init+0x12e>
 800448e:	2b12      	cmp	r3, #18
 8004490:	d82a      	bhi.n	80044e8 <HAL_GPIO_Init+0xcc>
 8004492:	2b12      	cmp	r3, #18
 8004494:	d859      	bhi.n	800454a <HAL_GPIO_Init+0x12e>
 8004496:	a201      	add	r2, pc, #4	; (adr r2, 800449c <HAL_GPIO_Init+0x80>)
 8004498:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800449c:	08004517 	.word	0x08004517
 80044a0:	080044f1 	.word	0x080044f1
 80044a4:	08004503 	.word	0x08004503
 80044a8:	08004545 	.word	0x08004545
 80044ac:	0800454b 	.word	0x0800454b
 80044b0:	0800454b 	.word	0x0800454b
 80044b4:	0800454b 	.word	0x0800454b
 80044b8:	0800454b 	.word	0x0800454b
 80044bc:	0800454b 	.word	0x0800454b
 80044c0:	0800454b 	.word	0x0800454b
 80044c4:	0800454b 	.word	0x0800454b
 80044c8:	0800454b 	.word	0x0800454b
 80044cc:	0800454b 	.word	0x0800454b
 80044d0:	0800454b 	.word	0x0800454b
 80044d4:	0800454b 	.word	0x0800454b
 80044d8:	0800454b 	.word	0x0800454b
 80044dc:	0800454b 	.word	0x0800454b
 80044e0:	080044f9 	.word	0x080044f9
 80044e4:	0800450d 	.word	0x0800450d
 80044e8:	4a79      	ldr	r2, [pc, #484]	; (80046d0 <HAL_GPIO_Init+0x2b4>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d013      	beq.n	8004516 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80044ee:	e02c      	b.n	800454a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	68db      	ldr	r3, [r3, #12]
 80044f4:	623b      	str	r3, [r7, #32]
          break;
 80044f6:	e029      	b.n	800454c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	68db      	ldr	r3, [r3, #12]
 80044fc:	3304      	adds	r3, #4
 80044fe:	623b      	str	r3, [r7, #32]
          break;
 8004500:	e024      	b.n	800454c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	68db      	ldr	r3, [r3, #12]
 8004506:	3308      	adds	r3, #8
 8004508:	623b      	str	r3, [r7, #32]
          break;
 800450a:	e01f      	b.n	800454c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	68db      	ldr	r3, [r3, #12]
 8004510:	330c      	adds	r3, #12
 8004512:	623b      	str	r3, [r7, #32]
          break;
 8004514:	e01a      	b.n	800454c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	689b      	ldr	r3, [r3, #8]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d102      	bne.n	8004524 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800451e:	2304      	movs	r3, #4
 8004520:	623b      	str	r3, [r7, #32]
          break;
 8004522:	e013      	b.n	800454c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	689b      	ldr	r3, [r3, #8]
 8004528:	2b01      	cmp	r3, #1
 800452a:	d105      	bne.n	8004538 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800452c:	2308      	movs	r3, #8
 800452e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	69fa      	ldr	r2, [r7, #28]
 8004534:	611a      	str	r2, [r3, #16]
          break;
 8004536:	e009      	b.n	800454c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004538:	2308      	movs	r3, #8
 800453a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	69fa      	ldr	r2, [r7, #28]
 8004540:	615a      	str	r2, [r3, #20]
          break;
 8004542:	e003      	b.n	800454c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004544:	2300      	movs	r3, #0
 8004546:	623b      	str	r3, [r7, #32]
          break;
 8004548:	e000      	b.n	800454c <HAL_GPIO_Init+0x130>
          break;
 800454a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800454c:	69bb      	ldr	r3, [r7, #24]
 800454e:	2bff      	cmp	r3, #255	; 0xff
 8004550:	d801      	bhi.n	8004556 <HAL_GPIO_Init+0x13a>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	e001      	b.n	800455a <HAL_GPIO_Init+0x13e>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	3304      	adds	r3, #4
 800455a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800455c:	69bb      	ldr	r3, [r7, #24]
 800455e:	2bff      	cmp	r3, #255	; 0xff
 8004560:	d802      	bhi.n	8004568 <HAL_GPIO_Init+0x14c>
 8004562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004564:	009b      	lsls	r3, r3, #2
 8004566:	e002      	b.n	800456e <HAL_GPIO_Init+0x152>
 8004568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800456a:	3b08      	subs	r3, #8
 800456c:	009b      	lsls	r3, r3, #2
 800456e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004570:	697b      	ldr	r3, [r7, #20]
 8004572:	681a      	ldr	r2, [r3, #0]
 8004574:	210f      	movs	r1, #15
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	fa01 f303 	lsl.w	r3, r1, r3
 800457c:	43db      	mvns	r3, r3
 800457e:	401a      	ands	r2, r3
 8004580:	6a39      	ldr	r1, [r7, #32]
 8004582:	693b      	ldr	r3, [r7, #16]
 8004584:	fa01 f303 	lsl.w	r3, r1, r3
 8004588:	431a      	orrs	r2, r3
 800458a:	697b      	ldr	r3, [r7, #20]
 800458c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004596:	2b00      	cmp	r3, #0
 8004598:	f000 80b1 	beq.w	80046fe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800459c:	4b4d      	ldr	r3, [pc, #308]	; (80046d4 <HAL_GPIO_Init+0x2b8>)
 800459e:	699b      	ldr	r3, [r3, #24]
 80045a0:	4a4c      	ldr	r2, [pc, #304]	; (80046d4 <HAL_GPIO_Init+0x2b8>)
 80045a2:	f043 0301 	orr.w	r3, r3, #1
 80045a6:	6193      	str	r3, [r2, #24]
 80045a8:	4b4a      	ldr	r3, [pc, #296]	; (80046d4 <HAL_GPIO_Init+0x2b8>)
 80045aa:	699b      	ldr	r3, [r3, #24]
 80045ac:	f003 0301 	and.w	r3, r3, #1
 80045b0:	60bb      	str	r3, [r7, #8]
 80045b2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80045b4:	4a48      	ldr	r2, [pc, #288]	; (80046d8 <HAL_GPIO_Init+0x2bc>)
 80045b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b8:	089b      	lsrs	r3, r3, #2
 80045ba:	3302      	adds	r3, #2
 80045bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045c0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80045c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045c4:	f003 0303 	and.w	r3, r3, #3
 80045c8:	009b      	lsls	r3, r3, #2
 80045ca:	220f      	movs	r2, #15
 80045cc:	fa02 f303 	lsl.w	r3, r2, r3
 80045d0:	43db      	mvns	r3, r3
 80045d2:	68fa      	ldr	r2, [r7, #12]
 80045d4:	4013      	ands	r3, r2
 80045d6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	4a40      	ldr	r2, [pc, #256]	; (80046dc <HAL_GPIO_Init+0x2c0>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d013      	beq.n	8004608 <HAL_GPIO_Init+0x1ec>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	4a3f      	ldr	r2, [pc, #252]	; (80046e0 <HAL_GPIO_Init+0x2c4>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d00d      	beq.n	8004604 <HAL_GPIO_Init+0x1e8>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	4a3e      	ldr	r2, [pc, #248]	; (80046e4 <HAL_GPIO_Init+0x2c8>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d007      	beq.n	8004600 <HAL_GPIO_Init+0x1e4>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	4a3d      	ldr	r2, [pc, #244]	; (80046e8 <HAL_GPIO_Init+0x2cc>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d101      	bne.n	80045fc <HAL_GPIO_Init+0x1e0>
 80045f8:	2303      	movs	r3, #3
 80045fa:	e006      	b.n	800460a <HAL_GPIO_Init+0x1ee>
 80045fc:	2304      	movs	r3, #4
 80045fe:	e004      	b.n	800460a <HAL_GPIO_Init+0x1ee>
 8004600:	2302      	movs	r3, #2
 8004602:	e002      	b.n	800460a <HAL_GPIO_Init+0x1ee>
 8004604:	2301      	movs	r3, #1
 8004606:	e000      	b.n	800460a <HAL_GPIO_Init+0x1ee>
 8004608:	2300      	movs	r3, #0
 800460a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800460c:	f002 0203 	and.w	r2, r2, #3
 8004610:	0092      	lsls	r2, r2, #2
 8004612:	4093      	lsls	r3, r2
 8004614:	68fa      	ldr	r2, [r7, #12]
 8004616:	4313      	orrs	r3, r2
 8004618:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800461a:	492f      	ldr	r1, [pc, #188]	; (80046d8 <HAL_GPIO_Init+0x2bc>)
 800461c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800461e:	089b      	lsrs	r3, r3, #2
 8004620:	3302      	adds	r3, #2
 8004622:	68fa      	ldr	r2, [r7, #12]
 8004624:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004630:	2b00      	cmp	r3, #0
 8004632:	d006      	beq.n	8004642 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004634:	4b2d      	ldr	r3, [pc, #180]	; (80046ec <HAL_GPIO_Init+0x2d0>)
 8004636:	689a      	ldr	r2, [r3, #8]
 8004638:	492c      	ldr	r1, [pc, #176]	; (80046ec <HAL_GPIO_Init+0x2d0>)
 800463a:	69bb      	ldr	r3, [r7, #24]
 800463c:	4313      	orrs	r3, r2
 800463e:	608b      	str	r3, [r1, #8]
 8004640:	e006      	b.n	8004650 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004642:	4b2a      	ldr	r3, [pc, #168]	; (80046ec <HAL_GPIO_Init+0x2d0>)
 8004644:	689a      	ldr	r2, [r3, #8]
 8004646:	69bb      	ldr	r3, [r7, #24]
 8004648:	43db      	mvns	r3, r3
 800464a:	4928      	ldr	r1, [pc, #160]	; (80046ec <HAL_GPIO_Init+0x2d0>)
 800464c:	4013      	ands	r3, r2
 800464e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	685b      	ldr	r3, [r3, #4]
 8004654:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004658:	2b00      	cmp	r3, #0
 800465a:	d006      	beq.n	800466a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800465c:	4b23      	ldr	r3, [pc, #140]	; (80046ec <HAL_GPIO_Init+0x2d0>)
 800465e:	68da      	ldr	r2, [r3, #12]
 8004660:	4922      	ldr	r1, [pc, #136]	; (80046ec <HAL_GPIO_Init+0x2d0>)
 8004662:	69bb      	ldr	r3, [r7, #24]
 8004664:	4313      	orrs	r3, r2
 8004666:	60cb      	str	r3, [r1, #12]
 8004668:	e006      	b.n	8004678 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800466a:	4b20      	ldr	r3, [pc, #128]	; (80046ec <HAL_GPIO_Init+0x2d0>)
 800466c:	68da      	ldr	r2, [r3, #12]
 800466e:	69bb      	ldr	r3, [r7, #24]
 8004670:	43db      	mvns	r3, r3
 8004672:	491e      	ldr	r1, [pc, #120]	; (80046ec <HAL_GPIO_Init+0x2d0>)
 8004674:	4013      	ands	r3, r2
 8004676:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004680:	2b00      	cmp	r3, #0
 8004682:	d006      	beq.n	8004692 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004684:	4b19      	ldr	r3, [pc, #100]	; (80046ec <HAL_GPIO_Init+0x2d0>)
 8004686:	685a      	ldr	r2, [r3, #4]
 8004688:	4918      	ldr	r1, [pc, #96]	; (80046ec <HAL_GPIO_Init+0x2d0>)
 800468a:	69bb      	ldr	r3, [r7, #24]
 800468c:	4313      	orrs	r3, r2
 800468e:	604b      	str	r3, [r1, #4]
 8004690:	e006      	b.n	80046a0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004692:	4b16      	ldr	r3, [pc, #88]	; (80046ec <HAL_GPIO_Init+0x2d0>)
 8004694:	685a      	ldr	r2, [r3, #4]
 8004696:	69bb      	ldr	r3, [r7, #24]
 8004698:	43db      	mvns	r3, r3
 800469a:	4914      	ldr	r1, [pc, #80]	; (80046ec <HAL_GPIO_Init+0x2d0>)
 800469c:	4013      	ands	r3, r2
 800469e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d021      	beq.n	80046f0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80046ac:	4b0f      	ldr	r3, [pc, #60]	; (80046ec <HAL_GPIO_Init+0x2d0>)
 80046ae:	681a      	ldr	r2, [r3, #0]
 80046b0:	490e      	ldr	r1, [pc, #56]	; (80046ec <HAL_GPIO_Init+0x2d0>)
 80046b2:	69bb      	ldr	r3, [r7, #24]
 80046b4:	4313      	orrs	r3, r2
 80046b6:	600b      	str	r3, [r1, #0]
 80046b8:	e021      	b.n	80046fe <HAL_GPIO_Init+0x2e2>
 80046ba:	bf00      	nop
 80046bc:	10320000 	.word	0x10320000
 80046c0:	10310000 	.word	0x10310000
 80046c4:	10220000 	.word	0x10220000
 80046c8:	10210000 	.word	0x10210000
 80046cc:	10120000 	.word	0x10120000
 80046d0:	10110000 	.word	0x10110000
 80046d4:	40021000 	.word	0x40021000
 80046d8:	40010000 	.word	0x40010000
 80046dc:	40010800 	.word	0x40010800
 80046e0:	40010c00 	.word	0x40010c00
 80046e4:	40011000 	.word	0x40011000
 80046e8:	40011400 	.word	0x40011400
 80046ec:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80046f0:	4b0b      	ldr	r3, [pc, #44]	; (8004720 <HAL_GPIO_Init+0x304>)
 80046f2:	681a      	ldr	r2, [r3, #0]
 80046f4:	69bb      	ldr	r3, [r7, #24]
 80046f6:	43db      	mvns	r3, r3
 80046f8:	4909      	ldr	r1, [pc, #36]	; (8004720 <HAL_GPIO_Init+0x304>)
 80046fa:	4013      	ands	r3, r2
 80046fc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80046fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004700:	3301      	adds	r3, #1
 8004702:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	681a      	ldr	r2, [r3, #0]
 8004708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800470a:	fa22 f303 	lsr.w	r3, r2, r3
 800470e:	2b00      	cmp	r3, #0
 8004710:	f47f ae8e 	bne.w	8004430 <HAL_GPIO_Init+0x14>
  }
}
 8004714:	bf00      	nop
 8004716:	bf00      	nop
 8004718:	372c      	adds	r7, #44	; 0x2c
 800471a:	46bd      	mov	sp, r7
 800471c:	bc80      	pop	{r7}
 800471e:	4770      	bx	lr
 8004720:	40010400 	.word	0x40010400

08004724 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004724:	b480      	push	{r7}
 8004726:	b083      	sub	sp, #12
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
 800472c:	460b      	mov	r3, r1
 800472e:	807b      	strh	r3, [r7, #2]
 8004730:	4613      	mov	r3, r2
 8004732:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004734:	787b      	ldrb	r3, [r7, #1]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d003      	beq.n	8004742 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800473a:	887a      	ldrh	r2, [r7, #2]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004740:	e003      	b.n	800474a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004742:	887b      	ldrh	r3, [r7, #2]
 8004744:	041a      	lsls	r2, r3, #16
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	611a      	str	r2, [r3, #16]
}
 800474a:	bf00      	nop
 800474c:	370c      	adds	r7, #12
 800474e:	46bd      	mov	sp, r7
 8004750:	bc80      	pop	{r7}
 8004752:	4770      	bx	lr

08004754 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004754:	b480      	push	{r7}
 8004756:	b085      	sub	sp, #20
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
 800475c:	460b      	mov	r3, r1
 800475e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	68db      	ldr	r3, [r3, #12]
 8004764:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004766:	887a      	ldrh	r2, [r7, #2]
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	4013      	ands	r3, r2
 800476c:	041a      	lsls	r2, r3, #16
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	43d9      	mvns	r1, r3
 8004772:	887b      	ldrh	r3, [r7, #2]
 8004774:	400b      	ands	r3, r1
 8004776:	431a      	orrs	r2, r3
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	611a      	str	r2, [r3, #16]
}
 800477c:	bf00      	nop
 800477e:	3714      	adds	r7, #20
 8004780:	46bd      	mov	sp, r7
 8004782:	bc80      	pop	{r7}
 8004784:	4770      	bx	lr
	...

08004788 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b084      	sub	sp, #16
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d101      	bne.n	800479a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004796:	2301      	movs	r3, #1
 8004798:	e12b      	b.n	80049f2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047a0:	b2db      	uxtb	r3, r3
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d106      	bne.n	80047b4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2200      	movs	r2, #0
 80047aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80047ae:	6878      	ldr	r0, [r7, #4]
 80047b0:	f7fe fa12 	bl	8002bd8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2224      	movs	r2, #36	; 0x24
 80047b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	681a      	ldr	r2, [r3, #0]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f022 0201 	bic.w	r2, r2, #1
 80047ca:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	681a      	ldr	r2, [r3, #0]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80047da:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	681a      	ldr	r2, [r3, #0]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80047ea:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80047ec:	f001 fbf0 	bl	8005fd0 <HAL_RCC_GetPCLK1Freq>
 80047f0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	4a81      	ldr	r2, [pc, #516]	; (80049fc <HAL_I2C_Init+0x274>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d807      	bhi.n	800480c <HAL_I2C_Init+0x84>
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	4a80      	ldr	r2, [pc, #512]	; (8004a00 <HAL_I2C_Init+0x278>)
 8004800:	4293      	cmp	r3, r2
 8004802:	bf94      	ite	ls
 8004804:	2301      	movls	r3, #1
 8004806:	2300      	movhi	r3, #0
 8004808:	b2db      	uxtb	r3, r3
 800480a:	e006      	b.n	800481a <HAL_I2C_Init+0x92>
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	4a7d      	ldr	r2, [pc, #500]	; (8004a04 <HAL_I2C_Init+0x27c>)
 8004810:	4293      	cmp	r3, r2
 8004812:	bf94      	ite	ls
 8004814:	2301      	movls	r3, #1
 8004816:	2300      	movhi	r3, #0
 8004818:	b2db      	uxtb	r3, r3
 800481a:	2b00      	cmp	r3, #0
 800481c:	d001      	beq.n	8004822 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800481e:	2301      	movs	r3, #1
 8004820:	e0e7      	b.n	80049f2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	4a78      	ldr	r2, [pc, #480]	; (8004a08 <HAL_I2C_Init+0x280>)
 8004826:	fba2 2303 	umull	r2, r3, r2, r3
 800482a:	0c9b      	lsrs	r3, r3, #18
 800482c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	68ba      	ldr	r2, [r7, #8]
 800483e:	430a      	orrs	r2, r1
 8004840:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	6a1b      	ldr	r3, [r3, #32]
 8004848:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	4a6a      	ldr	r2, [pc, #424]	; (80049fc <HAL_I2C_Init+0x274>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d802      	bhi.n	800485c <HAL_I2C_Init+0xd4>
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	3301      	adds	r3, #1
 800485a:	e009      	b.n	8004870 <HAL_I2C_Init+0xe8>
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004862:	fb02 f303 	mul.w	r3, r2, r3
 8004866:	4a69      	ldr	r2, [pc, #420]	; (8004a0c <HAL_I2C_Init+0x284>)
 8004868:	fba2 2303 	umull	r2, r3, r2, r3
 800486c:	099b      	lsrs	r3, r3, #6
 800486e:	3301      	adds	r3, #1
 8004870:	687a      	ldr	r2, [r7, #4]
 8004872:	6812      	ldr	r2, [r2, #0]
 8004874:	430b      	orrs	r3, r1
 8004876:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	69db      	ldr	r3, [r3, #28]
 800487e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004882:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	495c      	ldr	r1, [pc, #368]	; (80049fc <HAL_I2C_Init+0x274>)
 800488c:	428b      	cmp	r3, r1
 800488e:	d819      	bhi.n	80048c4 <HAL_I2C_Init+0x13c>
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	1e59      	subs	r1, r3, #1
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	005b      	lsls	r3, r3, #1
 800489a:	fbb1 f3f3 	udiv	r3, r1, r3
 800489e:	1c59      	adds	r1, r3, #1
 80048a0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80048a4:	400b      	ands	r3, r1
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d00a      	beq.n	80048c0 <HAL_I2C_Init+0x138>
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	1e59      	subs	r1, r3, #1
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	005b      	lsls	r3, r3, #1
 80048b4:	fbb1 f3f3 	udiv	r3, r1, r3
 80048b8:	3301      	adds	r3, #1
 80048ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048be:	e051      	b.n	8004964 <HAL_I2C_Init+0x1dc>
 80048c0:	2304      	movs	r3, #4
 80048c2:	e04f      	b.n	8004964 <HAL_I2C_Init+0x1dc>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	689b      	ldr	r3, [r3, #8]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d111      	bne.n	80048f0 <HAL_I2C_Init+0x168>
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	1e58      	subs	r0, r3, #1
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6859      	ldr	r1, [r3, #4]
 80048d4:	460b      	mov	r3, r1
 80048d6:	005b      	lsls	r3, r3, #1
 80048d8:	440b      	add	r3, r1
 80048da:	fbb0 f3f3 	udiv	r3, r0, r3
 80048de:	3301      	adds	r3, #1
 80048e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	bf0c      	ite	eq
 80048e8:	2301      	moveq	r3, #1
 80048ea:	2300      	movne	r3, #0
 80048ec:	b2db      	uxtb	r3, r3
 80048ee:	e012      	b.n	8004916 <HAL_I2C_Init+0x18e>
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	1e58      	subs	r0, r3, #1
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6859      	ldr	r1, [r3, #4]
 80048f8:	460b      	mov	r3, r1
 80048fa:	009b      	lsls	r3, r3, #2
 80048fc:	440b      	add	r3, r1
 80048fe:	0099      	lsls	r1, r3, #2
 8004900:	440b      	add	r3, r1
 8004902:	fbb0 f3f3 	udiv	r3, r0, r3
 8004906:	3301      	adds	r3, #1
 8004908:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800490c:	2b00      	cmp	r3, #0
 800490e:	bf0c      	ite	eq
 8004910:	2301      	moveq	r3, #1
 8004912:	2300      	movne	r3, #0
 8004914:	b2db      	uxtb	r3, r3
 8004916:	2b00      	cmp	r3, #0
 8004918:	d001      	beq.n	800491e <HAL_I2C_Init+0x196>
 800491a:	2301      	movs	r3, #1
 800491c:	e022      	b.n	8004964 <HAL_I2C_Init+0x1dc>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	689b      	ldr	r3, [r3, #8]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d10e      	bne.n	8004944 <HAL_I2C_Init+0x1bc>
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	1e58      	subs	r0, r3, #1
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6859      	ldr	r1, [r3, #4]
 800492e:	460b      	mov	r3, r1
 8004930:	005b      	lsls	r3, r3, #1
 8004932:	440b      	add	r3, r1
 8004934:	fbb0 f3f3 	udiv	r3, r0, r3
 8004938:	3301      	adds	r3, #1
 800493a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800493e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004942:	e00f      	b.n	8004964 <HAL_I2C_Init+0x1dc>
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	1e58      	subs	r0, r3, #1
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6859      	ldr	r1, [r3, #4]
 800494c:	460b      	mov	r3, r1
 800494e:	009b      	lsls	r3, r3, #2
 8004950:	440b      	add	r3, r1
 8004952:	0099      	lsls	r1, r3, #2
 8004954:	440b      	add	r3, r1
 8004956:	fbb0 f3f3 	udiv	r3, r0, r3
 800495a:	3301      	adds	r3, #1
 800495c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004960:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004964:	6879      	ldr	r1, [r7, #4]
 8004966:	6809      	ldr	r1, [r1, #0]
 8004968:	4313      	orrs	r3, r2
 800496a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	69da      	ldr	r2, [r3, #28]
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6a1b      	ldr	r3, [r3, #32]
 800497e:	431a      	orrs	r2, r3
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	430a      	orrs	r2, r1
 8004986:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	689b      	ldr	r3, [r3, #8]
 800498e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004992:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004996:	687a      	ldr	r2, [r7, #4]
 8004998:	6911      	ldr	r1, [r2, #16]
 800499a:	687a      	ldr	r2, [r7, #4]
 800499c:	68d2      	ldr	r2, [r2, #12]
 800499e:	4311      	orrs	r1, r2
 80049a0:	687a      	ldr	r2, [r7, #4]
 80049a2:	6812      	ldr	r2, [r2, #0]
 80049a4:	430b      	orrs	r3, r1
 80049a6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	68db      	ldr	r3, [r3, #12]
 80049ae:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	695a      	ldr	r2, [r3, #20]
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	699b      	ldr	r3, [r3, #24]
 80049ba:	431a      	orrs	r2, r3
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	430a      	orrs	r2, r1
 80049c2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	681a      	ldr	r2, [r3, #0]
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f042 0201 	orr.w	r2, r2, #1
 80049d2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2200      	movs	r2, #0
 80049d8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2220      	movs	r2, #32
 80049de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2200      	movs	r2, #0
 80049e6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2200      	movs	r2, #0
 80049ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80049f0:	2300      	movs	r3, #0
}
 80049f2:	4618      	mov	r0, r3
 80049f4:	3710      	adds	r7, #16
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bd80      	pop	{r7, pc}
 80049fa:	bf00      	nop
 80049fc:	000186a0 	.word	0x000186a0
 8004a00:	001e847f 	.word	0x001e847f
 8004a04:	003d08ff 	.word	0x003d08ff
 8004a08:	431bde83 	.word	0x431bde83
 8004a0c:	10624dd3 	.word	0x10624dd3

08004a10 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b088      	sub	sp, #32
 8004a14:	af02      	add	r7, sp, #8
 8004a16:	60f8      	str	r0, [r7, #12]
 8004a18:	4608      	mov	r0, r1
 8004a1a:	4611      	mov	r1, r2
 8004a1c:	461a      	mov	r2, r3
 8004a1e:	4603      	mov	r3, r0
 8004a20:	817b      	strh	r3, [r7, #10]
 8004a22:	460b      	mov	r3, r1
 8004a24:	813b      	strh	r3, [r7, #8]
 8004a26:	4613      	mov	r3, r2
 8004a28:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004a2a:	f7fe fb69 	bl	8003100 <HAL_GetTick>
 8004a2e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a36:	b2db      	uxtb	r3, r3
 8004a38:	2b20      	cmp	r3, #32
 8004a3a:	f040 80d9 	bne.w	8004bf0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004a3e:	697b      	ldr	r3, [r7, #20]
 8004a40:	9300      	str	r3, [sp, #0]
 8004a42:	2319      	movs	r3, #25
 8004a44:	2201      	movs	r2, #1
 8004a46:	496d      	ldr	r1, [pc, #436]	; (8004bfc <HAL_I2C_Mem_Write+0x1ec>)
 8004a48:	68f8      	ldr	r0, [r7, #12]
 8004a4a:	f000 fcc1 	bl	80053d0 <I2C_WaitOnFlagUntilTimeout>
 8004a4e:	4603      	mov	r3, r0
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d001      	beq.n	8004a58 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004a54:	2302      	movs	r3, #2
 8004a56:	e0cc      	b.n	8004bf2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a5e:	2b01      	cmp	r3, #1
 8004a60:	d101      	bne.n	8004a66 <HAL_I2C_Mem_Write+0x56>
 8004a62:	2302      	movs	r3, #2
 8004a64:	e0c5      	b.n	8004bf2 <HAL_I2C_Mem_Write+0x1e2>
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	2201      	movs	r2, #1
 8004a6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f003 0301 	and.w	r3, r3, #1
 8004a78:	2b01      	cmp	r3, #1
 8004a7a:	d007      	beq.n	8004a8c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	681a      	ldr	r2, [r3, #0]
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f042 0201 	orr.w	r2, r2, #1
 8004a8a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	681a      	ldr	r2, [r3, #0]
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a9a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	2221      	movs	r2, #33	; 0x21
 8004aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	2240      	movs	r2, #64	; 0x40
 8004aa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	2200      	movs	r2, #0
 8004ab0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	6a3a      	ldr	r2, [r7, #32]
 8004ab6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004abc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ac2:	b29a      	uxth	r2, r3
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	4a4d      	ldr	r2, [pc, #308]	; (8004c00 <HAL_I2C_Mem_Write+0x1f0>)
 8004acc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004ace:	88f8      	ldrh	r0, [r7, #6]
 8004ad0:	893a      	ldrh	r2, [r7, #8]
 8004ad2:	8979      	ldrh	r1, [r7, #10]
 8004ad4:	697b      	ldr	r3, [r7, #20]
 8004ad6:	9301      	str	r3, [sp, #4]
 8004ad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ada:	9300      	str	r3, [sp, #0]
 8004adc:	4603      	mov	r3, r0
 8004ade:	68f8      	ldr	r0, [r7, #12]
 8004ae0:	f000 faf8 	bl	80050d4 <I2C_RequestMemoryWrite>
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d052      	beq.n	8004b90 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004aea:	2301      	movs	r3, #1
 8004aec:	e081      	b.n	8004bf2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004aee:	697a      	ldr	r2, [r7, #20]
 8004af0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004af2:	68f8      	ldr	r0, [r7, #12]
 8004af4:	f000 fd86 	bl	8005604 <I2C_WaitOnTXEFlagUntilTimeout>
 8004af8:	4603      	mov	r3, r0
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d00d      	beq.n	8004b1a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b02:	2b04      	cmp	r3, #4
 8004b04:	d107      	bne.n	8004b16 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	681a      	ldr	r2, [r3, #0]
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b14:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004b16:	2301      	movs	r3, #1
 8004b18:	e06b      	b.n	8004bf2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b1e:	781a      	ldrb	r2, [r3, #0]
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b2a:	1c5a      	adds	r2, r3, #1
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b34:	3b01      	subs	r3, #1
 8004b36:	b29a      	uxth	r2, r3
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b40:	b29b      	uxth	r3, r3
 8004b42:	3b01      	subs	r3, #1
 8004b44:	b29a      	uxth	r2, r3
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	695b      	ldr	r3, [r3, #20]
 8004b50:	f003 0304 	and.w	r3, r3, #4
 8004b54:	2b04      	cmp	r3, #4
 8004b56:	d11b      	bne.n	8004b90 <HAL_I2C_Mem_Write+0x180>
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d017      	beq.n	8004b90 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b64:	781a      	ldrb	r2, [r3, #0]
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b70:	1c5a      	adds	r2, r3, #1
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b7a:	3b01      	subs	r3, #1
 8004b7c:	b29a      	uxth	r2, r3
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b86:	b29b      	uxth	r3, r3
 8004b88:	3b01      	subs	r3, #1
 8004b8a:	b29a      	uxth	r2, r3
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d1aa      	bne.n	8004aee <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b98:	697a      	ldr	r2, [r7, #20]
 8004b9a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004b9c:	68f8      	ldr	r0, [r7, #12]
 8004b9e:	f000 fd79 	bl	8005694 <I2C_WaitOnBTFFlagUntilTimeout>
 8004ba2:	4603      	mov	r3, r0
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d00d      	beq.n	8004bc4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bac:	2b04      	cmp	r3, #4
 8004bae:	d107      	bne.n	8004bc0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	681a      	ldr	r2, [r3, #0]
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bbe:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	e016      	b.n	8004bf2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	681a      	ldr	r2, [r3, #0]
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bd2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	2220      	movs	r2, #32
 8004bd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	2200      	movs	r2, #0
 8004be0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	2200      	movs	r2, #0
 8004be8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004bec:	2300      	movs	r3, #0
 8004bee:	e000      	b.n	8004bf2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004bf0:	2302      	movs	r3, #2
  }
}
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	3718      	adds	r7, #24
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bd80      	pop	{r7, pc}
 8004bfa:	bf00      	nop
 8004bfc:	00100002 	.word	0x00100002
 8004c00:	ffff0000 	.word	0xffff0000

08004c04 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b08c      	sub	sp, #48	; 0x30
 8004c08:	af02      	add	r7, sp, #8
 8004c0a:	60f8      	str	r0, [r7, #12]
 8004c0c:	4608      	mov	r0, r1
 8004c0e:	4611      	mov	r1, r2
 8004c10:	461a      	mov	r2, r3
 8004c12:	4603      	mov	r3, r0
 8004c14:	817b      	strh	r3, [r7, #10]
 8004c16:	460b      	mov	r3, r1
 8004c18:	813b      	strh	r3, [r7, #8]
 8004c1a:	4613      	mov	r3, r2
 8004c1c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8004c1e:	2300      	movs	r3, #0
 8004c20:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004c22:	f7fe fa6d 	bl	8003100 <HAL_GetTick>
 8004c26:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c2e:	b2db      	uxtb	r3, r3
 8004c30:	2b20      	cmp	r3, #32
 8004c32:	f040 8244 	bne.w	80050be <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c38:	9300      	str	r3, [sp, #0]
 8004c3a:	2319      	movs	r3, #25
 8004c3c:	2201      	movs	r2, #1
 8004c3e:	4982      	ldr	r1, [pc, #520]	; (8004e48 <HAL_I2C_Mem_Read+0x244>)
 8004c40:	68f8      	ldr	r0, [r7, #12]
 8004c42:	f000 fbc5 	bl	80053d0 <I2C_WaitOnFlagUntilTimeout>
 8004c46:	4603      	mov	r3, r0
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d001      	beq.n	8004c50 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8004c4c:	2302      	movs	r3, #2
 8004c4e:	e237      	b.n	80050c0 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c56:	2b01      	cmp	r3, #1
 8004c58:	d101      	bne.n	8004c5e <HAL_I2C_Mem_Read+0x5a>
 8004c5a:	2302      	movs	r3, #2
 8004c5c:	e230      	b.n	80050c0 <HAL_I2C_Mem_Read+0x4bc>
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	2201      	movs	r2, #1
 8004c62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f003 0301 	and.w	r3, r3, #1
 8004c70:	2b01      	cmp	r3, #1
 8004c72:	d007      	beq.n	8004c84 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	681a      	ldr	r2, [r3, #0]
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f042 0201 	orr.w	r2, r2, #1
 8004c82:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	681a      	ldr	r2, [r3, #0]
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c92:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	2222      	movs	r2, #34	; 0x22
 8004c98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	2240      	movs	r2, #64	; 0x40
 8004ca0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004cae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004cb4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cba:	b29a      	uxth	r2, r3
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	4a62      	ldr	r2, [pc, #392]	; (8004e4c <HAL_I2C_Mem_Read+0x248>)
 8004cc4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004cc6:	88f8      	ldrh	r0, [r7, #6]
 8004cc8:	893a      	ldrh	r2, [r7, #8]
 8004cca:	8979      	ldrh	r1, [r7, #10]
 8004ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cce:	9301      	str	r3, [sp, #4]
 8004cd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cd2:	9300      	str	r3, [sp, #0]
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	68f8      	ldr	r0, [r7, #12]
 8004cd8:	f000 fa92 	bl	8005200 <I2C_RequestMemoryRead>
 8004cdc:	4603      	mov	r3, r0
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d001      	beq.n	8004ce6 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	e1ec      	b.n	80050c0 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d113      	bne.n	8004d16 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004cee:	2300      	movs	r3, #0
 8004cf0:	61fb      	str	r3, [r7, #28]
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	695b      	ldr	r3, [r3, #20]
 8004cf8:	61fb      	str	r3, [r7, #28]
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	699b      	ldr	r3, [r3, #24]
 8004d00:	61fb      	str	r3, [r7, #28]
 8004d02:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	681a      	ldr	r2, [r3, #0]
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d12:	601a      	str	r2, [r3, #0]
 8004d14:	e1c0      	b.n	8005098 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d1a:	2b01      	cmp	r3, #1
 8004d1c:	d11e      	bne.n	8004d5c <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	681a      	ldr	r2, [r3, #0]
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d2c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004d2e:	b672      	cpsid	i
}
 8004d30:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d32:	2300      	movs	r3, #0
 8004d34:	61bb      	str	r3, [r7, #24]
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	695b      	ldr	r3, [r3, #20]
 8004d3c:	61bb      	str	r3, [r7, #24]
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	699b      	ldr	r3, [r3, #24]
 8004d44:	61bb      	str	r3, [r7, #24]
 8004d46:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	681a      	ldr	r2, [r3, #0]
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d56:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004d58:	b662      	cpsie	i
}
 8004d5a:	e035      	b.n	8004dc8 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d60:	2b02      	cmp	r3, #2
 8004d62:	d11e      	bne.n	8004da2 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	681a      	ldr	r2, [r3, #0]
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d72:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004d74:	b672      	cpsid	i
}
 8004d76:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d78:	2300      	movs	r3, #0
 8004d7a:	617b      	str	r3, [r7, #20]
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	695b      	ldr	r3, [r3, #20]
 8004d82:	617b      	str	r3, [r7, #20]
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	699b      	ldr	r3, [r3, #24]
 8004d8a:	617b      	str	r3, [r7, #20]
 8004d8c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	681a      	ldr	r2, [r3, #0]
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d9c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004d9e:	b662      	cpsie	i
}
 8004da0:	e012      	b.n	8004dc8 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	681a      	ldr	r2, [r3, #0]
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004db0:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004db2:	2300      	movs	r3, #0
 8004db4:	613b      	str	r3, [r7, #16]
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	695b      	ldr	r3, [r3, #20]
 8004dbc:	613b      	str	r3, [r7, #16]
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	699b      	ldr	r3, [r3, #24]
 8004dc4:	613b      	str	r3, [r7, #16]
 8004dc6:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8004dc8:	e166      	b.n	8005098 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dce:	2b03      	cmp	r3, #3
 8004dd0:	f200 811f 	bhi.w	8005012 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dd8:	2b01      	cmp	r3, #1
 8004dda:	d123      	bne.n	8004e24 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ddc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dde:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004de0:	68f8      	ldr	r0, [r7, #12]
 8004de2:	f000 fc9f 	bl	8005724 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004de6:	4603      	mov	r3, r0
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d001      	beq.n	8004df0 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8004dec:	2301      	movs	r3, #1
 8004dee:	e167      	b.n	80050c0 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	691a      	ldr	r2, [r3, #16]
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dfa:	b2d2      	uxtb	r2, r2
 8004dfc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e02:	1c5a      	adds	r2, r3, #1
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e0c:	3b01      	subs	r3, #1
 8004e0e:	b29a      	uxth	r2, r3
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e18:	b29b      	uxth	r3, r3
 8004e1a:	3b01      	subs	r3, #1
 8004e1c:	b29a      	uxth	r2, r3
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004e22:	e139      	b.n	8005098 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e28:	2b02      	cmp	r3, #2
 8004e2a:	d152      	bne.n	8004ed2 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e2e:	9300      	str	r3, [sp, #0]
 8004e30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e32:	2200      	movs	r2, #0
 8004e34:	4906      	ldr	r1, [pc, #24]	; (8004e50 <HAL_I2C_Mem_Read+0x24c>)
 8004e36:	68f8      	ldr	r0, [r7, #12]
 8004e38:	f000 faca 	bl	80053d0 <I2C_WaitOnFlagUntilTimeout>
 8004e3c:	4603      	mov	r3, r0
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d008      	beq.n	8004e54 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8004e42:	2301      	movs	r3, #1
 8004e44:	e13c      	b.n	80050c0 <HAL_I2C_Mem_Read+0x4bc>
 8004e46:	bf00      	nop
 8004e48:	00100002 	.word	0x00100002
 8004e4c:	ffff0000 	.word	0xffff0000
 8004e50:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8004e54:	b672      	cpsid	i
}
 8004e56:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	681a      	ldr	r2, [r3, #0]
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e66:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	691a      	ldr	r2, [r3, #16]
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e72:	b2d2      	uxtb	r2, r2
 8004e74:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e7a:	1c5a      	adds	r2, r3, #1
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e84:	3b01      	subs	r3, #1
 8004e86:	b29a      	uxth	r2, r3
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e90:	b29b      	uxth	r3, r3
 8004e92:	3b01      	subs	r3, #1
 8004e94:	b29a      	uxth	r2, r3
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004e9a:	b662      	cpsie	i
}
 8004e9c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	691a      	ldr	r2, [r3, #16]
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ea8:	b2d2      	uxtb	r2, r2
 8004eaa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb0:	1c5a      	adds	r2, r3, #1
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004eba:	3b01      	subs	r3, #1
 8004ebc:	b29a      	uxth	r2, r3
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ec6:	b29b      	uxth	r3, r3
 8004ec8:	3b01      	subs	r3, #1
 8004eca:	b29a      	uxth	r2, r3
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004ed0:	e0e2      	b.n	8005098 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed4:	9300      	str	r3, [sp, #0]
 8004ed6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ed8:	2200      	movs	r2, #0
 8004eda:	497b      	ldr	r1, [pc, #492]	; (80050c8 <HAL_I2C_Mem_Read+0x4c4>)
 8004edc:	68f8      	ldr	r0, [r7, #12]
 8004ede:	f000 fa77 	bl	80053d0 <I2C_WaitOnFlagUntilTimeout>
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d001      	beq.n	8004eec <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8004ee8:	2301      	movs	r3, #1
 8004eea:	e0e9      	b.n	80050c0 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	681a      	ldr	r2, [r3, #0]
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004efa:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004efc:	b672      	cpsid	i
}
 8004efe:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	691a      	ldr	r2, [r3, #16]
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f0a:	b2d2      	uxtb	r2, r2
 8004f0c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f12:	1c5a      	adds	r2, r3, #1
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f1c:	3b01      	subs	r3, #1
 8004f1e:	b29a      	uxth	r2, r3
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f28:	b29b      	uxth	r3, r3
 8004f2a:	3b01      	subs	r3, #1
 8004f2c:	b29a      	uxth	r2, r3
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004f32:	4b66      	ldr	r3, [pc, #408]	; (80050cc <HAL_I2C_Mem_Read+0x4c8>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	08db      	lsrs	r3, r3, #3
 8004f38:	4a65      	ldr	r2, [pc, #404]	; (80050d0 <HAL_I2C_Mem_Read+0x4cc>)
 8004f3a:	fba2 2303 	umull	r2, r3, r2, r3
 8004f3e:	0a1a      	lsrs	r2, r3, #8
 8004f40:	4613      	mov	r3, r2
 8004f42:	009b      	lsls	r3, r3, #2
 8004f44:	4413      	add	r3, r2
 8004f46:	00da      	lsls	r2, r3, #3
 8004f48:	1ad3      	subs	r3, r2, r3
 8004f4a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8004f4c:	6a3b      	ldr	r3, [r7, #32]
 8004f4e:	3b01      	subs	r3, #1
 8004f50:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8004f52:	6a3b      	ldr	r3, [r7, #32]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d118      	bne.n	8004f8a <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	2220      	movs	r2, #32
 8004f62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	2200      	movs	r2, #0
 8004f6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f72:	f043 0220 	orr.w	r2, r3, #32
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8004f7a:	b662      	cpsie	i
}
 8004f7c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	2200      	movs	r2, #0
 8004f82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8004f86:	2301      	movs	r3, #1
 8004f88:	e09a      	b.n	80050c0 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	695b      	ldr	r3, [r3, #20]
 8004f90:	f003 0304 	and.w	r3, r3, #4
 8004f94:	2b04      	cmp	r3, #4
 8004f96:	d1d9      	bne.n	8004f4c <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	681a      	ldr	r2, [r3, #0]
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fa6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	691a      	ldr	r2, [r3, #16]
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fb2:	b2d2      	uxtb	r2, r2
 8004fb4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fba:	1c5a      	adds	r2, r3, #1
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fc4:	3b01      	subs	r3, #1
 8004fc6:	b29a      	uxth	r2, r3
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fd0:	b29b      	uxth	r3, r3
 8004fd2:	3b01      	subs	r3, #1
 8004fd4:	b29a      	uxth	r2, r3
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004fda:	b662      	cpsie	i
}
 8004fdc:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	691a      	ldr	r2, [r3, #16]
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fe8:	b2d2      	uxtb	r2, r2
 8004fea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ff0:	1c5a      	adds	r2, r3, #1
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ffa:	3b01      	subs	r3, #1
 8004ffc:	b29a      	uxth	r2, r3
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005006:	b29b      	uxth	r3, r3
 8005008:	3b01      	subs	r3, #1
 800500a:	b29a      	uxth	r2, r3
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005010:	e042      	b.n	8005098 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005012:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005014:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005016:	68f8      	ldr	r0, [r7, #12]
 8005018:	f000 fb84 	bl	8005724 <I2C_WaitOnRXNEFlagUntilTimeout>
 800501c:	4603      	mov	r3, r0
 800501e:	2b00      	cmp	r3, #0
 8005020:	d001      	beq.n	8005026 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8005022:	2301      	movs	r3, #1
 8005024:	e04c      	b.n	80050c0 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	691a      	ldr	r2, [r3, #16]
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005030:	b2d2      	uxtb	r2, r2
 8005032:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005038:	1c5a      	adds	r2, r3, #1
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005042:	3b01      	subs	r3, #1
 8005044:	b29a      	uxth	r2, r3
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800504e:	b29b      	uxth	r3, r3
 8005050:	3b01      	subs	r3, #1
 8005052:	b29a      	uxth	r2, r3
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	695b      	ldr	r3, [r3, #20]
 800505e:	f003 0304 	and.w	r3, r3, #4
 8005062:	2b04      	cmp	r3, #4
 8005064:	d118      	bne.n	8005098 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	691a      	ldr	r2, [r3, #16]
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005070:	b2d2      	uxtb	r2, r2
 8005072:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005078:	1c5a      	adds	r2, r3, #1
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005082:	3b01      	subs	r3, #1
 8005084:	b29a      	uxth	r2, r3
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800508e:	b29b      	uxth	r3, r3
 8005090:	3b01      	subs	r3, #1
 8005092:	b29a      	uxth	r2, r3
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800509c:	2b00      	cmp	r3, #0
 800509e:	f47f ae94 	bne.w	8004dca <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	2220      	movs	r2, #32
 80050a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	2200      	movs	r2, #0
 80050ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	2200      	movs	r2, #0
 80050b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80050ba:	2300      	movs	r3, #0
 80050bc:	e000      	b.n	80050c0 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 80050be:	2302      	movs	r3, #2
  }
}
 80050c0:	4618      	mov	r0, r3
 80050c2:	3728      	adds	r7, #40	; 0x28
 80050c4:	46bd      	mov	sp, r7
 80050c6:	bd80      	pop	{r7, pc}
 80050c8:	00010004 	.word	0x00010004
 80050cc:	20000004 	.word	0x20000004
 80050d0:	14f8b589 	.word	0x14f8b589

080050d4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b088      	sub	sp, #32
 80050d8:	af02      	add	r7, sp, #8
 80050da:	60f8      	str	r0, [r7, #12]
 80050dc:	4608      	mov	r0, r1
 80050de:	4611      	mov	r1, r2
 80050e0:	461a      	mov	r2, r3
 80050e2:	4603      	mov	r3, r0
 80050e4:	817b      	strh	r3, [r7, #10]
 80050e6:	460b      	mov	r3, r1
 80050e8:	813b      	strh	r3, [r7, #8]
 80050ea:	4613      	mov	r3, r2
 80050ec:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	681a      	ldr	r2, [r3, #0]
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80050fc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80050fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005100:	9300      	str	r3, [sp, #0]
 8005102:	6a3b      	ldr	r3, [r7, #32]
 8005104:	2200      	movs	r2, #0
 8005106:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800510a:	68f8      	ldr	r0, [r7, #12]
 800510c:	f000 f960 	bl	80053d0 <I2C_WaitOnFlagUntilTimeout>
 8005110:	4603      	mov	r3, r0
 8005112:	2b00      	cmp	r3, #0
 8005114:	d00d      	beq.n	8005132 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005120:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005124:	d103      	bne.n	800512e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	f44f 7200 	mov.w	r2, #512	; 0x200
 800512c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800512e:	2303      	movs	r3, #3
 8005130:	e05f      	b.n	80051f2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005132:	897b      	ldrh	r3, [r7, #10]
 8005134:	b2db      	uxtb	r3, r3
 8005136:	461a      	mov	r2, r3
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005140:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005144:	6a3a      	ldr	r2, [r7, #32]
 8005146:	492d      	ldr	r1, [pc, #180]	; (80051fc <I2C_RequestMemoryWrite+0x128>)
 8005148:	68f8      	ldr	r0, [r7, #12]
 800514a:	f000 f9bb 	bl	80054c4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800514e:	4603      	mov	r3, r0
 8005150:	2b00      	cmp	r3, #0
 8005152:	d001      	beq.n	8005158 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005154:	2301      	movs	r3, #1
 8005156:	e04c      	b.n	80051f2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005158:	2300      	movs	r3, #0
 800515a:	617b      	str	r3, [r7, #20]
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	695b      	ldr	r3, [r3, #20]
 8005162:	617b      	str	r3, [r7, #20]
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	699b      	ldr	r3, [r3, #24]
 800516a:	617b      	str	r3, [r7, #20]
 800516c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800516e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005170:	6a39      	ldr	r1, [r7, #32]
 8005172:	68f8      	ldr	r0, [r7, #12]
 8005174:	f000 fa46 	bl	8005604 <I2C_WaitOnTXEFlagUntilTimeout>
 8005178:	4603      	mov	r3, r0
 800517a:	2b00      	cmp	r3, #0
 800517c:	d00d      	beq.n	800519a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005182:	2b04      	cmp	r3, #4
 8005184:	d107      	bne.n	8005196 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	681a      	ldr	r2, [r3, #0]
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005194:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005196:	2301      	movs	r3, #1
 8005198:	e02b      	b.n	80051f2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800519a:	88fb      	ldrh	r3, [r7, #6]
 800519c:	2b01      	cmp	r3, #1
 800519e:	d105      	bne.n	80051ac <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80051a0:	893b      	ldrh	r3, [r7, #8]
 80051a2:	b2da      	uxtb	r2, r3
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	611a      	str	r2, [r3, #16]
 80051aa:	e021      	b.n	80051f0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80051ac:	893b      	ldrh	r3, [r7, #8]
 80051ae:	0a1b      	lsrs	r3, r3, #8
 80051b0:	b29b      	uxth	r3, r3
 80051b2:	b2da      	uxtb	r2, r3
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80051ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051bc:	6a39      	ldr	r1, [r7, #32]
 80051be:	68f8      	ldr	r0, [r7, #12]
 80051c0:	f000 fa20 	bl	8005604 <I2C_WaitOnTXEFlagUntilTimeout>
 80051c4:	4603      	mov	r3, r0
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d00d      	beq.n	80051e6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ce:	2b04      	cmp	r3, #4
 80051d0:	d107      	bne.n	80051e2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	681a      	ldr	r2, [r3, #0]
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051e0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80051e2:	2301      	movs	r3, #1
 80051e4:	e005      	b.n	80051f2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80051e6:	893b      	ldrh	r3, [r7, #8]
 80051e8:	b2da      	uxtb	r2, r3
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80051f0:	2300      	movs	r3, #0
}
 80051f2:	4618      	mov	r0, r3
 80051f4:	3718      	adds	r7, #24
 80051f6:	46bd      	mov	sp, r7
 80051f8:	bd80      	pop	{r7, pc}
 80051fa:	bf00      	nop
 80051fc:	00010002 	.word	0x00010002

08005200 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b088      	sub	sp, #32
 8005204:	af02      	add	r7, sp, #8
 8005206:	60f8      	str	r0, [r7, #12]
 8005208:	4608      	mov	r0, r1
 800520a:	4611      	mov	r1, r2
 800520c:	461a      	mov	r2, r3
 800520e:	4603      	mov	r3, r0
 8005210:	817b      	strh	r3, [r7, #10]
 8005212:	460b      	mov	r3, r1
 8005214:	813b      	strh	r3, [r7, #8]
 8005216:	4613      	mov	r3, r2
 8005218:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	681a      	ldr	r2, [r3, #0]
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005228:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	681a      	ldr	r2, [r3, #0]
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005238:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800523a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800523c:	9300      	str	r3, [sp, #0]
 800523e:	6a3b      	ldr	r3, [r7, #32]
 8005240:	2200      	movs	r2, #0
 8005242:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005246:	68f8      	ldr	r0, [r7, #12]
 8005248:	f000 f8c2 	bl	80053d0 <I2C_WaitOnFlagUntilTimeout>
 800524c:	4603      	mov	r3, r0
 800524e:	2b00      	cmp	r3, #0
 8005250:	d00d      	beq.n	800526e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800525c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005260:	d103      	bne.n	800526a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005268:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800526a:	2303      	movs	r3, #3
 800526c:	e0aa      	b.n	80053c4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800526e:	897b      	ldrh	r3, [r7, #10]
 8005270:	b2db      	uxtb	r3, r3
 8005272:	461a      	mov	r2, r3
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800527c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800527e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005280:	6a3a      	ldr	r2, [r7, #32]
 8005282:	4952      	ldr	r1, [pc, #328]	; (80053cc <I2C_RequestMemoryRead+0x1cc>)
 8005284:	68f8      	ldr	r0, [r7, #12]
 8005286:	f000 f91d 	bl	80054c4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800528a:	4603      	mov	r3, r0
 800528c:	2b00      	cmp	r3, #0
 800528e:	d001      	beq.n	8005294 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005290:	2301      	movs	r3, #1
 8005292:	e097      	b.n	80053c4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005294:	2300      	movs	r3, #0
 8005296:	617b      	str	r3, [r7, #20]
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	695b      	ldr	r3, [r3, #20]
 800529e:	617b      	str	r3, [r7, #20]
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	699b      	ldr	r3, [r3, #24]
 80052a6:	617b      	str	r3, [r7, #20]
 80052a8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80052aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052ac:	6a39      	ldr	r1, [r7, #32]
 80052ae:	68f8      	ldr	r0, [r7, #12]
 80052b0:	f000 f9a8 	bl	8005604 <I2C_WaitOnTXEFlagUntilTimeout>
 80052b4:	4603      	mov	r3, r0
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d00d      	beq.n	80052d6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052be:	2b04      	cmp	r3, #4
 80052c0:	d107      	bne.n	80052d2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	681a      	ldr	r2, [r3, #0]
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052d0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80052d2:	2301      	movs	r3, #1
 80052d4:	e076      	b.n	80053c4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80052d6:	88fb      	ldrh	r3, [r7, #6]
 80052d8:	2b01      	cmp	r3, #1
 80052da:	d105      	bne.n	80052e8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80052dc:	893b      	ldrh	r3, [r7, #8]
 80052de:	b2da      	uxtb	r2, r3
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	611a      	str	r2, [r3, #16]
 80052e6:	e021      	b.n	800532c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80052e8:	893b      	ldrh	r3, [r7, #8]
 80052ea:	0a1b      	lsrs	r3, r3, #8
 80052ec:	b29b      	uxth	r3, r3
 80052ee:	b2da      	uxtb	r2, r3
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80052f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052f8:	6a39      	ldr	r1, [r7, #32]
 80052fa:	68f8      	ldr	r0, [r7, #12]
 80052fc:	f000 f982 	bl	8005604 <I2C_WaitOnTXEFlagUntilTimeout>
 8005300:	4603      	mov	r3, r0
 8005302:	2b00      	cmp	r3, #0
 8005304:	d00d      	beq.n	8005322 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800530a:	2b04      	cmp	r3, #4
 800530c:	d107      	bne.n	800531e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	681a      	ldr	r2, [r3, #0]
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800531c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800531e:	2301      	movs	r3, #1
 8005320:	e050      	b.n	80053c4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005322:	893b      	ldrh	r3, [r7, #8]
 8005324:	b2da      	uxtb	r2, r3
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800532c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800532e:	6a39      	ldr	r1, [r7, #32]
 8005330:	68f8      	ldr	r0, [r7, #12]
 8005332:	f000 f967 	bl	8005604 <I2C_WaitOnTXEFlagUntilTimeout>
 8005336:	4603      	mov	r3, r0
 8005338:	2b00      	cmp	r3, #0
 800533a:	d00d      	beq.n	8005358 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005340:	2b04      	cmp	r3, #4
 8005342:	d107      	bne.n	8005354 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	681a      	ldr	r2, [r3, #0]
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005352:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005354:	2301      	movs	r3, #1
 8005356:	e035      	b.n	80053c4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	681a      	ldr	r2, [r3, #0]
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005366:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800536a:	9300      	str	r3, [sp, #0]
 800536c:	6a3b      	ldr	r3, [r7, #32]
 800536e:	2200      	movs	r2, #0
 8005370:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005374:	68f8      	ldr	r0, [r7, #12]
 8005376:	f000 f82b 	bl	80053d0 <I2C_WaitOnFlagUntilTimeout>
 800537a:	4603      	mov	r3, r0
 800537c:	2b00      	cmp	r3, #0
 800537e:	d00d      	beq.n	800539c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800538a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800538e:	d103      	bne.n	8005398 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005396:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005398:	2303      	movs	r3, #3
 800539a:	e013      	b.n	80053c4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800539c:	897b      	ldrh	r3, [r7, #10]
 800539e:	b2db      	uxtb	r3, r3
 80053a0:	f043 0301 	orr.w	r3, r3, #1
 80053a4:	b2da      	uxtb	r2, r3
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80053ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ae:	6a3a      	ldr	r2, [r7, #32]
 80053b0:	4906      	ldr	r1, [pc, #24]	; (80053cc <I2C_RequestMemoryRead+0x1cc>)
 80053b2:	68f8      	ldr	r0, [r7, #12]
 80053b4:	f000 f886 	bl	80054c4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80053b8:	4603      	mov	r3, r0
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d001      	beq.n	80053c2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80053be:	2301      	movs	r3, #1
 80053c0:	e000      	b.n	80053c4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80053c2:	2300      	movs	r3, #0
}
 80053c4:	4618      	mov	r0, r3
 80053c6:	3718      	adds	r7, #24
 80053c8:	46bd      	mov	sp, r7
 80053ca:	bd80      	pop	{r7, pc}
 80053cc:	00010002 	.word	0x00010002

080053d0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b084      	sub	sp, #16
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	60f8      	str	r0, [r7, #12]
 80053d8:	60b9      	str	r1, [r7, #8]
 80053da:	603b      	str	r3, [r7, #0]
 80053dc:	4613      	mov	r3, r2
 80053de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80053e0:	e048      	b.n	8005474 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053e8:	d044      	beq.n	8005474 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053ea:	f7fd fe89 	bl	8003100 <HAL_GetTick>
 80053ee:	4602      	mov	r2, r0
 80053f0:	69bb      	ldr	r3, [r7, #24]
 80053f2:	1ad3      	subs	r3, r2, r3
 80053f4:	683a      	ldr	r2, [r7, #0]
 80053f6:	429a      	cmp	r2, r3
 80053f8:	d302      	bcc.n	8005400 <I2C_WaitOnFlagUntilTimeout+0x30>
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d139      	bne.n	8005474 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005400:	68bb      	ldr	r3, [r7, #8]
 8005402:	0c1b      	lsrs	r3, r3, #16
 8005404:	b2db      	uxtb	r3, r3
 8005406:	2b01      	cmp	r3, #1
 8005408:	d10d      	bne.n	8005426 <I2C_WaitOnFlagUntilTimeout+0x56>
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	695b      	ldr	r3, [r3, #20]
 8005410:	43da      	mvns	r2, r3
 8005412:	68bb      	ldr	r3, [r7, #8]
 8005414:	4013      	ands	r3, r2
 8005416:	b29b      	uxth	r3, r3
 8005418:	2b00      	cmp	r3, #0
 800541a:	bf0c      	ite	eq
 800541c:	2301      	moveq	r3, #1
 800541e:	2300      	movne	r3, #0
 8005420:	b2db      	uxtb	r3, r3
 8005422:	461a      	mov	r2, r3
 8005424:	e00c      	b.n	8005440 <I2C_WaitOnFlagUntilTimeout+0x70>
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	699b      	ldr	r3, [r3, #24]
 800542c:	43da      	mvns	r2, r3
 800542e:	68bb      	ldr	r3, [r7, #8]
 8005430:	4013      	ands	r3, r2
 8005432:	b29b      	uxth	r3, r3
 8005434:	2b00      	cmp	r3, #0
 8005436:	bf0c      	ite	eq
 8005438:	2301      	moveq	r3, #1
 800543a:	2300      	movne	r3, #0
 800543c:	b2db      	uxtb	r3, r3
 800543e:	461a      	mov	r2, r3
 8005440:	79fb      	ldrb	r3, [r7, #7]
 8005442:	429a      	cmp	r2, r3
 8005444:	d116      	bne.n	8005474 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	2200      	movs	r2, #0
 800544a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	2220      	movs	r2, #32
 8005450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	2200      	movs	r2, #0
 8005458:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005460:	f043 0220 	orr.w	r2, r3, #32
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	2200      	movs	r2, #0
 800546c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005470:	2301      	movs	r3, #1
 8005472:	e023      	b.n	80054bc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	0c1b      	lsrs	r3, r3, #16
 8005478:	b2db      	uxtb	r3, r3
 800547a:	2b01      	cmp	r3, #1
 800547c:	d10d      	bne.n	800549a <I2C_WaitOnFlagUntilTimeout+0xca>
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	695b      	ldr	r3, [r3, #20]
 8005484:	43da      	mvns	r2, r3
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	4013      	ands	r3, r2
 800548a:	b29b      	uxth	r3, r3
 800548c:	2b00      	cmp	r3, #0
 800548e:	bf0c      	ite	eq
 8005490:	2301      	moveq	r3, #1
 8005492:	2300      	movne	r3, #0
 8005494:	b2db      	uxtb	r3, r3
 8005496:	461a      	mov	r2, r3
 8005498:	e00c      	b.n	80054b4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	699b      	ldr	r3, [r3, #24]
 80054a0:	43da      	mvns	r2, r3
 80054a2:	68bb      	ldr	r3, [r7, #8]
 80054a4:	4013      	ands	r3, r2
 80054a6:	b29b      	uxth	r3, r3
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	bf0c      	ite	eq
 80054ac:	2301      	moveq	r3, #1
 80054ae:	2300      	movne	r3, #0
 80054b0:	b2db      	uxtb	r3, r3
 80054b2:	461a      	mov	r2, r3
 80054b4:	79fb      	ldrb	r3, [r7, #7]
 80054b6:	429a      	cmp	r2, r3
 80054b8:	d093      	beq.n	80053e2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80054ba:	2300      	movs	r3, #0
}
 80054bc:	4618      	mov	r0, r3
 80054be:	3710      	adds	r7, #16
 80054c0:	46bd      	mov	sp, r7
 80054c2:	bd80      	pop	{r7, pc}

080054c4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b084      	sub	sp, #16
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	60f8      	str	r0, [r7, #12]
 80054cc:	60b9      	str	r1, [r7, #8]
 80054ce:	607a      	str	r2, [r7, #4]
 80054d0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80054d2:	e071      	b.n	80055b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	695b      	ldr	r3, [r3, #20]
 80054da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054e2:	d123      	bne.n	800552c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	681a      	ldr	r2, [r3, #0]
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054f2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80054fc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	2200      	movs	r2, #0
 8005502:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	2220      	movs	r2, #32
 8005508:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	2200      	movs	r2, #0
 8005510:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005518:	f043 0204 	orr.w	r2, r3, #4
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	2200      	movs	r2, #0
 8005524:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005528:	2301      	movs	r3, #1
 800552a:	e067      	b.n	80055fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005532:	d041      	beq.n	80055b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005534:	f7fd fde4 	bl	8003100 <HAL_GetTick>
 8005538:	4602      	mov	r2, r0
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	1ad3      	subs	r3, r2, r3
 800553e:	687a      	ldr	r2, [r7, #4]
 8005540:	429a      	cmp	r2, r3
 8005542:	d302      	bcc.n	800554a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d136      	bne.n	80055b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800554a:	68bb      	ldr	r3, [r7, #8]
 800554c:	0c1b      	lsrs	r3, r3, #16
 800554e:	b2db      	uxtb	r3, r3
 8005550:	2b01      	cmp	r3, #1
 8005552:	d10c      	bne.n	800556e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	695b      	ldr	r3, [r3, #20]
 800555a:	43da      	mvns	r2, r3
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	4013      	ands	r3, r2
 8005560:	b29b      	uxth	r3, r3
 8005562:	2b00      	cmp	r3, #0
 8005564:	bf14      	ite	ne
 8005566:	2301      	movne	r3, #1
 8005568:	2300      	moveq	r3, #0
 800556a:	b2db      	uxtb	r3, r3
 800556c:	e00b      	b.n	8005586 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	699b      	ldr	r3, [r3, #24]
 8005574:	43da      	mvns	r2, r3
 8005576:	68bb      	ldr	r3, [r7, #8]
 8005578:	4013      	ands	r3, r2
 800557a:	b29b      	uxth	r3, r3
 800557c:	2b00      	cmp	r3, #0
 800557e:	bf14      	ite	ne
 8005580:	2301      	movne	r3, #1
 8005582:	2300      	moveq	r3, #0
 8005584:	b2db      	uxtb	r3, r3
 8005586:	2b00      	cmp	r3, #0
 8005588:	d016      	beq.n	80055b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	2200      	movs	r2, #0
 800558e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	2220      	movs	r2, #32
 8005594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	2200      	movs	r2, #0
 800559c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055a4:	f043 0220 	orr.w	r2, r3, #32
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	2200      	movs	r2, #0
 80055b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80055b4:	2301      	movs	r3, #1
 80055b6:	e021      	b.n	80055fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	0c1b      	lsrs	r3, r3, #16
 80055bc:	b2db      	uxtb	r3, r3
 80055be:	2b01      	cmp	r3, #1
 80055c0:	d10c      	bne.n	80055dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	695b      	ldr	r3, [r3, #20]
 80055c8:	43da      	mvns	r2, r3
 80055ca:	68bb      	ldr	r3, [r7, #8]
 80055cc:	4013      	ands	r3, r2
 80055ce:	b29b      	uxth	r3, r3
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	bf14      	ite	ne
 80055d4:	2301      	movne	r3, #1
 80055d6:	2300      	moveq	r3, #0
 80055d8:	b2db      	uxtb	r3, r3
 80055da:	e00b      	b.n	80055f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	699b      	ldr	r3, [r3, #24]
 80055e2:	43da      	mvns	r2, r3
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	4013      	ands	r3, r2
 80055e8:	b29b      	uxth	r3, r3
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	bf14      	ite	ne
 80055ee:	2301      	movne	r3, #1
 80055f0:	2300      	moveq	r3, #0
 80055f2:	b2db      	uxtb	r3, r3
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	f47f af6d 	bne.w	80054d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80055fa:	2300      	movs	r3, #0
}
 80055fc:	4618      	mov	r0, r3
 80055fe:	3710      	adds	r7, #16
 8005600:	46bd      	mov	sp, r7
 8005602:	bd80      	pop	{r7, pc}

08005604 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005604:	b580      	push	{r7, lr}
 8005606:	b084      	sub	sp, #16
 8005608:	af00      	add	r7, sp, #0
 800560a:	60f8      	str	r0, [r7, #12]
 800560c:	60b9      	str	r1, [r7, #8]
 800560e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005610:	e034      	b.n	800567c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005612:	68f8      	ldr	r0, [r7, #12]
 8005614:	f000 f8e3 	bl	80057de <I2C_IsAcknowledgeFailed>
 8005618:	4603      	mov	r3, r0
 800561a:	2b00      	cmp	r3, #0
 800561c:	d001      	beq.n	8005622 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800561e:	2301      	movs	r3, #1
 8005620:	e034      	b.n	800568c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005628:	d028      	beq.n	800567c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800562a:	f7fd fd69 	bl	8003100 <HAL_GetTick>
 800562e:	4602      	mov	r2, r0
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	1ad3      	subs	r3, r2, r3
 8005634:	68ba      	ldr	r2, [r7, #8]
 8005636:	429a      	cmp	r2, r3
 8005638:	d302      	bcc.n	8005640 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800563a:	68bb      	ldr	r3, [r7, #8]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d11d      	bne.n	800567c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	695b      	ldr	r3, [r3, #20]
 8005646:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800564a:	2b80      	cmp	r3, #128	; 0x80
 800564c:	d016      	beq.n	800567c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	2200      	movs	r2, #0
 8005652:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	2220      	movs	r2, #32
 8005658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	2200      	movs	r2, #0
 8005660:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005668:	f043 0220 	orr.w	r2, r3, #32
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	2200      	movs	r2, #0
 8005674:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005678:	2301      	movs	r3, #1
 800567a:	e007      	b.n	800568c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	695b      	ldr	r3, [r3, #20]
 8005682:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005686:	2b80      	cmp	r3, #128	; 0x80
 8005688:	d1c3      	bne.n	8005612 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800568a:	2300      	movs	r3, #0
}
 800568c:	4618      	mov	r0, r3
 800568e:	3710      	adds	r7, #16
 8005690:	46bd      	mov	sp, r7
 8005692:	bd80      	pop	{r7, pc}

08005694 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b084      	sub	sp, #16
 8005698:	af00      	add	r7, sp, #0
 800569a:	60f8      	str	r0, [r7, #12]
 800569c:	60b9      	str	r1, [r7, #8]
 800569e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80056a0:	e034      	b.n	800570c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80056a2:	68f8      	ldr	r0, [r7, #12]
 80056a4:	f000 f89b 	bl	80057de <I2C_IsAcknowledgeFailed>
 80056a8:	4603      	mov	r3, r0
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d001      	beq.n	80056b2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80056ae:	2301      	movs	r3, #1
 80056b0:	e034      	b.n	800571c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056b2:	68bb      	ldr	r3, [r7, #8]
 80056b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056b8:	d028      	beq.n	800570c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056ba:	f7fd fd21 	bl	8003100 <HAL_GetTick>
 80056be:	4602      	mov	r2, r0
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	1ad3      	subs	r3, r2, r3
 80056c4:	68ba      	ldr	r2, [r7, #8]
 80056c6:	429a      	cmp	r2, r3
 80056c8:	d302      	bcc.n	80056d0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80056ca:	68bb      	ldr	r3, [r7, #8]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d11d      	bne.n	800570c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	695b      	ldr	r3, [r3, #20]
 80056d6:	f003 0304 	and.w	r3, r3, #4
 80056da:	2b04      	cmp	r3, #4
 80056dc:	d016      	beq.n	800570c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	2200      	movs	r2, #0
 80056e2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	2220      	movs	r2, #32
 80056e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	2200      	movs	r2, #0
 80056f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056f8:	f043 0220 	orr.w	r2, r3, #32
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	2200      	movs	r2, #0
 8005704:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005708:	2301      	movs	r3, #1
 800570a:	e007      	b.n	800571c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	695b      	ldr	r3, [r3, #20]
 8005712:	f003 0304 	and.w	r3, r3, #4
 8005716:	2b04      	cmp	r3, #4
 8005718:	d1c3      	bne.n	80056a2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800571a:	2300      	movs	r3, #0
}
 800571c:	4618      	mov	r0, r3
 800571e:	3710      	adds	r7, #16
 8005720:	46bd      	mov	sp, r7
 8005722:	bd80      	pop	{r7, pc}

08005724 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005724:	b580      	push	{r7, lr}
 8005726:	b084      	sub	sp, #16
 8005728:	af00      	add	r7, sp, #0
 800572a:	60f8      	str	r0, [r7, #12]
 800572c:	60b9      	str	r1, [r7, #8]
 800572e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005730:	e049      	b.n	80057c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	695b      	ldr	r3, [r3, #20]
 8005738:	f003 0310 	and.w	r3, r3, #16
 800573c:	2b10      	cmp	r3, #16
 800573e:	d119      	bne.n	8005774 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f06f 0210 	mvn.w	r2, #16
 8005748:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	2200      	movs	r2, #0
 800574e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	2220      	movs	r2, #32
 8005754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	2200      	movs	r2, #0
 800575c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	2200      	movs	r2, #0
 800576c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005770:	2301      	movs	r3, #1
 8005772:	e030      	b.n	80057d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005774:	f7fd fcc4 	bl	8003100 <HAL_GetTick>
 8005778:	4602      	mov	r2, r0
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	1ad3      	subs	r3, r2, r3
 800577e:	68ba      	ldr	r2, [r7, #8]
 8005780:	429a      	cmp	r2, r3
 8005782:	d302      	bcc.n	800578a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d11d      	bne.n	80057c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	695b      	ldr	r3, [r3, #20]
 8005790:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005794:	2b40      	cmp	r3, #64	; 0x40
 8005796:	d016      	beq.n	80057c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	2200      	movs	r2, #0
 800579c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	2220      	movs	r2, #32
 80057a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	2200      	movs	r2, #0
 80057aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057b2:	f043 0220 	orr.w	r2, r3, #32
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	2200      	movs	r2, #0
 80057be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80057c2:	2301      	movs	r3, #1
 80057c4:	e007      	b.n	80057d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	695b      	ldr	r3, [r3, #20]
 80057cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057d0:	2b40      	cmp	r3, #64	; 0x40
 80057d2:	d1ae      	bne.n	8005732 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80057d4:	2300      	movs	r3, #0
}
 80057d6:	4618      	mov	r0, r3
 80057d8:	3710      	adds	r7, #16
 80057da:	46bd      	mov	sp, r7
 80057dc:	bd80      	pop	{r7, pc}

080057de <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80057de:	b480      	push	{r7}
 80057e0:	b083      	sub	sp, #12
 80057e2:	af00      	add	r7, sp, #0
 80057e4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	695b      	ldr	r3, [r3, #20]
 80057ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057f4:	d11b      	bne.n	800582e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80057fe:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2200      	movs	r2, #0
 8005804:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2220      	movs	r2, #32
 800580a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2200      	movs	r2, #0
 8005812:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800581a:	f043 0204 	orr.w	r2, r3, #4
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2200      	movs	r2, #0
 8005826:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800582a:	2301      	movs	r3, #1
 800582c:	e000      	b.n	8005830 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800582e:	2300      	movs	r3, #0
}
 8005830:	4618      	mov	r0, r3
 8005832:	370c      	adds	r7, #12
 8005834:	46bd      	mov	sp, r7
 8005836:	bc80      	pop	{r7}
 8005838:	4770      	bx	lr
	...

0800583c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800583c:	b580      	push	{r7, lr}
 800583e:	b086      	sub	sp, #24
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d101      	bne.n	800584e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800584a:	2301      	movs	r3, #1
 800584c:	e272      	b.n	8005d34 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f003 0301 	and.w	r3, r3, #1
 8005856:	2b00      	cmp	r3, #0
 8005858:	f000 8087 	beq.w	800596a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800585c:	4b92      	ldr	r3, [pc, #584]	; (8005aa8 <HAL_RCC_OscConfig+0x26c>)
 800585e:	685b      	ldr	r3, [r3, #4]
 8005860:	f003 030c 	and.w	r3, r3, #12
 8005864:	2b04      	cmp	r3, #4
 8005866:	d00c      	beq.n	8005882 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005868:	4b8f      	ldr	r3, [pc, #572]	; (8005aa8 <HAL_RCC_OscConfig+0x26c>)
 800586a:	685b      	ldr	r3, [r3, #4]
 800586c:	f003 030c 	and.w	r3, r3, #12
 8005870:	2b08      	cmp	r3, #8
 8005872:	d112      	bne.n	800589a <HAL_RCC_OscConfig+0x5e>
 8005874:	4b8c      	ldr	r3, [pc, #560]	; (8005aa8 <HAL_RCC_OscConfig+0x26c>)
 8005876:	685b      	ldr	r3, [r3, #4]
 8005878:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800587c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005880:	d10b      	bne.n	800589a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005882:	4b89      	ldr	r3, [pc, #548]	; (8005aa8 <HAL_RCC_OscConfig+0x26c>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800588a:	2b00      	cmp	r3, #0
 800588c:	d06c      	beq.n	8005968 <HAL_RCC_OscConfig+0x12c>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	685b      	ldr	r3, [r3, #4]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d168      	bne.n	8005968 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005896:	2301      	movs	r3, #1
 8005898:	e24c      	b.n	8005d34 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	685b      	ldr	r3, [r3, #4]
 800589e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058a2:	d106      	bne.n	80058b2 <HAL_RCC_OscConfig+0x76>
 80058a4:	4b80      	ldr	r3, [pc, #512]	; (8005aa8 <HAL_RCC_OscConfig+0x26c>)
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	4a7f      	ldr	r2, [pc, #508]	; (8005aa8 <HAL_RCC_OscConfig+0x26c>)
 80058aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80058ae:	6013      	str	r3, [r2, #0]
 80058b0:	e02e      	b.n	8005910 <HAL_RCC_OscConfig+0xd4>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	685b      	ldr	r3, [r3, #4]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d10c      	bne.n	80058d4 <HAL_RCC_OscConfig+0x98>
 80058ba:	4b7b      	ldr	r3, [pc, #492]	; (8005aa8 <HAL_RCC_OscConfig+0x26c>)
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	4a7a      	ldr	r2, [pc, #488]	; (8005aa8 <HAL_RCC_OscConfig+0x26c>)
 80058c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80058c4:	6013      	str	r3, [r2, #0]
 80058c6:	4b78      	ldr	r3, [pc, #480]	; (8005aa8 <HAL_RCC_OscConfig+0x26c>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4a77      	ldr	r2, [pc, #476]	; (8005aa8 <HAL_RCC_OscConfig+0x26c>)
 80058cc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80058d0:	6013      	str	r3, [r2, #0]
 80058d2:	e01d      	b.n	8005910 <HAL_RCC_OscConfig+0xd4>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	685b      	ldr	r3, [r3, #4]
 80058d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80058dc:	d10c      	bne.n	80058f8 <HAL_RCC_OscConfig+0xbc>
 80058de:	4b72      	ldr	r3, [pc, #456]	; (8005aa8 <HAL_RCC_OscConfig+0x26c>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	4a71      	ldr	r2, [pc, #452]	; (8005aa8 <HAL_RCC_OscConfig+0x26c>)
 80058e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80058e8:	6013      	str	r3, [r2, #0]
 80058ea:	4b6f      	ldr	r3, [pc, #444]	; (8005aa8 <HAL_RCC_OscConfig+0x26c>)
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	4a6e      	ldr	r2, [pc, #440]	; (8005aa8 <HAL_RCC_OscConfig+0x26c>)
 80058f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80058f4:	6013      	str	r3, [r2, #0]
 80058f6:	e00b      	b.n	8005910 <HAL_RCC_OscConfig+0xd4>
 80058f8:	4b6b      	ldr	r3, [pc, #428]	; (8005aa8 <HAL_RCC_OscConfig+0x26c>)
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	4a6a      	ldr	r2, [pc, #424]	; (8005aa8 <HAL_RCC_OscConfig+0x26c>)
 80058fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005902:	6013      	str	r3, [r2, #0]
 8005904:	4b68      	ldr	r3, [pc, #416]	; (8005aa8 <HAL_RCC_OscConfig+0x26c>)
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	4a67      	ldr	r2, [pc, #412]	; (8005aa8 <HAL_RCC_OscConfig+0x26c>)
 800590a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800590e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	685b      	ldr	r3, [r3, #4]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d013      	beq.n	8005940 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005918:	f7fd fbf2 	bl	8003100 <HAL_GetTick>
 800591c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800591e:	e008      	b.n	8005932 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005920:	f7fd fbee 	bl	8003100 <HAL_GetTick>
 8005924:	4602      	mov	r2, r0
 8005926:	693b      	ldr	r3, [r7, #16]
 8005928:	1ad3      	subs	r3, r2, r3
 800592a:	2b64      	cmp	r3, #100	; 0x64
 800592c:	d901      	bls.n	8005932 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800592e:	2303      	movs	r3, #3
 8005930:	e200      	b.n	8005d34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005932:	4b5d      	ldr	r3, [pc, #372]	; (8005aa8 <HAL_RCC_OscConfig+0x26c>)
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800593a:	2b00      	cmp	r3, #0
 800593c:	d0f0      	beq.n	8005920 <HAL_RCC_OscConfig+0xe4>
 800593e:	e014      	b.n	800596a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005940:	f7fd fbde 	bl	8003100 <HAL_GetTick>
 8005944:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005946:	e008      	b.n	800595a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005948:	f7fd fbda 	bl	8003100 <HAL_GetTick>
 800594c:	4602      	mov	r2, r0
 800594e:	693b      	ldr	r3, [r7, #16]
 8005950:	1ad3      	subs	r3, r2, r3
 8005952:	2b64      	cmp	r3, #100	; 0x64
 8005954:	d901      	bls.n	800595a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005956:	2303      	movs	r3, #3
 8005958:	e1ec      	b.n	8005d34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800595a:	4b53      	ldr	r3, [pc, #332]	; (8005aa8 <HAL_RCC_OscConfig+0x26c>)
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005962:	2b00      	cmp	r3, #0
 8005964:	d1f0      	bne.n	8005948 <HAL_RCC_OscConfig+0x10c>
 8005966:	e000      	b.n	800596a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005968:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f003 0302 	and.w	r3, r3, #2
 8005972:	2b00      	cmp	r3, #0
 8005974:	d063      	beq.n	8005a3e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005976:	4b4c      	ldr	r3, [pc, #304]	; (8005aa8 <HAL_RCC_OscConfig+0x26c>)
 8005978:	685b      	ldr	r3, [r3, #4]
 800597a:	f003 030c 	and.w	r3, r3, #12
 800597e:	2b00      	cmp	r3, #0
 8005980:	d00b      	beq.n	800599a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005982:	4b49      	ldr	r3, [pc, #292]	; (8005aa8 <HAL_RCC_OscConfig+0x26c>)
 8005984:	685b      	ldr	r3, [r3, #4]
 8005986:	f003 030c 	and.w	r3, r3, #12
 800598a:	2b08      	cmp	r3, #8
 800598c:	d11c      	bne.n	80059c8 <HAL_RCC_OscConfig+0x18c>
 800598e:	4b46      	ldr	r3, [pc, #280]	; (8005aa8 <HAL_RCC_OscConfig+0x26c>)
 8005990:	685b      	ldr	r3, [r3, #4]
 8005992:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005996:	2b00      	cmp	r3, #0
 8005998:	d116      	bne.n	80059c8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800599a:	4b43      	ldr	r3, [pc, #268]	; (8005aa8 <HAL_RCC_OscConfig+0x26c>)
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f003 0302 	and.w	r3, r3, #2
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d005      	beq.n	80059b2 <HAL_RCC_OscConfig+0x176>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	691b      	ldr	r3, [r3, #16]
 80059aa:	2b01      	cmp	r3, #1
 80059ac:	d001      	beq.n	80059b2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80059ae:	2301      	movs	r3, #1
 80059b0:	e1c0      	b.n	8005d34 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80059b2:	4b3d      	ldr	r3, [pc, #244]	; (8005aa8 <HAL_RCC_OscConfig+0x26c>)
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	695b      	ldr	r3, [r3, #20]
 80059be:	00db      	lsls	r3, r3, #3
 80059c0:	4939      	ldr	r1, [pc, #228]	; (8005aa8 <HAL_RCC_OscConfig+0x26c>)
 80059c2:	4313      	orrs	r3, r2
 80059c4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80059c6:	e03a      	b.n	8005a3e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	691b      	ldr	r3, [r3, #16]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d020      	beq.n	8005a12 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80059d0:	4b36      	ldr	r3, [pc, #216]	; (8005aac <HAL_RCC_OscConfig+0x270>)
 80059d2:	2201      	movs	r2, #1
 80059d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059d6:	f7fd fb93 	bl	8003100 <HAL_GetTick>
 80059da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80059dc:	e008      	b.n	80059f0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80059de:	f7fd fb8f 	bl	8003100 <HAL_GetTick>
 80059e2:	4602      	mov	r2, r0
 80059e4:	693b      	ldr	r3, [r7, #16]
 80059e6:	1ad3      	subs	r3, r2, r3
 80059e8:	2b02      	cmp	r3, #2
 80059ea:	d901      	bls.n	80059f0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80059ec:	2303      	movs	r3, #3
 80059ee:	e1a1      	b.n	8005d34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80059f0:	4b2d      	ldr	r3, [pc, #180]	; (8005aa8 <HAL_RCC_OscConfig+0x26c>)
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f003 0302 	and.w	r3, r3, #2
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d0f0      	beq.n	80059de <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80059fc:	4b2a      	ldr	r3, [pc, #168]	; (8005aa8 <HAL_RCC_OscConfig+0x26c>)
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	695b      	ldr	r3, [r3, #20]
 8005a08:	00db      	lsls	r3, r3, #3
 8005a0a:	4927      	ldr	r1, [pc, #156]	; (8005aa8 <HAL_RCC_OscConfig+0x26c>)
 8005a0c:	4313      	orrs	r3, r2
 8005a0e:	600b      	str	r3, [r1, #0]
 8005a10:	e015      	b.n	8005a3e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005a12:	4b26      	ldr	r3, [pc, #152]	; (8005aac <HAL_RCC_OscConfig+0x270>)
 8005a14:	2200      	movs	r2, #0
 8005a16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a18:	f7fd fb72 	bl	8003100 <HAL_GetTick>
 8005a1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005a1e:	e008      	b.n	8005a32 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005a20:	f7fd fb6e 	bl	8003100 <HAL_GetTick>
 8005a24:	4602      	mov	r2, r0
 8005a26:	693b      	ldr	r3, [r7, #16]
 8005a28:	1ad3      	subs	r3, r2, r3
 8005a2a:	2b02      	cmp	r3, #2
 8005a2c:	d901      	bls.n	8005a32 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005a2e:	2303      	movs	r3, #3
 8005a30:	e180      	b.n	8005d34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005a32:	4b1d      	ldr	r3, [pc, #116]	; (8005aa8 <HAL_RCC_OscConfig+0x26c>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f003 0302 	and.w	r3, r3, #2
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d1f0      	bne.n	8005a20 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f003 0308 	and.w	r3, r3, #8
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d03a      	beq.n	8005ac0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	699b      	ldr	r3, [r3, #24]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d019      	beq.n	8005a86 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005a52:	4b17      	ldr	r3, [pc, #92]	; (8005ab0 <HAL_RCC_OscConfig+0x274>)
 8005a54:	2201      	movs	r2, #1
 8005a56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a58:	f7fd fb52 	bl	8003100 <HAL_GetTick>
 8005a5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005a5e:	e008      	b.n	8005a72 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005a60:	f7fd fb4e 	bl	8003100 <HAL_GetTick>
 8005a64:	4602      	mov	r2, r0
 8005a66:	693b      	ldr	r3, [r7, #16]
 8005a68:	1ad3      	subs	r3, r2, r3
 8005a6a:	2b02      	cmp	r3, #2
 8005a6c:	d901      	bls.n	8005a72 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005a6e:	2303      	movs	r3, #3
 8005a70:	e160      	b.n	8005d34 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005a72:	4b0d      	ldr	r3, [pc, #52]	; (8005aa8 <HAL_RCC_OscConfig+0x26c>)
 8005a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a76:	f003 0302 	and.w	r3, r3, #2
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d0f0      	beq.n	8005a60 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005a7e:	2001      	movs	r0, #1
 8005a80:	f000 face 	bl	8006020 <RCC_Delay>
 8005a84:	e01c      	b.n	8005ac0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005a86:	4b0a      	ldr	r3, [pc, #40]	; (8005ab0 <HAL_RCC_OscConfig+0x274>)
 8005a88:	2200      	movs	r2, #0
 8005a8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a8c:	f7fd fb38 	bl	8003100 <HAL_GetTick>
 8005a90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005a92:	e00f      	b.n	8005ab4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005a94:	f7fd fb34 	bl	8003100 <HAL_GetTick>
 8005a98:	4602      	mov	r2, r0
 8005a9a:	693b      	ldr	r3, [r7, #16]
 8005a9c:	1ad3      	subs	r3, r2, r3
 8005a9e:	2b02      	cmp	r3, #2
 8005aa0:	d908      	bls.n	8005ab4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005aa2:	2303      	movs	r3, #3
 8005aa4:	e146      	b.n	8005d34 <HAL_RCC_OscConfig+0x4f8>
 8005aa6:	bf00      	nop
 8005aa8:	40021000 	.word	0x40021000
 8005aac:	42420000 	.word	0x42420000
 8005ab0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005ab4:	4b92      	ldr	r3, [pc, #584]	; (8005d00 <HAL_RCC_OscConfig+0x4c4>)
 8005ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ab8:	f003 0302 	and.w	r3, r3, #2
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d1e9      	bne.n	8005a94 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f003 0304 	and.w	r3, r3, #4
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	f000 80a6 	beq.w	8005c1a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005ace:	2300      	movs	r3, #0
 8005ad0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005ad2:	4b8b      	ldr	r3, [pc, #556]	; (8005d00 <HAL_RCC_OscConfig+0x4c4>)
 8005ad4:	69db      	ldr	r3, [r3, #28]
 8005ad6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d10d      	bne.n	8005afa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005ade:	4b88      	ldr	r3, [pc, #544]	; (8005d00 <HAL_RCC_OscConfig+0x4c4>)
 8005ae0:	69db      	ldr	r3, [r3, #28]
 8005ae2:	4a87      	ldr	r2, [pc, #540]	; (8005d00 <HAL_RCC_OscConfig+0x4c4>)
 8005ae4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ae8:	61d3      	str	r3, [r2, #28]
 8005aea:	4b85      	ldr	r3, [pc, #532]	; (8005d00 <HAL_RCC_OscConfig+0x4c4>)
 8005aec:	69db      	ldr	r3, [r3, #28]
 8005aee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005af2:	60bb      	str	r3, [r7, #8]
 8005af4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005af6:	2301      	movs	r3, #1
 8005af8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005afa:	4b82      	ldr	r3, [pc, #520]	; (8005d04 <HAL_RCC_OscConfig+0x4c8>)
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d118      	bne.n	8005b38 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005b06:	4b7f      	ldr	r3, [pc, #508]	; (8005d04 <HAL_RCC_OscConfig+0x4c8>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	4a7e      	ldr	r2, [pc, #504]	; (8005d04 <HAL_RCC_OscConfig+0x4c8>)
 8005b0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005b12:	f7fd faf5 	bl	8003100 <HAL_GetTick>
 8005b16:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b18:	e008      	b.n	8005b2c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b1a:	f7fd faf1 	bl	8003100 <HAL_GetTick>
 8005b1e:	4602      	mov	r2, r0
 8005b20:	693b      	ldr	r3, [r7, #16]
 8005b22:	1ad3      	subs	r3, r2, r3
 8005b24:	2b64      	cmp	r3, #100	; 0x64
 8005b26:	d901      	bls.n	8005b2c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005b28:	2303      	movs	r3, #3
 8005b2a:	e103      	b.n	8005d34 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b2c:	4b75      	ldr	r3, [pc, #468]	; (8005d04 <HAL_RCC_OscConfig+0x4c8>)
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d0f0      	beq.n	8005b1a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	68db      	ldr	r3, [r3, #12]
 8005b3c:	2b01      	cmp	r3, #1
 8005b3e:	d106      	bne.n	8005b4e <HAL_RCC_OscConfig+0x312>
 8005b40:	4b6f      	ldr	r3, [pc, #444]	; (8005d00 <HAL_RCC_OscConfig+0x4c4>)
 8005b42:	6a1b      	ldr	r3, [r3, #32]
 8005b44:	4a6e      	ldr	r2, [pc, #440]	; (8005d00 <HAL_RCC_OscConfig+0x4c4>)
 8005b46:	f043 0301 	orr.w	r3, r3, #1
 8005b4a:	6213      	str	r3, [r2, #32]
 8005b4c:	e02d      	b.n	8005baa <HAL_RCC_OscConfig+0x36e>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	68db      	ldr	r3, [r3, #12]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d10c      	bne.n	8005b70 <HAL_RCC_OscConfig+0x334>
 8005b56:	4b6a      	ldr	r3, [pc, #424]	; (8005d00 <HAL_RCC_OscConfig+0x4c4>)
 8005b58:	6a1b      	ldr	r3, [r3, #32]
 8005b5a:	4a69      	ldr	r2, [pc, #420]	; (8005d00 <HAL_RCC_OscConfig+0x4c4>)
 8005b5c:	f023 0301 	bic.w	r3, r3, #1
 8005b60:	6213      	str	r3, [r2, #32]
 8005b62:	4b67      	ldr	r3, [pc, #412]	; (8005d00 <HAL_RCC_OscConfig+0x4c4>)
 8005b64:	6a1b      	ldr	r3, [r3, #32]
 8005b66:	4a66      	ldr	r2, [pc, #408]	; (8005d00 <HAL_RCC_OscConfig+0x4c4>)
 8005b68:	f023 0304 	bic.w	r3, r3, #4
 8005b6c:	6213      	str	r3, [r2, #32]
 8005b6e:	e01c      	b.n	8005baa <HAL_RCC_OscConfig+0x36e>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	68db      	ldr	r3, [r3, #12]
 8005b74:	2b05      	cmp	r3, #5
 8005b76:	d10c      	bne.n	8005b92 <HAL_RCC_OscConfig+0x356>
 8005b78:	4b61      	ldr	r3, [pc, #388]	; (8005d00 <HAL_RCC_OscConfig+0x4c4>)
 8005b7a:	6a1b      	ldr	r3, [r3, #32]
 8005b7c:	4a60      	ldr	r2, [pc, #384]	; (8005d00 <HAL_RCC_OscConfig+0x4c4>)
 8005b7e:	f043 0304 	orr.w	r3, r3, #4
 8005b82:	6213      	str	r3, [r2, #32]
 8005b84:	4b5e      	ldr	r3, [pc, #376]	; (8005d00 <HAL_RCC_OscConfig+0x4c4>)
 8005b86:	6a1b      	ldr	r3, [r3, #32]
 8005b88:	4a5d      	ldr	r2, [pc, #372]	; (8005d00 <HAL_RCC_OscConfig+0x4c4>)
 8005b8a:	f043 0301 	orr.w	r3, r3, #1
 8005b8e:	6213      	str	r3, [r2, #32]
 8005b90:	e00b      	b.n	8005baa <HAL_RCC_OscConfig+0x36e>
 8005b92:	4b5b      	ldr	r3, [pc, #364]	; (8005d00 <HAL_RCC_OscConfig+0x4c4>)
 8005b94:	6a1b      	ldr	r3, [r3, #32]
 8005b96:	4a5a      	ldr	r2, [pc, #360]	; (8005d00 <HAL_RCC_OscConfig+0x4c4>)
 8005b98:	f023 0301 	bic.w	r3, r3, #1
 8005b9c:	6213      	str	r3, [r2, #32]
 8005b9e:	4b58      	ldr	r3, [pc, #352]	; (8005d00 <HAL_RCC_OscConfig+0x4c4>)
 8005ba0:	6a1b      	ldr	r3, [r3, #32]
 8005ba2:	4a57      	ldr	r2, [pc, #348]	; (8005d00 <HAL_RCC_OscConfig+0x4c4>)
 8005ba4:	f023 0304 	bic.w	r3, r3, #4
 8005ba8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	68db      	ldr	r3, [r3, #12]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d015      	beq.n	8005bde <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005bb2:	f7fd faa5 	bl	8003100 <HAL_GetTick>
 8005bb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005bb8:	e00a      	b.n	8005bd0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005bba:	f7fd faa1 	bl	8003100 <HAL_GetTick>
 8005bbe:	4602      	mov	r2, r0
 8005bc0:	693b      	ldr	r3, [r7, #16]
 8005bc2:	1ad3      	subs	r3, r2, r3
 8005bc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d901      	bls.n	8005bd0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005bcc:	2303      	movs	r3, #3
 8005bce:	e0b1      	b.n	8005d34 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005bd0:	4b4b      	ldr	r3, [pc, #300]	; (8005d00 <HAL_RCC_OscConfig+0x4c4>)
 8005bd2:	6a1b      	ldr	r3, [r3, #32]
 8005bd4:	f003 0302 	and.w	r3, r3, #2
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d0ee      	beq.n	8005bba <HAL_RCC_OscConfig+0x37e>
 8005bdc:	e014      	b.n	8005c08 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005bde:	f7fd fa8f 	bl	8003100 <HAL_GetTick>
 8005be2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005be4:	e00a      	b.n	8005bfc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005be6:	f7fd fa8b 	bl	8003100 <HAL_GetTick>
 8005bea:	4602      	mov	r2, r0
 8005bec:	693b      	ldr	r3, [r7, #16]
 8005bee:	1ad3      	subs	r3, r2, r3
 8005bf0:	f241 3288 	movw	r2, #5000	; 0x1388
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d901      	bls.n	8005bfc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005bf8:	2303      	movs	r3, #3
 8005bfa:	e09b      	b.n	8005d34 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005bfc:	4b40      	ldr	r3, [pc, #256]	; (8005d00 <HAL_RCC_OscConfig+0x4c4>)
 8005bfe:	6a1b      	ldr	r3, [r3, #32]
 8005c00:	f003 0302 	and.w	r3, r3, #2
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d1ee      	bne.n	8005be6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005c08:	7dfb      	ldrb	r3, [r7, #23]
 8005c0a:	2b01      	cmp	r3, #1
 8005c0c:	d105      	bne.n	8005c1a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c0e:	4b3c      	ldr	r3, [pc, #240]	; (8005d00 <HAL_RCC_OscConfig+0x4c4>)
 8005c10:	69db      	ldr	r3, [r3, #28]
 8005c12:	4a3b      	ldr	r2, [pc, #236]	; (8005d00 <HAL_RCC_OscConfig+0x4c4>)
 8005c14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c18:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	69db      	ldr	r3, [r3, #28]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	f000 8087 	beq.w	8005d32 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005c24:	4b36      	ldr	r3, [pc, #216]	; (8005d00 <HAL_RCC_OscConfig+0x4c4>)
 8005c26:	685b      	ldr	r3, [r3, #4]
 8005c28:	f003 030c 	and.w	r3, r3, #12
 8005c2c:	2b08      	cmp	r3, #8
 8005c2e:	d061      	beq.n	8005cf4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	69db      	ldr	r3, [r3, #28]
 8005c34:	2b02      	cmp	r3, #2
 8005c36:	d146      	bne.n	8005cc6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c38:	4b33      	ldr	r3, [pc, #204]	; (8005d08 <HAL_RCC_OscConfig+0x4cc>)
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c3e:	f7fd fa5f 	bl	8003100 <HAL_GetTick>
 8005c42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005c44:	e008      	b.n	8005c58 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c46:	f7fd fa5b 	bl	8003100 <HAL_GetTick>
 8005c4a:	4602      	mov	r2, r0
 8005c4c:	693b      	ldr	r3, [r7, #16]
 8005c4e:	1ad3      	subs	r3, r2, r3
 8005c50:	2b02      	cmp	r3, #2
 8005c52:	d901      	bls.n	8005c58 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005c54:	2303      	movs	r3, #3
 8005c56:	e06d      	b.n	8005d34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005c58:	4b29      	ldr	r3, [pc, #164]	; (8005d00 <HAL_RCC_OscConfig+0x4c4>)
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d1f0      	bne.n	8005c46 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	6a1b      	ldr	r3, [r3, #32]
 8005c68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c6c:	d108      	bne.n	8005c80 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005c6e:	4b24      	ldr	r3, [pc, #144]	; (8005d00 <HAL_RCC_OscConfig+0x4c4>)
 8005c70:	685b      	ldr	r3, [r3, #4]
 8005c72:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	689b      	ldr	r3, [r3, #8]
 8005c7a:	4921      	ldr	r1, [pc, #132]	; (8005d00 <HAL_RCC_OscConfig+0x4c4>)
 8005c7c:	4313      	orrs	r3, r2
 8005c7e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005c80:	4b1f      	ldr	r3, [pc, #124]	; (8005d00 <HAL_RCC_OscConfig+0x4c4>)
 8005c82:	685b      	ldr	r3, [r3, #4]
 8005c84:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	6a19      	ldr	r1, [r3, #32]
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c90:	430b      	orrs	r3, r1
 8005c92:	491b      	ldr	r1, [pc, #108]	; (8005d00 <HAL_RCC_OscConfig+0x4c4>)
 8005c94:	4313      	orrs	r3, r2
 8005c96:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005c98:	4b1b      	ldr	r3, [pc, #108]	; (8005d08 <HAL_RCC_OscConfig+0x4cc>)
 8005c9a:	2201      	movs	r2, #1
 8005c9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c9e:	f7fd fa2f 	bl	8003100 <HAL_GetTick>
 8005ca2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005ca4:	e008      	b.n	8005cb8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ca6:	f7fd fa2b 	bl	8003100 <HAL_GetTick>
 8005caa:	4602      	mov	r2, r0
 8005cac:	693b      	ldr	r3, [r7, #16]
 8005cae:	1ad3      	subs	r3, r2, r3
 8005cb0:	2b02      	cmp	r3, #2
 8005cb2:	d901      	bls.n	8005cb8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005cb4:	2303      	movs	r3, #3
 8005cb6:	e03d      	b.n	8005d34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005cb8:	4b11      	ldr	r3, [pc, #68]	; (8005d00 <HAL_RCC_OscConfig+0x4c4>)
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d0f0      	beq.n	8005ca6 <HAL_RCC_OscConfig+0x46a>
 8005cc4:	e035      	b.n	8005d32 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005cc6:	4b10      	ldr	r3, [pc, #64]	; (8005d08 <HAL_RCC_OscConfig+0x4cc>)
 8005cc8:	2200      	movs	r2, #0
 8005cca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ccc:	f7fd fa18 	bl	8003100 <HAL_GetTick>
 8005cd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005cd2:	e008      	b.n	8005ce6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005cd4:	f7fd fa14 	bl	8003100 <HAL_GetTick>
 8005cd8:	4602      	mov	r2, r0
 8005cda:	693b      	ldr	r3, [r7, #16]
 8005cdc:	1ad3      	subs	r3, r2, r3
 8005cde:	2b02      	cmp	r3, #2
 8005ce0:	d901      	bls.n	8005ce6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005ce2:	2303      	movs	r3, #3
 8005ce4:	e026      	b.n	8005d34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005ce6:	4b06      	ldr	r3, [pc, #24]	; (8005d00 <HAL_RCC_OscConfig+0x4c4>)
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d1f0      	bne.n	8005cd4 <HAL_RCC_OscConfig+0x498>
 8005cf2:	e01e      	b.n	8005d32 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	69db      	ldr	r3, [r3, #28]
 8005cf8:	2b01      	cmp	r3, #1
 8005cfa:	d107      	bne.n	8005d0c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005cfc:	2301      	movs	r3, #1
 8005cfe:	e019      	b.n	8005d34 <HAL_RCC_OscConfig+0x4f8>
 8005d00:	40021000 	.word	0x40021000
 8005d04:	40007000 	.word	0x40007000
 8005d08:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005d0c:	4b0b      	ldr	r3, [pc, #44]	; (8005d3c <HAL_RCC_OscConfig+0x500>)
 8005d0e:	685b      	ldr	r3, [r3, #4]
 8005d10:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6a1b      	ldr	r3, [r3, #32]
 8005d1c:	429a      	cmp	r2, r3
 8005d1e:	d106      	bne.n	8005d2e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d2a:	429a      	cmp	r2, r3
 8005d2c:	d001      	beq.n	8005d32 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8005d2e:	2301      	movs	r3, #1
 8005d30:	e000      	b.n	8005d34 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8005d32:	2300      	movs	r3, #0
}
 8005d34:	4618      	mov	r0, r3
 8005d36:	3718      	adds	r7, #24
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	bd80      	pop	{r7, pc}
 8005d3c:	40021000 	.word	0x40021000

08005d40 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b084      	sub	sp, #16
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
 8005d48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d101      	bne.n	8005d54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005d50:	2301      	movs	r3, #1
 8005d52:	e0d0      	b.n	8005ef6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005d54:	4b6a      	ldr	r3, [pc, #424]	; (8005f00 <HAL_RCC_ClockConfig+0x1c0>)
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f003 0307 	and.w	r3, r3, #7
 8005d5c:	683a      	ldr	r2, [r7, #0]
 8005d5e:	429a      	cmp	r2, r3
 8005d60:	d910      	bls.n	8005d84 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d62:	4b67      	ldr	r3, [pc, #412]	; (8005f00 <HAL_RCC_ClockConfig+0x1c0>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f023 0207 	bic.w	r2, r3, #7
 8005d6a:	4965      	ldr	r1, [pc, #404]	; (8005f00 <HAL_RCC_ClockConfig+0x1c0>)
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	4313      	orrs	r3, r2
 8005d70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d72:	4b63      	ldr	r3, [pc, #396]	; (8005f00 <HAL_RCC_ClockConfig+0x1c0>)
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f003 0307 	and.w	r3, r3, #7
 8005d7a:	683a      	ldr	r2, [r7, #0]
 8005d7c:	429a      	cmp	r2, r3
 8005d7e:	d001      	beq.n	8005d84 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005d80:	2301      	movs	r3, #1
 8005d82:	e0b8      	b.n	8005ef6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f003 0302 	and.w	r3, r3, #2
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d020      	beq.n	8005dd2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f003 0304 	and.w	r3, r3, #4
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d005      	beq.n	8005da8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005d9c:	4b59      	ldr	r3, [pc, #356]	; (8005f04 <HAL_RCC_ClockConfig+0x1c4>)
 8005d9e:	685b      	ldr	r3, [r3, #4]
 8005da0:	4a58      	ldr	r2, [pc, #352]	; (8005f04 <HAL_RCC_ClockConfig+0x1c4>)
 8005da2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005da6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f003 0308 	and.w	r3, r3, #8
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d005      	beq.n	8005dc0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005db4:	4b53      	ldr	r3, [pc, #332]	; (8005f04 <HAL_RCC_ClockConfig+0x1c4>)
 8005db6:	685b      	ldr	r3, [r3, #4]
 8005db8:	4a52      	ldr	r2, [pc, #328]	; (8005f04 <HAL_RCC_ClockConfig+0x1c4>)
 8005dba:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005dbe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005dc0:	4b50      	ldr	r3, [pc, #320]	; (8005f04 <HAL_RCC_ClockConfig+0x1c4>)
 8005dc2:	685b      	ldr	r3, [r3, #4]
 8005dc4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	689b      	ldr	r3, [r3, #8]
 8005dcc:	494d      	ldr	r1, [pc, #308]	; (8005f04 <HAL_RCC_ClockConfig+0x1c4>)
 8005dce:	4313      	orrs	r3, r2
 8005dd0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f003 0301 	and.w	r3, r3, #1
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d040      	beq.n	8005e60 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	685b      	ldr	r3, [r3, #4]
 8005de2:	2b01      	cmp	r3, #1
 8005de4:	d107      	bne.n	8005df6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005de6:	4b47      	ldr	r3, [pc, #284]	; (8005f04 <HAL_RCC_ClockConfig+0x1c4>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d115      	bne.n	8005e1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005df2:	2301      	movs	r3, #1
 8005df4:	e07f      	b.n	8005ef6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	685b      	ldr	r3, [r3, #4]
 8005dfa:	2b02      	cmp	r3, #2
 8005dfc:	d107      	bne.n	8005e0e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005dfe:	4b41      	ldr	r3, [pc, #260]	; (8005f04 <HAL_RCC_ClockConfig+0x1c4>)
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d109      	bne.n	8005e1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e0a:	2301      	movs	r3, #1
 8005e0c:	e073      	b.n	8005ef6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e0e:	4b3d      	ldr	r3, [pc, #244]	; (8005f04 <HAL_RCC_ClockConfig+0x1c4>)
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f003 0302 	and.w	r3, r3, #2
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d101      	bne.n	8005e1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e1a:	2301      	movs	r3, #1
 8005e1c:	e06b      	b.n	8005ef6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005e1e:	4b39      	ldr	r3, [pc, #228]	; (8005f04 <HAL_RCC_ClockConfig+0x1c4>)
 8005e20:	685b      	ldr	r3, [r3, #4]
 8005e22:	f023 0203 	bic.w	r2, r3, #3
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	685b      	ldr	r3, [r3, #4]
 8005e2a:	4936      	ldr	r1, [pc, #216]	; (8005f04 <HAL_RCC_ClockConfig+0x1c4>)
 8005e2c:	4313      	orrs	r3, r2
 8005e2e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005e30:	f7fd f966 	bl	8003100 <HAL_GetTick>
 8005e34:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e36:	e00a      	b.n	8005e4e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005e38:	f7fd f962 	bl	8003100 <HAL_GetTick>
 8005e3c:	4602      	mov	r2, r0
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	1ad3      	subs	r3, r2, r3
 8005e42:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d901      	bls.n	8005e4e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005e4a:	2303      	movs	r3, #3
 8005e4c:	e053      	b.n	8005ef6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e4e:	4b2d      	ldr	r3, [pc, #180]	; (8005f04 <HAL_RCC_ClockConfig+0x1c4>)
 8005e50:	685b      	ldr	r3, [r3, #4]
 8005e52:	f003 020c 	and.w	r2, r3, #12
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	685b      	ldr	r3, [r3, #4]
 8005e5a:	009b      	lsls	r3, r3, #2
 8005e5c:	429a      	cmp	r2, r3
 8005e5e:	d1eb      	bne.n	8005e38 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005e60:	4b27      	ldr	r3, [pc, #156]	; (8005f00 <HAL_RCC_ClockConfig+0x1c0>)
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f003 0307 	and.w	r3, r3, #7
 8005e68:	683a      	ldr	r2, [r7, #0]
 8005e6a:	429a      	cmp	r2, r3
 8005e6c:	d210      	bcs.n	8005e90 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e6e:	4b24      	ldr	r3, [pc, #144]	; (8005f00 <HAL_RCC_ClockConfig+0x1c0>)
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f023 0207 	bic.w	r2, r3, #7
 8005e76:	4922      	ldr	r1, [pc, #136]	; (8005f00 <HAL_RCC_ClockConfig+0x1c0>)
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	4313      	orrs	r3, r2
 8005e7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e7e:	4b20      	ldr	r3, [pc, #128]	; (8005f00 <HAL_RCC_ClockConfig+0x1c0>)
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f003 0307 	and.w	r3, r3, #7
 8005e86:	683a      	ldr	r2, [r7, #0]
 8005e88:	429a      	cmp	r2, r3
 8005e8a:	d001      	beq.n	8005e90 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005e8c:	2301      	movs	r3, #1
 8005e8e:	e032      	b.n	8005ef6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f003 0304 	and.w	r3, r3, #4
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d008      	beq.n	8005eae <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005e9c:	4b19      	ldr	r3, [pc, #100]	; (8005f04 <HAL_RCC_ClockConfig+0x1c4>)
 8005e9e:	685b      	ldr	r3, [r3, #4]
 8005ea0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	68db      	ldr	r3, [r3, #12]
 8005ea8:	4916      	ldr	r1, [pc, #88]	; (8005f04 <HAL_RCC_ClockConfig+0x1c4>)
 8005eaa:	4313      	orrs	r3, r2
 8005eac:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f003 0308 	and.w	r3, r3, #8
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d009      	beq.n	8005ece <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005eba:	4b12      	ldr	r3, [pc, #72]	; (8005f04 <HAL_RCC_ClockConfig+0x1c4>)
 8005ebc:	685b      	ldr	r3, [r3, #4]
 8005ebe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	691b      	ldr	r3, [r3, #16]
 8005ec6:	00db      	lsls	r3, r3, #3
 8005ec8:	490e      	ldr	r1, [pc, #56]	; (8005f04 <HAL_RCC_ClockConfig+0x1c4>)
 8005eca:	4313      	orrs	r3, r2
 8005ecc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005ece:	f000 f821 	bl	8005f14 <HAL_RCC_GetSysClockFreq>
 8005ed2:	4602      	mov	r2, r0
 8005ed4:	4b0b      	ldr	r3, [pc, #44]	; (8005f04 <HAL_RCC_ClockConfig+0x1c4>)
 8005ed6:	685b      	ldr	r3, [r3, #4]
 8005ed8:	091b      	lsrs	r3, r3, #4
 8005eda:	f003 030f 	and.w	r3, r3, #15
 8005ede:	490a      	ldr	r1, [pc, #40]	; (8005f08 <HAL_RCC_ClockConfig+0x1c8>)
 8005ee0:	5ccb      	ldrb	r3, [r1, r3]
 8005ee2:	fa22 f303 	lsr.w	r3, r2, r3
 8005ee6:	4a09      	ldr	r2, [pc, #36]	; (8005f0c <HAL_RCC_ClockConfig+0x1cc>)
 8005ee8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005eea:	4b09      	ldr	r3, [pc, #36]	; (8005f10 <HAL_RCC_ClockConfig+0x1d0>)
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	4618      	mov	r0, r3
 8005ef0:	f7fd f8c4 	bl	800307c <HAL_InitTick>

  return HAL_OK;
 8005ef4:	2300      	movs	r3, #0
}
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	3710      	adds	r7, #16
 8005efa:	46bd      	mov	sp, r7
 8005efc:	bd80      	pop	{r7, pc}
 8005efe:	bf00      	nop
 8005f00:	40022000 	.word	0x40022000
 8005f04:	40021000 	.word	0x40021000
 8005f08:	0800b5d0 	.word	0x0800b5d0
 8005f0c:	20000004 	.word	0x20000004
 8005f10:	20000008 	.word	0x20000008

08005f14 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005f14:	b480      	push	{r7}
 8005f16:	b087      	sub	sp, #28
 8005f18:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	60fb      	str	r3, [r7, #12]
 8005f1e:	2300      	movs	r3, #0
 8005f20:	60bb      	str	r3, [r7, #8]
 8005f22:	2300      	movs	r3, #0
 8005f24:	617b      	str	r3, [r7, #20]
 8005f26:	2300      	movs	r3, #0
 8005f28:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005f2e:	4b1e      	ldr	r3, [pc, #120]	; (8005fa8 <HAL_RCC_GetSysClockFreq+0x94>)
 8005f30:	685b      	ldr	r3, [r3, #4]
 8005f32:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	f003 030c 	and.w	r3, r3, #12
 8005f3a:	2b04      	cmp	r3, #4
 8005f3c:	d002      	beq.n	8005f44 <HAL_RCC_GetSysClockFreq+0x30>
 8005f3e:	2b08      	cmp	r3, #8
 8005f40:	d003      	beq.n	8005f4a <HAL_RCC_GetSysClockFreq+0x36>
 8005f42:	e027      	b.n	8005f94 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005f44:	4b19      	ldr	r3, [pc, #100]	; (8005fac <HAL_RCC_GetSysClockFreq+0x98>)
 8005f46:	613b      	str	r3, [r7, #16]
      break;
 8005f48:	e027      	b.n	8005f9a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	0c9b      	lsrs	r3, r3, #18
 8005f4e:	f003 030f 	and.w	r3, r3, #15
 8005f52:	4a17      	ldr	r2, [pc, #92]	; (8005fb0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005f54:	5cd3      	ldrb	r3, [r2, r3]
 8005f56:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d010      	beq.n	8005f84 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005f62:	4b11      	ldr	r3, [pc, #68]	; (8005fa8 <HAL_RCC_GetSysClockFreq+0x94>)
 8005f64:	685b      	ldr	r3, [r3, #4]
 8005f66:	0c5b      	lsrs	r3, r3, #17
 8005f68:	f003 0301 	and.w	r3, r3, #1
 8005f6c:	4a11      	ldr	r2, [pc, #68]	; (8005fb4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8005f6e:	5cd3      	ldrb	r3, [r2, r3]
 8005f70:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	4a0d      	ldr	r2, [pc, #52]	; (8005fac <HAL_RCC_GetSysClockFreq+0x98>)
 8005f76:	fb03 f202 	mul.w	r2, r3, r2
 8005f7a:	68bb      	ldr	r3, [r7, #8]
 8005f7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f80:	617b      	str	r3, [r7, #20]
 8005f82:	e004      	b.n	8005f8e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	4a0c      	ldr	r2, [pc, #48]	; (8005fb8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005f88:	fb02 f303 	mul.w	r3, r2, r3
 8005f8c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8005f8e:	697b      	ldr	r3, [r7, #20]
 8005f90:	613b      	str	r3, [r7, #16]
      break;
 8005f92:	e002      	b.n	8005f9a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005f94:	4b05      	ldr	r3, [pc, #20]	; (8005fac <HAL_RCC_GetSysClockFreq+0x98>)
 8005f96:	613b      	str	r3, [r7, #16]
      break;
 8005f98:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005f9a:	693b      	ldr	r3, [r7, #16]
}
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	371c      	adds	r7, #28
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	bc80      	pop	{r7}
 8005fa4:	4770      	bx	lr
 8005fa6:	bf00      	nop
 8005fa8:	40021000 	.word	0x40021000
 8005fac:	007a1200 	.word	0x007a1200
 8005fb0:	0800b5e8 	.word	0x0800b5e8
 8005fb4:	0800b5f8 	.word	0x0800b5f8
 8005fb8:	003d0900 	.word	0x003d0900

08005fbc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005fbc:	b480      	push	{r7}
 8005fbe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005fc0:	4b02      	ldr	r3, [pc, #8]	; (8005fcc <HAL_RCC_GetHCLKFreq+0x10>)
 8005fc2:	681b      	ldr	r3, [r3, #0]
}
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	bc80      	pop	{r7}
 8005fca:	4770      	bx	lr
 8005fcc:	20000004 	.word	0x20000004

08005fd0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005fd4:	f7ff fff2 	bl	8005fbc <HAL_RCC_GetHCLKFreq>
 8005fd8:	4602      	mov	r2, r0
 8005fda:	4b05      	ldr	r3, [pc, #20]	; (8005ff0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005fdc:	685b      	ldr	r3, [r3, #4]
 8005fde:	0a1b      	lsrs	r3, r3, #8
 8005fe0:	f003 0307 	and.w	r3, r3, #7
 8005fe4:	4903      	ldr	r1, [pc, #12]	; (8005ff4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005fe6:	5ccb      	ldrb	r3, [r1, r3]
 8005fe8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005fec:	4618      	mov	r0, r3
 8005fee:	bd80      	pop	{r7, pc}
 8005ff0:	40021000 	.word	0x40021000
 8005ff4:	0800b5e0 	.word	0x0800b5e0

08005ff8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005ffc:	f7ff ffde 	bl	8005fbc <HAL_RCC_GetHCLKFreq>
 8006000:	4602      	mov	r2, r0
 8006002:	4b05      	ldr	r3, [pc, #20]	; (8006018 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006004:	685b      	ldr	r3, [r3, #4]
 8006006:	0adb      	lsrs	r3, r3, #11
 8006008:	f003 0307 	and.w	r3, r3, #7
 800600c:	4903      	ldr	r1, [pc, #12]	; (800601c <HAL_RCC_GetPCLK2Freq+0x24>)
 800600e:	5ccb      	ldrb	r3, [r1, r3]
 8006010:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006014:	4618      	mov	r0, r3
 8006016:	bd80      	pop	{r7, pc}
 8006018:	40021000 	.word	0x40021000
 800601c:	0800b5e0 	.word	0x0800b5e0

08006020 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006020:	b480      	push	{r7}
 8006022:	b085      	sub	sp, #20
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006028:	4b0a      	ldr	r3, [pc, #40]	; (8006054 <RCC_Delay+0x34>)
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	4a0a      	ldr	r2, [pc, #40]	; (8006058 <RCC_Delay+0x38>)
 800602e:	fba2 2303 	umull	r2, r3, r2, r3
 8006032:	0a5b      	lsrs	r3, r3, #9
 8006034:	687a      	ldr	r2, [r7, #4]
 8006036:	fb02 f303 	mul.w	r3, r2, r3
 800603a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800603c:	bf00      	nop
  }
  while (Delay --);
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	1e5a      	subs	r2, r3, #1
 8006042:	60fa      	str	r2, [r7, #12]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d1f9      	bne.n	800603c <RCC_Delay+0x1c>
}
 8006048:	bf00      	nop
 800604a:	bf00      	nop
 800604c:	3714      	adds	r7, #20
 800604e:	46bd      	mov	sp, r7
 8006050:	bc80      	pop	{r7}
 8006052:	4770      	bx	lr
 8006054:	20000004 	.word	0x20000004
 8006058:	10624dd3 	.word	0x10624dd3

0800605c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b086      	sub	sp, #24
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8006064:	2300      	movs	r3, #0
 8006066:	613b      	str	r3, [r7, #16]
 8006068:	2300      	movs	r3, #0
 800606a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f003 0301 	and.w	r3, r3, #1
 8006074:	2b00      	cmp	r3, #0
 8006076:	d07d      	beq.n	8006174 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8006078:	2300      	movs	r3, #0
 800607a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800607c:	4b4f      	ldr	r3, [pc, #316]	; (80061bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800607e:	69db      	ldr	r3, [r3, #28]
 8006080:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006084:	2b00      	cmp	r3, #0
 8006086:	d10d      	bne.n	80060a4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006088:	4b4c      	ldr	r3, [pc, #304]	; (80061bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800608a:	69db      	ldr	r3, [r3, #28]
 800608c:	4a4b      	ldr	r2, [pc, #300]	; (80061bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800608e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006092:	61d3      	str	r3, [r2, #28]
 8006094:	4b49      	ldr	r3, [pc, #292]	; (80061bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006096:	69db      	ldr	r3, [r3, #28]
 8006098:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800609c:	60bb      	str	r3, [r7, #8]
 800609e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80060a0:	2301      	movs	r3, #1
 80060a2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80060a4:	4b46      	ldr	r3, [pc, #280]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d118      	bne.n	80060e2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80060b0:	4b43      	ldr	r3, [pc, #268]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	4a42      	ldr	r2, [pc, #264]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80060b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060ba:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80060bc:	f7fd f820 	bl	8003100 <HAL_GetTick>
 80060c0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80060c2:	e008      	b.n	80060d6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80060c4:	f7fd f81c 	bl	8003100 <HAL_GetTick>
 80060c8:	4602      	mov	r2, r0
 80060ca:	693b      	ldr	r3, [r7, #16]
 80060cc:	1ad3      	subs	r3, r2, r3
 80060ce:	2b64      	cmp	r3, #100	; 0x64
 80060d0:	d901      	bls.n	80060d6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80060d2:	2303      	movs	r3, #3
 80060d4:	e06d      	b.n	80061b2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80060d6:	4b3a      	ldr	r3, [pc, #232]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d0f0      	beq.n	80060c4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80060e2:	4b36      	ldr	r3, [pc, #216]	; (80061bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80060e4:	6a1b      	ldr	r3, [r3, #32]
 80060e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80060ea:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d02e      	beq.n	8006150 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	685b      	ldr	r3, [r3, #4]
 80060f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80060fa:	68fa      	ldr	r2, [r7, #12]
 80060fc:	429a      	cmp	r2, r3
 80060fe:	d027      	beq.n	8006150 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006100:	4b2e      	ldr	r3, [pc, #184]	; (80061bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006102:	6a1b      	ldr	r3, [r3, #32]
 8006104:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006108:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800610a:	4b2e      	ldr	r3, [pc, #184]	; (80061c4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800610c:	2201      	movs	r2, #1
 800610e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006110:	4b2c      	ldr	r3, [pc, #176]	; (80061c4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006112:	2200      	movs	r2, #0
 8006114:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006116:	4a29      	ldr	r2, [pc, #164]	; (80061bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	f003 0301 	and.w	r3, r3, #1
 8006122:	2b00      	cmp	r3, #0
 8006124:	d014      	beq.n	8006150 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006126:	f7fc ffeb 	bl	8003100 <HAL_GetTick>
 800612a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800612c:	e00a      	b.n	8006144 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800612e:	f7fc ffe7 	bl	8003100 <HAL_GetTick>
 8006132:	4602      	mov	r2, r0
 8006134:	693b      	ldr	r3, [r7, #16]
 8006136:	1ad3      	subs	r3, r2, r3
 8006138:	f241 3288 	movw	r2, #5000	; 0x1388
 800613c:	4293      	cmp	r3, r2
 800613e:	d901      	bls.n	8006144 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8006140:	2303      	movs	r3, #3
 8006142:	e036      	b.n	80061b2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006144:	4b1d      	ldr	r3, [pc, #116]	; (80061bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006146:	6a1b      	ldr	r3, [r3, #32]
 8006148:	f003 0302 	and.w	r3, r3, #2
 800614c:	2b00      	cmp	r3, #0
 800614e:	d0ee      	beq.n	800612e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006150:	4b1a      	ldr	r3, [pc, #104]	; (80061bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006152:	6a1b      	ldr	r3, [r3, #32]
 8006154:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	685b      	ldr	r3, [r3, #4]
 800615c:	4917      	ldr	r1, [pc, #92]	; (80061bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800615e:	4313      	orrs	r3, r2
 8006160:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006162:	7dfb      	ldrb	r3, [r7, #23]
 8006164:	2b01      	cmp	r3, #1
 8006166:	d105      	bne.n	8006174 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006168:	4b14      	ldr	r3, [pc, #80]	; (80061bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800616a:	69db      	ldr	r3, [r3, #28]
 800616c:	4a13      	ldr	r2, [pc, #76]	; (80061bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800616e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006172:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f003 0302 	and.w	r3, r3, #2
 800617c:	2b00      	cmp	r3, #0
 800617e:	d008      	beq.n	8006192 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006180:	4b0e      	ldr	r3, [pc, #56]	; (80061bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006182:	685b      	ldr	r3, [r3, #4]
 8006184:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	689b      	ldr	r3, [r3, #8]
 800618c:	490b      	ldr	r1, [pc, #44]	; (80061bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800618e:	4313      	orrs	r3, r2
 8006190:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f003 0310 	and.w	r3, r3, #16
 800619a:	2b00      	cmp	r3, #0
 800619c:	d008      	beq.n	80061b0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800619e:	4b07      	ldr	r3, [pc, #28]	; (80061bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80061a0:	685b      	ldr	r3, [r3, #4]
 80061a2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	68db      	ldr	r3, [r3, #12]
 80061aa:	4904      	ldr	r1, [pc, #16]	; (80061bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80061ac:	4313      	orrs	r3, r2
 80061ae:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80061b0:	2300      	movs	r3, #0
}
 80061b2:	4618      	mov	r0, r3
 80061b4:	3718      	adds	r7, #24
 80061b6:	46bd      	mov	sp, r7
 80061b8:	bd80      	pop	{r7, pc}
 80061ba:	bf00      	nop
 80061bc:	40021000 	.word	0x40021000
 80061c0:	40007000 	.word	0x40007000
 80061c4:	42420440 	.word	0x42420440

080061c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	b082      	sub	sp, #8
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d101      	bne.n	80061da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80061d6:	2301      	movs	r3, #1
 80061d8:	e041      	b.n	800625e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061e0:	b2db      	uxtb	r3, r3
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d106      	bne.n	80061f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2200      	movs	r2, #0
 80061ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80061ee:	6878      	ldr	r0, [r7, #4]
 80061f0:	f7fc fd30 	bl	8002c54 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2202      	movs	r2, #2
 80061f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681a      	ldr	r2, [r3, #0]
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	3304      	adds	r3, #4
 8006204:	4619      	mov	r1, r3
 8006206:	4610      	mov	r0, r2
 8006208:	f000 fa74 	bl	80066f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2201      	movs	r2, #1
 8006210:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2201      	movs	r2, #1
 8006218:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2201      	movs	r2, #1
 8006220:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2201      	movs	r2, #1
 8006228:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2201      	movs	r2, #1
 8006230:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2201      	movs	r2, #1
 8006238:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2201      	movs	r2, #1
 8006240:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2201      	movs	r2, #1
 8006248:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2201      	movs	r2, #1
 8006250:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2201      	movs	r2, #1
 8006258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800625c:	2300      	movs	r3, #0
}
 800625e:	4618      	mov	r0, r3
 8006260:	3708      	adds	r7, #8
 8006262:	46bd      	mov	sp, r7
 8006264:	bd80      	pop	{r7, pc}
	...

08006268 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006268:	b480      	push	{r7}
 800626a:	b085      	sub	sp, #20
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006276:	b2db      	uxtb	r3, r3
 8006278:	2b01      	cmp	r3, #1
 800627a:	d001      	beq.n	8006280 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800627c:	2301      	movs	r3, #1
 800627e:	e03a      	b.n	80062f6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2202      	movs	r2, #2
 8006284:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	68da      	ldr	r2, [r3, #12]
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f042 0201 	orr.w	r2, r2, #1
 8006296:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	4a18      	ldr	r2, [pc, #96]	; (8006300 <HAL_TIM_Base_Start_IT+0x98>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d00e      	beq.n	80062c0 <HAL_TIM_Base_Start_IT+0x58>
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062aa:	d009      	beq.n	80062c0 <HAL_TIM_Base_Start_IT+0x58>
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	4a14      	ldr	r2, [pc, #80]	; (8006304 <HAL_TIM_Base_Start_IT+0x9c>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d004      	beq.n	80062c0 <HAL_TIM_Base_Start_IT+0x58>
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	4a13      	ldr	r2, [pc, #76]	; (8006308 <HAL_TIM_Base_Start_IT+0xa0>)
 80062bc:	4293      	cmp	r3, r2
 80062be:	d111      	bne.n	80062e4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	689b      	ldr	r3, [r3, #8]
 80062c6:	f003 0307 	and.w	r3, r3, #7
 80062ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	2b06      	cmp	r3, #6
 80062d0:	d010      	beq.n	80062f4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	681a      	ldr	r2, [r3, #0]
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f042 0201 	orr.w	r2, r2, #1
 80062e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062e2:	e007      	b.n	80062f4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	681a      	ldr	r2, [r3, #0]
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f042 0201 	orr.w	r2, r2, #1
 80062f2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80062f4:	2300      	movs	r3, #0
}
 80062f6:	4618      	mov	r0, r3
 80062f8:	3714      	adds	r7, #20
 80062fa:	46bd      	mov	sp, r7
 80062fc:	bc80      	pop	{r7}
 80062fe:	4770      	bx	lr
 8006300:	40012c00 	.word	0x40012c00
 8006304:	40000400 	.word	0x40000400
 8006308:	40000800 	.word	0x40000800

0800630c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b082      	sub	sp, #8
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	691b      	ldr	r3, [r3, #16]
 800631a:	f003 0302 	and.w	r3, r3, #2
 800631e:	2b02      	cmp	r3, #2
 8006320:	d122      	bne.n	8006368 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	68db      	ldr	r3, [r3, #12]
 8006328:	f003 0302 	and.w	r3, r3, #2
 800632c:	2b02      	cmp	r3, #2
 800632e:	d11b      	bne.n	8006368 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f06f 0202 	mvn.w	r2, #2
 8006338:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	2201      	movs	r2, #1
 800633e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	699b      	ldr	r3, [r3, #24]
 8006346:	f003 0303 	and.w	r3, r3, #3
 800634a:	2b00      	cmp	r3, #0
 800634c:	d003      	beq.n	8006356 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800634e:	6878      	ldr	r0, [r7, #4]
 8006350:	f000 f9b4 	bl	80066bc <HAL_TIM_IC_CaptureCallback>
 8006354:	e005      	b.n	8006362 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006356:	6878      	ldr	r0, [r7, #4]
 8006358:	f000 f9a7 	bl	80066aa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800635c:	6878      	ldr	r0, [r7, #4]
 800635e:	f000 f9b6 	bl	80066ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2200      	movs	r2, #0
 8006366:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	691b      	ldr	r3, [r3, #16]
 800636e:	f003 0304 	and.w	r3, r3, #4
 8006372:	2b04      	cmp	r3, #4
 8006374:	d122      	bne.n	80063bc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	68db      	ldr	r3, [r3, #12]
 800637c:	f003 0304 	and.w	r3, r3, #4
 8006380:	2b04      	cmp	r3, #4
 8006382:	d11b      	bne.n	80063bc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f06f 0204 	mvn.w	r2, #4
 800638c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2202      	movs	r2, #2
 8006392:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	699b      	ldr	r3, [r3, #24]
 800639a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d003      	beq.n	80063aa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80063a2:	6878      	ldr	r0, [r7, #4]
 80063a4:	f000 f98a 	bl	80066bc <HAL_TIM_IC_CaptureCallback>
 80063a8:	e005      	b.n	80063b6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80063aa:	6878      	ldr	r0, [r7, #4]
 80063ac:	f000 f97d 	bl	80066aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063b0:	6878      	ldr	r0, [r7, #4]
 80063b2:	f000 f98c 	bl	80066ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	2200      	movs	r2, #0
 80063ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	691b      	ldr	r3, [r3, #16]
 80063c2:	f003 0308 	and.w	r3, r3, #8
 80063c6:	2b08      	cmp	r3, #8
 80063c8:	d122      	bne.n	8006410 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	68db      	ldr	r3, [r3, #12]
 80063d0:	f003 0308 	and.w	r3, r3, #8
 80063d4:	2b08      	cmp	r3, #8
 80063d6:	d11b      	bne.n	8006410 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f06f 0208 	mvn.w	r2, #8
 80063e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2204      	movs	r2, #4
 80063e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	69db      	ldr	r3, [r3, #28]
 80063ee:	f003 0303 	and.w	r3, r3, #3
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d003      	beq.n	80063fe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80063f6:	6878      	ldr	r0, [r7, #4]
 80063f8:	f000 f960 	bl	80066bc <HAL_TIM_IC_CaptureCallback>
 80063fc:	e005      	b.n	800640a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80063fe:	6878      	ldr	r0, [r7, #4]
 8006400:	f000 f953 	bl	80066aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006404:	6878      	ldr	r0, [r7, #4]
 8006406:	f000 f962 	bl	80066ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	2200      	movs	r2, #0
 800640e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	691b      	ldr	r3, [r3, #16]
 8006416:	f003 0310 	and.w	r3, r3, #16
 800641a:	2b10      	cmp	r3, #16
 800641c:	d122      	bne.n	8006464 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	68db      	ldr	r3, [r3, #12]
 8006424:	f003 0310 	and.w	r3, r3, #16
 8006428:	2b10      	cmp	r3, #16
 800642a:	d11b      	bne.n	8006464 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f06f 0210 	mvn.w	r2, #16
 8006434:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	2208      	movs	r2, #8
 800643a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	69db      	ldr	r3, [r3, #28]
 8006442:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006446:	2b00      	cmp	r3, #0
 8006448:	d003      	beq.n	8006452 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800644a:	6878      	ldr	r0, [r7, #4]
 800644c:	f000 f936 	bl	80066bc <HAL_TIM_IC_CaptureCallback>
 8006450:	e005      	b.n	800645e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006452:	6878      	ldr	r0, [r7, #4]
 8006454:	f000 f929 	bl	80066aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006458:	6878      	ldr	r0, [r7, #4]
 800645a:	f000 f938 	bl	80066ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2200      	movs	r2, #0
 8006462:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	691b      	ldr	r3, [r3, #16]
 800646a:	f003 0301 	and.w	r3, r3, #1
 800646e:	2b01      	cmp	r3, #1
 8006470:	d10e      	bne.n	8006490 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	68db      	ldr	r3, [r3, #12]
 8006478:	f003 0301 	and.w	r3, r3, #1
 800647c:	2b01      	cmp	r3, #1
 800647e:	d107      	bne.n	8006490 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f06f 0201 	mvn.w	r2, #1
 8006488:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800648a:	6878      	ldr	r0, [r7, #4]
 800648c:	f7fc fd8e 	bl	8002fac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	691b      	ldr	r3, [r3, #16]
 8006496:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800649a:	2b80      	cmp	r3, #128	; 0x80
 800649c:	d10e      	bne.n	80064bc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	68db      	ldr	r3, [r3, #12]
 80064a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064a8:	2b80      	cmp	r3, #128	; 0x80
 80064aa:	d107      	bne.n	80064bc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80064b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80064b6:	6878      	ldr	r0, [r7, #4]
 80064b8:	f000 fa7b 	bl	80069b2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	691b      	ldr	r3, [r3, #16]
 80064c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064c6:	2b40      	cmp	r3, #64	; 0x40
 80064c8:	d10e      	bne.n	80064e8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	68db      	ldr	r3, [r3, #12]
 80064d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064d4:	2b40      	cmp	r3, #64	; 0x40
 80064d6:	d107      	bne.n	80064e8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80064e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80064e2:	6878      	ldr	r0, [r7, #4]
 80064e4:	f000 f8fc 	bl	80066e0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	691b      	ldr	r3, [r3, #16]
 80064ee:	f003 0320 	and.w	r3, r3, #32
 80064f2:	2b20      	cmp	r3, #32
 80064f4:	d10e      	bne.n	8006514 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	68db      	ldr	r3, [r3, #12]
 80064fc:	f003 0320 	and.w	r3, r3, #32
 8006500:	2b20      	cmp	r3, #32
 8006502:	d107      	bne.n	8006514 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f06f 0220 	mvn.w	r2, #32
 800650c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800650e:	6878      	ldr	r0, [r7, #4]
 8006510:	f000 fa46 	bl	80069a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006514:	bf00      	nop
 8006516:	3708      	adds	r7, #8
 8006518:	46bd      	mov	sp, r7
 800651a:	bd80      	pop	{r7, pc}

0800651c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800651c:	b580      	push	{r7, lr}
 800651e:	b084      	sub	sp, #16
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
 8006524:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006526:	2300      	movs	r3, #0
 8006528:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006530:	2b01      	cmp	r3, #1
 8006532:	d101      	bne.n	8006538 <HAL_TIM_ConfigClockSource+0x1c>
 8006534:	2302      	movs	r3, #2
 8006536:	e0b4      	b.n	80066a2 <HAL_TIM_ConfigClockSource+0x186>
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2201      	movs	r2, #1
 800653c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2202      	movs	r2, #2
 8006544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	689b      	ldr	r3, [r3, #8]
 800654e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006550:	68bb      	ldr	r3, [r7, #8]
 8006552:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006556:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800655e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	68ba      	ldr	r2, [r7, #8]
 8006566:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006570:	d03e      	beq.n	80065f0 <HAL_TIM_ConfigClockSource+0xd4>
 8006572:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006576:	f200 8087 	bhi.w	8006688 <HAL_TIM_ConfigClockSource+0x16c>
 800657a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800657e:	f000 8086 	beq.w	800668e <HAL_TIM_ConfigClockSource+0x172>
 8006582:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006586:	d87f      	bhi.n	8006688 <HAL_TIM_ConfigClockSource+0x16c>
 8006588:	2b70      	cmp	r3, #112	; 0x70
 800658a:	d01a      	beq.n	80065c2 <HAL_TIM_ConfigClockSource+0xa6>
 800658c:	2b70      	cmp	r3, #112	; 0x70
 800658e:	d87b      	bhi.n	8006688 <HAL_TIM_ConfigClockSource+0x16c>
 8006590:	2b60      	cmp	r3, #96	; 0x60
 8006592:	d050      	beq.n	8006636 <HAL_TIM_ConfigClockSource+0x11a>
 8006594:	2b60      	cmp	r3, #96	; 0x60
 8006596:	d877      	bhi.n	8006688 <HAL_TIM_ConfigClockSource+0x16c>
 8006598:	2b50      	cmp	r3, #80	; 0x50
 800659a:	d03c      	beq.n	8006616 <HAL_TIM_ConfigClockSource+0xfa>
 800659c:	2b50      	cmp	r3, #80	; 0x50
 800659e:	d873      	bhi.n	8006688 <HAL_TIM_ConfigClockSource+0x16c>
 80065a0:	2b40      	cmp	r3, #64	; 0x40
 80065a2:	d058      	beq.n	8006656 <HAL_TIM_ConfigClockSource+0x13a>
 80065a4:	2b40      	cmp	r3, #64	; 0x40
 80065a6:	d86f      	bhi.n	8006688 <HAL_TIM_ConfigClockSource+0x16c>
 80065a8:	2b30      	cmp	r3, #48	; 0x30
 80065aa:	d064      	beq.n	8006676 <HAL_TIM_ConfigClockSource+0x15a>
 80065ac:	2b30      	cmp	r3, #48	; 0x30
 80065ae:	d86b      	bhi.n	8006688 <HAL_TIM_ConfigClockSource+0x16c>
 80065b0:	2b20      	cmp	r3, #32
 80065b2:	d060      	beq.n	8006676 <HAL_TIM_ConfigClockSource+0x15a>
 80065b4:	2b20      	cmp	r3, #32
 80065b6:	d867      	bhi.n	8006688 <HAL_TIM_ConfigClockSource+0x16c>
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d05c      	beq.n	8006676 <HAL_TIM_ConfigClockSource+0x15a>
 80065bc:	2b10      	cmp	r3, #16
 80065be:	d05a      	beq.n	8006676 <HAL_TIM_ConfigClockSource+0x15a>
 80065c0:	e062      	b.n	8006688 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80065d2:	f000 f968 	bl	80068a6 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	689b      	ldr	r3, [r3, #8]
 80065dc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80065de:	68bb      	ldr	r3, [r7, #8]
 80065e0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80065e4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	68ba      	ldr	r2, [r7, #8]
 80065ec:	609a      	str	r2, [r3, #8]
      break;
 80065ee:	e04f      	b.n	8006690 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006600:	f000 f951 	bl	80068a6 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	689a      	ldr	r2, [r3, #8]
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006612:	609a      	str	r2, [r3, #8]
      break;
 8006614:	e03c      	b.n	8006690 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006622:	461a      	mov	r2, r3
 8006624:	f000 f8c8 	bl	80067b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	2150      	movs	r1, #80	; 0x50
 800662e:	4618      	mov	r0, r3
 8006630:	f000 f91f 	bl	8006872 <TIM_ITRx_SetConfig>
      break;
 8006634:	e02c      	b.n	8006690 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006642:	461a      	mov	r2, r3
 8006644:	f000 f8e6 	bl	8006814 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	2160      	movs	r1, #96	; 0x60
 800664e:	4618      	mov	r0, r3
 8006650:	f000 f90f 	bl	8006872 <TIM_ITRx_SetConfig>
      break;
 8006654:	e01c      	b.n	8006690 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006662:	461a      	mov	r2, r3
 8006664:	f000 f8a8 	bl	80067b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	2140      	movs	r1, #64	; 0x40
 800666e:	4618      	mov	r0, r3
 8006670:	f000 f8ff 	bl	8006872 <TIM_ITRx_SetConfig>
      break;
 8006674:	e00c      	b.n	8006690 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681a      	ldr	r2, [r3, #0]
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	4619      	mov	r1, r3
 8006680:	4610      	mov	r0, r2
 8006682:	f000 f8f6 	bl	8006872 <TIM_ITRx_SetConfig>
      break;
 8006686:	e003      	b.n	8006690 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006688:	2301      	movs	r3, #1
 800668a:	73fb      	strb	r3, [r7, #15]
      break;
 800668c:	e000      	b.n	8006690 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800668e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2201      	movs	r2, #1
 8006694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2200      	movs	r2, #0
 800669c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80066a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80066a2:	4618      	mov	r0, r3
 80066a4:	3710      	adds	r7, #16
 80066a6:	46bd      	mov	sp, r7
 80066a8:	bd80      	pop	{r7, pc}

080066aa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80066aa:	b480      	push	{r7}
 80066ac:	b083      	sub	sp, #12
 80066ae:	af00      	add	r7, sp, #0
 80066b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80066b2:	bf00      	nop
 80066b4:	370c      	adds	r7, #12
 80066b6:	46bd      	mov	sp, r7
 80066b8:	bc80      	pop	{r7}
 80066ba:	4770      	bx	lr

080066bc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80066bc:	b480      	push	{r7}
 80066be:	b083      	sub	sp, #12
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80066c4:	bf00      	nop
 80066c6:	370c      	adds	r7, #12
 80066c8:	46bd      	mov	sp, r7
 80066ca:	bc80      	pop	{r7}
 80066cc:	4770      	bx	lr

080066ce <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80066ce:	b480      	push	{r7}
 80066d0:	b083      	sub	sp, #12
 80066d2:	af00      	add	r7, sp, #0
 80066d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80066d6:	bf00      	nop
 80066d8:	370c      	adds	r7, #12
 80066da:	46bd      	mov	sp, r7
 80066dc:	bc80      	pop	{r7}
 80066de:	4770      	bx	lr

080066e0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80066e0:	b480      	push	{r7}
 80066e2:	b083      	sub	sp, #12
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80066e8:	bf00      	nop
 80066ea:	370c      	adds	r7, #12
 80066ec:	46bd      	mov	sp, r7
 80066ee:	bc80      	pop	{r7}
 80066f0:	4770      	bx	lr
	...

080066f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80066f4:	b480      	push	{r7}
 80066f6:	b085      	sub	sp, #20
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
 80066fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	4a29      	ldr	r2, [pc, #164]	; (80067ac <TIM_Base_SetConfig+0xb8>)
 8006708:	4293      	cmp	r3, r2
 800670a:	d00b      	beq.n	8006724 <TIM_Base_SetConfig+0x30>
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006712:	d007      	beq.n	8006724 <TIM_Base_SetConfig+0x30>
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	4a26      	ldr	r2, [pc, #152]	; (80067b0 <TIM_Base_SetConfig+0xbc>)
 8006718:	4293      	cmp	r3, r2
 800671a:	d003      	beq.n	8006724 <TIM_Base_SetConfig+0x30>
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	4a25      	ldr	r2, [pc, #148]	; (80067b4 <TIM_Base_SetConfig+0xc0>)
 8006720:	4293      	cmp	r3, r2
 8006722:	d108      	bne.n	8006736 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800672a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	685b      	ldr	r3, [r3, #4]
 8006730:	68fa      	ldr	r2, [r7, #12]
 8006732:	4313      	orrs	r3, r2
 8006734:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	4a1c      	ldr	r2, [pc, #112]	; (80067ac <TIM_Base_SetConfig+0xb8>)
 800673a:	4293      	cmp	r3, r2
 800673c:	d00b      	beq.n	8006756 <TIM_Base_SetConfig+0x62>
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006744:	d007      	beq.n	8006756 <TIM_Base_SetConfig+0x62>
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	4a19      	ldr	r2, [pc, #100]	; (80067b0 <TIM_Base_SetConfig+0xbc>)
 800674a:	4293      	cmp	r3, r2
 800674c:	d003      	beq.n	8006756 <TIM_Base_SetConfig+0x62>
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	4a18      	ldr	r2, [pc, #96]	; (80067b4 <TIM_Base_SetConfig+0xc0>)
 8006752:	4293      	cmp	r3, r2
 8006754:	d108      	bne.n	8006768 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800675c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	68db      	ldr	r3, [r3, #12]
 8006762:	68fa      	ldr	r2, [r7, #12]
 8006764:	4313      	orrs	r3, r2
 8006766:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	695b      	ldr	r3, [r3, #20]
 8006772:	4313      	orrs	r3, r2
 8006774:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	68fa      	ldr	r2, [r7, #12]
 800677a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	689a      	ldr	r2, [r3, #8]
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	681a      	ldr	r2, [r3, #0]
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	4a07      	ldr	r2, [pc, #28]	; (80067ac <TIM_Base_SetConfig+0xb8>)
 8006790:	4293      	cmp	r3, r2
 8006792:	d103      	bne.n	800679c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	691a      	ldr	r2, [r3, #16]
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2201      	movs	r2, #1
 80067a0:	615a      	str	r2, [r3, #20]
}
 80067a2:	bf00      	nop
 80067a4:	3714      	adds	r7, #20
 80067a6:	46bd      	mov	sp, r7
 80067a8:	bc80      	pop	{r7}
 80067aa:	4770      	bx	lr
 80067ac:	40012c00 	.word	0x40012c00
 80067b0:	40000400 	.word	0x40000400
 80067b4:	40000800 	.word	0x40000800

080067b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80067b8:	b480      	push	{r7}
 80067ba:	b087      	sub	sp, #28
 80067bc:	af00      	add	r7, sp, #0
 80067be:	60f8      	str	r0, [r7, #12]
 80067c0:	60b9      	str	r1, [r7, #8]
 80067c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	6a1b      	ldr	r3, [r3, #32]
 80067c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	6a1b      	ldr	r3, [r3, #32]
 80067ce:	f023 0201 	bic.w	r2, r3, #1
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	699b      	ldr	r3, [r3, #24]
 80067da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80067dc:	693b      	ldr	r3, [r7, #16]
 80067de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80067e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	011b      	lsls	r3, r3, #4
 80067e8:	693a      	ldr	r2, [r7, #16]
 80067ea:	4313      	orrs	r3, r2
 80067ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80067ee:	697b      	ldr	r3, [r7, #20]
 80067f0:	f023 030a 	bic.w	r3, r3, #10
 80067f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80067f6:	697a      	ldr	r2, [r7, #20]
 80067f8:	68bb      	ldr	r3, [r7, #8]
 80067fa:	4313      	orrs	r3, r2
 80067fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	693a      	ldr	r2, [r7, #16]
 8006802:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	697a      	ldr	r2, [r7, #20]
 8006808:	621a      	str	r2, [r3, #32]
}
 800680a:	bf00      	nop
 800680c:	371c      	adds	r7, #28
 800680e:	46bd      	mov	sp, r7
 8006810:	bc80      	pop	{r7}
 8006812:	4770      	bx	lr

08006814 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006814:	b480      	push	{r7}
 8006816:	b087      	sub	sp, #28
 8006818:	af00      	add	r7, sp, #0
 800681a:	60f8      	str	r0, [r7, #12]
 800681c:	60b9      	str	r1, [r7, #8]
 800681e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	6a1b      	ldr	r3, [r3, #32]
 8006824:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	6a1b      	ldr	r3, [r3, #32]
 800682a:	f023 0210 	bic.w	r2, r3, #16
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	699b      	ldr	r3, [r3, #24]
 8006836:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006838:	693b      	ldr	r3, [r7, #16]
 800683a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800683e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	031b      	lsls	r3, r3, #12
 8006844:	693a      	ldr	r2, [r7, #16]
 8006846:	4313      	orrs	r3, r2
 8006848:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800684a:	697b      	ldr	r3, [r7, #20]
 800684c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006850:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006852:	68bb      	ldr	r3, [r7, #8]
 8006854:	011b      	lsls	r3, r3, #4
 8006856:	697a      	ldr	r2, [r7, #20]
 8006858:	4313      	orrs	r3, r2
 800685a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	693a      	ldr	r2, [r7, #16]
 8006860:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	697a      	ldr	r2, [r7, #20]
 8006866:	621a      	str	r2, [r3, #32]
}
 8006868:	bf00      	nop
 800686a:	371c      	adds	r7, #28
 800686c:	46bd      	mov	sp, r7
 800686e:	bc80      	pop	{r7}
 8006870:	4770      	bx	lr

08006872 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006872:	b480      	push	{r7}
 8006874:	b085      	sub	sp, #20
 8006876:	af00      	add	r7, sp, #0
 8006878:	6078      	str	r0, [r7, #4]
 800687a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	689b      	ldr	r3, [r3, #8]
 8006880:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006888:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800688a:	683a      	ldr	r2, [r7, #0]
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	4313      	orrs	r3, r2
 8006890:	f043 0307 	orr.w	r3, r3, #7
 8006894:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	68fa      	ldr	r2, [r7, #12]
 800689a:	609a      	str	r2, [r3, #8]
}
 800689c:	bf00      	nop
 800689e:	3714      	adds	r7, #20
 80068a0:	46bd      	mov	sp, r7
 80068a2:	bc80      	pop	{r7}
 80068a4:	4770      	bx	lr

080068a6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80068a6:	b480      	push	{r7}
 80068a8:	b087      	sub	sp, #28
 80068aa:	af00      	add	r7, sp, #0
 80068ac:	60f8      	str	r0, [r7, #12]
 80068ae:	60b9      	str	r1, [r7, #8]
 80068b0:	607a      	str	r2, [r7, #4]
 80068b2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	689b      	ldr	r3, [r3, #8]
 80068b8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80068ba:	697b      	ldr	r3, [r7, #20]
 80068bc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80068c0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	021a      	lsls	r2, r3, #8
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	431a      	orrs	r2, r3
 80068ca:	68bb      	ldr	r3, [r7, #8]
 80068cc:	4313      	orrs	r3, r2
 80068ce:	697a      	ldr	r2, [r7, #20]
 80068d0:	4313      	orrs	r3, r2
 80068d2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	697a      	ldr	r2, [r7, #20]
 80068d8:	609a      	str	r2, [r3, #8]
}
 80068da:	bf00      	nop
 80068dc:	371c      	adds	r7, #28
 80068de:	46bd      	mov	sp, r7
 80068e0:	bc80      	pop	{r7}
 80068e2:	4770      	bx	lr

080068e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80068e4:	b480      	push	{r7}
 80068e6:	b085      	sub	sp, #20
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
 80068ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80068f4:	2b01      	cmp	r3, #1
 80068f6:	d101      	bne.n	80068fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80068f8:	2302      	movs	r3, #2
 80068fa:	e046      	b.n	800698a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2201      	movs	r2, #1
 8006900:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2202      	movs	r2, #2
 8006908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	685b      	ldr	r3, [r3, #4]
 8006912:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	689b      	ldr	r3, [r3, #8]
 800691a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006922:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	68fa      	ldr	r2, [r7, #12]
 800692a:	4313      	orrs	r3, r2
 800692c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	68fa      	ldr	r2, [r7, #12]
 8006934:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	4a16      	ldr	r2, [pc, #88]	; (8006994 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800693c:	4293      	cmp	r3, r2
 800693e:	d00e      	beq.n	800695e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006948:	d009      	beq.n	800695e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	4a12      	ldr	r2, [pc, #72]	; (8006998 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006950:	4293      	cmp	r3, r2
 8006952:	d004      	beq.n	800695e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	4a10      	ldr	r2, [pc, #64]	; (800699c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800695a:	4293      	cmp	r3, r2
 800695c:	d10c      	bne.n	8006978 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800695e:	68bb      	ldr	r3, [r7, #8]
 8006960:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006964:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	685b      	ldr	r3, [r3, #4]
 800696a:	68ba      	ldr	r2, [r7, #8]
 800696c:	4313      	orrs	r3, r2
 800696e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	68ba      	ldr	r2, [r7, #8]
 8006976:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2201      	movs	r2, #1
 800697c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2200      	movs	r2, #0
 8006984:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006988:	2300      	movs	r3, #0
}
 800698a:	4618      	mov	r0, r3
 800698c:	3714      	adds	r7, #20
 800698e:	46bd      	mov	sp, r7
 8006990:	bc80      	pop	{r7}
 8006992:	4770      	bx	lr
 8006994:	40012c00 	.word	0x40012c00
 8006998:	40000400 	.word	0x40000400
 800699c:	40000800 	.word	0x40000800

080069a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80069a0:	b480      	push	{r7}
 80069a2:	b083      	sub	sp, #12
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80069a8:	bf00      	nop
 80069aa:	370c      	adds	r7, #12
 80069ac:	46bd      	mov	sp, r7
 80069ae:	bc80      	pop	{r7}
 80069b0:	4770      	bx	lr

080069b2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80069b2:	b480      	push	{r7}
 80069b4:	b083      	sub	sp, #12
 80069b6:	af00      	add	r7, sp, #0
 80069b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80069ba:	bf00      	nop
 80069bc:	370c      	adds	r7, #12
 80069be:	46bd      	mov	sp, r7
 80069c0:	bc80      	pop	{r7}
 80069c2:	4770      	bx	lr

080069c4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b082      	sub	sp, #8
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d101      	bne.n	80069d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80069d2:	2301      	movs	r3, #1
 80069d4:	e042      	b.n	8006a5c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80069dc:	b2db      	uxtb	r3, r3
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d106      	bne.n	80069f0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	2200      	movs	r2, #0
 80069e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80069ea:	6878      	ldr	r0, [r7, #4]
 80069ec:	f7fc f958 	bl	8002ca0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2224      	movs	r2, #36	; 0x24
 80069f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	68da      	ldr	r2, [r3, #12]
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006a06:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006a08:	6878      	ldr	r0, [r7, #4]
 8006a0a:	f000 f91d 	bl	8006c48 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	691a      	ldr	r2, [r3, #16]
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006a1c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	695a      	ldr	r2, [r3, #20]
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006a2c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	68da      	ldr	r2, [r3, #12]
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006a3c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	2200      	movs	r2, #0
 8006a42:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2220      	movs	r2, #32
 8006a48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2220      	movs	r2, #32
 8006a50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2200      	movs	r2, #0
 8006a58:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006a5a:	2300      	movs	r3, #0
}
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	3708      	adds	r7, #8
 8006a60:	46bd      	mov	sp, r7
 8006a62:	bd80      	pop	{r7, pc}

08006a64 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b08a      	sub	sp, #40	; 0x28
 8006a68:	af02      	add	r7, sp, #8
 8006a6a:	60f8      	str	r0, [r7, #12]
 8006a6c:	60b9      	str	r1, [r7, #8]
 8006a6e:	603b      	str	r3, [r7, #0]
 8006a70:	4613      	mov	r3, r2
 8006a72:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006a74:	2300      	movs	r3, #0
 8006a76:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006a7e:	b2db      	uxtb	r3, r3
 8006a80:	2b20      	cmp	r3, #32
 8006a82:	d16d      	bne.n	8006b60 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8006a84:	68bb      	ldr	r3, [r7, #8]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d002      	beq.n	8006a90 <HAL_UART_Transmit+0x2c>
 8006a8a:	88fb      	ldrh	r3, [r7, #6]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d101      	bne.n	8006a94 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006a90:	2301      	movs	r3, #1
 8006a92:	e066      	b.n	8006b62 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	2200      	movs	r2, #0
 8006a98:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	2221      	movs	r2, #33	; 0x21
 8006a9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006aa2:	f7fc fb2d 	bl	8003100 <HAL_GetTick>
 8006aa6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	88fa      	ldrh	r2, [r7, #6]
 8006aac:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	88fa      	ldrh	r2, [r7, #6]
 8006ab2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	689b      	ldr	r3, [r3, #8]
 8006ab8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006abc:	d108      	bne.n	8006ad0 <HAL_UART_Transmit+0x6c>
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	691b      	ldr	r3, [r3, #16]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d104      	bne.n	8006ad0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006aca:	68bb      	ldr	r3, [r7, #8]
 8006acc:	61bb      	str	r3, [r7, #24]
 8006ace:	e003      	b.n	8006ad8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006ad0:	68bb      	ldr	r3, [r7, #8]
 8006ad2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006ad8:	e02a      	b.n	8006b30 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	9300      	str	r3, [sp, #0]
 8006ade:	697b      	ldr	r3, [r7, #20]
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	2180      	movs	r1, #128	; 0x80
 8006ae4:	68f8      	ldr	r0, [r7, #12]
 8006ae6:	f000 f840 	bl	8006b6a <UART_WaitOnFlagUntilTimeout>
 8006aea:	4603      	mov	r3, r0
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d001      	beq.n	8006af4 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8006af0:	2303      	movs	r3, #3
 8006af2:	e036      	b.n	8006b62 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8006af4:	69fb      	ldr	r3, [r7, #28]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d10b      	bne.n	8006b12 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006afa:	69bb      	ldr	r3, [r7, #24]
 8006afc:	881b      	ldrh	r3, [r3, #0]
 8006afe:	461a      	mov	r2, r3
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006b08:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006b0a:	69bb      	ldr	r3, [r7, #24]
 8006b0c:	3302      	adds	r3, #2
 8006b0e:	61bb      	str	r3, [r7, #24]
 8006b10:	e007      	b.n	8006b22 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006b12:	69fb      	ldr	r3, [r7, #28]
 8006b14:	781a      	ldrb	r2, [r3, #0]
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006b1c:	69fb      	ldr	r3, [r7, #28]
 8006b1e:	3301      	adds	r3, #1
 8006b20:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006b26:	b29b      	uxth	r3, r3
 8006b28:	3b01      	subs	r3, #1
 8006b2a:	b29a      	uxth	r2, r3
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006b34:	b29b      	uxth	r3, r3
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d1cf      	bne.n	8006ada <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	9300      	str	r3, [sp, #0]
 8006b3e:	697b      	ldr	r3, [r7, #20]
 8006b40:	2200      	movs	r2, #0
 8006b42:	2140      	movs	r1, #64	; 0x40
 8006b44:	68f8      	ldr	r0, [r7, #12]
 8006b46:	f000 f810 	bl	8006b6a <UART_WaitOnFlagUntilTimeout>
 8006b4a:	4603      	mov	r3, r0
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d001      	beq.n	8006b54 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8006b50:	2303      	movs	r3, #3
 8006b52:	e006      	b.n	8006b62 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	2220      	movs	r2, #32
 8006b58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	e000      	b.n	8006b62 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8006b60:	2302      	movs	r3, #2
  }
}
 8006b62:	4618      	mov	r0, r3
 8006b64:	3720      	adds	r7, #32
 8006b66:	46bd      	mov	sp, r7
 8006b68:	bd80      	pop	{r7, pc}

08006b6a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006b6a:	b580      	push	{r7, lr}
 8006b6c:	b090      	sub	sp, #64	; 0x40
 8006b6e:	af00      	add	r7, sp, #0
 8006b70:	60f8      	str	r0, [r7, #12]
 8006b72:	60b9      	str	r1, [r7, #8]
 8006b74:	603b      	str	r3, [r7, #0]
 8006b76:	4613      	mov	r3, r2
 8006b78:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b7a:	e050      	b.n	8006c1e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b82:	d04c      	beq.n	8006c1e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006b84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d007      	beq.n	8006b9a <UART_WaitOnFlagUntilTimeout+0x30>
 8006b8a:	f7fc fab9 	bl	8003100 <HAL_GetTick>
 8006b8e:	4602      	mov	r2, r0
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	1ad3      	subs	r3, r2, r3
 8006b94:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006b96:	429a      	cmp	r2, r3
 8006b98:	d241      	bcs.n	8006c1e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	330c      	adds	r3, #12
 8006ba0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ba4:	e853 3f00 	ldrex	r3, [r3]
 8006ba8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bac:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006bb0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	330c      	adds	r3, #12
 8006bb8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006bba:	637a      	str	r2, [r7, #52]	; 0x34
 8006bbc:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bbe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006bc0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006bc2:	e841 2300 	strex	r3, r2, [r1]
 8006bc6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006bc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d1e5      	bne.n	8006b9a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	3314      	adds	r3, #20
 8006bd4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bd6:	697b      	ldr	r3, [r7, #20]
 8006bd8:	e853 3f00 	ldrex	r3, [r3]
 8006bdc:	613b      	str	r3, [r7, #16]
   return(result);
 8006bde:	693b      	ldr	r3, [r7, #16]
 8006be0:	f023 0301 	bic.w	r3, r3, #1
 8006be4:	63bb      	str	r3, [r7, #56]	; 0x38
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	3314      	adds	r3, #20
 8006bec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006bee:	623a      	str	r2, [r7, #32]
 8006bf0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bf2:	69f9      	ldr	r1, [r7, #28]
 8006bf4:	6a3a      	ldr	r2, [r7, #32]
 8006bf6:	e841 2300 	strex	r3, r2, [r1]
 8006bfa:	61bb      	str	r3, [r7, #24]
   return(result);
 8006bfc:	69bb      	ldr	r3, [r7, #24]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d1e5      	bne.n	8006bce <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	2220      	movs	r2, #32
 8006c06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	2220      	movs	r2, #32
 8006c0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	2200      	movs	r2, #0
 8006c16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8006c1a:	2303      	movs	r3, #3
 8006c1c:	e00f      	b.n	8006c3e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	681a      	ldr	r2, [r3, #0]
 8006c24:	68bb      	ldr	r3, [r7, #8]
 8006c26:	4013      	ands	r3, r2
 8006c28:	68ba      	ldr	r2, [r7, #8]
 8006c2a:	429a      	cmp	r2, r3
 8006c2c:	bf0c      	ite	eq
 8006c2e:	2301      	moveq	r3, #1
 8006c30:	2300      	movne	r3, #0
 8006c32:	b2db      	uxtb	r3, r3
 8006c34:	461a      	mov	r2, r3
 8006c36:	79fb      	ldrb	r3, [r7, #7]
 8006c38:	429a      	cmp	r2, r3
 8006c3a:	d09f      	beq.n	8006b7c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006c3c:	2300      	movs	r3, #0
}
 8006c3e:	4618      	mov	r0, r3
 8006c40:	3740      	adds	r7, #64	; 0x40
 8006c42:	46bd      	mov	sp, r7
 8006c44:	bd80      	pop	{r7, pc}
	...

08006c48 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b084      	sub	sp, #16
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	691b      	ldr	r3, [r3, #16]
 8006c56:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	68da      	ldr	r2, [r3, #12]
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	430a      	orrs	r2, r1
 8006c64:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	689a      	ldr	r2, [r3, #8]
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	691b      	ldr	r3, [r3, #16]
 8006c6e:	431a      	orrs	r2, r3
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	695b      	ldr	r3, [r3, #20]
 8006c74:	4313      	orrs	r3, r2
 8006c76:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	68db      	ldr	r3, [r3, #12]
 8006c7e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8006c82:	f023 030c 	bic.w	r3, r3, #12
 8006c86:	687a      	ldr	r2, [r7, #4]
 8006c88:	6812      	ldr	r2, [r2, #0]
 8006c8a:	68b9      	ldr	r1, [r7, #8]
 8006c8c:	430b      	orrs	r3, r1
 8006c8e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	695b      	ldr	r3, [r3, #20]
 8006c96:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	699a      	ldr	r2, [r3, #24]
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	430a      	orrs	r2, r1
 8006ca4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	4a2c      	ldr	r2, [pc, #176]	; (8006d5c <UART_SetConfig+0x114>)
 8006cac:	4293      	cmp	r3, r2
 8006cae:	d103      	bne.n	8006cb8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006cb0:	f7ff f9a2 	bl	8005ff8 <HAL_RCC_GetPCLK2Freq>
 8006cb4:	60f8      	str	r0, [r7, #12]
 8006cb6:	e002      	b.n	8006cbe <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006cb8:	f7ff f98a 	bl	8005fd0 <HAL_RCC_GetPCLK1Freq>
 8006cbc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006cbe:	68fa      	ldr	r2, [r7, #12]
 8006cc0:	4613      	mov	r3, r2
 8006cc2:	009b      	lsls	r3, r3, #2
 8006cc4:	4413      	add	r3, r2
 8006cc6:	009a      	lsls	r2, r3, #2
 8006cc8:	441a      	add	r2, r3
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	685b      	ldr	r3, [r3, #4]
 8006cce:	009b      	lsls	r3, r3, #2
 8006cd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cd4:	4a22      	ldr	r2, [pc, #136]	; (8006d60 <UART_SetConfig+0x118>)
 8006cd6:	fba2 2303 	umull	r2, r3, r2, r3
 8006cda:	095b      	lsrs	r3, r3, #5
 8006cdc:	0119      	lsls	r1, r3, #4
 8006cde:	68fa      	ldr	r2, [r7, #12]
 8006ce0:	4613      	mov	r3, r2
 8006ce2:	009b      	lsls	r3, r3, #2
 8006ce4:	4413      	add	r3, r2
 8006ce6:	009a      	lsls	r2, r3, #2
 8006ce8:	441a      	add	r2, r3
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	685b      	ldr	r3, [r3, #4]
 8006cee:	009b      	lsls	r3, r3, #2
 8006cf0:	fbb2 f2f3 	udiv	r2, r2, r3
 8006cf4:	4b1a      	ldr	r3, [pc, #104]	; (8006d60 <UART_SetConfig+0x118>)
 8006cf6:	fba3 0302 	umull	r0, r3, r3, r2
 8006cfa:	095b      	lsrs	r3, r3, #5
 8006cfc:	2064      	movs	r0, #100	; 0x64
 8006cfe:	fb00 f303 	mul.w	r3, r0, r3
 8006d02:	1ad3      	subs	r3, r2, r3
 8006d04:	011b      	lsls	r3, r3, #4
 8006d06:	3332      	adds	r3, #50	; 0x32
 8006d08:	4a15      	ldr	r2, [pc, #84]	; (8006d60 <UART_SetConfig+0x118>)
 8006d0a:	fba2 2303 	umull	r2, r3, r2, r3
 8006d0e:	095b      	lsrs	r3, r3, #5
 8006d10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006d14:	4419      	add	r1, r3
 8006d16:	68fa      	ldr	r2, [r7, #12]
 8006d18:	4613      	mov	r3, r2
 8006d1a:	009b      	lsls	r3, r3, #2
 8006d1c:	4413      	add	r3, r2
 8006d1e:	009a      	lsls	r2, r3, #2
 8006d20:	441a      	add	r2, r3
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	685b      	ldr	r3, [r3, #4]
 8006d26:	009b      	lsls	r3, r3, #2
 8006d28:	fbb2 f2f3 	udiv	r2, r2, r3
 8006d2c:	4b0c      	ldr	r3, [pc, #48]	; (8006d60 <UART_SetConfig+0x118>)
 8006d2e:	fba3 0302 	umull	r0, r3, r3, r2
 8006d32:	095b      	lsrs	r3, r3, #5
 8006d34:	2064      	movs	r0, #100	; 0x64
 8006d36:	fb00 f303 	mul.w	r3, r0, r3
 8006d3a:	1ad3      	subs	r3, r2, r3
 8006d3c:	011b      	lsls	r3, r3, #4
 8006d3e:	3332      	adds	r3, #50	; 0x32
 8006d40:	4a07      	ldr	r2, [pc, #28]	; (8006d60 <UART_SetConfig+0x118>)
 8006d42:	fba2 2303 	umull	r2, r3, r2, r3
 8006d46:	095b      	lsrs	r3, r3, #5
 8006d48:	f003 020f 	and.w	r2, r3, #15
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	440a      	add	r2, r1
 8006d52:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006d54:	bf00      	nop
 8006d56:	3710      	adds	r7, #16
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	bd80      	pop	{r7, pc}
 8006d5c:	40013800 	.word	0x40013800
 8006d60:	51eb851f 	.word	0x51eb851f

08006d64 <__cvt>:
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d6a:	461f      	mov	r7, r3
 8006d6c:	bfbb      	ittet	lt
 8006d6e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8006d72:	461f      	movlt	r7, r3
 8006d74:	2300      	movge	r3, #0
 8006d76:	232d      	movlt	r3, #45	; 0x2d
 8006d78:	b088      	sub	sp, #32
 8006d7a:	4614      	mov	r4, r2
 8006d7c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006d7e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8006d80:	7013      	strb	r3, [r2, #0]
 8006d82:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006d84:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8006d88:	f023 0820 	bic.w	r8, r3, #32
 8006d8c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006d90:	d005      	beq.n	8006d9e <__cvt+0x3a>
 8006d92:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006d96:	d100      	bne.n	8006d9a <__cvt+0x36>
 8006d98:	3501      	adds	r5, #1
 8006d9a:	2302      	movs	r3, #2
 8006d9c:	e000      	b.n	8006da0 <__cvt+0x3c>
 8006d9e:	2303      	movs	r3, #3
 8006da0:	aa07      	add	r2, sp, #28
 8006da2:	9204      	str	r2, [sp, #16]
 8006da4:	aa06      	add	r2, sp, #24
 8006da6:	e9cd a202 	strd	sl, r2, [sp, #8]
 8006daa:	e9cd 3500 	strd	r3, r5, [sp]
 8006dae:	4622      	mov	r2, r4
 8006db0:	463b      	mov	r3, r7
 8006db2:	f001 f975 	bl	80080a0 <_dtoa_r>
 8006db6:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006dba:	4606      	mov	r6, r0
 8006dbc:	d102      	bne.n	8006dc4 <__cvt+0x60>
 8006dbe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006dc0:	07db      	lsls	r3, r3, #31
 8006dc2:	d522      	bpl.n	8006e0a <__cvt+0xa6>
 8006dc4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006dc8:	eb06 0905 	add.w	r9, r6, r5
 8006dcc:	d110      	bne.n	8006df0 <__cvt+0x8c>
 8006dce:	7833      	ldrb	r3, [r6, #0]
 8006dd0:	2b30      	cmp	r3, #48	; 0x30
 8006dd2:	d10a      	bne.n	8006dea <__cvt+0x86>
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	4620      	mov	r0, r4
 8006dda:	4639      	mov	r1, r7
 8006ddc:	f7f9 fde4 	bl	80009a8 <__aeabi_dcmpeq>
 8006de0:	b918      	cbnz	r0, 8006dea <__cvt+0x86>
 8006de2:	f1c5 0501 	rsb	r5, r5, #1
 8006de6:	f8ca 5000 	str.w	r5, [sl]
 8006dea:	f8da 3000 	ldr.w	r3, [sl]
 8006dee:	4499      	add	r9, r3
 8006df0:	2200      	movs	r2, #0
 8006df2:	2300      	movs	r3, #0
 8006df4:	4620      	mov	r0, r4
 8006df6:	4639      	mov	r1, r7
 8006df8:	f7f9 fdd6 	bl	80009a8 <__aeabi_dcmpeq>
 8006dfc:	b108      	cbz	r0, 8006e02 <__cvt+0x9e>
 8006dfe:	f8cd 901c 	str.w	r9, [sp, #28]
 8006e02:	2230      	movs	r2, #48	; 0x30
 8006e04:	9b07      	ldr	r3, [sp, #28]
 8006e06:	454b      	cmp	r3, r9
 8006e08:	d307      	bcc.n	8006e1a <__cvt+0xb6>
 8006e0a:	4630      	mov	r0, r6
 8006e0c:	9b07      	ldr	r3, [sp, #28]
 8006e0e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006e10:	1b9b      	subs	r3, r3, r6
 8006e12:	6013      	str	r3, [r2, #0]
 8006e14:	b008      	add	sp, #32
 8006e16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e1a:	1c59      	adds	r1, r3, #1
 8006e1c:	9107      	str	r1, [sp, #28]
 8006e1e:	701a      	strb	r2, [r3, #0]
 8006e20:	e7f0      	b.n	8006e04 <__cvt+0xa0>

08006e22 <__exponent>:
 8006e22:	4603      	mov	r3, r0
 8006e24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006e26:	2900      	cmp	r1, #0
 8006e28:	f803 2b02 	strb.w	r2, [r3], #2
 8006e2c:	bfb6      	itet	lt
 8006e2e:	222d      	movlt	r2, #45	; 0x2d
 8006e30:	222b      	movge	r2, #43	; 0x2b
 8006e32:	4249      	neglt	r1, r1
 8006e34:	2909      	cmp	r1, #9
 8006e36:	7042      	strb	r2, [r0, #1]
 8006e38:	dd2a      	ble.n	8006e90 <__exponent+0x6e>
 8006e3a:	f10d 0207 	add.w	r2, sp, #7
 8006e3e:	4617      	mov	r7, r2
 8006e40:	260a      	movs	r6, #10
 8006e42:	fb91 f5f6 	sdiv	r5, r1, r6
 8006e46:	4694      	mov	ip, r2
 8006e48:	fb06 1415 	mls	r4, r6, r5, r1
 8006e4c:	3430      	adds	r4, #48	; 0x30
 8006e4e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8006e52:	460c      	mov	r4, r1
 8006e54:	2c63      	cmp	r4, #99	; 0x63
 8006e56:	4629      	mov	r1, r5
 8006e58:	f102 32ff 	add.w	r2, r2, #4294967295
 8006e5c:	dcf1      	bgt.n	8006e42 <__exponent+0x20>
 8006e5e:	3130      	adds	r1, #48	; 0x30
 8006e60:	f1ac 0402 	sub.w	r4, ip, #2
 8006e64:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006e68:	4622      	mov	r2, r4
 8006e6a:	1c41      	adds	r1, r0, #1
 8006e6c:	42ba      	cmp	r2, r7
 8006e6e:	d30a      	bcc.n	8006e86 <__exponent+0x64>
 8006e70:	f10d 0209 	add.w	r2, sp, #9
 8006e74:	eba2 020c 	sub.w	r2, r2, ip
 8006e78:	42bc      	cmp	r4, r7
 8006e7a:	bf88      	it	hi
 8006e7c:	2200      	movhi	r2, #0
 8006e7e:	4413      	add	r3, r2
 8006e80:	1a18      	subs	r0, r3, r0
 8006e82:	b003      	add	sp, #12
 8006e84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e86:	f812 5b01 	ldrb.w	r5, [r2], #1
 8006e8a:	f801 5f01 	strb.w	r5, [r1, #1]!
 8006e8e:	e7ed      	b.n	8006e6c <__exponent+0x4a>
 8006e90:	2330      	movs	r3, #48	; 0x30
 8006e92:	3130      	adds	r1, #48	; 0x30
 8006e94:	7083      	strb	r3, [r0, #2]
 8006e96:	70c1      	strb	r1, [r0, #3]
 8006e98:	1d03      	adds	r3, r0, #4
 8006e9a:	e7f1      	b.n	8006e80 <__exponent+0x5e>

08006e9c <_printf_float>:
 8006e9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ea0:	b091      	sub	sp, #68	; 0x44
 8006ea2:	460c      	mov	r4, r1
 8006ea4:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8006ea8:	4616      	mov	r6, r2
 8006eaa:	461f      	mov	r7, r3
 8006eac:	4605      	mov	r5, r0
 8006eae:	f000 ffe3 	bl	8007e78 <_localeconv_r>
 8006eb2:	6803      	ldr	r3, [r0, #0]
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	9309      	str	r3, [sp, #36]	; 0x24
 8006eb8:	f7f9 f94a 	bl	8000150 <strlen>
 8006ebc:	2300      	movs	r3, #0
 8006ebe:	930e      	str	r3, [sp, #56]	; 0x38
 8006ec0:	f8d8 3000 	ldr.w	r3, [r8]
 8006ec4:	900a      	str	r0, [sp, #40]	; 0x28
 8006ec6:	3307      	adds	r3, #7
 8006ec8:	f023 0307 	bic.w	r3, r3, #7
 8006ecc:	f103 0208 	add.w	r2, r3, #8
 8006ed0:	f894 9018 	ldrb.w	r9, [r4, #24]
 8006ed4:	f8d4 b000 	ldr.w	fp, [r4]
 8006ed8:	f8c8 2000 	str.w	r2, [r8]
 8006edc:	e9d3 a800 	ldrd	sl, r8, [r3]
 8006ee0:	4652      	mov	r2, sl
 8006ee2:	4643      	mov	r3, r8
 8006ee4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006ee8:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8006eec:	930b      	str	r3, [sp, #44]	; 0x2c
 8006eee:	f04f 32ff 	mov.w	r2, #4294967295
 8006ef2:	4650      	mov	r0, sl
 8006ef4:	4b9c      	ldr	r3, [pc, #624]	; (8007168 <_printf_float+0x2cc>)
 8006ef6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006ef8:	f7f9 fd88 	bl	8000a0c <__aeabi_dcmpun>
 8006efc:	bb70      	cbnz	r0, 8006f5c <_printf_float+0xc0>
 8006efe:	f04f 32ff 	mov.w	r2, #4294967295
 8006f02:	4650      	mov	r0, sl
 8006f04:	4b98      	ldr	r3, [pc, #608]	; (8007168 <_printf_float+0x2cc>)
 8006f06:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006f08:	f7f9 fd62 	bl	80009d0 <__aeabi_dcmple>
 8006f0c:	bb30      	cbnz	r0, 8006f5c <_printf_float+0xc0>
 8006f0e:	2200      	movs	r2, #0
 8006f10:	2300      	movs	r3, #0
 8006f12:	4650      	mov	r0, sl
 8006f14:	4641      	mov	r1, r8
 8006f16:	f7f9 fd51 	bl	80009bc <__aeabi_dcmplt>
 8006f1a:	b110      	cbz	r0, 8006f22 <_printf_float+0x86>
 8006f1c:	232d      	movs	r3, #45	; 0x2d
 8006f1e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006f22:	4a92      	ldr	r2, [pc, #584]	; (800716c <_printf_float+0x2d0>)
 8006f24:	4b92      	ldr	r3, [pc, #584]	; (8007170 <_printf_float+0x2d4>)
 8006f26:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8006f2a:	bf94      	ite	ls
 8006f2c:	4690      	movls	r8, r2
 8006f2e:	4698      	movhi	r8, r3
 8006f30:	2303      	movs	r3, #3
 8006f32:	f04f 0a00 	mov.w	sl, #0
 8006f36:	6123      	str	r3, [r4, #16]
 8006f38:	f02b 0304 	bic.w	r3, fp, #4
 8006f3c:	6023      	str	r3, [r4, #0]
 8006f3e:	4633      	mov	r3, r6
 8006f40:	4621      	mov	r1, r4
 8006f42:	4628      	mov	r0, r5
 8006f44:	9700      	str	r7, [sp, #0]
 8006f46:	aa0f      	add	r2, sp, #60	; 0x3c
 8006f48:	f000 f9d6 	bl	80072f8 <_printf_common>
 8006f4c:	3001      	adds	r0, #1
 8006f4e:	f040 8090 	bne.w	8007072 <_printf_float+0x1d6>
 8006f52:	f04f 30ff 	mov.w	r0, #4294967295
 8006f56:	b011      	add	sp, #68	; 0x44
 8006f58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f5c:	4652      	mov	r2, sl
 8006f5e:	4643      	mov	r3, r8
 8006f60:	4650      	mov	r0, sl
 8006f62:	4641      	mov	r1, r8
 8006f64:	f7f9 fd52 	bl	8000a0c <__aeabi_dcmpun>
 8006f68:	b148      	cbz	r0, 8006f7e <_printf_float+0xe2>
 8006f6a:	f1b8 0f00 	cmp.w	r8, #0
 8006f6e:	bfb8      	it	lt
 8006f70:	232d      	movlt	r3, #45	; 0x2d
 8006f72:	4a80      	ldr	r2, [pc, #512]	; (8007174 <_printf_float+0x2d8>)
 8006f74:	bfb8      	it	lt
 8006f76:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006f7a:	4b7f      	ldr	r3, [pc, #508]	; (8007178 <_printf_float+0x2dc>)
 8006f7c:	e7d3      	b.n	8006f26 <_printf_float+0x8a>
 8006f7e:	6863      	ldr	r3, [r4, #4]
 8006f80:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8006f84:	1c5a      	adds	r2, r3, #1
 8006f86:	d142      	bne.n	800700e <_printf_float+0x172>
 8006f88:	2306      	movs	r3, #6
 8006f8a:	6063      	str	r3, [r4, #4]
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	9206      	str	r2, [sp, #24]
 8006f90:	aa0e      	add	r2, sp, #56	; 0x38
 8006f92:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8006f96:	aa0d      	add	r2, sp, #52	; 0x34
 8006f98:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8006f9c:	9203      	str	r2, [sp, #12]
 8006f9e:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8006fa2:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8006fa6:	6023      	str	r3, [r4, #0]
 8006fa8:	6863      	ldr	r3, [r4, #4]
 8006faa:	4652      	mov	r2, sl
 8006fac:	9300      	str	r3, [sp, #0]
 8006fae:	4628      	mov	r0, r5
 8006fb0:	4643      	mov	r3, r8
 8006fb2:	910b      	str	r1, [sp, #44]	; 0x2c
 8006fb4:	f7ff fed6 	bl	8006d64 <__cvt>
 8006fb8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006fba:	4680      	mov	r8, r0
 8006fbc:	2947      	cmp	r1, #71	; 0x47
 8006fbe:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006fc0:	d108      	bne.n	8006fd4 <_printf_float+0x138>
 8006fc2:	1cc8      	adds	r0, r1, #3
 8006fc4:	db02      	blt.n	8006fcc <_printf_float+0x130>
 8006fc6:	6863      	ldr	r3, [r4, #4]
 8006fc8:	4299      	cmp	r1, r3
 8006fca:	dd40      	ble.n	800704e <_printf_float+0x1b2>
 8006fcc:	f1a9 0902 	sub.w	r9, r9, #2
 8006fd0:	fa5f f989 	uxtb.w	r9, r9
 8006fd4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006fd8:	d81f      	bhi.n	800701a <_printf_float+0x17e>
 8006fda:	464a      	mov	r2, r9
 8006fdc:	3901      	subs	r1, #1
 8006fde:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006fe2:	910d      	str	r1, [sp, #52]	; 0x34
 8006fe4:	f7ff ff1d 	bl	8006e22 <__exponent>
 8006fe8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006fea:	4682      	mov	sl, r0
 8006fec:	1813      	adds	r3, r2, r0
 8006fee:	2a01      	cmp	r2, #1
 8006ff0:	6123      	str	r3, [r4, #16]
 8006ff2:	dc02      	bgt.n	8006ffa <_printf_float+0x15e>
 8006ff4:	6822      	ldr	r2, [r4, #0]
 8006ff6:	07d2      	lsls	r2, r2, #31
 8006ff8:	d501      	bpl.n	8006ffe <_printf_float+0x162>
 8006ffa:	3301      	adds	r3, #1
 8006ffc:	6123      	str	r3, [r4, #16]
 8006ffe:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8007002:	2b00      	cmp	r3, #0
 8007004:	d09b      	beq.n	8006f3e <_printf_float+0xa2>
 8007006:	232d      	movs	r3, #45	; 0x2d
 8007008:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800700c:	e797      	b.n	8006f3e <_printf_float+0xa2>
 800700e:	2947      	cmp	r1, #71	; 0x47
 8007010:	d1bc      	bne.n	8006f8c <_printf_float+0xf0>
 8007012:	2b00      	cmp	r3, #0
 8007014:	d1ba      	bne.n	8006f8c <_printf_float+0xf0>
 8007016:	2301      	movs	r3, #1
 8007018:	e7b7      	b.n	8006f8a <_printf_float+0xee>
 800701a:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800701e:	d118      	bne.n	8007052 <_printf_float+0x1b6>
 8007020:	2900      	cmp	r1, #0
 8007022:	6863      	ldr	r3, [r4, #4]
 8007024:	dd0b      	ble.n	800703e <_printf_float+0x1a2>
 8007026:	6121      	str	r1, [r4, #16]
 8007028:	b913      	cbnz	r3, 8007030 <_printf_float+0x194>
 800702a:	6822      	ldr	r2, [r4, #0]
 800702c:	07d0      	lsls	r0, r2, #31
 800702e:	d502      	bpl.n	8007036 <_printf_float+0x19a>
 8007030:	3301      	adds	r3, #1
 8007032:	440b      	add	r3, r1
 8007034:	6123      	str	r3, [r4, #16]
 8007036:	f04f 0a00 	mov.w	sl, #0
 800703a:	65a1      	str	r1, [r4, #88]	; 0x58
 800703c:	e7df      	b.n	8006ffe <_printf_float+0x162>
 800703e:	b913      	cbnz	r3, 8007046 <_printf_float+0x1aa>
 8007040:	6822      	ldr	r2, [r4, #0]
 8007042:	07d2      	lsls	r2, r2, #31
 8007044:	d501      	bpl.n	800704a <_printf_float+0x1ae>
 8007046:	3302      	adds	r3, #2
 8007048:	e7f4      	b.n	8007034 <_printf_float+0x198>
 800704a:	2301      	movs	r3, #1
 800704c:	e7f2      	b.n	8007034 <_printf_float+0x198>
 800704e:	f04f 0967 	mov.w	r9, #103	; 0x67
 8007052:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007054:	4299      	cmp	r1, r3
 8007056:	db05      	blt.n	8007064 <_printf_float+0x1c8>
 8007058:	6823      	ldr	r3, [r4, #0]
 800705a:	6121      	str	r1, [r4, #16]
 800705c:	07d8      	lsls	r0, r3, #31
 800705e:	d5ea      	bpl.n	8007036 <_printf_float+0x19a>
 8007060:	1c4b      	adds	r3, r1, #1
 8007062:	e7e7      	b.n	8007034 <_printf_float+0x198>
 8007064:	2900      	cmp	r1, #0
 8007066:	bfcc      	ite	gt
 8007068:	2201      	movgt	r2, #1
 800706a:	f1c1 0202 	rsble	r2, r1, #2
 800706e:	4413      	add	r3, r2
 8007070:	e7e0      	b.n	8007034 <_printf_float+0x198>
 8007072:	6823      	ldr	r3, [r4, #0]
 8007074:	055a      	lsls	r2, r3, #21
 8007076:	d407      	bmi.n	8007088 <_printf_float+0x1ec>
 8007078:	6923      	ldr	r3, [r4, #16]
 800707a:	4642      	mov	r2, r8
 800707c:	4631      	mov	r1, r6
 800707e:	4628      	mov	r0, r5
 8007080:	47b8      	blx	r7
 8007082:	3001      	adds	r0, #1
 8007084:	d12b      	bne.n	80070de <_printf_float+0x242>
 8007086:	e764      	b.n	8006f52 <_printf_float+0xb6>
 8007088:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800708c:	f240 80dd 	bls.w	800724a <_printf_float+0x3ae>
 8007090:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007094:	2200      	movs	r2, #0
 8007096:	2300      	movs	r3, #0
 8007098:	f7f9 fc86 	bl	80009a8 <__aeabi_dcmpeq>
 800709c:	2800      	cmp	r0, #0
 800709e:	d033      	beq.n	8007108 <_printf_float+0x26c>
 80070a0:	2301      	movs	r3, #1
 80070a2:	4631      	mov	r1, r6
 80070a4:	4628      	mov	r0, r5
 80070a6:	4a35      	ldr	r2, [pc, #212]	; (800717c <_printf_float+0x2e0>)
 80070a8:	47b8      	blx	r7
 80070aa:	3001      	adds	r0, #1
 80070ac:	f43f af51 	beq.w	8006f52 <_printf_float+0xb6>
 80070b0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80070b4:	429a      	cmp	r2, r3
 80070b6:	db02      	blt.n	80070be <_printf_float+0x222>
 80070b8:	6823      	ldr	r3, [r4, #0]
 80070ba:	07d8      	lsls	r0, r3, #31
 80070bc:	d50f      	bpl.n	80070de <_printf_float+0x242>
 80070be:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80070c2:	4631      	mov	r1, r6
 80070c4:	4628      	mov	r0, r5
 80070c6:	47b8      	blx	r7
 80070c8:	3001      	adds	r0, #1
 80070ca:	f43f af42 	beq.w	8006f52 <_printf_float+0xb6>
 80070ce:	f04f 0800 	mov.w	r8, #0
 80070d2:	f104 091a 	add.w	r9, r4, #26
 80070d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80070d8:	3b01      	subs	r3, #1
 80070da:	4543      	cmp	r3, r8
 80070dc:	dc09      	bgt.n	80070f2 <_printf_float+0x256>
 80070de:	6823      	ldr	r3, [r4, #0]
 80070e0:	079b      	lsls	r3, r3, #30
 80070e2:	f100 8104 	bmi.w	80072ee <_printf_float+0x452>
 80070e6:	68e0      	ldr	r0, [r4, #12]
 80070e8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80070ea:	4298      	cmp	r0, r3
 80070ec:	bfb8      	it	lt
 80070ee:	4618      	movlt	r0, r3
 80070f0:	e731      	b.n	8006f56 <_printf_float+0xba>
 80070f2:	2301      	movs	r3, #1
 80070f4:	464a      	mov	r2, r9
 80070f6:	4631      	mov	r1, r6
 80070f8:	4628      	mov	r0, r5
 80070fa:	47b8      	blx	r7
 80070fc:	3001      	adds	r0, #1
 80070fe:	f43f af28 	beq.w	8006f52 <_printf_float+0xb6>
 8007102:	f108 0801 	add.w	r8, r8, #1
 8007106:	e7e6      	b.n	80070d6 <_printf_float+0x23a>
 8007108:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800710a:	2b00      	cmp	r3, #0
 800710c:	dc38      	bgt.n	8007180 <_printf_float+0x2e4>
 800710e:	2301      	movs	r3, #1
 8007110:	4631      	mov	r1, r6
 8007112:	4628      	mov	r0, r5
 8007114:	4a19      	ldr	r2, [pc, #100]	; (800717c <_printf_float+0x2e0>)
 8007116:	47b8      	blx	r7
 8007118:	3001      	adds	r0, #1
 800711a:	f43f af1a 	beq.w	8006f52 <_printf_float+0xb6>
 800711e:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8007122:	4313      	orrs	r3, r2
 8007124:	d102      	bne.n	800712c <_printf_float+0x290>
 8007126:	6823      	ldr	r3, [r4, #0]
 8007128:	07d9      	lsls	r1, r3, #31
 800712a:	d5d8      	bpl.n	80070de <_printf_float+0x242>
 800712c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007130:	4631      	mov	r1, r6
 8007132:	4628      	mov	r0, r5
 8007134:	47b8      	blx	r7
 8007136:	3001      	adds	r0, #1
 8007138:	f43f af0b 	beq.w	8006f52 <_printf_float+0xb6>
 800713c:	f04f 0900 	mov.w	r9, #0
 8007140:	f104 0a1a 	add.w	sl, r4, #26
 8007144:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007146:	425b      	negs	r3, r3
 8007148:	454b      	cmp	r3, r9
 800714a:	dc01      	bgt.n	8007150 <_printf_float+0x2b4>
 800714c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800714e:	e794      	b.n	800707a <_printf_float+0x1de>
 8007150:	2301      	movs	r3, #1
 8007152:	4652      	mov	r2, sl
 8007154:	4631      	mov	r1, r6
 8007156:	4628      	mov	r0, r5
 8007158:	47b8      	blx	r7
 800715a:	3001      	adds	r0, #1
 800715c:	f43f aef9 	beq.w	8006f52 <_printf_float+0xb6>
 8007160:	f109 0901 	add.w	r9, r9, #1
 8007164:	e7ee      	b.n	8007144 <_printf_float+0x2a8>
 8007166:	bf00      	nop
 8007168:	7fefffff 	.word	0x7fefffff
 800716c:	0800b5fa 	.word	0x0800b5fa
 8007170:	0800b5fe 	.word	0x0800b5fe
 8007174:	0800b602 	.word	0x0800b602
 8007178:	0800b606 	.word	0x0800b606
 800717c:	0800b60a 	.word	0x0800b60a
 8007180:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007182:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007184:	429a      	cmp	r2, r3
 8007186:	bfa8      	it	ge
 8007188:	461a      	movge	r2, r3
 800718a:	2a00      	cmp	r2, #0
 800718c:	4691      	mov	r9, r2
 800718e:	dc37      	bgt.n	8007200 <_printf_float+0x364>
 8007190:	f04f 0b00 	mov.w	fp, #0
 8007194:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007198:	f104 021a 	add.w	r2, r4, #26
 800719c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80071a0:	ebaa 0309 	sub.w	r3, sl, r9
 80071a4:	455b      	cmp	r3, fp
 80071a6:	dc33      	bgt.n	8007210 <_printf_float+0x374>
 80071a8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80071ac:	429a      	cmp	r2, r3
 80071ae:	db3b      	blt.n	8007228 <_printf_float+0x38c>
 80071b0:	6823      	ldr	r3, [r4, #0]
 80071b2:	07da      	lsls	r2, r3, #31
 80071b4:	d438      	bmi.n	8007228 <_printf_float+0x38c>
 80071b6:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80071ba:	eba2 0903 	sub.w	r9, r2, r3
 80071be:	eba2 020a 	sub.w	r2, r2, sl
 80071c2:	4591      	cmp	r9, r2
 80071c4:	bfa8      	it	ge
 80071c6:	4691      	movge	r9, r2
 80071c8:	f1b9 0f00 	cmp.w	r9, #0
 80071cc:	dc34      	bgt.n	8007238 <_printf_float+0x39c>
 80071ce:	f04f 0800 	mov.w	r8, #0
 80071d2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80071d6:	f104 0a1a 	add.w	sl, r4, #26
 80071da:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80071de:	1a9b      	subs	r3, r3, r2
 80071e0:	eba3 0309 	sub.w	r3, r3, r9
 80071e4:	4543      	cmp	r3, r8
 80071e6:	f77f af7a 	ble.w	80070de <_printf_float+0x242>
 80071ea:	2301      	movs	r3, #1
 80071ec:	4652      	mov	r2, sl
 80071ee:	4631      	mov	r1, r6
 80071f0:	4628      	mov	r0, r5
 80071f2:	47b8      	blx	r7
 80071f4:	3001      	adds	r0, #1
 80071f6:	f43f aeac 	beq.w	8006f52 <_printf_float+0xb6>
 80071fa:	f108 0801 	add.w	r8, r8, #1
 80071fe:	e7ec      	b.n	80071da <_printf_float+0x33e>
 8007200:	4613      	mov	r3, r2
 8007202:	4631      	mov	r1, r6
 8007204:	4642      	mov	r2, r8
 8007206:	4628      	mov	r0, r5
 8007208:	47b8      	blx	r7
 800720a:	3001      	adds	r0, #1
 800720c:	d1c0      	bne.n	8007190 <_printf_float+0x2f4>
 800720e:	e6a0      	b.n	8006f52 <_printf_float+0xb6>
 8007210:	2301      	movs	r3, #1
 8007212:	4631      	mov	r1, r6
 8007214:	4628      	mov	r0, r5
 8007216:	920b      	str	r2, [sp, #44]	; 0x2c
 8007218:	47b8      	blx	r7
 800721a:	3001      	adds	r0, #1
 800721c:	f43f ae99 	beq.w	8006f52 <_printf_float+0xb6>
 8007220:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007222:	f10b 0b01 	add.w	fp, fp, #1
 8007226:	e7b9      	b.n	800719c <_printf_float+0x300>
 8007228:	4631      	mov	r1, r6
 800722a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800722e:	4628      	mov	r0, r5
 8007230:	47b8      	blx	r7
 8007232:	3001      	adds	r0, #1
 8007234:	d1bf      	bne.n	80071b6 <_printf_float+0x31a>
 8007236:	e68c      	b.n	8006f52 <_printf_float+0xb6>
 8007238:	464b      	mov	r3, r9
 800723a:	4631      	mov	r1, r6
 800723c:	4628      	mov	r0, r5
 800723e:	eb08 020a 	add.w	r2, r8, sl
 8007242:	47b8      	blx	r7
 8007244:	3001      	adds	r0, #1
 8007246:	d1c2      	bne.n	80071ce <_printf_float+0x332>
 8007248:	e683      	b.n	8006f52 <_printf_float+0xb6>
 800724a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800724c:	2a01      	cmp	r2, #1
 800724e:	dc01      	bgt.n	8007254 <_printf_float+0x3b8>
 8007250:	07db      	lsls	r3, r3, #31
 8007252:	d539      	bpl.n	80072c8 <_printf_float+0x42c>
 8007254:	2301      	movs	r3, #1
 8007256:	4642      	mov	r2, r8
 8007258:	4631      	mov	r1, r6
 800725a:	4628      	mov	r0, r5
 800725c:	47b8      	blx	r7
 800725e:	3001      	adds	r0, #1
 8007260:	f43f ae77 	beq.w	8006f52 <_printf_float+0xb6>
 8007264:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007268:	4631      	mov	r1, r6
 800726a:	4628      	mov	r0, r5
 800726c:	47b8      	blx	r7
 800726e:	3001      	adds	r0, #1
 8007270:	f43f ae6f 	beq.w	8006f52 <_printf_float+0xb6>
 8007274:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007278:	2200      	movs	r2, #0
 800727a:	2300      	movs	r3, #0
 800727c:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8007280:	f7f9 fb92 	bl	80009a8 <__aeabi_dcmpeq>
 8007284:	b9d8      	cbnz	r0, 80072be <_printf_float+0x422>
 8007286:	f109 33ff 	add.w	r3, r9, #4294967295
 800728a:	f108 0201 	add.w	r2, r8, #1
 800728e:	4631      	mov	r1, r6
 8007290:	4628      	mov	r0, r5
 8007292:	47b8      	blx	r7
 8007294:	3001      	adds	r0, #1
 8007296:	d10e      	bne.n	80072b6 <_printf_float+0x41a>
 8007298:	e65b      	b.n	8006f52 <_printf_float+0xb6>
 800729a:	2301      	movs	r3, #1
 800729c:	464a      	mov	r2, r9
 800729e:	4631      	mov	r1, r6
 80072a0:	4628      	mov	r0, r5
 80072a2:	47b8      	blx	r7
 80072a4:	3001      	adds	r0, #1
 80072a6:	f43f ae54 	beq.w	8006f52 <_printf_float+0xb6>
 80072aa:	f108 0801 	add.w	r8, r8, #1
 80072ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80072b0:	3b01      	subs	r3, #1
 80072b2:	4543      	cmp	r3, r8
 80072b4:	dcf1      	bgt.n	800729a <_printf_float+0x3fe>
 80072b6:	4653      	mov	r3, sl
 80072b8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80072bc:	e6de      	b.n	800707c <_printf_float+0x1e0>
 80072be:	f04f 0800 	mov.w	r8, #0
 80072c2:	f104 091a 	add.w	r9, r4, #26
 80072c6:	e7f2      	b.n	80072ae <_printf_float+0x412>
 80072c8:	2301      	movs	r3, #1
 80072ca:	4642      	mov	r2, r8
 80072cc:	e7df      	b.n	800728e <_printf_float+0x3f2>
 80072ce:	2301      	movs	r3, #1
 80072d0:	464a      	mov	r2, r9
 80072d2:	4631      	mov	r1, r6
 80072d4:	4628      	mov	r0, r5
 80072d6:	47b8      	blx	r7
 80072d8:	3001      	adds	r0, #1
 80072da:	f43f ae3a 	beq.w	8006f52 <_printf_float+0xb6>
 80072de:	f108 0801 	add.w	r8, r8, #1
 80072e2:	68e3      	ldr	r3, [r4, #12]
 80072e4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80072e6:	1a5b      	subs	r3, r3, r1
 80072e8:	4543      	cmp	r3, r8
 80072ea:	dcf0      	bgt.n	80072ce <_printf_float+0x432>
 80072ec:	e6fb      	b.n	80070e6 <_printf_float+0x24a>
 80072ee:	f04f 0800 	mov.w	r8, #0
 80072f2:	f104 0919 	add.w	r9, r4, #25
 80072f6:	e7f4      	b.n	80072e2 <_printf_float+0x446>

080072f8 <_printf_common>:
 80072f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80072fc:	4616      	mov	r6, r2
 80072fe:	4699      	mov	r9, r3
 8007300:	688a      	ldr	r2, [r1, #8]
 8007302:	690b      	ldr	r3, [r1, #16]
 8007304:	4607      	mov	r7, r0
 8007306:	4293      	cmp	r3, r2
 8007308:	bfb8      	it	lt
 800730a:	4613      	movlt	r3, r2
 800730c:	6033      	str	r3, [r6, #0]
 800730e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007312:	460c      	mov	r4, r1
 8007314:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007318:	b10a      	cbz	r2, 800731e <_printf_common+0x26>
 800731a:	3301      	adds	r3, #1
 800731c:	6033      	str	r3, [r6, #0]
 800731e:	6823      	ldr	r3, [r4, #0]
 8007320:	0699      	lsls	r1, r3, #26
 8007322:	bf42      	ittt	mi
 8007324:	6833      	ldrmi	r3, [r6, #0]
 8007326:	3302      	addmi	r3, #2
 8007328:	6033      	strmi	r3, [r6, #0]
 800732a:	6825      	ldr	r5, [r4, #0]
 800732c:	f015 0506 	ands.w	r5, r5, #6
 8007330:	d106      	bne.n	8007340 <_printf_common+0x48>
 8007332:	f104 0a19 	add.w	sl, r4, #25
 8007336:	68e3      	ldr	r3, [r4, #12]
 8007338:	6832      	ldr	r2, [r6, #0]
 800733a:	1a9b      	subs	r3, r3, r2
 800733c:	42ab      	cmp	r3, r5
 800733e:	dc2b      	bgt.n	8007398 <_printf_common+0xa0>
 8007340:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007344:	1e13      	subs	r3, r2, #0
 8007346:	6822      	ldr	r2, [r4, #0]
 8007348:	bf18      	it	ne
 800734a:	2301      	movne	r3, #1
 800734c:	0692      	lsls	r2, r2, #26
 800734e:	d430      	bmi.n	80073b2 <_printf_common+0xba>
 8007350:	4649      	mov	r1, r9
 8007352:	4638      	mov	r0, r7
 8007354:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007358:	47c0      	blx	r8
 800735a:	3001      	adds	r0, #1
 800735c:	d023      	beq.n	80073a6 <_printf_common+0xae>
 800735e:	6823      	ldr	r3, [r4, #0]
 8007360:	6922      	ldr	r2, [r4, #16]
 8007362:	f003 0306 	and.w	r3, r3, #6
 8007366:	2b04      	cmp	r3, #4
 8007368:	bf14      	ite	ne
 800736a:	2500      	movne	r5, #0
 800736c:	6833      	ldreq	r3, [r6, #0]
 800736e:	f04f 0600 	mov.w	r6, #0
 8007372:	bf08      	it	eq
 8007374:	68e5      	ldreq	r5, [r4, #12]
 8007376:	f104 041a 	add.w	r4, r4, #26
 800737a:	bf08      	it	eq
 800737c:	1aed      	subeq	r5, r5, r3
 800737e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8007382:	bf08      	it	eq
 8007384:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007388:	4293      	cmp	r3, r2
 800738a:	bfc4      	itt	gt
 800738c:	1a9b      	subgt	r3, r3, r2
 800738e:	18ed      	addgt	r5, r5, r3
 8007390:	42b5      	cmp	r5, r6
 8007392:	d11a      	bne.n	80073ca <_printf_common+0xd2>
 8007394:	2000      	movs	r0, #0
 8007396:	e008      	b.n	80073aa <_printf_common+0xb2>
 8007398:	2301      	movs	r3, #1
 800739a:	4652      	mov	r2, sl
 800739c:	4649      	mov	r1, r9
 800739e:	4638      	mov	r0, r7
 80073a0:	47c0      	blx	r8
 80073a2:	3001      	adds	r0, #1
 80073a4:	d103      	bne.n	80073ae <_printf_common+0xb6>
 80073a6:	f04f 30ff 	mov.w	r0, #4294967295
 80073aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073ae:	3501      	adds	r5, #1
 80073b0:	e7c1      	b.n	8007336 <_printf_common+0x3e>
 80073b2:	2030      	movs	r0, #48	; 0x30
 80073b4:	18e1      	adds	r1, r4, r3
 80073b6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80073ba:	1c5a      	adds	r2, r3, #1
 80073bc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80073c0:	4422      	add	r2, r4
 80073c2:	3302      	adds	r3, #2
 80073c4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80073c8:	e7c2      	b.n	8007350 <_printf_common+0x58>
 80073ca:	2301      	movs	r3, #1
 80073cc:	4622      	mov	r2, r4
 80073ce:	4649      	mov	r1, r9
 80073d0:	4638      	mov	r0, r7
 80073d2:	47c0      	blx	r8
 80073d4:	3001      	adds	r0, #1
 80073d6:	d0e6      	beq.n	80073a6 <_printf_common+0xae>
 80073d8:	3601      	adds	r6, #1
 80073da:	e7d9      	b.n	8007390 <_printf_common+0x98>

080073dc <_printf_i>:
 80073dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80073e0:	7e0f      	ldrb	r7, [r1, #24]
 80073e2:	4691      	mov	r9, r2
 80073e4:	2f78      	cmp	r7, #120	; 0x78
 80073e6:	4680      	mov	r8, r0
 80073e8:	460c      	mov	r4, r1
 80073ea:	469a      	mov	sl, r3
 80073ec:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80073ee:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80073f2:	d807      	bhi.n	8007404 <_printf_i+0x28>
 80073f4:	2f62      	cmp	r7, #98	; 0x62
 80073f6:	d80a      	bhi.n	800740e <_printf_i+0x32>
 80073f8:	2f00      	cmp	r7, #0
 80073fa:	f000 80d5 	beq.w	80075a8 <_printf_i+0x1cc>
 80073fe:	2f58      	cmp	r7, #88	; 0x58
 8007400:	f000 80c1 	beq.w	8007586 <_printf_i+0x1aa>
 8007404:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007408:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800740c:	e03a      	b.n	8007484 <_printf_i+0xa8>
 800740e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007412:	2b15      	cmp	r3, #21
 8007414:	d8f6      	bhi.n	8007404 <_printf_i+0x28>
 8007416:	a101      	add	r1, pc, #4	; (adr r1, 800741c <_printf_i+0x40>)
 8007418:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800741c:	08007475 	.word	0x08007475
 8007420:	08007489 	.word	0x08007489
 8007424:	08007405 	.word	0x08007405
 8007428:	08007405 	.word	0x08007405
 800742c:	08007405 	.word	0x08007405
 8007430:	08007405 	.word	0x08007405
 8007434:	08007489 	.word	0x08007489
 8007438:	08007405 	.word	0x08007405
 800743c:	08007405 	.word	0x08007405
 8007440:	08007405 	.word	0x08007405
 8007444:	08007405 	.word	0x08007405
 8007448:	0800758f 	.word	0x0800758f
 800744c:	080074b5 	.word	0x080074b5
 8007450:	08007549 	.word	0x08007549
 8007454:	08007405 	.word	0x08007405
 8007458:	08007405 	.word	0x08007405
 800745c:	080075b1 	.word	0x080075b1
 8007460:	08007405 	.word	0x08007405
 8007464:	080074b5 	.word	0x080074b5
 8007468:	08007405 	.word	0x08007405
 800746c:	08007405 	.word	0x08007405
 8007470:	08007551 	.word	0x08007551
 8007474:	682b      	ldr	r3, [r5, #0]
 8007476:	1d1a      	adds	r2, r3, #4
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	602a      	str	r2, [r5, #0]
 800747c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007480:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007484:	2301      	movs	r3, #1
 8007486:	e0a0      	b.n	80075ca <_printf_i+0x1ee>
 8007488:	6820      	ldr	r0, [r4, #0]
 800748a:	682b      	ldr	r3, [r5, #0]
 800748c:	0607      	lsls	r7, r0, #24
 800748e:	f103 0104 	add.w	r1, r3, #4
 8007492:	6029      	str	r1, [r5, #0]
 8007494:	d501      	bpl.n	800749a <_printf_i+0xbe>
 8007496:	681e      	ldr	r6, [r3, #0]
 8007498:	e003      	b.n	80074a2 <_printf_i+0xc6>
 800749a:	0646      	lsls	r6, r0, #25
 800749c:	d5fb      	bpl.n	8007496 <_printf_i+0xba>
 800749e:	f9b3 6000 	ldrsh.w	r6, [r3]
 80074a2:	2e00      	cmp	r6, #0
 80074a4:	da03      	bge.n	80074ae <_printf_i+0xd2>
 80074a6:	232d      	movs	r3, #45	; 0x2d
 80074a8:	4276      	negs	r6, r6
 80074aa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80074ae:	230a      	movs	r3, #10
 80074b0:	4859      	ldr	r0, [pc, #356]	; (8007618 <_printf_i+0x23c>)
 80074b2:	e012      	b.n	80074da <_printf_i+0xfe>
 80074b4:	682b      	ldr	r3, [r5, #0]
 80074b6:	6820      	ldr	r0, [r4, #0]
 80074b8:	1d19      	adds	r1, r3, #4
 80074ba:	6029      	str	r1, [r5, #0]
 80074bc:	0605      	lsls	r5, r0, #24
 80074be:	d501      	bpl.n	80074c4 <_printf_i+0xe8>
 80074c0:	681e      	ldr	r6, [r3, #0]
 80074c2:	e002      	b.n	80074ca <_printf_i+0xee>
 80074c4:	0641      	lsls	r1, r0, #25
 80074c6:	d5fb      	bpl.n	80074c0 <_printf_i+0xe4>
 80074c8:	881e      	ldrh	r6, [r3, #0]
 80074ca:	2f6f      	cmp	r7, #111	; 0x6f
 80074cc:	bf0c      	ite	eq
 80074ce:	2308      	moveq	r3, #8
 80074d0:	230a      	movne	r3, #10
 80074d2:	4851      	ldr	r0, [pc, #324]	; (8007618 <_printf_i+0x23c>)
 80074d4:	2100      	movs	r1, #0
 80074d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80074da:	6865      	ldr	r5, [r4, #4]
 80074dc:	2d00      	cmp	r5, #0
 80074de:	bfa8      	it	ge
 80074e0:	6821      	ldrge	r1, [r4, #0]
 80074e2:	60a5      	str	r5, [r4, #8]
 80074e4:	bfa4      	itt	ge
 80074e6:	f021 0104 	bicge.w	r1, r1, #4
 80074ea:	6021      	strge	r1, [r4, #0]
 80074ec:	b90e      	cbnz	r6, 80074f2 <_printf_i+0x116>
 80074ee:	2d00      	cmp	r5, #0
 80074f0:	d04b      	beq.n	800758a <_printf_i+0x1ae>
 80074f2:	4615      	mov	r5, r2
 80074f4:	fbb6 f1f3 	udiv	r1, r6, r3
 80074f8:	fb03 6711 	mls	r7, r3, r1, r6
 80074fc:	5dc7      	ldrb	r7, [r0, r7]
 80074fe:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007502:	4637      	mov	r7, r6
 8007504:	42bb      	cmp	r3, r7
 8007506:	460e      	mov	r6, r1
 8007508:	d9f4      	bls.n	80074f4 <_printf_i+0x118>
 800750a:	2b08      	cmp	r3, #8
 800750c:	d10b      	bne.n	8007526 <_printf_i+0x14a>
 800750e:	6823      	ldr	r3, [r4, #0]
 8007510:	07de      	lsls	r6, r3, #31
 8007512:	d508      	bpl.n	8007526 <_printf_i+0x14a>
 8007514:	6923      	ldr	r3, [r4, #16]
 8007516:	6861      	ldr	r1, [r4, #4]
 8007518:	4299      	cmp	r1, r3
 800751a:	bfde      	ittt	le
 800751c:	2330      	movle	r3, #48	; 0x30
 800751e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007522:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007526:	1b52      	subs	r2, r2, r5
 8007528:	6122      	str	r2, [r4, #16]
 800752a:	464b      	mov	r3, r9
 800752c:	4621      	mov	r1, r4
 800752e:	4640      	mov	r0, r8
 8007530:	f8cd a000 	str.w	sl, [sp]
 8007534:	aa03      	add	r2, sp, #12
 8007536:	f7ff fedf 	bl	80072f8 <_printf_common>
 800753a:	3001      	adds	r0, #1
 800753c:	d14a      	bne.n	80075d4 <_printf_i+0x1f8>
 800753e:	f04f 30ff 	mov.w	r0, #4294967295
 8007542:	b004      	add	sp, #16
 8007544:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007548:	6823      	ldr	r3, [r4, #0]
 800754a:	f043 0320 	orr.w	r3, r3, #32
 800754e:	6023      	str	r3, [r4, #0]
 8007550:	2778      	movs	r7, #120	; 0x78
 8007552:	4832      	ldr	r0, [pc, #200]	; (800761c <_printf_i+0x240>)
 8007554:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007558:	6823      	ldr	r3, [r4, #0]
 800755a:	6829      	ldr	r1, [r5, #0]
 800755c:	061f      	lsls	r7, r3, #24
 800755e:	f851 6b04 	ldr.w	r6, [r1], #4
 8007562:	d402      	bmi.n	800756a <_printf_i+0x18e>
 8007564:	065f      	lsls	r7, r3, #25
 8007566:	bf48      	it	mi
 8007568:	b2b6      	uxthmi	r6, r6
 800756a:	07df      	lsls	r7, r3, #31
 800756c:	bf48      	it	mi
 800756e:	f043 0320 	orrmi.w	r3, r3, #32
 8007572:	6029      	str	r1, [r5, #0]
 8007574:	bf48      	it	mi
 8007576:	6023      	strmi	r3, [r4, #0]
 8007578:	b91e      	cbnz	r6, 8007582 <_printf_i+0x1a6>
 800757a:	6823      	ldr	r3, [r4, #0]
 800757c:	f023 0320 	bic.w	r3, r3, #32
 8007580:	6023      	str	r3, [r4, #0]
 8007582:	2310      	movs	r3, #16
 8007584:	e7a6      	b.n	80074d4 <_printf_i+0xf8>
 8007586:	4824      	ldr	r0, [pc, #144]	; (8007618 <_printf_i+0x23c>)
 8007588:	e7e4      	b.n	8007554 <_printf_i+0x178>
 800758a:	4615      	mov	r5, r2
 800758c:	e7bd      	b.n	800750a <_printf_i+0x12e>
 800758e:	682b      	ldr	r3, [r5, #0]
 8007590:	6826      	ldr	r6, [r4, #0]
 8007592:	1d18      	adds	r0, r3, #4
 8007594:	6961      	ldr	r1, [r4, #20]
 8007596:	6028      	str	r0, [r5, #0]
 8007598:	0635      	lsls	r5, r6, #24
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	d501      	bpl.n	80075a2 <_printf_i+0x1c6>
 800759e:	6019      	str	r1, [r3, #0]
 80075a0:	e002      	b.n	80075a8 <_printf_i+0x1cc>
 80075a2:	0670      	lsls	r0, r6, #25
 80075a4:	d5fb      	bpl.n	800759e <_printf_i+0x1c2>
 80075a6:	8019      	strh	r1, [r3, #0]
 80075a8:	2300      	movs	r3, #0
 80075aa:	4615      	mov	r5, r2
 80075ac:	6123      	str	r3, [r4, #16]
 80075ae:	e7bc      	b.n	800752a <_printf_i+0x14e>
 80075b0:	682b      	ldr	r3, [r5, #0]
 80075b2:	2100      	movs	r1, #0
 80075b4:	1d1a      	adds	r2, r3, #4
 80075b6:	602a      	str	r2, [r5, #0]
 80075b8:	681d      	ldr	r5, [r3, #0]
 80075ba:	6862      	ldr	r2, [r4, #4]
 80075bc:	4628      	mov	r0, r5
 80075be:	f000 fcd2 	bl	8007f66 <memchr>
 80075c2:	b108      	cbz	r0, 80075c8 <_printf_i+0x1ec>
 80075c4:	1b40      	subs	r0, r0, r5
 80075c6:	6060      	str	r0, [r4, #4]
 80075c8:	6863      	ldr	r3, [r4, #4]
 80075ca:	6123      	str	r3, [r4, #16]
 80075cc:	2300      	movs	r3, #0
 80075ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80075d2:	e7aa      	b.n	800752a <_printf_i+0x14e>
 80075d4:	462a      	mov	r2, r5
 80075d6:	4649      	mov	r1, r9
 80075d8:	4640      	mov	r0, r8
 80075da:	6923      	ldr	r3, [r4, #16]
 80075dc:	47d0      	blx	sl
 80075de:	3001      	adds	r0, #1
 80075e0:	d0ad      	beq.n	800753e <_printf_i+0x162>
 80075e2:	6823      	ldr	r3, [r4, #0]
 80075e4:	079b      	lsls	r3, r3, #30
 80075e6:	d413      	bmi.n	8007610 <_printf_i+0x234>
 80075e8:	68e0      	ldr	r0, [r4, #12]
 80075ea:	9b03      	ldr	r3, [sp, #12]
 80075ec:	4298      	cmp	r0, r3
 80075ee:	bfb8      	it	lt
 80075f0:	4618      	movlt	r0, r3
 80075f2:	e7a6      	b.n	8007542 <_printf_i+0x166>
 80075f4:	2301      	movs	r3, #1
 80075f6:	4632      	mov	r2, r6
 80075f8:	4649      	mov	r1, r9
 80075fa:	4640      	mov	r0, r8
 80075fc:	47d0      	blx	sl
 80075fe:	3001      	adds	r0, #1
 8007600:	d09d      	beq.n	800753e <_printf_i+0x162>
 8007602:	3501      	adds	r5, #1
 8007604:	68e3      	ldr	r3, [r4, #12]
 8007606:	9903      	ldr	r1, [sp, #12]
 8007608:	1a5b      	subs	r3, r3, r1
 800760a:	42ab      	cmp	r3, r5
 800760c:	dcf2      	bgt.n	80075f4 <_printf_i+0x218>
 800760e:	e7eb      	b.n	80075e8 <_printf_i+0x20c>
 8007610:	2500      	movs	r5, #0
 8007612:	f104 0619 	add.w	r6, r4, #25
 8007616:	e7f5      	b.n	8007604 <_printf_i+0x228>
 8007618:	0800b60c 	.word	0x0800b60c
 800761c:	0800b61d 	.word	0x0800b61d

08007620 <_scanf_float>:
 8007620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007624:	b087      	sub	sp, #28
 8007626:	9303      	str	r3, [sp, #12]
 8007628:	688b      	ldr	r3, [r1, #8]
 800762a:	4617      	mov	r7, r2
 800762c:	1e5a      	subs	r2, r3, #1
 800762e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8007632:	bf85      	ittet	hi
 8007634:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8007638:	195b      	addhi	r3, r3, r5
 800763a:	2300      	movls	r3, #0
 800763c:	9302      	strhi	r3, [sp, #8]
 800763e:	bf88      	it	hi
 8007640:	f240 135d 	movwhi	r3, #349	; 0x15d
 8007644:	468b      	mov	fp, r1
 8007646:	f04f 0500 	mov.w	r5, #0
 800764a:	bf8c      	ite	hi
 800764c:	608b      	strhi	r3, [r1, #8]
 800764e:	9302      	strls	r3, [sp, #8]
 8007650:	680b      	ldr	r3, [r1, #0]
 8007652:	4680      	mov	r8, r0
 8007654:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8007658:	f84b 3b1c 	str.w	r3, [fp], #28
 800765c:	460c      	mov	r4, r1
 800765e:	465e      	mov	r6, fp
 8007660:	46aa      	mov	sl, r5
 8007662:	46a9      	mov	r9, r5
 8007664:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8007668:	9501      	str	r5, [sp, #4]
 800766a:	68a2      	ldr	r2, [r4, #8]
 800766c:	b152      	cbz	r2, 8007684 <_scanf_float+0x64>
 800766e:	683b      	ldr	r3, [r7, #0]
 8007670:	781b      	ldrb	r3, [r3, #0]
 8007672:	2b4e      	cmp	r3, #78	; 0x4e
 8007674:	d864      	bhi.n	8007740 <_scanf_float+0x120>
 8007676:	2b40      	cmp	r3, #64	; 0x40
 8007678:	d83c      	bhi.n	80076f4 <_scanf_float+0xd4>
 800767a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800767e:	b2c8      	uxtb	r0, r1
 8007680:	280e      	cmp	r0, #14
 8007682:	d93a      	bls.n	80076fa <_scanf_float+0xda>
 8007684:	f1b9 0f00 	cmp.w	r9, #0
 8007688:	d003      	beq.n	8007692 <_scanf_float+0x72>
 800768a:	6823      	ldr	r3, [r4, #0]
 800768c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007690:	6023      	str	r3, [r4, #0]
 8007692:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007696:	f1ba 0f01 	cmp.w	sl, #1
 800769a:	f200 8113 	bhi.w	80078c4 <_scanf_float+0x2a4>
 800769e:	455e      	cmp	r6, fp
 80076a0:	f200 8105 	bhi.w	80078ae <_scanf_float+0x28e>
 80076a4:	2501      	movs	r5, #1
 80076a6:	4628      	mov	r0, r5
 80076a8:	b007      	add	sp, #28
 80076aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076ae:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80076b2:	2a0d      	cmp	r2, #13
 80076b4:	d8e6      	bhi.n	8007684 <_scanf_float+0x64>
 80076b6:	a101      	add	r1, pc, #4	; (adr r1, 80076bc <_scanf_float+0x9c>)
 80076b8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80076bc:	080077fb 	.word	0x080077fb
 80076c0:	08007685 	.word	0x08007685
 80076c4:	08007685 	.word	0x08007685
 80076c8:	08007685 	.word	0x08007685
 80076cc:	0800785b 	.word	0x0800785b
 80076d0:	08007833 	.word	0x08007833
 80076d4:	08007685 	.word	0x08007685
 80076d8:	08007685 	.word	0x08007685
 80076dc:	08007809 	.word	0x08007809
 80076e0:	08007685 	.word	0x08007685
 80076e4:	08007685 	.word	0x08007685
 80076e8:	08007685 	.word	0x08007685
 80076ec:	08007685 	.word	0x08007685
 80076f0:	080077c1 	.word	0x080077c1
 80076f4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80076f8:	e7db      	b.n	80076b2 <_scanf_float+0x92>
 80076fa:	290e      	cmp	r1, #14
 80076fc:	d8c2      	bhi.n	8007684 <_scanf_float+0x64>
 80076fe:	a001      	add	r0, pc, #4	; (adr r0, 8007704 <_scanf_float+0xe4>)
 8007700:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8007704:	080077b3 	.word	0x080077b3
 8007708:	08007685 	.word	0x08007685
 800770c:	080077b3 	.word	0x080077b3
 8007710:	08007847 	.word	0x08007847
 8007714:	08007685 	.word	0x08007685
 8007718:	08007761 	.word	0x08007761
 800771c:	0800779d 	.word	0x0800779d
 8007720:	0800779d 	.word	0x0800779d
 8007724:	0800779d 	.word	0x0800779d
 8007728:	0800779d 	.word	0x0800779d
 800772c:	0800779d 	.word	0x0800779d
 8007730:	0800779d 	.word	0x0800779d
 8007734:	0800779d 	.word	0x0800779d
 8007738:	0800779d 	.word	0x0800779d
 800773c:	0800779d 	.word	0x0800779d
 8007740:	2b6e      	cmp	r3, #110	; 0x6e
 8007742:	d809      	bhi.n	8007758 <_scanf_float+0x138>
 8007744:	2b60      	cmp	r3, #96	; 0x60
 8007746:	d8b2      	bhi.n	80076ae <_scanf_float+0x8e>
 8007748:	2b54      	cmp	r3, #84	; 0x54
 800774a:	d077      	beq.n	800783c <_scanf_float+0x21c>
 800774c:	2b59      	cmp	r3, #89	; 0x59
 800774e:	d199      	bne.n	8007684 <_scanf_float+0x64>
 8007750:	2d07      	cmp	r5, #7
 8007752:	d197      	bne.n	8007684 <_scanf_float+0x64>
 8007754:	2508      	movs	r5, #8
 8007756:	e029      	b.n	80077ac <_scanf_float+0x18c>
 8007758:	2b74      	cmp	r3, #116	; 0x74
 800775a:	d06f      	beq.n	800783c <_scanf_float+0x21c>
 800775c:	2b79      	cmp	r3, #121	; 0x79
 800775e:	e7f6      	b.n	800774e <_scanf_float+0x12e>
 8007760:	6821      	ldr	r1, [r4, #0]
 8007762:	05c8      	lsls	r0, r1, #23
 8007764:	d51a      	bpl.n	800779c <_scanf_float+0x17c>
 8007766:	9b02      	ldr	r3, [sp, #8]
 8007768:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800776c:	6021      	str	r1, [r4, #0]
 800776e:	f109 0901 	add.w	r9, r9, #1
 8007772:	b11b      	cbz	r3, 800777c <_scanf_float+0x15c>
 8007774:	3b01      	subs	r3, #1
 8007776:	3201      	adds	r2, #1
 8007778:	9302      	str	r3, [sp, #8]
 800777a:	60a2      	str	r2, [r4, #8]
 800777c:	68a3      	ldr	r3, [r4, #8]
 800777e:	3b01      	subs	r3, #1
 8007780:	60a3      	str	r3, [r4, #8]
 8007782:	6923      	ldr	r3, [r4, #16]
 8007784:	3301      	adds	r3, #1
 8007786:	6123      	str	r3, [r4, #16]
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	3b01      	subs	r3, #1
 800778c:	2b00      	cmp	r3, #0
 800778e:	607b      	str	r3, [r7, #4]
 8007790:	f340 8084 	ble.w	800789c <_scanf_float+0x27c>
 8007794:	683b      	ldr	r3, [r7, #0]
 8007796:	3301      	adds	r3, #1
 8007798:	603b      	str	r3, [r7, #0]
 800779a:	e766      	b.n	800766a <_scanf_float+0x4a>
 800779c:	eb1a 0f05 	cmn.w	sl, r5
 80077a0:	f47f af70 	bne.w	8007684 <_scanf_float+0x64>
 80077a4:	6822      	ldr	r2, [r4, #0]
 80077a6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80077aa:	6022      	str	r2, [r4, #0]
 80077ac:	f806 3b01 	strb.w	r3, [r6], #1
 80077b0:	e7e4      	b.n	800777c <_scanf_float+0x15c>
 80077b2:	6822      	ldr	r2, [r4, #0]
 80077b4:	0610      	lsls	r0, r2, #24
 80077b6:	f57f af65 	bpl.w	8007684 <_scanf_float+0x64>
 80077ba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80077be:	e7f4      	b.n	80077aa <_scanf_float+0x18a>
 80077c0:	f1ba 0f00 	cmp.w	sl, #0
 80077c4:	d10e      	bne.n	80077e4 <_scanf_float+0x1c4>
 80077c6:	f1b9 0f00 	cmp.w	r9, #0
 80077ca:	d10e      	bne.n	80077ea <_scanf_float+0x1ca>
 80077cc:	6822      	ldr	r2, [r4, #0]
 80077ce:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80077d2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80077d6:	d108      	bne.n	80077ea <_scanf_float+0x1ca>
 80077d8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80077dc:	f04f 0a01 	mov.w	sl, #1
 80077e0:	6022      	str	r2, [r4, #0]
 80077e2:	e7e3      	b.n	80077ac <_scanf_float+0x18c>
 80077e4:	f1ba 0f02 	cmp.w	sl, #2
 80077e8:	d055      	beq.n	8007896 <_scanf_float+0x276>
 80077ea:	2d01      	cmp	r5, #1
 80077ec:	d002      	beq.n	80077f4 <_scanf_float+0x1d4>
 80077ee:	2d04      	cmp	r5, #4
 80077f0:	f47f af48 	bne.w	8007684 <_scanf_float+0x64>
 80077f4:	3501      	adds	r5, #1
 80077f6:	b2ed      	uxtb	r5, r5
 80077f8:	e7d8      	b.n	80077ac <_scanf_float+0x18c>
 80077fa:	f1ba 0f01 	cmp.w	sl, #1
 80077fe:	f47f af41 	bne.w	8007684 <_scanf_float+0x64>
 8007802:	f04f 0a02 	mov.w	sl, #2
 8007806:	e7d1      	b.n	80077ac <_scanf_float+0x18c>
 8007808:	b97d      	cbnz	r5, 800782a <_scanf_float+0x20a>
 800780a:	f1b9 0f00 	cmp.w	r9, #0
 800780e:	f47f af3c 	bne.w	800768a <_scanf_float+0x6a>
 8007812:	6822      	ldr	r2, [r4, #0]
 8007814:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007818:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800781c:	f47f af39 	bne.w	8007692 <_scanf_float+0x72>
 8007820:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007824:	2501      	movs	r5, #1
 8007826:	6022      	str	r2, [r4, #0]
 8007828:	e7c0      	b.n	80077ac <_scanf_float+0x18c>
 800782a:	2d03      	cmp	r5, #3
 800782c:	d0e2      	beq.n	80077f4 <_scanf_float+0x1d4>
 800782e:	2d05      	cmp	r5, #5
 8007830:	e7de      	b.n	80077f0 <_scanf_float+0x1d0>
 8007832:	2d02      	cmp	r5, #2
 8007834:	f47f af26 	bne.w	8007684 <_scanf_float+0x64>
 8007838:	2503      	movs	r5, #3
 800783a:	e7b7      	b.n	80077ac <_scanf_float+0x18c>
 800783c:	2d06      	cmp	r5, #6
 800783e:	f47f af21 	bne.w	8007684 <_scanf_float+0x64>
 8007842:	2507      	movs	r5, #7
 8007844:	e7b2      	b.n	80077ac <_scanf_float+0x18c>
 8007846:	6822      	ldr	r2, [r4, #0]
 8007848:	0591      	lsls	r1, r2, #22
 800784a:	f57f af1b 	bpl.w	8007684 <_scanf_float+0x64>
 800784e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8007852:	6022      	str	r2, [r4, #0]
 8007854:	f8cd 9004 	str.w	r9, [sp, #4]
 8007858:	e7a8      	b.n	80077ac <_scanf_float+0x18c>
 800785a:	6822      	ldr	r2, [r4, #0]
 800785c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8007860:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8007864:	d006      	beq.n	8007874 <_scanf_float+0x254>
 8007866:	0550      	lsls	r0, r2, #21
 8007868:	f57f af0c 	bpl.w	8007684 <_scanf_float+0x64>
 800786c:	f1b9 0f00 	cmp.w	r9, #0
 8007870:	f43f af0f 	beq.w	8007692 <_scanf_float+0x72>
 8007874:	0591      	lsls	r1, r2, #22
 8007876:	bf58      	it	pl
 8007878:	9901      	ldrpl	r1, [sp, #4]
 800787a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800787e:	bf58      	it	pl
 8007880:	eba9 0101 	subpl.w	r1, r9, r1
 8007884:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8007888:	f04f 0900 	mov.w	r9, #0
 800788c:	bf58      	it	pl
 800788e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8007892:	6022      	str	r2, [r4, #0]
 8007894:	e78a      	b.n	80077ac <_scanf_float+0x18c>
 8007896:	f04f 0a03 	mov.w	sl, #3
 800789a:	e787      	b.n	80077ac <_scanf_float+0x18c>
 800789c:	4639      	mov	r1, r7
 800789e:	4640      	mov	r0, r8
 80078a0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80078a4:	4798      	blx	r3
 80078a6:	2800      	cmp	r0, #0
 80078a8:	f43f aedf 	beq.w	800766a <_scanf_float+0x4a>
 80078ac:	e6ea      	b.n	8007684 <_scanf_float+0x64>
 80078ae:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80078b2:	463a      	mov	r2, r7
 80078b4:	4640      	mov	r0, r8
 80078b6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80078ba:	4798      	blx	r3
 80078bc:	6923      	ldr	r3, [r4, #16]
 80078be:	3b01      	subs	r3, #1
 80078c0:	6123      	str	r3, [r4, #16]
 80078c2:	e6ec      	b.n	800769e <_scanf_float+0x7e>
 80078c4:	1e6b      	subs	r3, r5, #1
 80078c6:	2b06      	cmp	r3, #6
 80078c8:	d825      	bhi.n	8007916 <_scanf_float+0x2f6>
 80078ca:	2d02      	cmp	r5, #2
 80078cc:	d836      	bhi.n	800793c <_scanf_float+0x31c>
 80078ce:	455e      	cmp	r6, fp
 80078d0:	f67f aee8 	bls.w	80076a4 <_scanf_float+0x84>
 80078d4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80078d8:	463a      	mov	r2, r7
 80078da:	4640      	mov	r0, r8
 80078dc:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80078e0:	4798      	blx	r3
 80078e2:	6923      	ldr	r3, [r4, #16]
 80078e4:	3b01      	subs	r3, #1
 80078e6:	6123      	str	r3, [r4, #16]
 80078e8:	e7f1      	b.n	80078ce <_scanf_float+0x2ae>
 80078ea:	9802      	ldr	r0, [sp, #8]
 80078ec:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80078f0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80078f4:	463a      	mov	r2, r7
 80078f6:	9002      	str	r0, [sp, #8]
 80078f8:	4640      	mov	r0, r8
 80078fa:	4798      	blx	r3
 80078fc:	6923      	ldr	r3, [r4, #16]
 80078fe:	3b01      	subs	r3, #1
 8007900:	6123      	str	r3, [r4, #16]
 8007902:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007906:	fa5f fa8a 	uxtb.w	sl, sl
 800790a:	f1ba 0f02 	cmp.w	sl, #2
 800790e:	d1ec      	bne.n	80078ea <_scanf_float+0x2ca>
 8007910:	3d03      	subs	r5, #3
 8007912:	b2ed      	uxtb	r5, r5
 8007914:	1b76      	subs	r6, r6, r5
 8007916:	6823      	ldr	r3, [r4, #0]
 8007918:	05da      	lsls	r2, r3, #23
 800791a:	d52f      	bpl.n	800797c <_scanf_float+0x35c>
 800791c:	055b      	lsls	r3, r3, #21
 800791e:	d510      	bpl.n	8007942 <_scanf_float+0x322>
 8007920:	455e      	cmp	r6, fp
 8007922:	f67f aebf 	bls.w	80076a4 <_scanf_float+0x84>
 8007926:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800792a:	463a      	mov	r2, r7
 800792c:	4640      	mov	r0, r8
 800792e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007932:	4798      	blx	r3
 8007934:	6923      	ldr	r3, [r4, #16]
 8007936:	3b01      	subs	r3, #1
 8007938:	6123      	str	r3, [r4, #16]
 800793a:	e7f1      	b.n	8007920 <_scanf_float+0x300>
 800793c:	46aa      	mov	sl, r5
 800793e:	9602      	str	r6, [sp, #8]
 8007940:	e7df      	b.n	8007902 <_scanf_float+0x2e2>
 8007942:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8007946:	6923      	ldr	r3, [r4, #16]
 8007948:	2965      	cmp	r1, #101	; 0x65
 800794a:	f103 33ff 	add.w	r3, r3, #4294967295
 800794e:	f106 35ff 	add.w	r5, r6, #4294967295
 8007952:	6123      	str	r3, [r4, #16]
 8007954:	d00c      	beq.n	8007970 <_scanf_float+0x350>
 8007956:	2945      	cmp	r1, #69	; 0x45
 8007958:	d00a      	beq.n	8007970 <_scanf_float+0x350>
 800795a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800795e:	463a      	mov	r2, r7
 8007960:	4640      	mov	r0, r8
 8007962:	4798      	blx	r3
 8007964:	6923      	ldr	r3, [r4, #16]
 8007966:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800796a:	3b01      	subs	r3, #1
 800796c:	1eb5      	subs	r5, r6, #2
 800796e:	6123      	str	r3, [r4, #16]
 8007970:	463a      	mov	r2, r7
 8007972:	4640      	mov	r0, r8
 8007974:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007978:	4798      	blx	r3
 800797a:	462e      	mov	r6, r5
 800797c:	6825      	ldr	r5, [r4, #0]
 800797e:	f015 0510 	ands.w	r5, r5, #16
 8007982:	d155      	bne.n	8007a30 <_scanf_float+0x410>
 8007984:	7035      	strb	r5, [r6, #0]
 8007986:	6823      	ldr	r3, [r4, #0]
 8007988:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800798c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007990:	d11d      	bne.n	80079ce <_scanf_float+0x3ae>
 8007992:	9b01      	ldr	r3, [sp, #4]
 8007994:	454b      	cmp	r3, r9
 8007996:	eba3 0209 	sub.w	r2, r3, r9
 800799a:	d125      	bne.n	80079e8 <_scanf_float+0x3c8>
 800799c:	2200      	movs	r2, #0
 800799e:	4659      	mov	r1, fp
 80079a0:	4640      	mov	r0, r8
 80079a2:	f002 fd11 	bl	800a3c8 <_strtod_r>
 80079a6:	9b03      	ldr	r3, [sp, #12]
 80079a8:	f8d4 c000 	ldr.w	ip, [r4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	f01c 0f02 	tst.w	ip, #2
 80079b2:	4606      	mov	r6, r0
 80079b4:	460f      	mov	r7, r1
 80079b6:	f103 0204 	add.w	r2, r3, #4
 80079ba:	d020      	beq.n	80079fe <_scanf_float+0x3de>
 80079bc:	9903      	ldr	r1, [sp, #12]
 80079be:	600a      	str	r2, [r1, #0]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	e9c3 6700 	strd	r6, r7, [r3]
 80079c6:	68e3      	ldr	r3, [r4, #12]
 80079c8:	3301      	adds	r3, #1
 80079ca:	60e3      	str	r3, [r4, #12]
 80079cc:	e66b      	b.n	80076a6 <_scanf_float+0x86>
 80079ce:	9b04      	ldr	r3, [sp, #16]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d0e3      	beq.n	800799c <_scanf_float+0x37c>
 80079d4:	9905      	ldr	r1, [sp, #20]
 80079d6:	230a      	movs	r3, #10
 80079d8:	462a      	mov	r2, r5
 80079da:	4640      	mov	r0, r8
 80079dc:	3101      	adds	r1, #1
 80079de:	f002 fd77 	bl	800a4d0 <_strtol_r>
 80079e2:	9b04      	ldr	r3, [sp, #16]
 80079e4:	9e05      	ldr	r6, [sp, #20]
 80079e6:	1ac2      	subs	r2, r0, r3
 80079e8:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80079ec:	429e      	cmp	r6, r3
 80079ee:	bf28      	it	cs
 80079f0:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80079f4:	4630      	mov	r0, r6
 80079f6:	490f      	ldr	r1, [pc, #60]	; (8007a34 <_scanf_float+0x414>)
 80079f8:	f000 f93e 	bl	8007c78 <siprintf>
 80079fc:	e7ce      	b.n	800799c <_scanf_float+0x37c>
 80079fe:	f01c 0f04 	tst.w	ip, #4
 8007a02:	d1db      	bne.n	80079bc <_scanf_float+0x39c>
 8007a04:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8007a08:	f8cc 2000 	str.w	r2, [ip]
 8007a0c:	f8d3 8000 	ldr.w	r8, [r3]
 8007a10:	4602      	mov	r2, r0
 8007a12:	460b      	mov	r3, r1
 8007a14:	f7f8 fffa 	bl	8000a0c <__aeabi_dcmpun>
 8007a18:	b128      	cbz	r0, 8007a26 <_scanf_float+0x406>
 8007a1a:	4807      	ldr	r0, [pc, #28]	; (8007a38 <_scanf_float+0x418>)
 8007a1c:	f000 fab2 	bl	8007f84 <nanf>
 8007a20:	f8c8 0000 	str.w	r0, [r8]
 8007a24:	e7cf      	b.n	80079c6 <_scanf_float+0x3a6>
 8007a26:	4630      	mov	r0, r6
 8007a28:	4639      	mov	r1, r7
 8007a2a:	f7f9 f84d 	bl	8000ac8 <__aeabi_d2f>
 8007a2e:	e7f7      	b.n	8007a20 <_scanf_float+0x400>
 8007a30:	2500      	movs	r5, #0
 8007a32:	e638      	b.n	80076a6 <_scanf_float+0x86>
 8007a34:	0800b62e 	.word	0x0800b62e
 8007a38:	0800b9c5 	.word	0x0800b9c5

08007a3c <std>:
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	b510      	push	{r4, lr}
 8007a40:	4604      	mov	r4, r0
 8007a42:	e9c0 3300 	strd	r3, r3, [r0]
 8007a46:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007a4a:	6083      	str	r3, [r0, #8]
 8007a4c:	8181      	strh	r1, [r0, #12]
 8007a4e:	6643      	str	r3, [r0, #100]	; 0x64
 8007a50:	81c2      	strh	r2, [r0, #14]
 8007a52:	6183      	str	r3, [r0, #24]
 8007a54:	4619      	mov	r1, r3
 8007a56:	2208      	movs	r2, #8
 8007a58:	305c      	adds	r0, #92	; 0x5c
 8007a5a:	f000 fa05 	bl	8007e68 <memset>
 8007a5e:	4b0d      	ldr	r3, [pc, #52]	; (8007a94 <std+0x58>)
 8007a60:	6224      	str	r4, [r4, #32]
 8007a62:	6263      	str	r3, [r4, #36]	; 0x24
 8007a64:	4b0c      	ldr	r3, [pc, #48]	; (8007a98 <std+0x5c>)
 8007a66:	62a3      	str	r3, [r4, #40]	; 0x28
 8007a68:	4b0c      	ldr	r3, [pc, #48]	; (8007a9c <std+0x60>)
 8007a6a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007a6c:	4b0c      	ldr	r3, [pc, #48]	; (8007aa0 <std+0x64>)
 8007a6e:	6323      	str	r3, [r4, #48]	; 0x30
 8007a70:	4b0c      	ldr	r3, [pc, #48]	; (8007aa4 <std+0x68>)
 8007a72:	429c      	cmp	r4, r3
 8007a74:	d006      	beq.n	8007a84 <std+0x48>
 8007a76:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8007a7a:	4294      	cmp	r4, r2
 8007a7c:	d002      	beq.n	8007a84 <std+0x48>
 8007a7e:	33d0      	adds	r3, #208	; 0xd0
 8007a80:	429c      	cmp	r4, r3
 8007a82:	d105      	bne.n	8007a90 <std+0x54>
 8007a84:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007a88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a8c:	f000 ba68 	b.w	8007f60 <__retarget_lock_init_recursive>
 8007a90:	bd10      	pop	{r4, pc}
 8007a92:	bf00      	nop
 8007a94:	08007cb9 	.word	0x08007cb9
 8007a98:	08007cdb 	.word	0x08007cdb
 8007a9c:	08007d13 	.word	0x08007d13
 8007aa0:	08007d37 	.word	0x08007d37
 8007aa4:	200003e0 	.word	0x200003e0

08007aa8 <stdio_exit_handler>:
 8007aa8:	4a02      	ldr	r2, [pc, #8]	; (8007ab4 <stdio_exit_handler+0xc>)
 8007aaa:	4903      	ldr	r1, [pc, #12]	; (8007ab8 <stdio_exit_handler+0x10>)
 8007aac:	4803      	ldr	r0, [pc, #12]	; (8007abc <stdio_exit_handler+0x14>)
 8007aae:	f000 b869 	b.w	8007b84 <_fwalk_sglue>
 8007ab2:	bf00      	nop
 8007ab4:	20000010 	.word	0x20000010
 8007ab8:	0800a889 	.word	0x0800a889
 8007abc:	2000001c 	.word	0x2000001c

08007ac0 <cleanup_stdio>:
 8007ac0:	6841      	ldr	r1, [r0, #4]
 8007ac2:	4b0c      	ldr	r3, [pc, #48]	; (8007af4 <cleanup_stdio+0x34>)
 8007ac4:	b510      	push	{r4, lr}
 8007ac6:	4299      	cmp	r1, r3
 8007ac8:	4604      	mov	r4, r0
 8007aca:	d001      	beq.n	8007ad0 <cleanup_stdio+0x10>
 8007acc:	f002 fedc 	bl	800a888 <_fflush_r>
 8007ad0:	68a1      	ldr	r1, [r4, #8]
 8007ad2:	4b09      	ldr	r3, [pc, #36]	; (8007af8 <cleanup_stdio+0x38>)
 8007ad4:	4299      	cmp	r1, r3
 8007ad6:	d002      	beq.n	8007ade <cleanup_stdio+0x1e>
 8007ad8:	4620      	mov	r0, r4
 8007ada:	f002 fed5 	bl	800a888 <_fflush_r>
 8007ade:	68e1      	ldr	r1, [r4, #12]
 8007ae0:	4b06      	ldr	r3, [pc, #24]	; (8007afc <cleanup_stdio+0x3c>)
 8007ae2:	4299      	cmp	r1, r3
 8007ae4:	d004      	beq.n	8007af0 <cleanup_stdio+0x30>
 8007ae6:	4620      	mov	r0, r4
 8007ae8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007aec:	f002 becc 	b.w	800a888 <_fflush_r>
 8007af0:	bd10      	pop	{r4, pc}
 8007af2:	bf00      	nop
 8007af4:	200003e0 	.word	0x200003e0
 8007af8:	20000448 	.word	0x20000448
 8007afc:	200004b0 	.word	0x200004b0

08007b00 <global_stdio_init.part.0>:
 8007b00:	b510      	push	{r4, lr}
 8007b02:	4b0b      	ldr	r3, [pc, #44]	; (8007b30 <global_stdio_init.part.0+0x30>)
 8007b04:	4c0b      	ldr	r4, [pc, #44]	; (8007b34 <global_stdio_init.part.0+0x34>)
 8007b06:	4a0c      	ldr	r2, [pc, #48]	; (8007b38 <global_stdio_init.part.0+0x38>)
 8007b08:	4620      	mov	r0, r4
 8007b0a:	601a      	str	r2, [r3, #0]
 8007b0c:	2104      	movs	r1, #4
 8007b0e:	2200      	movs	r2, #0
 8007b10:	f7ff ff94 	bl	8007a3c <std>
 8007b14:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007b18:	2201      	movs	r2, #1
 8007b1a:	2109      	movs	r1, #9
 8007b1c:	f7ff ff8e 	bl	8007a3c <std>
 8007b20:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007b24:	2202      	movs	r2, #2
 8007b26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007b2a:	2112      	movs	r1, #18
 8007b2c:	f7ff bf86 	b.w	8007a3c <std>
 8007b30:	20000518 	.word	0x20000518
 8007b34:	200003e0 	.word	0x200003e0
 8007b38:	08007aa9 	.word	0x08007aa9

08007b3c <__sfp_lock_acquire>:
 8007b3c:	4801      	ldr	r0, [pc, #4]	; (8007b44 <__sfp_lock_acquire+0x8>)
 8007b3e:	f000 ba10 	b.w	8007f62 <__retarget_lock_acquire_recursive>
 8007b42:	bf00      	nop
 8007b44:	20000521 	.word	0x20000521

08007b48 <__sfp_lock_release>:
 8007b48:	4801      	ldr	r0, [pc, #4]	; (8007b50 <__sfp_lock_release+0x8>)
 8007b4a:	f000 ba0b 	b.w	8007f64 <__retarget_lock_release_recursive>
 8007b4e:	bf00      	nop
 8007b50:	20000521 	.word	0x20000521

08007b54 <__sinit>:
 8007b54:	b510      	push	{r4, lr}
 8007b56:	4604      	mov	r4, r0
 8007b58:	f7ff fff0 	bl	8007b3c <__sfp_lock_acquire>
 8007b5c:	6a23      	ldr	r3, [r4, #32]
 8007b5e:	b11b      	cbz	r3, 8007b68 <__sinit+0x14>
 8007b60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007b64:	f7ff bff0 	b.w	8007b48 <__sfp_lock_release>
 8007b68:	4b04      	ldr	r3, [pc, #16]	; (8007b7c <__sinit+0x28>)
 8007b6a:	6223      	str	r3, [r4, #32]
 8007b6c:	4b04      	ldr	r3, [pc, #16]	; (8007b80 <__sinit+0x2c>)
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d1f5      	bne.n	8007b60 <__sinit+0xc>
 8007b74:	f7ff ffc4 	bl	8007b00 <global_stdio_init.part.0>
 8007b78:	e7f2      	b.n	8007b60 <__sinit+0xc>
 8007b7a:	bf00      	nop
 8007b7c:	08007ac1 	.word	0x08007ac1
 8007b80:	20000518 	.word	0x20000518

08007b84 <_fwalk_sglue>:
 8007b84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b88:	4607      	mov	r7, r0
 8007b8a:	4688      	mov	r8, r1
 8007b8c:	4614      	mov	r4, r2
 8007b8e:	2600      	movs	r6, #0
 8007b90:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007b94:	f1b9 0901 	subs.w	r9, r9, #1
 8007b98:	d505      	bpl.n	8007ba6 <_fwalk_sglue+0x22>
 8007b9a:	6824      	ldr	r4, [r4, #0]
 8007b9c:	2c00      	cmp	r4, #0
 8007b9e:	d1f7      	bne.n	8007b90 <_fwalk_sglue+0xc>
 8007ba0:	4630      	mov	r0, r6
 8007ba2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007ba6:	89ab      	ldrh	r3, [r5, #12]
 8007ba8:	2b01      	cmp	r3, #1
 8007baa:	d907      	bls.n	8007bbc <_fwalk_sglue+0x38>
 8007bac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007bb0:	3301      	adds	r3, #1
 8007bb2:	d003      	beq.n	8007bbc <_fwalk_sglue+0x38>
 8007bb4:	4629      	mov	r1, r5
 8007bb6:	4638      	mov	r0, r7
 8007bb8:	47c0      	blx	r8
 8007bba:	4306      	orrs	r6, r0
 8007bbc:	3568      	adds	r5, #104	; 0x68
 8007bbe:	e7e9      	b.n	8007b94 <_fwalk_sglue+0x10>

08007bc0 <_puts_r>:
 8007bc0:	6a03      	ldr	r3, [r0, #32]
 8007bc2:	b570      	push	{r4, r5, r6, lr}
 8007bc4:	4605      	mov	r5, r0
 8007bc6:	460e      	mov	r6, r1
 8007bc8:	6884      	ldr	r4, [r0, #8]
 8007bca:	b90b      	cbnz	r3, 8007bd0 <_puts_r+0x10>
 8007bcc:	f7ff ffc2 	bl	8007b54 <__sinit>
 8007bd0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007bd2:	07db      	lsls	r3, r3, #31
 8007bd4:	d405      	bmi.n	8007be2 <_puts_r+0x22>
 8007bd6:	89a3      	ldrh	r3, [r4, #12]
 8007bd8:	0598      	lsls	r0, r3, #22
 8007bda:	d402      	bmi.n	8007be2 <_puts_r+0x22>
 8007bdc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007bde:	f000 f9c0 	bl	8007f62 <__retarget_lock_acquire_recursive>
 8007be2:	89a3      	ldrh	r3, [r4, #12]
 8007be4:	0719      	lsls	r1, r3, #28
 8007be6:	d513      	bpl.n	8007c10 <_puts_r+0x50>
 8007be8:	6923      	ldr	r3, [r4, #16]
 8007bea:	b18b      	cbz	r3, 8007c10 <_puts_r+0x50>
 8007bec:	3e01      	subs	r6, #1
 8007bee:	68a3      	ldr	r3, [r4, #8]
 8007bf0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007bf4:	3b01      	subs	r3, #1
 8007bf6:	60a3      	str	r3, [r4, #8]
 8007bf8:	b9e9      	cbnz	r1, 8007c36 <_puts_r+0x76>
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	da2e      	bge.n	8007c5c <_puts_r+0x9c>
 8007bfe:	4622      	mov	r2, r4
 8007c00:	210a      	movs	r1, #10
 8007c02:	4628      	mov	r0, r5
 8007c04:	f000 f89b 	bl	8007d3e <__swbuf_r>
 8007c08:	3001      	adds	r0, #1
 8007c0a:	d007      	beq.n	8007c1c <_puts_r+0x5c>
 8007c0c:	250a      	movs	r5, #10
 8007c0e:	e007      	b.n	8007c20 <_puts_r+0x60>
 8007c10:	4621      	mov	r1, r4
 8007c12:	4628      	mov	r0, r5
 8007c14:	f000 f8d0 	bl	8007db8 <__swsetup_r>
 8007c18:	2800      	cmp	r0, #0
 8007c1a:	d0e7      	beq.n	8007bec <_puts_r+0x2c>
 8007c1c:	f04f 35ff 	mov.w	r5, #4294967295
 8007c20:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007c22:	07da      	lsls	r2, r3, #31
 8007c24:	d405      	bmi.n	8007c32 <_puts_r+0x72>
 8007c26:	89a3      	ldrh	r3, [r4, #12]
 8007c28:	059b      	lsls	r3, r3, #22
 8007c2a:	d402      	bmi.n	8007c32 <_puts_r+0x72>
 8007c2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007c2e:	f000 f999 	bl	8007f64 <__retarget_lock_release_recursive>
 8007c32:	4628      	mov	r0, r5
 8007c34:	bd70      	pop	{r4, r5, r6, pc}
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	da04      	bge.n	8007c44 <_puts_r+0x84>
 8007c3a:	69a2      	ldr	r2, [r4, #24]
 8007c3c:	429a      	cmp	r2, r3
 8007c3e:	dc06      	bgt.n	8007c4e <_puts_r+0x8e>
 8007c40:	290a      	cmp	r1, #10
 8007c42:	d004      	beq.n	8007c4e <_puts_r+0x8e>
 8007c44:	6823      	ldr	r3, [r4, #0]
 8007c46:	1c5a      	adds	r2, r3, #1
 8007c48:	6022      	str	r2, [r4, #0]
 8007c4a:	7019      	strb	r1, [r3, #0]
 8007c4c:	e7cf      	b.n	8007bee <_puts_r+0x2e>
 8007c4e:	4622      	mov	r2, r4
 8007c50:	4628      	mov	r0, r5
 8007c52:	f000 f874 	bl	8007d3e <__swbuf_r>
 8007c56:	3001      	adds	r0, #1
 8007c58:	d1c9      	bne.n	8007bee <_puts_r+0x2e>
 8007c5a:	e7df      	b.n	8007c1c <_puts_r+0x5c>
 8007c5c:	250a      	movs	r5, #10
 8007c5e:	6823      	ldr	r3, [r4, #0]
 8007c60:	1c5a      	adds	r2, r3, #1
 8007c62:	6022      	str	r2, [r4, #0]
 8007c64:	701d      	strb	r5, [r3, #0]
 8007c66:	e7db      	b.n	8007c20 <_puts_r+0x60>

08007c68 <puts>:
 8007c68:	4b02      	ldr	r3, [pc, #8]	; (8007c74 <puts+0xc>)
 8007c6a:	4601      	mov	r1, r0
 8007c6c:	6818      	ldr	r0, [r3, #0]
 8007c6e:	f7ff bfa7 	b.w	8007bc0 <_puts_r>
 8007c72:	bf00      	nop
 8007c74:	20000068 	.word	0x20000068

08007c78 <siprintf>:
 8007c78:	b40e      	push	{r1, r2, r3}
 8007c7a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007c7e:	b500      	push	{lr}
 8007c80:	b09c      	sub	sp, #112	; 0x70
 8007c82:	ab1d      	add	r3, sp, #116	; 0x74
 8007c84:	9002      	str	r0, [sp, #8]
 8007c86:	9006      	str	r0, [sp, #24]
 8007c88:	9107      	str	r1, [sp, #28]
 8007c8a:	9104      	str	r1, [sp, #16]
 8007c8c:	4808      	ldr	r0, [pc, #32]	; (8007cb0 <siprintf+0x38>)
 8007c8e:	4909      	ldr	r1, [pc, #36]	; (8007cb4 <siprintf+0x3c>)
 8007c90:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c94:	9105      	str	r1, [sp, #20]
 8007c96:	6800      	ldr	r0, [r0, #0]
 8007c98:	a902      	add	r1, sp, #8
 8007c9a:	9301      	str	r3, [sp, #4]
 8007c9c:	f002 fc74 	bl	800a588 <_svfiprintf_r>
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	9b02      	ldr	r3, [sp, #8]
 8007ca4:	701a      	strb	r2, [r3, #0]
 8007ca6:	b01c      	add	sp, #112	; 0x70
 8007ca8:	f85d eb04 	ldr.w	lr, [sp], #4
 8007cac:	b003      	add	sp, #12
 8007cae:	4770      	bx	lr
 8007cb0:	20000068 	.word	0x20000068
 8007cb4:	ffff0208 	.word	0xffff0208

08007cb8 <__sread>:
 8007cb8:	b510      	push	{r4, lr}
 8007cba:	460c      	mov	r4, r1
 8007cbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007cc0:	f000 f900 	bl	8007ec4 <_read_r>
 8007cc4:	2800      	cmp	r0, #0
 8007cc6:	bfab      	itete	ge
 8007cc8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007cca:	89a3      	ldrhlt	r3, [r4, #12]
 8007ccc:	181b      	addge	r3, r3, r0
 8007cce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007cd2:	bfac      	ite	ge
 8007cd4:	6563      	strge	r3, [r4, #84]	; 0x54
 8007cd6:	81a3      	strhlt	r3, [r4, #12]
 8007cd8:	bd10      	pop	{r4, pc}

08007cda <__swrite>:
 8007cda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007cde:	461f      	mov	r7, r3
 8007ce0:	898b      	ldrh	r3, [r1, #12]
 8007ce2:	4605      	mov	r5, r0
 8007ce4:	05db      	lsls	r3, r3, #23
 8007ce6:	460c      	mov	r4, r1
 8007ce8:	4616      	mov	r6, r2
 8007cea:	d505      	bpl.n	8007cf8 <__swrite+0x1e>
 8007cec:	2302      	movs	r3, #2
 8007cee:	2200      	movs	r2, #0
 8007cf0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007cf4:	f000 f8d4 	bl	8007ea0 <_lseek_r>
 8007cf8:	89a3      	ldrh	r3, [r4, #12]
 8007cfa:	4632      	mov	r2, r6
 8007cfc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007d00:	81a3      	strh	r3, [r4, #12]
 8007d02:	4628      	mov	r0, r5
 8007d04:	463b      	mov	r3, r7
 8007d06:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007d0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007d0e:	f000 b8eb 	b.w	8007ee8 <_write_r>

08007d12 <__sseek>:
 8007d12:	b510      	push	{r4, lr}
 8007d14:	460c      	mov	r4, r1
 8007d16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d1a:	f000 f8c1 	bl	8007ea0 <_lseek_r>
 8007d1e:	1c43      	adds	r3, r0, #1
 8007d20:	89a3      	ldrh	r3, [r4, #12]
 8007d22:	bf15      	itete	ne
 8007d24:	6560      	strne	r0, [r4, #84]	; 0x54
 8007d26:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007d2a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007d2e:	81a3      	strheq	r3, [r4, #12]
 8007d30:	bf18      	it	ne
 8007d32:	81a3      	strhne	r3, [r4, #12]
 8007d34:	bd10      	pop	{r4, pc}

08007d36 <__sclose>:
 8007d36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d3a:	f000 b8a1 	b.w	8007e80 <_close_r>

08007d3e <__swbuf_r>:
 8007d3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d40:	460e      	mov	r6, r1
 8007d42:	4614      	mov	r4, r2
 8007d44:	4605      	mov	r5, r0
 8007d46:	b118      	cbz	r0, 8007d50 <__swbuf_r+0x12>
 8007d48:	6a03      	ldr	r3, [r0, #32]
 8007d4a:	b90b      	cbnz	r3, 8007d50 <__swbuf_r+0x12>
 8007d4c:	f7ff ff02 	bl	8007b54 <__sinit>
 8007d50:	69a3      	ldr	r3, [r4, #24]
 8007d52:	60a3      	str	r3, [r4, #8]
 8007d54:	89a3      	ldrh	r3, [r4, #12]
 8007d56:	071a      	lsls	r2, r3, #28
 8007d58:	d525      	bpl.n	8007da6 <__swbuf_r+0x68>
 8007d5a:	6923      	ldr	r3, [r4, #16]
 8007d5c:	b31b      	cbz	r3, 8007da6 <__swbuf_r+0x68>
 8007d5e:	6823      	ldr	r3, [r4, #0]
 8007d60:	6922      	ldr	r2, [r4, #16]
 8007d62:	b2f6      	uxtb	r6, r6
 8007d64:	1a98      	subs	r0, r3, r2
 8007d66:	6963      	ldr	r3, [r4, #20]
 8007d68:	4637      	mov	r7, r6
 8007d6a:	4283      	cmp	r3, r0
 8007d6c:	dc04      	bgt.n	8007d78 <__swbuf_r+0x3a>
 8007d6e:	4621      	mov	r1, r4
 8007d70:	4628      	mov	r0, r5
 8007d72:	f002 fd89 	bl	800a888 <_fflush_r>
 8007d76:	b9e0      	cbnz	r0, 8007db2 <__swbuf_r+0x74>
 8007d78:	68a3      	ldr	r3, [r4, #8]
 8007d7a:	3b01      	subs	r3, #1
 8007d7c:	60a3      	str	r3, [r4, #8]
 8007d7e:	6823      	ldr	r3, [r4, #0]
 8007d80:	1c5a      	adds	r2, r3, #1
 8007d82:	6022      	str	r2, [r4, #0]
 8007d84:	701e      	strb	r6, [r3, #0]
 8007d86:	6962      	ldr	r2, [r4, #20]
 8007d88:	1c43      	adds	r3, r0, #1
 8007d8a:	429a      	cmp	r2, r3
 8007d8c:	d004      	beq.n	8007d98 <__swbuf_r+0x5a>
 8007d8e:	89a3      	ldrh	r3, [r4, #12]
 8007d90:	07db      	lsls	r3, r3, #31
 8007d92:	d506      	bpl.n	8007da2 <__swbuf_r+0x64>
 8007d94:	2e0a      	cmp	r6, #10
 8007d96:	d104      	bne.n	8007da2 <__swbuf_r+0x64>
 8007d98:	4621      	mov	r1, r4
 8007d9a:	4628      	mov	r0, r5
 8007d9c:	f002 fd74 	bl	800a888 <_fflush_r>
 8007da0:	b938      	cbnz	r0, 8007db2 <__swbuf_r+0x74>
 8007da2:	4638      	mov	r0, r7
 8007da4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007da6:	4621      	mov	r1, r4
 8007da8:	4628      	mov	r0, r5
 8007daa:	f000 f805 	bl	8007db8 <__swsetup_r>
 8007dae:	2800      	cmp	r0, #0
 8007db0:	d0d5      	beq.n	8007d5e <__swbuf_r+0x20>
 8007db2:	f04f 37ff 	mov.w	r7, #4294967295
 8007db6:	e7f4      	b.n	8007da2 <__swbuf_r+0x64>

08007db8 <__swsetup_r>:
 8007db8:	b538      	push	{r3, r4, r5, lr}
 8007dba:	4b2a      	ldr	r3, [pc, #168]	; (8007e64 <__swsetup_r+0xac>)
 8007dbc:	4605      	mov	r5, r0
 8007dbe:	6818      	ldr	r0, [r3, #0]
 8007dc0:	460c      	mov	r4, r1
 8007dc2:	b118      	cbz	r0, 8007dcc <__swsetup_r+0x14>
 8007dc4:	6a03      	ldr	r3, [r0, #32]
 8007dc6:	b90b      	cbnz	r3, 8007dcc <__swsetup_r+0x14>
 8007dc8:	f7ff fec4 	bl	8007b54 <__sinit>
 8007dcc:	89a3      	ldrh	r3, [r4, #12]
 8007dce:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007dd2:	0718      	lsls	r0, r3, #28
 8007dd4:	d422      	bmi.n	8007e1c <__swsetup_r+0x64>
 8007dd6:	06d9      	lsls	r1, r3, #27
 8007dd8:	d407      	bmi.n	8007dea <__swsetup_r+0x32>
 8007dda:	2309      	movs	r3, #9
 8007ddc:	602b      	str	r3, [r5, #0]
 8007dde:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007de2:	f04f 30ff 	mov.w	r0, #4294967295
 8007de6:	81a3      	strh	r3, [r4, #12]
 8007de8:	e034      	b.n	8007e54 <__swsetup_r+0x9c>
 8007dea:	0758      	lsls	r0, r3, #29
 8007dec:	d512      	bpl.n	8007e14 <__swsetup_r+0x5c>
 8007dee:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007df0:	b141      	cbz	r1, 8007e04 <__swsetup_r+0x4c>
 8007df2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007df6:	4299      	cmp	r1, r3
 8007df8:	d002      	beq.n	8007e00 <__swsetup_r+0x48>
 8007dfa:	4628      	mov	r0, r5
 8007dfc:	f000 ff34 	bl	8008c68 <_free_r>
 8007e00:	2300      	movs	r3, #0
 8007e02:	6363      	str	r3, [r4, #52]	; 0x34
 8007e04:	89a3      	ldrh	r3, [r4, #12]
 8007e06:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007e0a:	81a3      	strh	r3, [r4, #12]
 8007e0c:	2300      	movs	r3, #0
 8007e0e:	6063      	str	r3, [r4, #4]
 8007e10:	6923      	ldr	r3, [r4, #16]
 8007e12:	6023      	str	r3, [r4, #0]
 8007e14:	89a3      	ldrh	r3, [r4, #12]
 8007e16:	f043 0308 	orr.w	r3, r3, #8
 8007e1a:	81a3      	strh	r3, [r4, #12]
 8007e1c:	6923      	ldr	r3, [r4, #16]
 8007e1e:	b94b      	cbnz	r3, 8007e34 <__swsetup_r+0x7c>
 8007e20:	89a3      	ldrh	r3, [r4, #12]
 8007e22:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007e26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e2a:	d003      	beq.n	8007e34 <__swsetup_r+0x7c>
 8007e2c:	4621      	mov	r1, r4
 8007e2e:	4628      	mov	r0, r5
 8007e30:	f002 fd77 	bl	800a922 <__smakebuf_r>
 8007e34:	89a0      	ldrh	r0, [r4, #12]
 8007e36:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007e3a:	f010 0301 	ands.w	r3, r0, #1
 8007e3e:	d00a      	beq.n	8007e56 <__swsetup_r+0x9e>
 8007e40:	2300      	movs	r3, #0
 8007e42:	60a3      	str	r3, [r4, #8]
 8007e44:	6963      	ldr	r3, [r4, #20]
 8007e46:	425b      	negs	r3, r3
 8007e48:	61a3      	str	r3, [r4, #24]
 8007e4a:	6923      	ldr	r3, [r4, #16]
 8007e4c:	b943      	cbnz	r3, 8007e60 <__swsetup_r+0xa8>
 8007e4e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007e52:	d1c4      	bne.n	8007dde <__swsetup_r+0x26>
 8007e54:	bd38      	pop	{r3, r4, r5, pc}
 8007e56:	0781      	lsls	r1, r0, #30
 8007e58:	bf58      	it	pl
 8007e5a:	6963      	ldrpl	r3, [r4, #20]
 8007e5c:	60a3      	str	r3, [r4, #8]
 8007e5e:	e7f4      	b.n	8007e4a <__swsetup_r+0x92>
 8007e60:	2000      	movs	r0, #0
 8007e62:	e7f7      	b.n	8007e54 <__swsetup_r+0x9c>
 8007e64:	20000068 	.word	0x20000068

08007e68 <memset>:
 8007e68:	4603      	mov	r3, r0
 8007e6a:	4402      	add	r2, r0
 8007e6c:	4293      	cmp	r3, r2
 8007e6e:	d100      	bne.n	8007e72 <memset+0xa>
 8007e70:	4770      	bx	lr
 8007e72:	f803 1b01 	strb.w	r1, [r3], #1
 8007e76:	e7f9      	b.n	8007e6c <memset+0x4>

08007e78 <_localeconv_r>:
 8007e78:	4800      	ldr	r0, [pc, #0]	; (8007e7c <_localeconv_r+0x4>)
 8007e7a:	4770      	bx	lr
 8007e7c:	2000015c 	.word	0x2000015c

08007e80 <_close_r>:
 8007e80:	b538      	push	{r3, r4, r5, lr}
 8007e82:	2300      	movs	r3, #0
 8007e84:	4d05      	ldr	r5, [pc, #20]	; (8007e9c <_close_r+0x1c>)
 8007e86:	4604      	mov	r4, r0
 8007e88:	4608      	mov	r0, r1
 8007e8a:	602b      	str	r3, [r5, #0]
 8007e8c:	f7fb f822 	bl	8002ed4 <_close>
 8007e90:	1c43      	adds	r3, r0, #1
 8007e92:	d102      	bne.n	8007e9a <_close_r+0x1a>
 8007e94:	682b      	ldr	r3, [r5, #0]
 8007e96:	b103      	cbz	r3, 8007e9a <_close_r+0x1a>
 8007e98:	6023      	str	r3, [r4, #0]
 8007e9a:	bd38      	pop	{r3, r4, r5, pc}
 8007e9c:	2000051c 	.word	0x2000051c

08007ea0 <_lseek_r>:
 8007ea0:	b538      	push	{r3, r4, r5, lr}
 8007ea2:	4604      	mov	r4, r0
 8007ea4:	4608      	mov	r0, r1
 8007ea6:	4611      	mov	r1, r2
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	4d05      	ldr	r5, [pc, #20]	; (8007ec0 <_lseek_r+0x20>)
 8007eac:	602a      	str	r2, [r5, #0]
 8007eae:	461a      	mov	r2, r3
 8007eb0:	f7fb f834 	bl	8002f1c <_lseek>
 8007eb4:	1c43      	adds	r3, r0, #1
 8007eb6:	d102      	bne.n	8007ebe <_lseek_r+0x1e>
 8007eb8:	682b      	ldr	r3, [r5, #0]
 8007eba:	b103      	cbz	r3, 8007ebe <_lseek_r+0x1e>
 8007ebc:	6023      	str	r3, [r4, #0]
 8007ebe:	bd38      	pop	{r3, r4, r5, pc}
 8007ec0:	2000051c 	.word	0x2000051c

08007ec4 <_read_r>:
 8007ec4:	b538      	push	{r3, r4, r5, lr}
 8007ec6:	4604      	mov	r4, r0
 8007ec8:	4608      	mov	r0, r1
 8007eca:	4611      	mov	r1, r2
 8007ecc:	2200      	movs	r2, #0
 8007ece:	4d05      	ldr	r5, [pc, #20]	; (8007ee4 <_read_r+0x20>)
 8007ed0:	602a      	str	r2, [r5, #0]
 8007ed2:	461a      	mov	r2, r3
 8007ed4:	f7fa ffc5 	bl	8002e62 <_read>
 8007ed8:	1c43      	adds	r3, r0, #1
 8007eda:	d102      	bne.n	8007ee2 <_read_r+0x1e>
 8007edc:	682b      	ldr	r3, [r5, #0]
 8007ede:	b103      	cbz	r3, 8007ee2 <_read_r+0x1e>
 8007ee0:	6023      	str	r3, [r4, #0]
 8007ee2:	bd38      	pop	{r3, r4, r5, pc}
 8007ee4:	2000051c 	.word	0x2000051c

08007ee8 <_write_r>:
 8007ee8:	b538      	push	{r3, r4, r5, lr}
 8007eea:	4604      	mov	r4, r0
 8007eec:	4608      	mov	r0, r1
 8007eee:	4611      	mov	r1, r2
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	4d05      	ldr	r5, [pc, #20]	; (8007f08 <_write_r+0x20>)
 8007ef4:	602a      	str	r2, [r5, #0]
 8007ef6:	461a      	mov	r2, r3
 8007ef8:	f7fa ffd0 	bl	8002e9c <_write>
 8007efc:	1c43      	adds	r3, r0, #1
 8007efe:	d102      	bne.n	8007f06 <_write_r+0x1e>
 8007f00:	682b      	ldr	r3, [r5, #0]
 8007f02:	b103      	cbz	r3, 8007f06 <_write_r+0x1e>
 8007f04:	6023      	str	r3, [r4, #0]
 8007f06:	bd38      	pop	{r3, r4, r5, pc}
 8007f08:	2000051c 	.word	0x2000051c

08007f0c <__errno>:
 8007f0c:	4b01      	ldr	r3, [pc, #4]	; (8007f14 <__errno+0x8>)
 8007f0e:	6818      	ldr	r0, [r3, #0]
 8007f10:	4770      	bx	lr
 8007f12:	bf00      	nop
 8007f14:	20000068 	.word	0x20000068

08007f18 <__libc_init_array>:
 8007f18:	b570      	push	{r4, r5, r6, lr}
 8007f1a:	2600      	movs	r6, #0
 8007f1c:	4d0c      	ldr	r5, [pc, #48]	; (8007f50 <__libc_init_array+0x38>)
 8007f1e:	4c0d      	ldr	r4, [pc, #52]	; (8007f54 <__libc_init_array+0x3c>)
 8007f20:	1b64      	subs	r4, r4, r5
 8007f22:	10a4      	asrs	r4, r4, #2
 8007f24:	42a6      	cmp	r6, r4
 8007f26:	d109      	bne.n	8007f3c <__libc_init_array+0x24>
 8007f28:	f003 fb2a 	bl	800b580 <_init>
 8007f2c:	2600      	movs	r6, #0
 8007f2e:	4d0a      	ldr	r5, [pc, #40]	; (8007f58 <__libc_init_array+0x40>)
 8007f30:	4c0a      	ldr	r4, [pc, #40]	; (8007f5c <__libc_init_array+0x44>)
 8007f32:	1b64      	subs	r4, r4, r5
 8007f34:	10a4      	asrs	r4, r4, #2
 8007f36:	42a6      	cmp	r6, r4
 8007f38:	d105      	bne.n	8007f46 <__libc_init_array+0x2e>
 8007f3a:	bd70      	pop	{r4, r5, r6, pc}
 8007f3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f40:	4798      	blx	r3
 8007f42:	3601      	adds	r6, #1
 8007f44:	e7ee      	b.n	8007f24 <__libc_init_array+0xc>
 8007f46:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f4a:	4798      	blx	r3
 8007f4c:	3601      	adds	r6, #1
 8007f4e:	e7f2      	b.n	8007f36 <__libc_init_array+0x1e>
 8007f50:	0800ba28 	.word	0x0800ba28
 8007f54:	0800ba28 	.word	0x0800ba28
 8007f58:	0800ba28 	.word	0x0800ba28
 8007f5c:	0800ba2c 	.word	0x0800ba2c

08007f60 <__retarget_lock_init_recursive>:
 8007f60:	4770      	bx	lr

08007f62 <__retarget_lock_acquire_recursive>:
 8007f62:	4770      	bx	lr

08007f64 <__retarget_lock_release_recursive>:
 8007f64:	4770      	bx	lr

08007f66 <memchr>:
 8007f66:	4603      	mov	r3, r0
 8007f68:	b510      	push	{r4, lr}
 8007f6a:	b2c9      	uxtb	r1, r1
 8007f6c:	4402      	add	r2, r0
 8007f6e:	4293      	cmp	r3, r2
 8007f70:	4618      	mov	r0, r3
 8007f72:	d101      	bne.n	8007f78 <memchr+0x12>
 8007f74:	2000      	movs	r0, #0
 8007f76:	e003      	b.n	8007f80 <memchr+0x1a>
 8007f78:	7804      	ldrb	r4, [r0, #0]
 8007f7a:	3301      	adds	r3, #1
 8007f7c:	428c      	cmp	r4, r1
 8007f7e:	d1f6      	bne.n	8007f6e <memchr+0x8>
 8007f80:	bd10      	pop	{r4, pc}
	...

08007f84 <nanf>:
 8007f84:	4800      	ldr	r0, [pc, #0]	; (8007f88 <nanf+0x4>)
 8007f86:	4770      	bx	lr
 8007f88:	7fc00000 	.word	0x7fc00000

08007f8c <quorem>:
 8007f8c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f90:	6903      	ldr	r3, [r0, #16]
 8007f92:	690c      	ldr	r4, [r1, #16]
 8007f94:	4607      	mov	r7, r0
 8007f96:	42a3      	cmp	r3, r4
 8007f98:	db7f      	blt.n	800809a <quorem+0x10e>
 8007f9a:	3c01      	subs	r4, #1
 8007f9c:	f100 0514 	add.w	r5, r0, #20
 8007fa0:	f101 0814 	add.w	r8, r1, #20
 8007fa4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007fa8:	9301      	str	r3, [sp, #4]
 8007faa:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007fae:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007fb2:	3301      	adds	r3, #1
 8007fb4:	429a      	cmp	r2, r3
 8007fb6:	fbb2 f6f3 	udiv	r6, r2, r3
 8007fba:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007fbe:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007fc2:	d331      	bcc.n	8008028 <quorem+0x9c>
 8007fc4:	f04f 0e00 	mov.w	lr, #0
 8007fc8:	4640      	mov	r0, r8
 8007fca:	46ac      	mov	ip, r5
 8007fcc:	46f2      	mov	sl, lr
 8007fce:	f850 2b04 	ldr.w	r2, [r0], #4
 8007fd2:	b293      	uxth	r3, r2
 8007fd4:	fb06 e303 	mla	r3, r6, r3, lr
 8007fd8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007fdc:	0c1a      	lsrs	r2, r3, #16
 8007fde:	b29b      	uxth	r3, r3
 8007fe0:	fb06 220e 	mla	r2, r6, lr, r2
 8007fe4:	ebaa 0303 	sub.w	r3, sl, r3
 8007fe8:	f8dc a000 	ldr.w	sl, [ip]
 8007fec:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007ff0:	fa1f fa8a 	uxth.w	sl, sl
 8007ff4:	4453      	add	r3, sl
 8007ff6:	f8dc a000 	ldr.w	sl, [ip]
 8007ffa:	b292      	uxth	r2, r2
 8007ffc:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008000:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008004:	b29b      	uxth	r3, r3
 8008006:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800800a:	4581      	cmp	r9, r0
 800800c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008010:	f84c 3b04 	str.w	r3, [ip], #4
 8008014:	d2db      	bcs.n	8007fce <quorem+0x42>
 8008016:	f855 300b 	ldr.w	r3, [r5, fp]
 800801a:	b92b      	cbnz	r3, 8008028 <quorem+0x9c>
 800801c:	9b01      	ldr	r3, [sp, #4]
 800801e:	3b04      	subs	r3, #4
 8008020:	429d      	cmp	r5, r3
 8008022:	461a      	mov	r2, r3
 8008024:	d32d      	bcc.n	8008082 <quorem+0xf6>
 8008026:	613c      	str	r4, [r7, #16]
 8008028:	4638      	mov	r0, r7
 800802a:	f001 f9dd 	bl	80093e8 <__mcmp>
 800802e:	2800      	cmp	r0, #0
 8008030:	db23      	blt.n	800807a <quorem+0xee>
 8008032:	4629      	mov	r1, r5
 8008034:	2000      	movs	r0, #0
 8008036:	3601      	adds	r6, #1
 8008038:	f858 2b04 	ldr.w	r2, [r8], #4
 800803c:	f8d1 c000 	ldr.w	ip, [r1]
 8008040:	b293      	uxth	r3, r2
 8008042:	1ac3      	subs	r3, r0, r3
 8008044:	0c12      	lsrs	r2, r2, #16
 8008046:	fa1f f08c 	uxth.w	r0, ip
 800804a:	4403      	add	r3, r0
 800804c:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8008050:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008054:	b29b      	uxth	r3, r3
 8008056:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800805a:	45c1      	cmp	r9, r8
 800805c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008060:	f841 3b04 	str.w	r3, [r1], #4
 8008064:	d2e8      	bcs.n	8008038 <quorem+0xac>
 8008066:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800806a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800806e:	b922      	cbnz	r2, 800807a <quorem+0xee>
 8008070:	3b04      	subs	r3, #4
 8008072:	429d      	cmp	r5, r3
 8008074:	461a      	mov	r2, r3
 8008076:	d30a      	bcc.n	800808e <quorem+0x102>
 8008078:	613c      	str	r4, [r7, #16]
 800807a:	4630      	mov	r0, r6
 800807c:	b003      	add	sp, #12
 800807e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008082:	6812      	ldr	r2, [r2, #0]
 8008084:	3b04      	subs	r3, #4
 8008086:	2a00      	cmp	r2, #0
 8008088:	d1cd      	bne.n	8008026 <quorem+0x9a>
 800808a:	3c01      	subs	r4, #1
 800808c:	e7c8      	b.n	8008020 <quorem+0x94>
 800808e:	6812      	ldr	r2, [r2, #0]
 8008090:	3b04      	subs	r3, #4
 8008092:	2a00      	cmp	r2, #0
 8008094:	d1f0      	bne.n	8008078 <quorem+0xec>
 8008096:	3c01      	subs	r4, #1
 8008098:	e7eb      	b.n	8008072 <quorem+0xe6>
 800809a:	2000      	movs	r0, #0
 800809c:	e7ee      	b.n	800807c <quorem+0xf0>
	...

080080a0 <_dtoa_r>:
 80080a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080a4:	4616      	mov	r6, r2
 80080a6:	461f      	mov	r7, r3
 80080a8:	69c4      	ldr	r4, [r0, #28]
 80080aa:	b099      	sub	sp, #100	; 0x64
 80080ac:	4605      	mov	r5, r0
 80080ae:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80080b2:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80080b6:	b974      	cbnz	r4, 80080d6 <_dtoa_r+0x36>
 80080b8:	2010      	movs	r0, #16
 80080ba:	f000 fe1d 	bl	8008cf8 <malloc>
 80080be:	4602      	mov	r2, r0
 80080c0:	61e8      	str	r0, [r5, #28]
 80080c2:	b920      	cbnz	r0, 80080ce <_dtoa_r+0x2e>
 80080c4:	21ef      	movs	r1, #239	; 0xef
 80080c6:	4bac      	ldr	r3, [pc, #688]	; (8008378 <_dtoa_r+0x2d8>)
 80080c8:	48ac      	ldr	r0, [pc, #688]	; (800837c <_dtoa_r+0x2dc>)
 80080ca:	f002 fcd9 	bl	800aa80 <__assert_func>
 80080ce:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80080d2:	6004      	str	r4, [r0, #0]
 80080d4:	60c4      	str	r4, [r0, #12]
 80080d6:	69eb      	ldr	r3, [r5, #28]
 80080d8:	6819      	ldr	r1, [r3, #0]
 80080da:	b151      	cbz	r1, 80080f2 <_dtoa_r+0x52>
 80080dc:	685a      	ldr	r2, [r3, #4]
 80080de:	2301      	movs	r3, #1
 80080e0:	4093      	lsls	r3, r2
 80080e2:	604a      	str	r2, [r1, #4]
 80080e4:	608b      	str	r3, [r1, #8]
 80080e6:	4628      	mov	r0, r5
 80080e8:	f000 fefa 	bl	8008ee0 <_Bfree>
 80080ec:	2200      	movs	r2, #0
 80080ee:	69eb      	ldr	r3, [r5, #28]
 80080f0:	601a      	str	r2, [r3, #0]
 80080f2:	1e3b      	subs	r3, r7, #0
 80080f4:	bfaf      	iteee	ge
 80080f6:	2300      	movge	r3, #0
 80080f8:	2201      	movlt	r2, #1
 80080fa:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80080fe:	9305      	strlt	r3, [sp, #20]
 8008100:	bfa8      	it	ge
 8008102:	f8c8 3000 	strge.w	r3, [r8]
 8008106:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800810a:	4b9d      	ldr	r3, [pc, #628]	; (8008380 <_dtoa_r+0x2e0>)
 800810c:	bfb8      	it	lt
 800810e:	f8c8 2000 	strlt.w	r2, [r8]
 8008112:	ea33 0309 	bics.w	r3, r3, r9
 8008116:	d119      	bne.n	800814c <_dtoa_r+0xac>
 8008118:	f242 730f 	movw	r3, #9999	; 0x270f
 800811c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800811e:	6013      	str	r3, [r2, #0]
 8008120:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008124:	4333      	orrs	r3, r6
 8008126:	f000 8589 	beq.w	8008c3c <_dtoa_r+0xb9c>
 800812a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800812c:	b953      	cbnz	r3, 8008144 <_dtoa_r+0xa4>
 800812e:	4b95      	ldr	r3, [pc, #596]	; (8008384 <_dtoa_r+0x2e4>)
 8008130:	e023      	b.n	800817a <_dtoa_r+0xda>
 8008132:	4b95      	ldr	r3, [pc, #596]	; (8008388 <_dtoa_r+0x2e8>)
 8008134:	9303      	str	r3, [sp, #12]
 8008136:	3308      	adds	r3, #8
 8008138:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800813a:	6013      	str	r3, [r2, #0]
 800813c:	9803      	ldr	r0, [sp, #12]
 800813e:	b019      	add	sp, #100	; 0x64
 8008140:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008144:	4b8f      	ldr	r3, [pc, #572]	; (8008384 <_dtoa_r+0x2e4>)
 8008146:	9303      	str	r3, [sp, #12]
 8008148:	3303      	adds	r3, #3
 800814a:	e7f5      	b.n	8008138 <_dtoa_r+0x98>
 800814c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8008150:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8008154:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008158:	2200      	movs	r2, #0
 800815a:	2300      	movs	r3, #0
 800815c:	f7f8 fc24 	bl	80009a8 <__aeabi_dcmpeq>
 8008160:	4680      	mov	r8, r0
 8008162:	b160      	cbz	r0, 800817e <_dtoa_r+0xde>
 8008164:	2301      	movs	r3, #1
 8008166:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008168:	6013      	str	r3, [r2, #0]
 800816a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800816c:	2b00      	cmp	r3, #0
 800816e:	f000 8562 	beq.w	8008c36 <_dtoa_r+0xb96>
 8008172:	4b86      	ldr	r3, [pc, #536]	; (800838c <_dtoa_r+0x2ec>)
 8008174:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8008176:	6013      	str	r3, [r2, #0]
 8008178:	3b01      	subs	r3, #1
 800817a:	9303      	str	r3, [sp, #12]
 800817c:	e7de      	b.n	800813c <_dtoa_r+0x9c>
 800817e:	ab16      	add	r3, sp, #88	; 0x58
 8008180:	9301      	str	r3, [sp, #4]
 8008182:	ab17      	add	r3, sp, #92	; 0x5c
 8008184:	9300      	str	r3, [sp, #0]
 8008186:	4628      	mov	r0, r5
 8008188:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800818c:	f001 fa3c 	bl	8009608 <__d2b>
 8008190:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8008194:	4682      	mov	sl, r0
 8008196:	2c00      	cmp	r4, #0
 8008198:	d07e      	beq.n	8008298 <_dtoa_r+0x1f8>
 800819a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800819e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80081a0:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80081a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80081a8:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80081ac:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80081b0:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80081b4:	4619      	mov	r1, r3
 80081b6:	2200      	movs	r2, #0
 80081b8:	4b75      	ldr	r3, [pc, #468]	; (8008390 <_dtoa_r+0x2f0>)
 80081ba:	f7f7 ffd5 	bl	8000168 <__aeabi_dsub>
 80081be:	a368      	add	r3, pc, #416	; (adr r3, 8008360 <_dtoa_r+0x2c0>)
 80081c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081c4:	f7f8 f988 	bl	80004d8 <__aeabi_dmul>
 80081c8:	a367      	add	r3, pc, #412	; (adr r3, 8008368 <_dtoa_r+0x2c8>)
 80081ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081ce:	f7f7 ffcd 	bl	800016c <__adddf3>
 80081d2:	4606      	mov	r6, r0
 80081d4:	4620      	mov	r0, r4
 80081d6:	460f      	mov	r7, r1
 80081d8:	f7f8 f914 	bl	8000404 <__aeabi_i2d>
 80081dc:	a364      	add	r3, pc, #400	; (adr r3, 8008370 <_dtoa_r+0x2d0>)
 80081de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081e2:	f7f8 f979 	bl	80004d8 <__aeabi_dmul>
 80081e6:	4602      	mov	r2, r0
 80081e8:	460b      	mov	r3, r1
 80081ea:	4630      	mov	r0, r6
 80081ec:	4639      	mov	r1, r7
 80081ee:	f7f7 ffbd 	bl	800016c <__adddf3>
 80081f2:	4606      	mov	r6, r0
 80081f4:	460f      	mov	r7, r1
 80081f6:	f7f8 fc1f 	bl	8000a38 <__aeabi_d2iz>
 80081fa:	2200      	movs	r2, #0
 80081fc:	4683      	mov	fp, r0
 80081fe:	2300      	movs	r3, #0
 8008200:	4630      	mov	r0, r6
 8008202:	4639      	mov	r1, r7
 8008204:	f7f8 fbda 	bl	80009bc <__aeabi_dcmplt>
 8008208:	b148      	cbz	r0, 800821e <_dtoa_r+0x17e>
 800820a:	4658      	mov	r0, fp
 800820c:	f7f8 f8fa 	bl	8000404 <__aeabi_i2d>
 8008210:	4632      	mov	r2, r6
 8008212:	463b      	mov	r3, r7
 8008214:	f7f8 fbc8 	bl	80009a8 <__aeabi_dcmpeq>
 8008218:	b908      	cbnz	r0, 800821e <_dtoa_r+0x17e>
 800821a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800821e:	f1bb 0f16 	cmp.w	fp, #22
 8008222:	d857      	bhi.n	80082d4 <_dtoa_r+0x234>
 8008224:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008228:	4b5a      	ldr	r3, [pc, #360]	; (8008394 <_dtoa_r+0x2f4>)
 800822a:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800822e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008232:	f7f8 fbc3 	bl	80009bc <__aeabi_dcmplt>
 8008236:	2800      	cmp	r0, #0
 8008238:	d04e      	beq.n	80082d8 <_dtoa_r+0x238>
 800823a:	2300      	movs	r3, #0
 800823c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008240:	930f      	str	r3, [sp, #60]	; 0x3c
 8008242:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008244:	1b1b      	subs	r3, r3, r4
 8008246:	1e5a      	subs	r2, r3, #1
 8008248:	bf46      	itte	mi
 800824a:	f1c3 0901 	rsbmi	r9, r3, #1
 800824e:	2300      	movmi	r3, #0
 8008250:	f04f 0900 	movpl.w	r9, #0
 8008254:	9209      	str	r2, [sp, #36]	; 0x24
 8008256:	bf48      	it	mi
 8008258:	9309      	strmi	r3, [sp, #36]	; 0x24
 800825a:	f1bb 0f00 	cmp.w	fp, #0
 800825e:	db3d      	blt.n	80082dc <_dtoa_r+0x23c>
 8008260:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008262:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8008266:	445b      	add	r3, fp
 8008268:	9309      	str	r3, [sp, #36]	; 0x24
 800826a:	2300      	movs	r3, #0
 800826c:	930a      	str	r3, [sp, #40]	; 0x28
 800826e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008270:	2b09      	cmp	r3, #9
 8008272:	d867      	bhi.n	8008344 <_dtoa_r+0x2a4>
 8008274:	2b05      	cmp	r3, #5
 8008276:	bfc4      	itt	gt
 8008278:	3b04      	subgt	r3, #4
 800827a:	9322      	strgt	r3, [sp, #136]	; 0x88
 800827c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800827e:	bfc8      	it	gt
 8008280:	2400      	movgt	r4, #0
 8008282:	f1a3 0302 	sub.w	r3, r3, #2
 8008286:	bfd8      	it	le
 8008288:	2401      	movle	r4, #1
 800828a:	2b03      	cmp	r3, #3
 800828c:	f200 8086 	bhi.w	800839c <_dtoa_r+0x2fc>
 8008290:	e8df f003 	tbb	[pc, r3]
 8008294:	5637392c 	.word	0x5637392c
 8008298:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800829c:	441c      	add	r4, r3
 800829e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80082a2:	2b20      	cmp	r3, #32
 80082a4:	bfc1      	itttt	gt
 80082a6:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80082aa:	fa09 f903 	lslgt.w	r9, r9, r3
 80082ae:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 80082b2:	fa26 f303 	lsrgt.w	r3, r6, r3
 80082b6:	bfd6      	itet	le
 80082b8:	f1c3 0320 	rsble	r3, r3, #32
 80082bc:	ea49 0003 	orrgt.w	r0, r9, r3
 80082c0:	fa06 f003 	lslle.w	r0, r6, r3
 80082c4:	f7f8 f88e 	bl	80003e4 <__aeabi_ui2d>
 80082c8:	2201      	movs	r2, #1
 80082ca:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80082ce:	3c01      	subs	r4, #1
 80082d0:	9213      	str	r2, [sp, #76]	; 0x4c
 80082d2:	e76f      	b.n	80081b4 <_dtoa_r+0x114>
 80082d4:	2301      	movs	r3, #1
 80082d6:	e7b3      	b.n	8008240 <_dtoa_r+0x1a0>
 80082d8:	900f      	str	r0, [sp, #60]	; 0x3c
 80082da:	e7b2      	b.n	8008242 <_dtoa_r+0x1a2>
 80082dc:	f1cb 0300 	rsb	r3, fp, #0
 80082e0:	930a      	str	r3, [sp, #40]	; 0x28
 80082e2:	2300      	movs	r3, #0
 80082e4:	eba9 090b 	sub.w	r9, r9, fp
 80082e8:	930e      	str	r3, [sp, #56]	; 0x38
 80082ea:	e7c0      	b.n	800826e <_dtoa_r+0x1ce>
 80082ec:	2300      	movs	r3, #0
 80082ee:	930b      	str	r3, [sp, #44]	; 0x2c
 80082f0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	dc55      	bgt.n	80083a2 <_dtoa_r+0x302>
 80082f6:	2301      	movs	r3, #1
 80082f8:	461a      	mov	r2, r3
 80082fa:	9306      	str	r3, [sp, #24]
 80082fc:	9308      	str	r3, [sp, #32]
 80082fe:	9223      	str	r2, [sp, #140]	; 0x8c
 8008300:	e00b      	b.n	800831a <_dtoa_r+0x27a>
 8008302:	2301      	movs	r3, #1
 8008304:	e7f3      	b.n	80082ee <_dtoa_r+0x24e>
 8008306:	2300      	movs	r3, #0
 8008308:	930b      	str	r3, [sp, #44]	; 0x2c
 800830a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800830c:	445b      	add	r3, fp
 800830e:	9306      	str	r3, [sp, #24]
 8008310:	3301      	adds	r3, #1
 8008312:	2b01      	cmp	r3, #1
 8008314:	9308      	str	r3, [sp, #32]
 8008316:	bfb8      	it	lt
 8008318:	2301      	movlt	r3, #1
 800831a:	2100      	movs	r1, #0
 800831c:	2204      	movs	r2, #4
 800831e:	69e8      	ldr	r0, [r5, #28]
 8008320:	f102 0614 	add.w	r6, r2, #20
 8008324:	429e      	cmp	r6, r3
 8008326:	d940      	bls.n	80083aa <_dtoa_r+0x30a>
 8008328:	6041      	str	r1, [r0, #4]
 800832a:	4628      	mov	r0, r5
 800832c:	f000 fd98 	bl	8008e60 <_Balloc>
 8008330:	9003      	str	r0, [sp, #12]
 8008332:	2800      	cmp	r0, #0
 8008334:	d13c      	bne.n	80083b0 <_dtoa_r+0x310>
 8008336:	4602      	mov	r2, r0
 8008338:	f240 11af 	movw	r1, #431	; 0x1af
 800833c:	4b16      	ldr	r3, [pc, #88]	; (8008398 <_dtoa_r+0x2f8>)
 800833e:	e6c3      	b.n	80080c8 <_dtoa_r+0x28>
 8008340:	2301      	movs	r3, #1
 8008342:	e7e1      	b.n	8008308 <_dtoa_r+0x268>
 8008344:	2401      	movs	r4, #1
 8008346:	2300      	movs	r3, #0
 8008348:	940b      	str	r4, [sp, #44]	; 0x2c
 800834a:	9322      	str	r3, [sp, #136]	; 0x88
 800834c:	f04f 33ff 	mov.w	r3, #4294967295
 8008350:	2200      	movs	r2, #0
 8008352:	9306      	str	r3, [sp, #24]
 8008354:	9308      	str	r3, [sp, #32]
 8008356:	2312      	movs	r3, #18
 8008358:	e7d1      	b.n	80082fe <_dtoa_r+0x25e>
 800835a:	bf00      	nop
 800835c:	f3af 8000 	nop.w
 8008360:	636f4361 	.word	0x636f4361
 8008364:	3fd287a7 	.word	0x3fd287a7
 8008368:	8b60c8b3 	.word	0x8b60c8b3
 800836c:	3fc68a28 	.word	0x3fc68a28
 8008370:	509f79fb 	.word	0x509f79fb
 8008374:	3fd34413 	.word	0x3fd34413
 8008378:	0800b640 	.word	0x0800b640
 800837c:	0800b657 	.word	0x0800b657
 8008380:	7ff00000 	.word	0x7ff00000
 8008384:	0800b63c 	.word	0x0800b63c
 8008388:	0800b633 	.word	0x0800b633
 800838c:	0800b60b 	.word	0x0800b60b
 8008390:	3ff80000 	.word	0x3ff80000
 8008394:	0800b748 	.word	0x0800b748
 8008398:	0800b6af 	.word	0x0800b6af
 800839c:	2301      	movs	r3, #1
 800839e:	930b      	str	r3, [sp, #44]	; 0x2c
 80083a0:	e7d4      	b.n	800834c <_dtoa_r+0x2ac>
 80083a2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80083a4:	9306      	str	r3, [sp, #24]
 80083a6:	9308      	str	r3, [sp, #32]
 80083a8:	e7b7      	b.n	800831a <_dtoa_r+0x27a>
 80083aa:	3101      	adds	r1, #1
 80083ac:	0052      	lsls	r2, r2, #1
 80083ae:	e7b7      	b.n	8008320 <_dtoa_r+0x280>
 80083b0:	69eb      	ldr	r3, [r5, #28]
 80083b2:	9a03      	ldr	r2, [sp, #12]
 80083b4:	601a      	str	r2, [r3, #0]
 80083b6:	9b08      	ldr	r3, [sp, #32]
 80083b8:	2b0e      	cmp	r3, #14
 80083ba:	f200 80a8 	bhi.w	800850e <_dtoa_r+0x46e>
 80083be:	2c00      	cmp	r4, #0
 80083c0:	f000 80a5 	beq.w	800850e <_dtoa_r+0x46e>
 80083c4:	f1bb 0f00 	cmp.w	fp, #0
 80083c8:	dd34      	ble.n	8008434 <_dtoa_r+0x394>
 80083ca:	4b9a      	ldr	r3, [pc, #616]	; (8008634 <_dtoa_r+0x594>)
 80083cc:	f00b 020f 	and.w	r2, fp, #15
 80083d0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80083d4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80083d8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80083dc:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80083e0:	ea4f 142b 	mov.w	r4, fp, asr #4
 80083e4:	d016      	beq.n	8008414 <_dtoa_r+0x374>
 80083e6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80083ea:	4b93      	ldr	r3, [pc, #588]	; (8008638 <_dtoa_r+0x598>)
 80083ec:	2703      	movs	r7, #3
 80083ee:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80083f2:	f7f8 f99b 	bl	800072c <__aeabi_ddiv>
 80083f6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80083fa:	f004 040f 	and.w	r4, r4, #15
 80083fe:	4e8e      	ldr	r6, [pc, #568]	; (8008638 <_dtoa_r+0x598>)
 8008400:	b954      	cbnz	r4, 8008418 <_dtoa_r+0x378>
 8008402:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008406:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800840a:	f7f8 f98f 	bl	800072c <__aeabi_ddiv>
 800840e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008412:	e029      	b.n	8008468 <_dtoa_r+0x3c8>
 8008414:	2702      	movs	r7, #2
 8008416:	e7f2      	b.n	80083fe <_dtoa_r+0x35e>
 8008418:	07e1      	lsls	r1, r4, #31
 800841a:	d508      	bpl.n	800842e <_dtoa_r+0x38e>
 800841c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008420:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008424:	f7f8 f858 	bl	80004d8 <__aeabi_dmul>
 8008428:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800842c:	3701      	adds	r7, #1
 800842e:	1064      	asrs	r4, r4, #1
 8008430:	3608      	adds	r6, #8
 8008432:	e7e5      	b.n	8008400 <_dtoa_r+0x360>
 8008434:	f000 80a5 	beq.w	8008582 <_dtoa_r+0x4e2>
 8008438:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800843c:	f1cb 0400 	rsb	r4, fp, #0
 8008440:	4b7c      	ldr	r3, [pc, #496]	; (8008634 <_dtoa_r+0x594>)
 8008442:	f004 020f 	and.w	r2, r4, #15
 8008446:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800844a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800844e:	f7f8 f843 	bl	80004d8 <__aeabi_dmul>
 8008452:	2702      	movs	r7, #2
 8008454:	2300      	movs	r3, #0
 8008456:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800845a:	4e77      	ldr	r6, [pc, #476]	; (8008638 <_dtoa_r+0x598>)
 800845c:	1124      	asrs	r4, r4, #4
 800845e:	2c00      	cmp	r4, #0
 8008460:	f040 8084 	bne.w	800856c <_dtoa_r+0x4cc>
 8008464:	2b00      	cmp	r3, #0
 8008466:	d1d2      	bne.n	800840e <_dtoa_r+0x36e>
 8008468:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800846c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8008470:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008472:	2b00      	cmp	r3, #0
 8008474:	f000 8087 	beq.w	8008586 <_dtoa_r+0x4e6>
 8008478:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800847c:	2200      	movs	r2, #0
 800847e:	4b6f      	ldr	r3, [pc, #444]	; (800863c <_dtoa_r+0x59c>)
 8008480:	f7f8 fa9c 	bl	80009bc <__aeabi_dcmplt>
 8008484:	2800      	cmp	r0, #0
 8008486:	d07e      	beq.n	8008586 <_dtoa_r+0x4e6>
 8008488:	9b08      	ldr	r3, [sp, #32]
 800848a:	2b00      	cmp	r3, #0
 800848c:	d07b      	beq.n	8008586 <_dtoa_r+0x4e6>
 800848e:	9b06      	ldr	r3, [sp, #24]
 8008490:	2b00      	cmp	r3, #0
 8008492:	dd38      	ble.n	8008506 <_dtoa_r+0x466>
 8008494:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008498:	2200      	movs	r2, #0
 800849a:	4b69      	ldr	r3, [pc, #420]	; (8008640 <_dtoa_r+0x5a0>)
 800849c:	f7f8 f81c 	bl	80004d8 <__aeabi_dmul>
 80084a0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80084a4:	9c06      	ldr	r4, [sp, #24]
 80084a6:	f10b 38ff 	add.w	r8, fp, #4294967295
 80084aa:	3701      	adds	r7, #1
 80084ac:	4638      	mov	r0, r7
 80084ae:	f7f7 ffa9 	bl	8000404 <__aeabi_i2d>
 80084b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80084b6:	f7f8 f80f 	bl	80004d8 <__aeabi_dmul>
 80084ba:	2200      	movs	r2, #0
 80084bc:	4b61      	ldr	r3, [pc, #388]	; (8008644 <_dtoa_r+0x5a4>)
 80084be:	f7f7 fe55 	bl	800016c <__adddf3>
 80084c2:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80084c6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80084ca:	9611      	str	r6, [sp, #68]	; 0x44
 80084cc:	2c00      	cmp	r4, #0
 80084ce:	d15d      	bne.n	800858c <_dtoa_r+0x4ec>
 80084d0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80084d4:	2200      	movs	r2, #0
 80084d6:	4b5c      	ldr	r3, [pc, #368]	; (8008648 <_dtoa_r+0x5a8>)
 80084d8:	f7f7 fe46 	bl	8000168 <__aeabi_dsub>
 80084dc:	4602      	mov	r2, r0
 80084de:	460b      	mov	r3, r1
 80084e0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80084e4:	4633      	mov	r3, r6
 80084e6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80084e8:	f7f8 fa86 	bl	80009f8 <__aeabi_dcmpgt>
 80084ec:	2800      	cmp	r0, #0
 80084ee:	f040 8295 	bne.w	8008a1c <_dtoa_r+0x97c>
 80084f2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80084f6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80084f8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80084fc:	f7f8 fa5e 	bl	80009bc <__aeabi_dcmplt>
 8008500:	2800      	cmp	r0, #0
 8008502:	f040 8289 	bne.w	8008a18 <_dtoa_r+0x978>
 8008506:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800850a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800850e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008510:	2b00      	cmp	r3, #0
 8008512:	f2c0 8151 	blt.w	80087b8 <_dtoa_r+0x718>
 8008516:	f1bb 0f0e 	cmp.w	fp, #14
 800851a:	f300 814d 	bgt.w	80087b8 <_dtoa_r+0x718>
 800851e:	4b45      	ldr	r3, [pc, #276]	; (8008634 <_dtoa_r+0x594>)
 8008520:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008524:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008528:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800852c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800852e:	2b00      	cmp	r3, #0
 8008530:	f280 80da 	bge.w	80086e8 <_dtoa_r+0x648>
 8008534:	9b08      	ldr	r3, [sp, #32]
 8008536:	2b00      	cmp	r3, #0
 8008538:	f300 80d6 	bgt.w	80086e8 <_dtoa_r+0x648>
 800853c:	f040 826b 	bne.w	8008a16 <_dtoa_r+0x976>
 8008540:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008544:	2200      	movs	r2, #0
 8008546:	4b40      	ldr	r3, [pc, #256]	; (8008648 <_dtoa_r+0x5a8>)
 8008548:	f7f7 ffc6 	bl	80004d8 <__aeabi_dmul>
 800854c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008550:	f7f8 fa48 	bl	80009e4 <__aeabi_dcmpge>
 8008554:	9c08      	ldr	r4, [sp, #32]
 8008556:	4626      	mov	r6, r4
 8008558:	2800      	cmp	r0, #0
 800855a:	f040 8241 	bne.w	80089e0 <_dtoa_r+0x940>
 800855e:	2331      	movs	r3, #49	; 0x31
 8008560:	9f03      	ldr	r7, [sp, #12]
 8008562:	f10b 0b01 	add.w	fp, fp, #1
 8008566:	f807 3b01 	strb.w	r3, [r7], #1
 800856a:	e23d      	b.n	80089e8 <_dtoa_r+0x948>
 800856c:	07e2      	lsls	r2, r4, #31
 800856e:	d505      	bpl.n	800857c <_dtoa_r+0x4dc>
 8008570:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008574:	f7f7 ffb0 	bl	80004d8 <__aeabi_dmul>
 8008578:	2301      	movs	r3, #1
 800857a:	3701      	adds	r7, #1
 800857c:	1064      	asrs	r4, r4, #1
 800857e:	3608      	adds	r6, #8
 8008580:	e76d      	b.n	800845e <_dtoa_r+0x3be>
 8008582:	2702      	movs	r7, #2
 8008584:	e770      	b.n	8008468 <_dtoa_r+0x3c8>
 8008586:	46d8      	mov	r8, fp
 8008588:	9c08      	ldr	r4, [sp, #32]
 800858a:	e78f      	b.n	80084ac <_dtoa_r+0x40c>
 800858c:	9903      	ldr	r1, [sp, #12]
 800858e:	4b29      	ldr	r3, [pc, #164]	; (8008634 <_dtoa_r+0x594>)
 8008590:	4421      	add	r1, r4
 8008592:	9112      	str	r1, [sp, #72]	; 0x48
 8008594:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008596:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800859a:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800859e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80085a2:	2900      	cmp	r1, #0
 80085a4:	d054      	beq.n	8008650 <_dtoa_r+0x5b0>
 80085a6:	2000      	movs	r0, #0
 80085a8:	4928      	ldr	r1, [pc, #160]	; (800864c <_dtoa_r+0x5ac>)
 80085aa:	f7f8 f8bf 	bl	800072c <__aeabi_ddiv>
 80085ae:	463b      	mov	r3, r7
 80085b0:	4632      	mov	r2, r6
 80085b2:	f7f7 fdd9 	bl	8000168 <__aeabi_dsub>
 80085b6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80085ba:	9f03      	ldr	r7, [sp, #12]
 80085bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80085c0:	f7f8 fa3a 	bl	8000a38 <__aeabi_d2iz>
 80085c4:	4604      	mov	r4, r0
 80085c6:	f7f7 ff1d 	bl	8000404 <__aeabi_i2d>
 80085ca:	4602      	mov	r2, r0
 80085cc:	460b      	mov	r3, r1
 80085ce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80085d2:	f7f7 fdc9 	bl	8000168 <__aeabi_dsub>
 80085d6:	4602      	mov	r2, r0
 80085d8:	460b      	mov	r3, r1
 80085da:	3430      	adds	r4, #48	; 0x30
 80085dc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80085e0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80085e4:	f807 4b01 	strb.w	r4, [r7], #1
 80085e8:	f7f8 f9e8 	bl	80009bc <__aeabi_dcmplt>
 80085ec:	2800      	cmp	r0, #0
 80085ee:	d173      	bne.n	80086d8 <_dtoa_r+0x638>
 80085f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80085f4:	2000      	movs	r0, #0
 80085f6:	4911      	ldr	r1, [pc, #68]	; (800863c <_dtoa_r+0x59c>)
 80085f8:	f7f7 fdb6 	bl	8000168 <__aeabi_dsub>
 80085fc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008600:	f7f8 f9dc 	bl	80009bc <__aeabi_dcmplt>
 8008604:	2800      	cmp	r0, #0
 8008606:	f040 80b6 	bne.w	8008776 <_dtoa_r+0x6d6>
 800860a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800860c:	429f      	cmp	r7, r3
 800860e:	f43f af7a 	beq.w	8008506 <_dtoa_r+0x466>
 8008612:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008616:	2200      	movs	r2, #0
 8008618:	4b09      	ldr	r3, [pc, #36]	; (8008640 <_dtoa_r+0x5a0>)
 800861a:	f7f7 ff5d 	bl	80004d8 <__aeabi_dmul>
 800861e:	2200      	movs	r2, #0
 8008620:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008624:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008628:	4b05      	ldr	r3, [pc, #20]	; (8008640 <_dtoa_r+0x5a0>)
 800862a:	f7f7 ff55 	bl	80004d8 <__aeabi_dmul>
 800862e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008632:	e7c3      	b.n	80085bc <_dtoa_r+0x51c>
 8008634:	0800b748 	.word	0x0800b748
 8008638:	0800b720 	.word	0x0800b720
 800863c:	3ff00000 	.word	0x3ff00000
 8008640:	40240000 	.word	0x40240000
 8008644:	401c0000 	.word	0x401c0000
 8008648:	40140000 	.word	0x40140000
 800864c:	3fe00000 	.word	0x3fe00000
 8008650:	4630      	mov	r0, r6
 8008652:	4639      	mov	r1, r7
 8008654:	f7f7 ff40 	bl	80004d8 <__aeabi_dmul>
 8008658:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800865a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800865e:	9c03      	ldr	r4, [sp, #12]
 8008660:	9314      	str	r3, [sp, #80]	; 0x50
 8008662:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008666:	f7f8 f9e7 	bl	8000a38 <__aeabi_d2iz>
 800866a:	9015      	str	r0, [sp, #84]	; 0x54
 800866c:	f7f7 feca 	bl	8000404 <__aeabi_i2d>
 8008670:	4602      	mov	r2, r0
 8008672:	460b      	mov	r3, r1
 8008674:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008678:	f7f7 fd76 	bl	8000168 <__aeabi_dsub>
 800867c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800867e:	4606      	mov	r6, r0
 8008680:	3330      	adds	r3, #48	; 0x30
 8008682:	f804 3b01 	strb.w	r3, [r4], #1
 8008686:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008688:	460f      	mov	r7, r1
 800868a:	429c      	cmp	r4, r3
 800868c:	f04f 0200 	mov.w	r2, #0
 8008690:	d124      	bne.n	80086dc <_dtoa_r+0x63c>
 8008692:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008696:	4baf      	ldr	r3, [pc, #700]	; (8008954 <_dtoa_r+0x8b4>)
 8008698:	f7f7 fd68 	bl	800016c <__adddf3>
 800869c:	4602      	mov	r2, r0
 800869e:	460b      	mov	r3, r1
 80086a0:	4630      	mov	r0, r6
 80086a2:	4639      	mov	r1, r7
 80086a4:	f7f8 f9a8 	bl	80009f8 <__aeabi_dcmpgt>
 80086a8:	2800      	cmp	r0, #0
 80086aa:	d163      	bne.n	8008774 <_dtoa_r+0x6d4>
 80086ac:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80086b0:	2000      	movs	r0, #0
 80086b2:	49a8      	ldr	r1, [pc, #672]	; (8008954 <_dtoa_r+0x8b4>)
 80086b4:	f7f7 fd58 	bl	8000168 <__aeabi_dsub>
 80086b8:	4602      	mov	r2, r0
 80086ba:	460b      	mov	r3, r1
 80086bc:	4630      	mov	r0, r6
 80086be:	4639      	mov	r1, r7
 80086c0:	f7f8 f97c 	bl	80009bc <__aeabi_dcmplt>
 80086c4:	2800      	cmp	r0, #0
 80086c6:	f43f af1e 	beq.w	8008506 <_dtoa_r+0x466>
 80086ca:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80086cc:	1e7b      	subs	r3, r7, #1
 80086ce:	9314      	str	r3, [sp, #80]	; 0x50
 80086d0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80086d4:	2b30      	cmp	r3, #48	; 0x30
 80086d6:	d0f8      	beq.n	80086ca <_dtoa_r+0x62a>
 80086d8:	46c3      	mov	fp, r8
 80086da:	e03b      	b.n	8008754 <_dtoa_r+0x6b4>
 80086dc:	4b9e      	ldr	r3, [pc, #632]	; (8008958 <_dtoa_r+0x8b8>)
 80086de:	f7f7 fefb 	bl	80004d8 <__aeabi_dmul>
 80086e2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80086e6:	e7bc      	b.n	8008662 <_dtoa_r+0x5c2>
 80086e8:	9f03      	ldr	r7, [sp, #12]
 80086ea:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80086ee:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80086f2:	4640      	mov	r0, r8
 80086f4:	4649      	mov	r1, r9
 80086f6:	f7f8 f819 	bl	800072c <__aeabi_ddiv>
 80086fa:	f7f8 f99d 	bl	8000a38 <__aeabi_d2iz>
 80086fe:	4604      	mov	r4, r0
 8008700:	f7f7 fe80 	bl	8000404 <__aeabi_i2d>
 8008704:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008708:	f7f7 fee6 	bl	80004d8 <__aeabi_dmul>
 800870c:	4602      	mov	r2, r0
 800870e:	460b      	mov	r3, r1
 8008710:	4640      	mov	r0, r8
 8008712:	4649      	mov	r1, r9
 8008714:	f7f7 fd28 	bl	8000168 <__aeabi_dsub>
 8008718:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800871c:	f807 6b01 	strb.w	r6, [r7], #1
 8008720:	9e03      	ldr	r6, [sp, #12]
 8008722:	f8dd c020 	ldr.w	ip, [sp, #32]
 8008726:	1bbe      	subs	r6, r7, r6
 8008728:	45b4      	cmp	ip, r6
 800872a:	4602      	mov	r2, r0
 800872c:	460b      	mov	r3, r1
 800872e:	d136      	bne.n	800879e <_dtoa_r+0x6fe>
 8008730:	f7f7 fd1c 	bl	800016c <__adddf3>
 8008734:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008738:	4680      	mov	r8, r0
 800873a:	4689      	mov	r9, r1
 800873c:	f7f8 f95c 	bl	80009f8 <__aeabi_dcmpgt>
 8008740:	bb58      	cbnz	r0, 800879a <_dtoa_r+0x6fa>
 8008742:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008746:	4640      	mov	r0, r8
 8008748:	4649      	mov	r1, r9
 800874a:	f7f8 f92d 	bl	80009a8 <__aeabi_dcmpeq>
 800874e:	b108      	cbz	r0, 8008754 <_dtoa_r+0x6b4>
 8008750:	07e3      	lsls	r3, r4, #31
 8008752:	d422      	bmi.n	800879a <_dtoa_r+0x6fa>
 8008754:	4651      	mov	r1, sl
 8008756:	4628      	mov	r0, r5
 8008758:	f000 fbc2 	bl	8008ee0 <_Bfree>
 800875c:	2300      	movs	r3, #0
 800875e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008760:	703b      	strb	r3, [r7, #0]
 8008762:	f10b 0301 	add.w	r3, fp, #1
 8008766:	6013      	str	r3, [r2, #0]
 8008768:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800876a:	2b00      	cmp	r3, #0
 800876c:	f43f ace6 	beq.w	800813c <_dtoa_r+0x9c>
 8008770:	601f      	str	r7, [r3, #0]
 8008772:	e4e3      	b.n	800813c <_dtoa_r+0x9c>
 8008774:	4627      	mov	r7, r4
 8008776:	463b      	mov	r3, r7
 8008778:	461f      	mov	r7, r3
 800877a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800877e:	2a39      	cmp	r2, #57	; 0x39
 8008780:	d107      	bne.n	8008792 <_dtoa_r+0x6f2>
 8008782:	9a03      	ldr	r2, [sp, #12]
 8008784:	429a      	cmp	r2, r3
 8008786:	d1f7      	bne.n	8008778 <_dtoa_r+0x6d8>
 8008788:	2230      	movs	r2, #48	; 0x30
 800878a:	9903      	ldr	r1, [sp, #12]
 800878c:	f108 0801 	add.w	r8, r8, #1
 8008790:	700a      	strb	r2, [r1, #0]
 8008792:	781a      	ldrb	r2, [r3, #0]
 8008794:	3201      	adds	r2, #1
 8008796:	701a      	strb	r2, [r3, #0]
 8008798:	e79e      	b.n	80086d8 <_dtoa_r+0x638>
 800879a:	46d8      	mov	r8, fp
 800879c:	e7eb      	b.n	8008776 <_dtoa_r+0x6d6>
 800879e:	2200      	movs	r2, #0
 80087a0:	4b6d      	ldr	r3, [pc, #436]	; (8008958 <_dtoa_r+0x8b8>)
 80087a2:	f7f7 fe99 	bl	80004d8 <__aeabi_dmul>
 80087a6:	2200      	movs	r2, #0
 80087a8:	2300      	movs	r3, #0
 80087aa:	4680      	mov	r8, r0
 80087ac:	4689      	mov	r9, r1
 80087ae:	f7f8 f8fb 	bl	80009a8 <__aeabi_dcmpeq>
 80087b2:	2800      	cmp	r0, #0
 80087b4:	d09b      	beq.n	80086ee <_dtoa_r+0x64e>
 80087b6:	e7cd      	b.n	8008754 <_dtoa_r+0x6b4>
 80087b8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80087ba:	2a00      	cmp	r2, #0
 80087bc:	f000 80c4 	beq.w	8008948 <_dtoa_r+0x8a8>
 80087c0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80087c2:	2a01      	cmp	r2, #1
 80087c4:	f300 80a8 	bgt.w	8008918 <_dtoa_r+0x878>
 80087c8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80087ca:	2a00      	cmp	r2, #0
 80087cc:	f000 80a0 	beq.w	8008910 <_dtoa_r+0x870>
 80087d0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80087d4:	464f      	mov	r7, r9
 80087d6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80087d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80087da:	2101      	movs	r1, #1
 80087dc:	441a      	add	r2, r3
 80087de:	4628      	mov	r0, r5
 80087e0:	4499      	add	r9, r3
 80087e2:	9209      	str	r2, [sp, #36]	; 0x24
 80087e4:	f000 fc7c 	bl	80090e0 <__i2b>
 80087e8:	4606      	mov	r6, r0
 80087ea:	b15f      	cbz	r7, 8008804 <_dtoa_r+0x764>
 80087ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	dd08      	ble.n	8008804 <_dtoa_r+0x764>
 80087f2:	42bb      	cmp	r3, r7
 80087f4:	bfa8      	it	ge
 80087f6:	463b      	movge	r3, r7
 80087f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80087fa:	eba9 0903 	sub.w	r9, r9, r3
 80087fe:	1aff      	subs	r7, r7, r3
 8008800:	1ad3      	subs	r3, r2, r3
 8008802:	9309      	str	r3, [sp, #36]	; 0x24
 8008804:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008806:	b1f3      	cbz	r3, 8008846 <_dtoa_r+0x7a6>
 8008808:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800880a:	2b00      	cmp	r3, #0
 800880c:	f000 80a0 	beq.w	8008950 <_dtoa_r+0x8b0>
 8008810:	2c00      	cmp	r4, #0
 8008812:	dd10      	ble.n	8008836 <_dtoa_r+0x796>
 8008814:	4631      	mov	r1, r6
 8008816:	4622      	mov	r2, r4
 8008818:	4628      	mov	r0, r5
 800881a:	f000 fd1f 	bl	800925c <__pow5mult>
 800881e:	4652      	mov	r2, sl
 8008820:	4601      	mov	r1, r0
 8008822:	4606      	mov	r6, r0
 8008824:	4628      	mov	r0, r5
 8008826:	f000 fc71 	bl	800910c <__multiply>
 800882a:	4680      	mov	r8, r0
 800882c:	4651      	mov	r1, sl
 800882e:	4628      	mov	r0, r5
 8008830:	f000 fb56 	bl	8008ee0 <_Bfree>
 8008834:	46c2      	mov	sl, r8
 8008836:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008838:	1b1a      	subs	r2, r3, r4
 800883a:	d004      	beq.n	8008846 <_dtoa_r+0x7a6>
 800883c:	4651      	mov	r1, sl
 800883e:	4628      	mov	r0, r5
 8008840:	f000 fd0c 	bl	800925c <__pow5mult>
 8008844:	4682      	mov	sl, r0
 8008846:	2101      	movs	r1, #1
 8008848:	4628      	mov	r0, r5
 800884a:	f000 fc49 	bl	80090e0 <__i2b>
 800884e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008850:	4604      	mov	r4, r0
 8008852:	2b00      	cmp	r3, #0
 8008854:	f340 8082 	ble.w	800895c <_dtoa_r+0x8bc>
 8008858:	461a      	mov	r2, r3
 800885a:	4601      	mov	r1, r0
 800885c:	4628      	mov	r0, r5
 800885e:	f000 fcfd 	bl	800925c <__pow5mult>
 8008862:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008864:	4604      	mov	r4, r0
 8008866:	2b01      	cmp	r3, #1
 8008868:	dd7b      	ble.n	8008962 <_dtoa_r+0x8c2>
 800886a:	f04f 0800 	mov.w	r8, #0
 800886e:	6923      	ldr	r3, [r4, #16]
 8008870:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008874:	6918      	ldr	r0, [r3, #16]
 8008876:	f000 fbe5 	bl	8009044 <__hi0bits>
 800887a:	f1c0 0020 	rsb	r0, r0, #32
 800887e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008880:	4418      	add	r0, r3
 8008882:	f010 001f 	ands.w	r0, r0, #31
 8008886:	f000 8092 	beq.w	80089ae <_dtoa_r+0x90e>
 800888a:	f1c0 0320 	rsb	r3, r0, #32
 800888e:	2b04      	cmp	r3, #4
 8008890:	f340 8085 	ble.w	800899e <_dtoa_r+0x8fe>
 8008894:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008896:	f1c0 001c 	rsb	r0, r0, #28
 800889a:	4403      	add	r3, r0
 800889c:	4481      	add	r9, r0
 800889e:	4407      	add	r7, r0
 80088a0:	9309      	str	r3, [sp, #36]	; 0x24
 80088a2:	f1b9 0f00 	cmp.w	r9, #0
 80088a6:	dd05      	ble.n	80088b4 <_dtoa_r+0x814>
 80088a8:	4651      	mov	r1, sl
 80088aa:	464a      	mov	r2, r9
 80088ac:	4628      	mov	r0, r5
 80088ae:	f000 fd2f 	bl	8009310 <__lshift>
 80088b2:	4682      	mov	sl, r0
 80088b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	dd05      	ble.n	80088c6 <_dtoa_r+0x826>
 80088ba:	4621      	mov	r1, r4
 80088bc:	461a      	mov	r2, r3
 80088be:	4628      	mov	r0, r5
 80088c0:	f000 fd26 	bl	8009310 <__lshift>
 80088c4:	4604      	mov	r4, r0
 80088c6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d072      	beq.n	80089b2 <_dtoa_r+0x912>
 80088cc:	4621      	mov	r1, r4
 80088ce:	4650      	mov	r0, sl
 80088d0:	f000 fd8a 	bl	80093e8 <__mcmp>
 80088d4:	2800      	cmp	r0, #0
 80088d6:	da6c      	bge.n	80089b2 <_dtoa_r+0x912>
 80088d8:	2300      	movs	r3, #0
 80088da:	4651      	mov	r1, sl
 80088dc:	220a      	movs	r2, #10
 80088de:	4628      	mov	r0, r5
 80088e0:	f000 fb20 	bl	8008f24 <__multadd>
 80088e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80088e6:	4682      	mov	sl, r0
 80088e8:	f10b 3bff 	add.w	fp, fp, #4294967295
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	f000 81ac 	beq.w	8008c4a <_dtoa_r+0xbaa>
 80088f2:	2300      	movs	r3, #0
 80088f4:	4631      	mov	r1, r6
 80088f6:	220a      	movs	r2, #10
 80088f8:	4628      	mov	r0, r5
 80088fa:	f000 fb13 	bl	8008f24 <__multadd>
 80088fe:	9b06      	ldr	r3, [sp, #24]
 8008900:	4606      	mov	r6, r0
 8008902:	2b00      	cmp	r3, #0
 8008904:	f300 8093 	bgt.w	8008a2e <_dtoa_r+0x98e>
 8008908:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800890a:	2b02      	cmp	r3, #2
 800890c:	dc59      	bgt.n	80089c2 <_dtoa_r+0x922>
 800890e:	e08e      	b.n	8008a2e <_dtoa_r+0x98e>
 8008910:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008912:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008916:	e75d      	b.n	80087d4 <_dtoa_r+0x734>
 8008918:	9b08      	ldr	r3, [sp, #32]
 800891a:	1e5c      	subs	r4, r3, #1
 800891c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800891e:	42a3      	cmp	r3, r4
 8008920:	bfbf      	itttt	lt
 8008922:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8008924:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8008926:	1ae3      	sublt	r3, r4, r3
 8008928:	18d2      	addlt	r2, r2, r3
 800892a:	bfa8      	it	ge
 800892c:	1b1c      	subge	r4, r3, r4
 800892e:	9b08      	ldr	r3, [sp, #32]
 8008930:	bfbe      	ittt	lt
 8008932:	940a      	strlt	r4, [sp, #40]	; 0x28
 8008934:	920e      	strlt	r2, [sp, #56]	; 0x38
 8008936:	2400      	movlt	r4, #0
 8008938:	2b00      	cmp	r3, #0
 800893a:	bfb5      	itete	lt
 800893c:	eba9 0703 	sublt.w	r7, r9, r3
 8008940:	464f      	movge	r7, r9
 8008942:	2300      	movlt	r3, #0
 8008944:	9b08      	ldrge	r3, [sp, #32]
 8008946:	e747      	b.n	80087d8 <_dtoa_r+0x738>
 8008948:	464f      	mov	r7, r9
 800894a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800894c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800894e:	e74c      	b.n	80087ea <_dtoa_r+0x74a>
 8008950:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008952:	e773      	b.n	800883c <_dtoa_r+0x79c>
 8008954:	3fe00000 	.word	0x3fe00000
 8008958:	40240000 	.word	0x40240000
 800895c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800895e:	2b01      	cmp	r3, #1
 8008960:	dc18      	bgt.n	8008994 <_dtoa_r+0x8f4>
 8008962:	9b04      	ldr	r3, [sp, #16]
 8008964:	b9b3      	cbnz	r3, 8008994 <_dtoa_r+0x8f4>
 8008966:	9b05      	ldr	r3, [sp, #20]
 8008968:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800896c:	b993      	cbnz	r3, 8008994 <_dtoa_r+0x8f4>
 800896e:	9b05      	ldr	r3, [sp, #20]
 8008970:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008974:	0d1b      	lsrs	r3, r3, #20
 8008976:	051b      	lsls	r3, r3, #20
 8008978:	b17b      	cbz	r3, 800899a <_dtoa_r+0x8fa>
 800897a:	f04f 0801 	mov.w	r8, #1
 800897e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008980:	f109 0901 	add.w	r9, r9, #1
 8008984:	3301      	adds	r3, #1
 8008986:	9309      	str	r3, [sp, #36]	; 0x24
 8008988:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800898a:	2b00      	cmp	r3, #0
 800898c:	f47f af6f 	bne.w	800886e <_dtoa_r+0x7ce>
 8008990:	2001      	movs	r0, #1
 8008992:	e774      	b.n	800887e <_dtoa_r+0x7de>
 8008994:	f04f 0800 	mov.w	r8, #0
 8008998:	e7f6      	b.n	8008988 <_dtoa_r+0x8e8>
 800899a:	4698      	mov	r8, r3
 800899c:	e7f4      	b.n	8008988 <_dtoa_r+0x8e8>
 800899e:	d080      	beq.n	80088a2 <_dtoa_r+0x802>
 80089a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80089a2:	331c      	adds	r3, #28
 80089a4:	441a      	add	r2, r3
 80089a6:	4499      	add	r9, r3
 80089a8:	441f      	add	r7, r3
 80089aa:	9209      	str	r2, [sp, #36]	; 0x24
 80089ac:	e779      	b.n	80088a2 <_dtoa_r+0x802>
 80089ae:	4603      	mov	r3, r0
 80089b0:	e7f6      	b.n	80089a0 <_dtoa_r+0x900>
 80089b2:	9b08      	ldr	r3, [sp, #32]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	dc34      	bgt.n	8008a22 <_dtoa_r+0x982>
 80089b8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80089ba:	2b02      	cmp	r3, #2
 80089bc:	dd31      	ble.n	8008a22 <_dtoa_r+0x982>
 80089be:	9b08      	ldr	r3, [sp, #32]
 80089c0:	9306      	str	r3, [sp, #24]
 80089c2:	9b06      	ldr	r3, [sp, #24]
 80089c4:	b963      	cbnz	r3, 80089e0 <_dtoa_r+0x940>
 80089c6:	4621      	mov	r1, r4
 80089c8:	2205      	movs	r2, #5
 80089ca:	4628      	mov	r0, r5
 80089cc:	f000 faaa 	bl	8008f24 <__multadd>
 80089d0:	4601      	mov	r1, r0
 80089d2:	4604      	mov	r4, r0
 80089d4:	4650      	mov	r0, sl
 80089d6:	f000 fd07 	bl	80093e8 <__mcmp>
 80089da:	2800      	cmp	r0, #0
 80089dc:	f73f adbf 	bgt.w	800855e <_dtoa_r+0x4be>
 80089e0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80089e2:	9f03      	ldr	r7, [sp, #12]
 80089e4:	ea6f 0b03 	mvn.w	fp, r3
 80089e8:	f04f 0800 	mov.w	r8, #0
 80089ec:	4621      	mov	r1, r4
 80089ee:	4628      	mov	r0, r5
 80089f0:	f000 fa76 	bl	8008ee0 <_Bfree>
 80089f4:	2e00      	cmp	r6, #0
 80089f6:	f43f aead 	beq.w	8008754 <_dtoa_r+0x6b4>
 80089fa:	f1b8 0f00 	cmp.w	r8, #0
 80089fe:	d005      	beq.n	8008a0c <_dtoa_r+0x96c>
 8008a00:	45b0      	cmp	r8, r6
 8008a02:	d003      	beq.n	8008a0c <_dtoa_r+0x96c>
 8008a04:	4641      	mov	r1, r8
 8008a06:	4628      	mov	r0, r5
 8008a08:	f000 fa6a 	bl	8008ee0 <_Bfree>
 8008a0c:	4631      	mov	r1, r6
 8008a0e:	4628      	mov	r0, r5
 8008a10:	f000 fa66 	bl	8008ee0 <_Bfree>
 8008a14:	e69e      	b.n	8008754 <_dtoa_r+0x6b4>
 8008a16:	2400      	movs	r4, #0
 8008a18:	4626      	mov	r6, r4
 8008a1a:	e7e1      	b.n	80089e0 <_dtoa_r+0x940>
 8008a1c:	46c3      	mov	fp, r8
 8008a1e:	4626      	mov	r6, r4
 8008a20:	e59d      	b.n	800855e <_dtoa_r+0x4be>
 8008a22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	f000 80c8 	beq.w	8008bba <_dtoa_r+0xb1a>
 8008a2a:	9b08      	ldr	r3, [sp, #32]
 8008a2c:	9306      	str	r3, [sp, #24]
 8008a2e:	2f00      	cmp	r7, #0
 8008a30:	dd05      	ble.n	8008a3e <_dtoa_r+0x99e>
 8008a32:	4631      	mov	r1, r6
 8008a34:	463a      	mov	r2, r7
 8008a36:	4628      	mov	r0, r5
 8008a38:	f000 fc6a 	bl	8009310 <__lshift>
 8008a3c:	4606      	mov	r6, r0
 8008a3e:	f1b8 0f00 	cmp.w	r8, #0
 8008a42:	d05b      	beq.n	8008afc <_dtoa_r+0xa5c>
 8008a44:	4628      	mov	r0, r5
 8008a46:	6871      	ldr	r1, [r6, #4]
 8008a48:	f000 fa0a 	bl	8008e60 <_Balloc>
 8008a4c:	4607      	mov	r7, r0
 8008a4e:	b928      	cbnz	r0, 8008a5c <_dtoa_r+0x9bc>
 8008a50:	4602      	mov	r2, r0
 8008a52:	f240 21ef 	movw	r1, #751	; 0x2ef
 8008a56:	4b81      	ldr	r3, [pc, #516]	; (8008c5c <_dtoa_r+0xbbc>)
 8008a58:	f7ff bb36 	b.w	80080c8 <_dtoa_r+0x28>
 8008a5c:	6932      	ldr	r2, [r6, #16]
 8008a5e:	f106 010c 	add.w	r1, r6, #12
 8008a62:	3202      	adds	r2, #2
 8008a64:	0092      	lsls	r2, r2, #2
 8008a66:	300c      	adds	r0, #12
 8008a68:	f001 fff6 	bl	800aa58 <memcpy>
 8008a6c:	2201      	movs	r2, #1
 8008a6e:	4639      	mov	r1, r7
 8008a70:	4628      	mov	r0, r5
 8008a72:	f000 fc4d 	bl	8009310 <__lshift>
 8008a76:	46b0      	mov	r8, r6
 8008a78:	4606      	mov	r6, r0
 8008a7a:	9b03      	ldr	r3, [sp, #12]
 8008a7c:	9a03      	ldr	r2, [sp, #12]
 8008a7e:	3301      	adds	r3, #1
 8008a80:	9308      	str	r3, [sp, #32]
 8008a82:	9b06      	ldr	r3, [sp, #24]
 8008a84:	4413      	add	r3, r2
 8008a86:	930b      	str	r3, [sp, #44]	; 0x2c
 8008a88:	9b04      	ldr	r3, [sp, #16]
 8008a8a:	f003 0301 	and.w	r3, r3, #1
 8008a8e:	930a      	str	r3, [sp, #40]	; 0x28
 8008a90:	9b08      	ldr	r3, [sp, #32]
 8008a92:	4621      	mov	r1, r4
 8008a94:	3b01      	subs	r3, #1
 8008a96:	4650      	mov	r0, sl
 8008a98:	9304      	str	r3, [sp, #16]
 8008a9a:	f7ff fa77 	bl	8007f8c <quorem>
 8008a9e:	4641      	mov	r1, r8
 8008aa0:	9006      	str	r0, [sp, #24]
 8008aa2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008aa6:	4650      	mov	r0, sl
 8008aa8:	f000 fc9e 	bl	80093e8 <__mcmp>
 8008aac:	4632      	mov	r2, r6
 8008aae:	9009      	str	r0, [sp, #36]	; 0x24
 8008ab0:	4621      	mov	r1, r4
 8008ab2:	4628      	mov	r0, r5
 8008ab4:	f000 fcb4 	bl	8009420 <__mdiff>
 8008ab8:	68c2      	ldr	r2, [r0, #12]
 8008aba:	4607      	mov	r7, r0
 8008abc:	bb02      	cbnz	r2, 8008b00 <_dtoa_r+0xa60>
 8008abe:	4601      	mov	r1, r0
 8008ac0:	4650      	mov	r0, sl
 8008ac2:	f000 fc91 	bl	80093e8 <__mcmp>
 8008ac6:	4602      	mov	r2, r0
 8008ac8:	4639      	mov	r1, r7
 8008aca:	4628      	mov	r0, r5
 8008acc:	920c      	str	r2, [sp, #48]	; 0x30
 8008ace:	f000 fa07 	bl	8008ee0 <_Bfree>
 8008ad2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008ad4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008ad6:	9f08      	ldr	r7, [sp, #32]
 8008ad8:	ea43 0102 	orr.w	r1, r3, r2
 8008adc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ade:	4319      	orrs	r1, r3
 8008ae0:	d110      	bne.n	8008b04 <_dtoa_r+0xa64>
 8008ae2:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008ae6:	d029      	beq.n	8008b3c <_dtoa_r+0xa9c>
 8008ae8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	dd02      	ble.n	8008af4 <_dtoa_r+0xa54>
 8008aee:	9b06      	ldr	r3, [sp, #24]
 8008af0:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8008af4:	9b04      	ldr	r3, [sp, #16]
 8008af6:	f883 9000 	strb.w	r9, [r3]
 8008afa:	e777      	b.n	80089ec <_dtoa_r+0x94c>
 8008afc:	4630      	mov	r0, r6
 8008afe:	e7ba      	b.n	8008a76 <_dtoa_r+0x9d6>
 8008b00:	2201      	movs	r2, #1
 8008b02:	e7e1      	b.n	8008ac8 <_dtoa_r+0xa28>
 8008b04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	db04      	blt.n	8008b14 <_dtoa_r+0xa74>
 8008b0a:	9922      	ldr	r1, [sp, #136]	; 0x88
 8008b0c:	430b      	orrs	r3, r1
 8008b0e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008b10:	430b      	orrs	r3, r1
 8008b12:	d120      	bne.n	8008b56 <_dtoa_r+0xab6>
 8008b14:	2a00      	cmp	r2, #0
 8008b16:	dded      	ble.n	8008af4 <_dtoa_r+0xa54>
 8008b18:	4651      	mov	r1, sl
 8008b1a:	2201      	movs	r2, #1
 8008b1c:	4628      	mov	r0, r5
 8008b1e:	f000 fbf7 	bl	8009310 <__lshift>
 8008b22:	4621      	mov	r1, r4
 8008b24:	4682      	mov	sl, r0
 8008b26:	f000 fc5f 	bl	80093e8 <__mcmp>
 8008b2a:	2800      	cmp	r0, #0
 8008b2c:	dc03      	bgt.n	8008b36 <_dtoa_r+0xa96>
 8008b2e:	d1e1      	bne.n	8008af4 <_dtoa_r+0xa54>
 8008b30:	f019 0f01 	tst.w	r9, #1
 8008b34:	d0de      	beq.n	8008af4 <_dtoa_r+0xa54>
 8008b36:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008b3a:	d1d8      	bne.n	8008aee <_dtoa_r+0xa4e>
 8008b3c:	2339      	movs	r3, #57	; 0x39
 8008b3e:	9a04      	ldr	r2, [sp, #16]
 8008b40:	7013      	strb	r3, [r2, #0]
 8008b42:	463b      	mov	r3, r7
 8008b44:	461f      	mov	r7, r3
 8008b46:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8008b4a:	3b01      	subs	r3, #1
 8008b4c:	2a39      	cmp	r2, #57	; 0x39
 8008b4e:	d06b      	beq.n	8008c28 <_dtoa_r+0xb88>
 8008b50:	3201      	adds	r2, #1
 8008b52:	701a      	strb	r2, [r3, #0]
 8008b54:	e74a      	b.n	80089ec <_dtoa_r+0x94c>
 8008b56:	2a00      	cmp	r2, #0
 8008b58:	dd07      	ble.n	8008b6a <_dtoa_r+0xaca>
 8008b5a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008b5e:	d0ed      	beq.n	8008b3c <_dtoa_r+0xa9c>
 8008b60:	9a04      	ldr	r2, [sp, #16]
 8008b62:	f109 0301 	add.w	r3, r9, #1
 8008b66:	7013      	strb	r3, [r2, #0]
 8008b68:	e740      	b.n	80089ec <_dtoa_r+0x94c>
 8008b6a:	9b08      	ldr	r3, [sp, #32]
 8008b6c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008b6e:	f803 9c01 	strb.w	r9, [r3, #-1]
 8008b72:	4293      	cmp	r3, r2
 8008b74:	d042      	beq.n	8008bfc <_dtoa_r+0xb5c>
 8008b76:	4651      	mov	r1, sl
 8008b78:	2300      	movs	r3, #0
 8008b7a:	220a      	movs	r2, #10
 8008b7c:	4628      	mov	r0, r5
 8008b7e:	f000 f9d1 	bl	8008f24 <__multadd>
 8008b82:	45b0      	cmp	r8, r6
 8008b84:	4682      	mov	sl, r0
 8008b86:	f04f 0300 	mov.w	r3, #0
 8008b8a:	f04f 020a 	mov.w	r2, #10
 8008b8e:	4641      	mov	r1, r8
 8008b90:	4628      	mov	r0, r5
 8008b92:	d107      	bne.n	8008ba4 <_dtoa_r+0xb04>
 8008b94:	f000 f9c6 	bl	8008f24 <__multadd>
 8008b98:	4680      	mov	r8, r0
 8008b9a:	4606      	mov	r6, r0
 8008b9c:	9b08      	ldr	r3, [sp, #32]
 8008b9e:	3301      	adds	r3, #1
 8008ba0:	9308      	str	r3, [sp, #32]
 8008ba2:	e775      	b.n	8008a90 <_dtoa_r+0x9f0>
 8008ba4:	f000 f9be 	bl	8008f24 <__multadd>
 8008ba8:	4631      	mov	r1, r6
 8008baa:	4680      	mov	r8, r0
 8008bac:	2300      	movs	r3, #0
 8008bae:	220a      	movs	r2, #10
 8008bb0:	4628      	mov	r0, r5
 8008bb2:	f000 f9b7 	bl	8008f24 <__multadd>
 8008bb6:	4606      	mov	r6, r0
 8008bb8:	e7f0      	b.n	8008b9c <_dtoa_r+0xafc>
 8008bba:	9b08      	ldr	r3, [sp, #32]
 8008bbc:	9306      	str	r3, [sp, #24]
 8008bbe:	9f03      	ldr	r7, [sp, #12]
 8008bc0:	4621      	mov	r1, r4
 8008bc2:	4650      	mov	r0, sl
 8008bc4:	f7ff f9e2 	bl	8007f8c <quorem>
 8008bc8:	9b03      	ldr	r3, [sp, #12]
 8008bca:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008bce:	f807 9b01 	strb.w	r9, [r7], #1
 8008bd2:	1afa      	subs	r2, r7, r3
 8008bd4:	9b06      	ldr	r3, [sp, #24]
 8008bd6:	4293      	cmp	r3, r2
 8008bd8:	dd07      	ble.n	8008bea <_dtoa_r+0xb4a>
 8008bda:	4651      	mov	r1, sl
 8008bdc:	2300      	movs	r3, #0
 8008bde:	220a      	movs	r2, #10
 8008be0:	4628      	mov	r0, r5
 8008be2:	f000 f99f 	bl	8008f24 <__multadd>
 8008be6:	4682      	mov	sl, r0
 8008be8:	e7ea      	b.n	8008bc0 <_dtoa_r+0xb20>
 8008bea:	9b06      	ldr	r3, [sp, #24]
 8008bec:	f04f 0800 	mov.w	r8, #0
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	bfcc      	ite	gt
 8008bf4:	461f      	movgt	r7, r3
 8008bf6:	2701      	movle	r7, #1
 8008bf8:	9b03      	ldr	r3, [sp, #12]
 8008bfa:	441f      	add	r7, r3
 8008bfc:	4651      	mov	r1, sl
 8008bfe:	2201      	movs	r2, #1
 8008c00:	4628      	mov	r0, r5
 8008c02:	f000 fb85 	bl	8009310 <__lshift>
 8008c06:	4621      	mov	r1, r4
 8008c08:	4682      	mov	sl, r0
 8008c0a:	f000 fbed 	bl	80093e8 <__mcmp>
 8008c0e:	2800      	cmp	r0, #0
 8008c10:	dc97      	bgt.n	8008b42 <_dtoa_r+0xaa2>
 8008c12:	d102      	bne.n	8008c1a <_dtoa_r+0xb7a>
 8008c14:	f019 0f01 	tst.w	r9, #1
 8008c18:	d193      	bne.n	8008b42 <_dtoa_r+0xaa2>
 8008c1a:	463b      	mov	r3, r7
 8008c1c:	461f      	mov	r7, r3
 8008c1e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008c22:	2a30      	cmp	r2, #48	; 0x30
 8008c24:	d0fa      	beq.n	8008c1c <_dtoa_r+0xb7c>
 8008c26:	e6e1      	b.n	80089ec <_dtoa_r+0x94c>
 8008c28:	9a03      	ldr	r2, [sp, #12]
 8008c2a:	429a      	cmp	r2, r3
 8008c2c:	d18a      	bne.n	8008b44 <_dtoa_r+0xaa4>
 8008c2e:	2331      	movs	r3, #49	; 0x31
 8008c30:	f10b 0b01 	add.w	fp, fp, #1
 8008c34:	e797      	b.n	8008b66 <_dtoa_r+0xac6>
 8008c36:	4b0a      	ldr	r3, [pc, #40]	; (8008c60 <_dtoa_r+0xbc0>)
 8008c38:	f7ff ba9f 	b.w	800817a <_dtoa_r+0xda>
 8008c3c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	f47f aa77 	bne.w	8008132 <_dtoa_r+0x92>
 8008c44:	4b07      	ldr	r3, [pc, #28]	; (8008c64 <_dtoa_r+0xbc4>)
 8008c46:	f7ff ba98 	b.w	800817a <_dtoa_r+0xda>
 8008c4a:	9b06      	ldr	r3, [sp, #24]
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	dcb6      	bgt.n	8008bbe <_dtoa_r+0xb1e>
 8008c50:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008c52:	2b02      	cmp	r3, #2
 8008c54:	f73f aeb5 	bgt.w	80089c2 <_dtoa_r+0x922>
 8008c58:	e7b1      	b.n	8008bbe <_dtoa_r+0xb1e>
 8008c5a:	bf00      	nop
 8008c5c:	0800b6af 	.word	0x0800b6af
 8008c60:	0800b60a 	.word	0x0800b60a
 8008c64:	0800b633 	.word	0x0800b633

08008c68 <_free_r>:
 8008c68:	b538      	push	{r3, r4, r5, lr}
 8008c6a:	4605      	mov	r5, r0
 8008c6c:	2900      	cmp	r1, #0
 8008c6e:	d040      	beq.n	8008cf2 <_free_r+0x8a>
 8008c70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c74:	1f0c      	subs	r4, r1, #4
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	bfb8      	it	lt
 8008c7a:	18e4      	addlt	r4, r4, r3
 8008c7c:	f000 f8e4 	bl	8008e48 <__malloc_lock>
 8008c80:	4a1c      	ldr	r2, [pc, #112]	; (8008cf4 <_free_r+0x8c>)
 8008c82:	6813      	ldr	r3, [r2, #0]
 8008c84:	b933      	cbnz	r3, 8008c94 <_free_r+0x2c>
 8008c86:	6063      	str	r3, [r4, #4]
 8008c88:	6014      	str	r4, [r2, #0]
 8008c8a:	4628      	mov	r0, r5
 8008c8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008c90:	f000 b8e0 	b.w	8008e54 <__malloc_unlock>
 8008c94:	42a3      	cmp	r3, r4
 8008c96:	d908      	bls.n	8008caa <_free_r+0x42>
 8008c98:	6820      	ldr	r0, [r4, #0]
 8008c9a:	1821      	adds	r1, r4, r0
 8008c9c:	428b      	cmp	r3, r1
 8008c9e:	bf01      	itttt	eq
 8008ca0:	6819      	ldreq	r1, [r3, #0]
 8008ca2:	685b      	ldreq	r3, [r3, #4]
 8008ca4:	1809      	addeq	r1, r1, r0
 8008ca6:	6021      	streq	r1, [r4, #0]
 8008ca8:	e7ed      	b.n	8008c86 <_free_r+0x1e>
 8008caa:	461a      	mov	r2, r3
 8008cac:	685b      	ldr	r3, [r3, #4]
 8008cae:	b10b      	cbz	r3, 8008cb4 <_free_r+0x4c>
 8008cb0:	42a3      	cmp	r3, r4
 8008cb2:	d9fa      	bls.n	8008caa <_free_r+0x42>
 8008cb4:	6811      	ldr	r1, [r2, #0]
 8008cb6:	1850      	adds	r0, r2, r1
 8008cb8:	42a0      	cmp	r0, r4
 8008cba:	d10b      	bne.n	8008cd4 <_free_r+0x6c>
 8008cbc:	6820      	ldr	r0, [r4, #0]
 8008cbe:	4401      	add	r1, r0
 8008cc0:	1850      	adds	r0, r2, r1
 8008cc2:	4283      	cmp	r3, r0
 8008cc4:	6011      	str	r1, [r2, #0]
 8008cc6:	d1e0      	bne.n	8008c8a <_free_r+0x22>
 8008cc8:	6818      	ldr	r0, [r3, #0]
 8008cca:	685b      	ldr	r3, [r3, #4]
 8008ccc:	4408      	add	r0, r1
 8008cce:	6010      	str	r0, [r2, #0]
 8008cd0:	6053      	str	r3, [r2, #4]
 8008cd2:	e7da      	b.n	8008c8a <_free_r+0x22>
 8008cd4:	d902      	bls.n	8008cdc <_free_r+0x74>
 8008cd6:	230c      	movs	r3, #12
 8008cd8:	602b      	str	r3, [r5, #0]
 8008cda:	e7d6      	b.n	8008c8a <_free_r+0x22>
 8008cdc:	6820      	ldr	r0, [r4, #0]
 8008cde:	1821      	adds	r1, r4, r0
 8008ce0:	428b      	cmp	r3, r1
 8008ce2:	bf01      	itttt	eq
 8008ce4:	6819      	ldreq	r1, [r3, #0]
 8008ce6:	685b      	ldreq	r3, [r3, #4]
 8008ce8:	1809      	addeq	r1, r1, r0
 8008cea:	6021      	streq	r1, [r4, #0]
 8008cec:	6063      	str	r3, [r4, #4]
 8008cee:	6054      	str	r4, [r2, #4]
 8008cf0:	e7cb      	b.n	8008c8a <_free_r+0x22>
 8008cf2:	bd38      	pop	{r3, r4, r5, pc}
 8008cf4:	20000524 	.word	0x20000524

08008cf8 <malloc>:
 8008cf8:	4b02      	ldr	r3, [pc, #8]	; (8008d04 <malloc+0xc>)
 8008cfa:	4601      	mov	r1, r0
 8008cfc:	6818      	ldr	r0, [r3, #0]
 8008cfe:	f000 b823 	b.w	8008d48 <_malloc_r>
 8008d02:	bf00      	nop
 8008d04:	20000068 	.word	0x20000068

08008d08 <sbrk_aligned>:
 8008d08:	b570      	push	{r4, r5, r6, lr}
 8008d0a:	4e0e      	ldr	r6, [pc, #56]	; (8008d44 <sbrk_aligned+0x3c>)
 8008d0c:	460c      	mov	r4, r1
 8008d0e:	6831      	ldr	r1, [r6, #0]
 8008d10:	4605      	mov	r5, r0
 8008d12:	b911      	cbnz	r1, 8008d1a <sbrk_aligned+0x12>
 8008d14:	f001 fe90 	bl	800aa38 <_sbrk_r>
 8008d18:	6030      	str	r0, [r6, #0]
 8008d1a:	4621      	mov	r1, r4
 8008d1c:	4628      	mov	r0, r5
 8008d1e:	f001 fe8b 	bl	800aa38 <_sbrk_r>
 8008d22:	1c43      	adds	r3, r0, #1
 8008d24:	d00a      	beq.n	8008d3c <sbrk_aligned+0x34>
 8008d26:	1cc4      	adds	r4, r0, #3
 8008d28:	f024 0403 	bic.w	r4, r4, #3
 8008d2c:	42a0      	cmp	r0, r4
 8008d2e:	d007      	beq.n	8008d40 <sbrk_aligned+0x38>
 8008d30:	1a21      	subs	r1, r4, r0
 8008d32:	4628      	mov	r0, r5
 8008d34:	f001 fe80 	bl	800aa38 <_sbrk_r>
 8008d38:	3001      	adds	r0, #1
 8008d3a:	d101      	bne.n	8008d40 <sbrk_aligned+0x38>
 8008d3c:	f04f 34ff 	mov.w	r4, #4294967295
 8008d40:	4620      	mov	r0, r4
 8008d42:	bd70      	pop	{r4, r5, r6, pc}
 8008d44:	20000528 	.word	0x20000528

08008d48 <_malloc_r>:
 8008d48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d4c:	1ccd      	adds	r5, r1, #3
 8008d4e:	f025 0503 	bic.w	r5, r5, #3
 8008d52:	3508      	adds	r5, #8
 8008d54:	2d0c      	cmp	r5, #12
 8008d56:	bf38      	it	cc
 8008d58:	250c      	movcc	r5, #12
 8008d5a:	2d00      	cmp	r5, #0
 8008d5c:	4607      	mov	r7, r0
 8008d5e:	db01      	blt.n	8008d64 <_malloc_r+0x1c>
 8008d60:	42a9      	cmp	r1, r5
 8008d62:	d905      	bls.n	8008d70 <_malloc_r+0x28>
 8008d64:	230c      	movs	r3, #12
 8008d66:	2600      	movs	r6, #0
 8008d68:	603b      	str	r3, [r7, #0]
 8008d6a:	4630      	mov	r0, r6
 8008d6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d70:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008e44 <_malloc_r+0xfc>
 8008d74:	f000 f868 	bl	8008e48 <__malloc_lock>
 8008d78:	f8d8 3000 	ldr.w	r3, [r8]
 8008d7c:	461c      	mov	r4, r3
 8008d7e:	bb5c      	cbnz	r4, 8008dd8 <_malloc_r+0x90>
 8008d80:	4629      	mov	r1, r5
 8008d82:	4638      	mov	r0, r7
 8008d84:	f7ff ffc0 	bl	8008d08 <sbrk_aligned>
 8008d88:	1c43      	adds	r3, r0, #1
 8008d8a:	4604      	mov	r4, r0
 8008d8c:	d155      	bne.n	8008e3a <_malloc_r+0xf2>
 8008d8e:	f8d8 4000 	ldr.w	r4, [r8]
 8008d92:	4626      	mov	r6, r4
 8008d94:	2e00      	cmp	r6, #0
 8008d96:	d145      	bne.n	8008e24 <_malloc_r+0xdc>
 8008d98:	2c00      	cmp	r4, #0
 8008d9a:	d048      	beq.n	8008e2e <_malloc_r+0xe6>
 8008d9c:	6823      	ldr	r3, [r4, #0]
 8008d9e:	4631      	mov	r1, r6
 8008da0:	4638      	mov	r0, r7
 8008da2:	eb04 0903 	add.w	r9, r4, r3
 8008da6:	f001 fe47 	bl	800aa38 <_sbrk_r>
 8008daa:	4581      	cmp	r9, r0
 8008dac:	d13f      	bne.n	8008e2e <_malloc_r+0xe6>
 8008dae:	6821      	ldr	r1, [r4, #0]
 8008db0:	4638      	mov	r0, r7
 8008db2:	1a6d      	subs	r5, r5, r1
 8008db4:	4629      	mov	r1, r5
 8008db6:	f7ff ffa7 	bl	8008d08 <sbrk_aligned>
 8008dba:	3001      	adds	r0, #1
 8008dbc:	d037      	beq.n	8008e2e <_malloc_r+0xe6>
 8008dbe:	6823      	ldr	r3, [r4, #0]
 8008dc0:	442b      	add	r3, r5
 8008dc2:	6023      	str	r3, [r4, #0]
 8008dc4:	f8d8 3000 	ldr.w	r3, [r8]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d038      	beq.n	8008e3e <_malloc_r+0xf6>
 8008dcc:	685a      	ldr	r2, [r3, #4]
 8008dce:	42a2      	cmp	r2, r4
 8008dd0:	d12b      	bne.n	8008e2a <_malloc_r+0xe2>
 8008dd2:	2200      	movs	r2, #0
 8008dd4:	605a      	str	r2, [r3, #4]
 8008dd6:	e00f      	b.n	8008df8 <_malloc_r+0xb0>
 8008dd8:	6822      	ldr	r2, [r4, #0]
 8008dda:	1b52      	subs	r2, r2, r5
 8008ddc:	d41f      	bmi.n	8008e1e <_malloc_r+0xd6>
 8008dde:	2a0b      	cmp	r2, #11
 8008de0:	d917      	bls.n	8008e12 <_malloc_r+0xca>
 8008de2:	1961      	adds	r1, r4, r5
 8008de4:	42a3      	cmp	r3, r4
 8008de6:	6025      	str	r5, [r4, #0]
 8008de8:	bf18      	it	ne
 8008dea:	6059      	strne	r1, [r3, #4]
 8008dec:	6863      	ldr	r3, [r4, #4]
 8008dee:	bf08      	it	eq
 8008df0:	f8c8 1000 	streq.w	r1, [r8]
 8008df4:	5162      	str	r2, [r4, r5]
 8008df6:	604b      	str	r3, [r1, #4]
 8008df8:	4638      	mov	r0, r7
 8008dfa:	f104 060b 	add.w	r6, r4, #11
 8008dfe:	f000 f829 	bl	8008e54 <__malloc_unlock>
 8008e02:	f026 0607 	bic.w	r6, r6, #7
 8008e06:	1d23      	adds	r3, r4, #4
 8008e08:	1af2      	subs	r2, r6, r3
 8008e0a:	d0ae      	beq.n	8008d6a <_malloc_r+0x22>
 8008e0c:	1b9b      	subs	r3, r3, r6
 8008e0e:	50a3      	str	r3, [r4, r2]
 8008e10:	e7ab      	b.n	8008d6a <_malloc_r+0x22>
 8008e12:	42a3      	cmp	r3, r4
 8008e14:	6862      	ldr	r2, [r4, #4]
 8008e16:	d1dd      	bne.n	8008dd4 <_malloc_r+0x8c>
 8008e18:	f8c8 2000 	str.w	r2, [r8]
 8008e1c:	e7ec      	b.n	8008df8 <_malloc_r+0xb0>
 8008e1e:	4623      	mov	r3, r4
 8008e20:	6864      	ldr	r4, [r4, #4]
 8008e22:	e7ac      	b.n	8008d7e <_malloc_r+0x36>
 8008e24:	4634      	mov	r4, r6
 8008e26:	6876      	ldr	r6, [r6, #4]
 8008e28:	e7b4      	b.n	8008d94 <_malloc_r+0x4c>
 8008e2a:	4613      	mov	r3, r2
 8008e2c:	e7cc      	b.n	8008dc8 <_malloc_r+0x80>
 8008e2e:	230c      	movs	r3, #12
 8008e30:	4638      	mov	r0, r7
 8008e32:	603b      	str	r3, [r7, #0]
 8008e34:	f000 f80e 	bl	8008e54 <__malloc_unlock>
 8008e38:	e797      	b.n	8008d6a <_malloc_r+0x22>
 8008e3a:	6025      	str	r5, [r4, #0]
 8008e3c:	e7dc      	b.n	8008df8 <_malloc_r+0xb0>
 8008e3e:	605b      	str	r3, [r3, #4]
 8008e40:	deff      	udf	#255	; 0xff
 8008e42:	bf00      	nop
 8008e44:	20000524 	.word	0x20000524

08008e48 <__malloc_lock>:
 8008e48:	4801      	ldr	r0, [pc, #4]	; (8008e50 <__malloc_lock+0x8>)
 8008e4a:	f7ff b88a 	b.w	8007f62 <__retarget_lock_acquire_recursive>
 8008e4e:	bf00      	nop
 8008e50:	20000520 	.word	0x20000520

08008e54 <__malloc_unlock>:
 8008e54:	4801      	ldr	r0, [pc, #4]	; (8008e5c <__malloc_unlock+0x8>)
 8008e56:	f7ff b885 	b.w	8007f64 <__retarget_lock_release_recursive>
 8008e5a:	bf00      	nop
 8008e5c:	20000520 	.word	0x20000520

08008e60 <_Balloc>:
 8008e60:	b570      	push	{r4, r5, r6, lr}
 8008e62:	69c6      	ldr	r6, [r0, #28]
 8008e64:	4604      	mov	r4, r0
 8008e66:	460d      	mov	r5, r1
 8008e68:	b976      	cbnz	r6, 8008e88 <_Balloc+0x28>
 8008e6a:	2010      	movs	r0, #16
 8008e6c:	f7ff ff44 	bl	8008cf8 <malloc>
 8008e70:	4602      	mov	r2, r0
 8008e72:	61e0      	str	r0, [r4, #28]
 8008e74:	b920      	cbnz	r0, 8008e80 <_Balloc+0x20>
 8008e76:	216b      	movs	r1, #107	; 0x6b
 8008e78:	4b17      	ldr	r3, [pc, #92]	; (8008ed8 <_Balloc+0x78>)
 8008e7a:	4818      	ldr	r0, [pc, #96]	; (8008edc <_Balloc+0x7c>)
 8008e7c:	f001 fe00 	bl	800aa80 <__assert_func>
 8008e80:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008e84:	6006      	str	r6, [r0, #0]
 8008e86:	60c6      	str	r6, [r0, #12]
 8008e88:	69e6      	ldr	r6, [r4, #28]
 8008e8a:	68f3      	ldr	r3, [r6, #12]
 8008e8c:	b183      	cbz	r3, 8008eb0 <_Balloc+0x50>
 8008e8e:	69e3      	ldr	r3, [r4, #28]
 8008e90:	68db      	ldr	r3, [r3, #12]
 8008e92:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008e96:	b9b8      	cbnz	r0, 8008ec8 <_Balloc+0x68>
 8008e98:	2101      	movs	r1, #1
 8008e9a:	fa01 f605 	lsl.w	r6, r1, r5
 8008e9e:	1d72      	adds	r2, r6, #5
 8008ea0:	4620      	mov	r0, r4
 8008ea2:	0092      	lsls	r2, r2, #2
 8008ea4:	f001 fe0a 	bl	800aabc <_calloc_r>
 8008ea8:	b160      	cbz	r0, 8008ec4 <_Balloc+0x64>
 8008eaa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008eae:	e00e      	b.n	8008ece <_Balloc+0x6e>
 8008eb0:	2221      	movs	r2, #33	; 0x21
 8008eb2:	2104      	movs	r1, #4
 8008eb4:	4620      	mov	r0, r4
 8008eb6:	f001 fe01 	bl	800aabc <_calloc_r>
 8008eba:	69e3      	ldr	r3, [r4, #28]
 8008ebc:	60f0      	str	r0, [r6, #12]
 8008ebe:	68db      	ldr	r3, [r3, #12]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d1e4      	bne.n	8008e8e <_Balloc+0x2e>
 8008ec4:	2000      	movs	r0, #0
 8008ec6:	bd70      	pop	{r4, r5, r6, pc}
 8008ec8:	6802      	ldr	r2, [r0, #0]
 8008eca:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008ece:	2300      	movs	r3, #0
 8008ed0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008ed4:	e7f7      	b.n	8008ec6 <_Balloc+0x66>
 8008ed6:	bf00      	nop
 8008ed8:	0800b640 	.word	0x0800b640
 8008edc:	0800b6c0 	.word	0x0800b6c0

08008ee0 <_Bfree>:
 8008ee0:	b570      	push	{r4, r5, r6, lr}
 8008ee2:	69c6      	ldr	r6, [r0, #28]
 8008ee4:	4605      	mov	r5, r0
 8008ee6:	460c      	mov	r4, r1
 8008ee8:	b976      	cbnz	r6, 8008f08 <_Bfree+0x28>
 8008eea:	2010      	movs	r0, #16
 8008eec:	f7ff ff04 	bl	8008cf8 <malloc>
 8008ef0:	4602      	mov	r2, r0
 8008ef2:	61e8      	str	r0, [r5, #28]
 8008ef4:	b920      	cbnz	r0, 8008f00 <_Bfree+0x20>
 8008ef6:	218f      	movs	r1, #143	; 0x8f
 8008ef8:	4b08      	ldr	r3, [pc, #32]	; (8008f1c <_Bfree+0x3c>)
 8008efa:	4809      	ldr	r0, [pc, #36]	; (8008f20 <_Bfree+0x40>)
 8008efc:	f001 fdc0 	bl	800aa80 <__assert_func>
 8008f00:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008f04:	6006      	str	r6, [r0, #0]
 8008f06:	60c6      	str	r6, [r0, #12]
 8008f08:	b13c      	cbz	r4, 8008f1a <_Bfree+0x3a>
 8008f0a:	69eb      	ldr	r3, [r5, #28]
 8008f0c:	6862      	ldr	r2, [r4, #4]
 8008f0e:	68db      	ldr	r3, [r3, #12]
 8008f10:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008f14:	6021      	str	r1, [r4, #0]
 8008f16:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008f1a:	bd70      	pop	{r4, r5, r6, pc}
 8008f1c:	0800b640 	.word	0x0800b640
 8008f20:	0800b6c0 	.word	0x0800b6c0

08008f24 <__multadd>:
 8008f24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f28:	4607      	mov	r7, r0
 8008f2a:	460c      	mov	r4, r1
 8008f2c:	461e      	mov	r6, r3
 8008f2e:	2000      	movs	r0, #0
 8008f30:	690d      	ldr	r5, [r1, #16]
 8008f32:	f101 0c14 	add.w	ip, r1, #20
 8008f36:	f8dc 3000 	ldr.w	r3, [ip]
 8008f3a:	3001      	adds	r0, #1
 8008f3c:	b299      	uxth	r1, r3
 8008f3e:	fb02 6101 	mla	r1, r2, r1, r6
 8008f42:	0c1e      	lsrs	r6, r3, #16
 8008f44:	0c0b      	lsrs	r3, r1, #16
 8008f46:	fb02 3306 	mla	r3, r2, r6, r3
 8008f4a:	b289      	uxth	r1, r1
 8008f4c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008f50:	4285      	cmp	r5, r0
 8008f52:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008f56:	f84c 1b04 	str.w	r1, [ip], #4
 8008f5a:	dcec      	bgt.n	8008f36 <__multadd+0x12>
 8008f5c:	b30e      	cbz	r6, 8008fa2 <__multadd+0x7e>
 8008f5e:	68a3      	ldr	r3, [r4, #8]
 8008f60:	42ab      	cmp	r3, r5
 8008f62:	dc19      	bgt.n	8008f98 <__multadd+0x74>
 8008f64:	6861      	ldr	r1, [r4, #4]
 8008f66:	4638      	mov	r0, r7
 8008f68:	3101      	adds	r1, #1
 8008f6a:	f7ff ff79 	bl	8008e60 <_Balloc>
 8008f6e:	4680      	mov	r8, r0
 8008f70:	b928      	cbnz	r0, 8008f7e <__multadd+0x5a>
 8008f72:	4602      	mov	r2, r0
 8008f74:	21ba      	movs	r1, #186	; 0xba
 8008f76:	4b0c      	ldr	r3, [pc, #48]	; (8008fa8 <__multadd+0x84>)
 8008f78:	480c      	ldr	r0, [pc, #48]	; (8008fac <__multadd+0x88>)
 8008f7a:	f001 fd81 	bl	800aa80 <__assert_func>
 8008f7e:	6922      	ldr	r2, [r4, #16]
 8008f80:	f104 010c 	add.w	r1, r4, #12
 8008f84:	3202      	adds	r2, #2
 8008f86:	0092      	lsls	r2, r2, #2
 8008f88:	300c      	adds	r0, #12
 8008f8a:	f001 fd65 	bl	800aa58 <memcpy>
 8008f8e:	4621      	mov	r1, r4
 8008f90:	4638      	mov	r0, r7
 8008f92:	f7ff ffa5 	bl	8008ee0 <_Bfree>
 8008f96:	4644      	mov	r4, r8
 8008f98:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008f9c:	3501      	adds	r5, #1
 8008f9e:	615e      	str	r6, [r3, #20]
 8008fa0:	6125      	str	r5, [r4, #16]
 8008fa2:	4620      	mov	r0, r4
 8008fa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008fa8:	0800b6af 	.word	0x0800b6af
 8008fac:	0800b6c0 	.word	0x0800b6c0

08008fb0 <__s2b>:
 8008fb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008fb4:	4615      	mov	r5, r2
 8008fb6:	2209      	movs	r2, #9
 8008fb8:	461f      	mov	r7, r3
 8008fba:	3308      	adds	r3, #8
 8008fbc:	460c      	mov	r4, r1
 8008fbe:	fb93 f3f2 	sdiv	r3, r3, r2
 8008fc2:	4606      	mov	r6, r0
 8008fc4:	2201      	movs	r2, #1
 8008fc6:	2100      	movs	r1, #0
 8008fc8:	429a      	cmp	r2, r3
 8008fca:	db09      	blt.n	8008fe0 <__s2b+0x30>
 8008fcc:	4630      	mov	r0, r6
 8008fce:	f7ff ff47 	bl	8008e60 <_Balloc>
 8008fd2:	b940      	cbnz	r0, 8008fe6 <__s2b+0x36>
 8008fd4:	4602      	mov	r2, r0
 8008fd6:	21d3      	movs	r1, #211	; 0xd3
 8008fd8:	4b18      	ldr	r3, [pc, #96]	; (800903c <__s2b+0x8c>)
 8008fda:	4819      	ldr	r0, [pc, #100]	; (8009040 <__s2b+0x90>)
 8008fdc:	f001 fd50 	bl	800aa80 <__assert_func>
 8008fe0:	0052      	lsls	r2, r2, #1
 8008fe2:	3101      	adds	r1, #1
 8008fe4:	e7f0      	b.n	8008fc8 <__s2b+0x18>
 8008fe6:	9b08      	ldr	r3, [sp, #32]
 8008fe8:	2d09      	cmp	r5, #9
 8008fea:	6143      	str	r3, [r0, #20]
 8008fec:	f04f 0301 	mov.w	r3, #1
 8008ff0:	6103      	str	r3, [r0, #16]
 8008ff2:	dd16      	ble.n	8009022 <__s2b+0x72>
 8008ff4:	f104 0909 	add.w	r9, r4, #9
 8008ff8:	46c8      	mov	r8, r9
 8008ffa:	442c      	add	r4, r5
 8008ffc:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009000:	4601      	mov	r1, r0
 8009002:	220a      	movs	r2, #10
 8009004:	4630      	mov	r0, r6
 8009006:	3b30      	subs	r3, #48	; 0x30
 8009008:	f7ff ff8c 	bl	8008f24 <__multadd>
 800900c:	45a0      	cmp	r8, r4
 800900e:	d1f5      	bne.n	8008ffc <__s2b+0x4c>
 8009010:	f1a5 0408 	sub.w	r4, r5, #8
 8009014:	444c      	add	r4, r9
 8009016:	1b2d      	subs	r5, r5, r4
 8009018:	1963      	adds	r3, r4, r5
 800901a:	42bb      	cmp	r3, r7
 800901c:	db04      	blt.n	8009028 <__s2b+0x78>
 800901e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009022:	2509      	movs	r5, #9
 8009024:	340a      	adds	r4, #10
 8009026:	e7f6      	b.n	8009016 <__s2b+0x66>
 8009028:	f814 3b01 	ldrb.w	r3, [r4], #1
 800902c:	4601      	mov	r1, r0
 800902e:	220a      	movs	r2, #10
 8009030:	4630      	mov	r0, r6
 8009032:	3b30      	subs	r3, #48	; 0x30
 8009034:	f7ff ff76 	bl	8008f24 <__multadd>
 8009038:	e7ee      	b.n	8009018 <__s2b+0x68>
 800903a:	bf00      	nop
 800903c:	0800b6af 	.word	0x0800b6af
 8009040:	0800b6c0 	.word	0x0800b6c0

08009044 <__hi0bits>:
 8009044:	0c02      	lsrs	r2, r0, #16
 8009046:	0412      	lsls	r2, r2, #16
 8009048:	4603      	mov	r3, r0
 800904a:	b9ca      	cbnz	r2, 8009080 <__hi0bits+0x3c>
 800904c:	0403      	lsls	r3, r0, #16
 800904e:	2010      	movs	r0, #16
 8009050:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8009054:	bf04      	itt	eq
 8009056:	021b      	lsleq	r3, r3, #8
 8009058:	3008      	addeq	r0, #8
 800905a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800905e:	bf04      	itt	eq
 8009060:	011b      	lsleq	r3, r3, #4
 8009062:	3004      	addeq	r0, #4
 8009064:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8009068:	bf04      	itt	eq
 800906a:	009b      	lsleq	r3, r3, #2
 800906c:	3002      	addeq	r0, #2
 800906e:	2b00      	cmp	r3, #0
 8009070:	db05      	blt.n	800907e <__hi0bits+0x3a>
 8009072:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8009076:	f100 0001 	add.w	r0, r0, #1
 800907a:	bf08      	it	eq
 800907c:	2020      	moveq	r0, #32
 800907e:	4770      	bx	lr
 8009080:	2000      	movs	r0, #0
 8009082:	e7e5      	b.n	8009050 <__hi0bits+0xc>

08009084 <__lo0bits>:
 8009084:	6803      	ldr	r3, [r0, #0]
 8009086:	4602      	mov	r2, r0
 8009088:	f013 0007 	ands.w	r0, r3, #7
 800908c:	d00b      	beq.n	80090a6 <__lo0bits+0x22>
 800908e:	07d9      	lsls	r1, r3, #31
 8009090:	d421      	bmi.n	80090d6 <__lo0bits+0x52>
 8009092:	0798      	lsls	r0, r3, #30
 8009094:	bf49      	itett	mi
 8009096:	085b      	lsrmi	r3, r3, #1
 8009098:	089b      	lsrpl	r3, r3, #2
 800909a:	2001      	movmi	r0, #1
 800909c:	6013      	strmi	r3, [r2, #0]
 800909e:	bf5c      	itt	pl
 80090a0:	2002      	movpl	r0, #2
 80090a2:	6013      	strpl	r3, [r2, #0]
 80090a4:	4770      	bx	lr
 80090a6:	b299      	uxth	r1, r3
 80090a8:	b909      	cbnz	r1, 80090ae <__lo0bits+0x2a>
 80090aa:	2010      	movs	r0, #16
 80090ac:	0c1b      	lsrs	r3, r3, #16
 80090ae:	b2d9      	uxtb	r1, r3
 80090b0:	b909      	cbnz	r1, 80090b6 <__lo0bits+0x32>
 80090b2:	3008      	adds	r0, #8
 80090b4:	0a1b      	lsrs	r3, r3, #8
 80090b6:	0719      	lsls	r1, r3, #28
 80090b8:	bf04      	itt	eq
 80090ba:	091b      	lsreq	r3, r3, #4
 80090bc:	3004      	addeq	r0, #4
 80090be:	0799      	lsls	r1, r3, #30
 80090c0:	bf04      	itt	eq
 80090c2:	089b      	lsreq	r3, r3, #2
 80090c4:	3002      	addeq	r0, #2
 80090c6:	07d9      	lsls	r1, r3, #31
 80090c8:	d403      	bmi.n	80090d2 <__lo0bits+0x4e>
 80090ca:	085b      	lsrs	r3, r3, #1
 80090cc:	f100 0001 	add.w	r0, r0, #1
 80090d0:	d003      	beq.n	80090da <__lo0bits+0x56>
 80090d2:	6013      	str	r3, [r2, #0]
 80090d4:	4770      	bx	lr
 80090d6:	2000      	movs	r0, #0
 80090d8:	4770      	bx	lr
 80090da:	2020      	movs	r0, #32
 80090dc:	4770      	bx	lr
	...

080090e0 <__i2b>:
 80090e0:	b510      	push	{r4, lr}
 80090e2:	460c      	mov	r4, r1
 80090e4:	2101      	movs	r1, #1
 80090e6:	f7ff febb 	bl	8008e60 <_Balloc>
 80090ea:	4602      	mov	r2, r0
 80090ec:	b928      	cbnz	r0, 80090fa <__i2b+0x1a>
 80090ee:	f240 1145 	movw	r1, #325	; 0x145
 80090f2:	4b04      	ldr	r3, [pc, #16]	; (8009104 <__i2b+0x24>)
 80090f4:	4804      	ldr	r0, [pc, #16]	; (8009108 <__i2b+0x28>)
 80090f6:	f001 fcc3 	bl	800aa80 <__assert_func>
 80090fa:	2301      	movs	r3, #1
 80090fc:	6144      	str	r4, [r0, #20]
 80090fe:	6103      	str	r3, [r0, #16]
 8009100:	bd10      	pop	{r4, pc}
 8009102:	bf00      	nop
 8009104:	0800b6af 	.word	0x0800b6af
 8009108:	0800b6c0 	.word	0x0800b6c0

0800910c <__multiply>:
 800910c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009110:	4691      	mov	r9, r2
 8009112:	690a      	ldr	r2, [r1, #16]
 8009114:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009118:	460c      	mov	r4, r1
 800911a:	429a      	cmp	r2, r3
 800911c:	bfbe      	ittt	lt
 800911e:	460b      	movlt	r3, r1
 8009120:	464c      	movlt	r4, r9
 8009122:	4699      	movlt	r9, r3
 8009124:	6927      	ldr	r7, [r4, #16]
 8009126:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800912a:	68a3      	ldr	r3, [r4, #8]
 800912c:	6861      	ldr	r1, [r4, #4]
 800912e:	eb07 060a 	add.w	r6, r7, sl
 8009132:	42b3      	cmp	r3, r6
 8009134:	b085      	sub	sp, #20
 8009136:	bfb8      	it	lt
 8009138:	3101      	addlt	r1, #1
 800913a:	f7ff fe91 	bl	8008e60 <_Balloc>
 800913e:	b930      	cbnz	r0, 800914e <__multiply+0x42>
 8009140:	4602      	mov	r2, r0
 8009142:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8009146:	4b43      	ldr	r3, [pc, #268]	; (8009254 <__multiply+0x148>)
 8009148:	4843      	ldr	r0, [pc, #268]	; (8009258 <__multiply+0x14c>)
 800914a:	f001 fc99 	bl	800aa80 <__assert_func>
 800914e:	f100 0514 	add.w	r5, r0, #20
 8009152:	462b      	mov	r3, r5
 8009154:	2200      	movs	r2, #0
 8009156:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800915a:	4543      	cmp	r3, r8
 800915c:	d321      	bcc.n	80091a2 <__multiply+0x96>
 800915e:	f104 0314 	add.w	r3, r4, #20
 8009162:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009166:	f109 0314 	add.w	r3, r9, #20
 800916a:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800916e:	9202      	str	r2, [sp, #8]
 8009170:	1b3a      	subs	r2, r7, r4
 8009172:	3a15      	subs	r2, #21
 8009174:	f022 0203 	bic.w	r2, r2, #3
 8009178:	3204      	adds	r2, #4
 800917a:	f104 0115 	add.w	r1, r4, #21
 800917e:	428f      	cmp	r7, r1
 8009180:	bf38      	it	cc
 8009182:	2204      	movcc	r2, #4
 8009184:	9201      	str	r2, [sp, #4]
 8009186:	9a02      	ldr	r2, [sp, #8]
 8009188:	9303      	str	r3, [sp, #12]
 800918a:	429a      	cmp	r2, r3
 800918c:	d80c      	bhi.n	80091a8 <__multiply+0x9c>
 800918e:	2e00      	cmp	r6, #0
 8009190:	dd03      	ble.n	800919a <__multiply+0x8e>
 8009192:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009196:	2b00      	cmp	r3, #0
 8009198:	d05a      	beq.n	8009250 <__multiply+0x144>
 800919a:	6106      	str	r6, [r0, #16]
 800919c:	b005      	add	sp, #20
 800919e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091a2:	f843 2b04 	str.w	r2, [r3], #4
 80091a6:	e7d8      	b.n	800915a <__multiply+0x4e>
 80091a8:	f8b3 a000 	ldrh.w	sl, [r3]
 80091ac:	f1ba 0f00 	cmp.w	sl, #0
 80091b0:	d023      	beq.n	80091fa <__multiply+0xee>
 80091b2:	46a9      	mov	r9, r5
 80091b4:	f04f 0c00 	mov.w	ip, #0
 80091b8:	f104 0e14 	add.w	lr, r4, #20
 80091bc:	f85e 2b04 	ldr.w	r2, [lr], #4
 80091c0:	f8d9 1000 	ldr.w	r1, [r9]
 80091c4:	fa1f fb82 	uxth.w	fp, r2
 80091c8:	b289      	uxth	r1, r1
 80091ca:	fb0a 110b 	mla	r1, sl, fp, r1
 80091ce:	4461      	add	r1, ip
 80091d0:	f8d9 c000 	ldr.w	ip, [r9]
 80091d4:	0c12      	lsrs	r2, r2, #16
 80091d6:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80091da:	fb0a c202 	mla	r2, sl, r2, ip
 80091de:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80091e2:	b289      	uxth	r1, r1
 80091e4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80091e8:	4577      	cmp	r7, lr
 80091ea:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80091ee:	f849 1b04 	str.w	r1, [r9], #4
 80091f2:	d8e3      	bhi.n	80091bc <__multiply+0xb0>
 80091f4:	9a01      	ldr	r2, [sp, #4]
 80091f6:	f845 c002 	str.w	ip, [r5, r2]
 80091fa:	9a03      	ldr	r2, [sp, #12]
 80091fc:	3304      	adds	r3, #4
 80091fe:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009202:	f1b9 0f00 	cmp.w	r9, #0
 8009206:	d021      	beq.n	800924c <__multiply+0x140>
 8009208:	46ae      	mov	lr, r5
 800920a:	f04f 0a00 	mov.w	sl, #0
 800920e:	6829      	ldr	r1, [r5, #0]
 8009210:	f104 0c14 	add.w	ip, r4, #20
 8009214:	f8bc b000 	ldrh.w	fp, [ip]
 8009218:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800921c:	b289      	uxth	r1, r1
 800921e:	fb09 220b 	mla	r2, r9, fp, r2
 8009222:	4452      	add	r2, sl
 8009224:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009228:	f84e 1b04 	str.w	r1, [lr], #4
 800922c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8009230:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009234:	f8be 1000 	ldrh.w	r1, [lr]
 8009238:	4567      	cmp	r7, ip
 800923a:	fb09 110a 	mla	r1, r9, sl, r1
 800923e:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8009242:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009246:	d8e5      	bhi.n	8009214 <__multiply+0x108>
 8009248:	9a01      	ldr	r2, [sp, #4]
 800924a:	50a9      	str	r1, [r5, r2]
 800924c:	3504      	adds	r5, #4
 800924e:	e79a      	b.n	8009186 <__multiply+0x7a>
 8009250:	3e01      	subs	r6, #1
 8009252:	e79c      	b.n	800918e <__multiply+0x82>
 8009254:	0800b6af 	.word	0x0800b6af
 8009258:	0800b6c0 	.word	0x0800b6c0

0800925c <__pow5mult>:
 800925c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009260:	4615      	mov	r5, r2
 8009262:	f012 0203 	ands.w	r2, r2, #3
 8009266:	4606      	mov	r6, r0
 8009268:	460f      	mov	r7, r1
 800926a:	d007      	beq.n	800927c <__pow5mult+0x20>
 800926c:	4c25      	ldr	r4, [pc, #148]	; (8009304 <__pow5mult+0xa8>)
 800926e:	3a01      	subs	r2, #1
 8009270:	2300      	movs	r3, #0
 8009272:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009276:	f7ff fe55 	bl	8008f24 <__multadd>
 800927a:	4607      	mov	r7, r0
 800927c:	10ad      	asrs	r5, r5, #2
 800927e:	d03d      	beq.n	80092fc <__pow5mult+0xa0>
 8009280:	69f4      	ldr	r4, [r6, #28]
 8009282:	b97c      	cbnz	r4, 80092a4 <__pow5mult+0x48>
 8009284:	2010      	movs	r0, #16
 8009286:	f7ff fd37 	bl	8008cf8 <malloc>
 800928a:	4602      	mov	r2, r0
 800928c:	61f0      	str	r0, [r6, #28]
 800928e:	b928      	cbnz	r0, 800929c <__pow5mult+0x40>
 8009290:	f240 11b3 	movw	r1, #435	; 0x1b3
 8009294:	4b1c      	ldr	r3, [pc, #112]	; (8009308 <__pow5mult+0xac>)
 8009296:	481d      	ldr	r0, [pc, #116]	; (800930c <__pow5mult+0xb0>)
 8009298:	f001 fbf2 	bl	800aa80 <__assert_func>
 800929c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80092a0:	6004      	str	r4, [r0, #0]
 80092a2:	60c4      	str	r4, [r0, #12]
 80092a4:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80092a8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80092ac:	b94c      	cbnz	r4, 80092c2 <__pow5mult+0x66>
 80092ae:	f240 2171 	movw	r1, #625	; 0x271
 80092b2:	4630      	mov	r0, r6
 80092b4:	f7ff ff14 	bl	80090e0 <__i2b>
 80092b8:	2300      	movs	r3, #0
 80092ba:	4604      	mov	r4, r0
 80092bc:	f8c8 0008 	str.w	r0, [r8, #8]
 80092c0:	6003      	str	r3, [r0, #0]
 80092c2:	f04f 0900 	mov.w	r9, #0
 80092c6:	07eb      	lsls	r3, r5, #31
 80092c8:	d50a      	bpl.n	80092e0 <__pow5mult+0x84>
 80092ca:	4639      	mov	r1, r7
 80092cc:	4622      	mov	r2, r4
 80092ce:	4630      	mov	r0, r6
 80092d0:	f7ff ff1c 	bl	800910c <__multiply>
 80092d4:	4680      	mov	r8, r0
 80092d6:	4639      	mov	r1, r7
 80092d8:	4630      	mov	r0, r6
 80092da:	f7ff fe01 	bl	8008ee0 <_Bfree>
 80092de:	4647      	mov	r7, r8
 80092e0:	106d      	asrs	r5, r5, #1
 80092e2:	d00b      	beq.n	80092fc <__pow5mult+0xa0>
 80092e4:	6820      	ldr	r0, [r4, #0]
 80092e6:	b938      	cbnz	r0, 80092f8 <__pow5mult+0x9c>
 80092e8:	4622      	mov	r2, r4
 80092ea:	4621      	mov	r1, r4
 80092ec:	4630      	mov	r0, r6
 80092ee:	f7ff ff0d 	bl	800910c <__multiply>
 80092f2:	6020      	str	r0, [r4, #0]
 80092f4:	f8c0 9000 	str.w	r9, [r0]
 80092f8:	4604      	mov	r4, r0
 80092fa:	e7e4      	b.n	80092c6 <__pow5mult+0x6a>
 80092fc:	4638      	mov	r0, r7
 80092fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009302:	bf00      	nop
 8009304:	0800b810 	.word	0x0800b810
 8009308:	0800b640 	.word	0x0800b640
 800930c:	0800b6c0 	.word	0x0800b6c0

08009310 <__lshift>:
 8009310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009314:	460c      	mov	r4, r1
 8009316:	4607      	mov	r7, r0
 8009318:	4691      	mov	r9, r2
 800931a:	6923      	ldr	r3, [r4, #16]
 800931c:	6849      	ldr	r1, [r1, #4]
 800931e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009322:	68a3      	ldr	r3, [r4, #8]
 8009324:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009328:	f108 0601 	add.w	r6, r8, #1
 800932c:	42b3      	cmp	r3, r6
 800932e:	db0b      	blt.n	8009348 <__lshift+0x38>
 8009330:	4638      	mov	r0, r7
 8009332:	f7ff fd95 	bl	8008e60 <_Balloc>
 8009336:	4605      	mov	r5, r0
 8009338:	b948      	cbnz	r0, 800934e <__lshift+0x3e>
 800933a:	4602      	mov	r2, r0
 800933c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8009340:	4b27      	ldr	r3, [pc, #156]	; (80093e0 <__lshift+0xd0>)
 8009342:	4828      	ldr	r0, [pc, #160]	; (80093e4 <__lshift+0xd4>)
 8009344:	f001 fb9c 	bl	800aa80 <__assert_func>
 8009348:	3101      	adds	r1, #1
 800934a:	005b      	lsls	r3, r3, #1
 800934c:	e7ee      	b.n	800932c <__lshift+0x1c>
 800934e:	2300      	movs	r3, #0
 8009350:	f100 0114 	add.w	r1, r0, #20
 8009354:	f100 0210 	add.w	r2, r0, #16
 8009358:	4618      	mov	r0, r3
 800935a:	4553      	cmp	r3, sl
 800935c:	db33      	blt.n	80093c6 <__lshift+0xb6>
 800935e:	6920      	ldr	r0, [r4, #16]
 8009360:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009364:	f104 0314 	add.w	r3, r4, #20
 8009368:	f019 091f 	ands.w	r9, r9, #31
 800936c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009370:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009374:	d02b      	beq.n	80093ce <__lshift+0xbe>
 8009376:	468a      	mov	sl, r1
 8009378:	2200      	movs	r2, #0
 800937a:	f1c9 0e20 	rsb	lr, r9, #32
 800937e:	6818      	ldr	r0, [r3, #0]
 8009380:	fa00 f009 	lsl.w	r0, r0, r9
 8009384:	4310      	orrs	r0, r2
 8009386:	f84a 0b04 	str.w	r0, [sl], #4
 800938a:	f853 2b04 	ldr.w	r2, [r3], #4
 800938e:	459c      	cmp	ip, r3
 8009390:	fa22 f20e 	lsr.w	r2, r2, lr
 8009394:	d8f3      	bhi.n	800937e <__lshift+0x6e>
 8009396:	ebac 0304 	sub.w	r3, ip, r4
 800939a:	3b15      	subs	r3, #21
 800939c:	f023 0303 	bic.w	r3, r3, #3
 80093a0:	3304      	adds	r3, #4
 80093a2:	f104 0015 	add.w	r0, r4, #21
 80093a6:	4584      	cmp	ip, r0
 80093a8:	bf38      	it	cc
 80093aa:	2304      	movcc	r3, #4
 80093ac:	50ca      	str	r2, [r1, r3]
 80093ae:	b10a      	cbz	r2, 80093b4 <__lshift+0xa4>
 80093b0:	f108 0602 	add.w	r6, r8, #2
 80093b4:	3e01      	subs	r6, #1
 80093b6:	4638      	mov	r0, r7
 80093b8:	4621      	mov	r1, r4
 80093ba:	612e      	str	r6, [r5, #16]
 80093bc:	f7ff fd90 	bl	8008ee0 <_Bfree>
 80093c0:	4628      	mov	r0, r5
 80093c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093c6:	f842 0f04 	str.w	r0, [r2, #4]!
 80093ca:	3301      	adds	r3, #1
 80093cc:	e7c5      	b.n	800935a <__lshift+0x4a>
 80093ce:	3904      	subs	r1, #4
 80093d0:	f853 2b04 	ldr.w	r2, [r3], #4
 80093d4:	459c      	cmp	ip, r3
 80093d6:	f841 2f04 	str.w	r2, [r1, #4]!
 80093da:	d8f9      	bhi.n	80093d0 <__lshift+0xc0>
 80093dc:	e7ea      	b.n	80093b4 <__lshift+0xa4>
 80093de:	bf00      	nop
 80093e0:	0800b6af 	.word	0x0800b6af
 80093e4:	0800b6c0 	.word	0x0800b6c0

080093e8 <__mcmp>:
 80093e8:	4603      	mov	r3, r0
 80093ea:	690a      	ldr	r2, [r1, #16]
 80093ec:	6900      	ldr	r0, [r0, #16]
 80093ee:	b530      	push	{r4, r5, lr}
 80093f0:	1a80      	subs	r0, r0, r2
 80093f2:	d10d      	bne.n	8009410 <__mcmp+0x28>
 80093f4:	3314      	adds	r3, #20
 80093f6:	3114      	adds	r1, #20
 80093f8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80093fc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009400:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009404:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009408:	4295      	cmp	r5, r2
 800940a:	d002      	beq.n	8009412 <__mcmp+0x2a>
 800940c:	d304      	bcc.n	8009418 <__mcmp+0x30>
 800940e:	2001      	movs	r0, #1
 8009410:	bd30      	pop	{r4, r5, pc}
 8009412:	42a3      	cmp	r3, r4
 8009414:	d3f4      	bcc.n	8009400 <__mcmp+0x18>
 8009416:	e7fb      	b.n	8009410 <__mcmp+0x28>
 8009418:	f04f 30ff 	mov.w	r0, #4294967295
 800941c:	e7f8      	b.n	8009410 <__mcmp+0x28>
	...

08009420 <__mdiff>:
 8009420:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009424:	460d      	mov	r5, r1
 8009426:	4607      	mov	r7, r0
 8009428:	4611      	mov	r1, r2
 800942a:	4628      	mov	r0, r5
 800942c:	4614      	mov	r4, r2
 800942e:	f7ff ffdb 	bl	80093e8 <__mcmp>
 8009432:	1e06      	subs	r6, r0, #0
 8009434:	d111      	bne.n	800945a <__mdiff+0x3a>
 8009436:	4631      	mov	r1, r6
 8009438:	4638      	mov	r0, r7
 800943a:	f7ff fd11 	bl	8008e60 <_Balloc>
 800943e:	4602      	mov	r2, r0
 8009440:	b928      	cbnz	r0, 800944e <__mdiff+0x2e>
 8009442:	f240 2137 	movw	r1, #567	; 0x237
 8009446:	4b3a      	ldr	r3, [pc, #232]	; (8009530 <__mdiff+0x110>)
 8009448:	483a      	ldr	r0, [pc, #232]	; (8009534 <__mdiff+0x114>)
 800944a:	f001 fb19 	bl	800aa80 <__assert_func>
 800944e:	2301      	movs	r3, #1
 8009450:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8009454:	4610      	mov	r0, r2
 8009456:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800945a:	bfa4      	itt	ge
 800945c:	4623      	movge	r3, r4
 800945e:	462c      	movge	r4, r5
 8009460:	4638      	mov	r0, r7
 8009462:	6861      	ldr	r1, [r4, #4]
 8009464:	bfa6      	itte	ge
 8009466:	461d      	movge	r5, r3
 8009468:	2600      	movge	r6, #0
 800946a:	2601      	movlt	r6, #1
 800946c:	f7ff fcf8 	bl	8008e60 <_Balloc>
 8009470:	4602      	mov	r2, r0
 8009472:	b918      	cbnz	r0, 800947c <__mdiff+0x5c>
 8009474:	f240 2145 	movw	r1, #581	; 0x245
 8009478:	4b2d      	ldr	r3, [pc, #180]	; (8009530 <__mdiff+0x110>)
 800947a:	e7e5      	b.n	8009448 <__mdiff+0x28>
 800947c:	f102 0814 	add.w	r8, r2, #20
 8009480:	46c2      	mov	sl, r8
 8009482:	f04f 0c00 	mov.w	ip, #0
 8009486:	6927      	ldr	r7, [r4, #16]
 8009488:	60c6      	str	r6, [r0, #12]
 800948a:	692e      	ldr	r6, [r5, #16]
 800948c:	f104 0014 	add.w	r0, r4, #20
 8009490:	f105 0914 	add.w	r9, r5, #20
 8009494:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8009498:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800949c:	3410      	adds	r4, #16
 800949e:	f854 bf04 	ldr.w	fp, [r4, #4]!
 80094a2:	f859 3b04 	ldr.w	r3, [r9], #4
 80094a6:	fa1f f18b 	uxth.w	r1, fp
 80094aa:	4461      	add	r1, ip
 80094ac:	fa1f fc83 	uxth.w	ip, r3
 80094b0:	0c1b      	lsrs	r3, r3, #16
 80094b2:	eba1 010c 	sub.w	r1, r1, ip
 80094b6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80094ba:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80094be:	b289      	uxth	r1, r1
 80094c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80094c4:	454e      	cmp	r6, r9
 80094c6:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80094ca:	f84a 1b04 	str.w	r1, [sl], #4
 80094ce:	d8e6      	bhi.n	800949e <__mdiff+0x7e>
 80094d0:	1b73      	subs	r3, r6, r5
 80094d2:	3b15      	subs	r3, #21
 80094d4:	f023 0303 	bic.w	r3, r3, #3
 80094d8:	3515      	adds	r5, #21
 80094da:	3304      	adds	r3, #4
 80094dc:	42ae      	cmp	r6, r5
 80094de:	bf38      	it	cc
 80094e0:	2304      	movcc	r3, #4
 80094e2:	4418      	add	r0, r3
 80094e4:	4443      	add	r3, r8
 80094e6:	461e      	mov	r6, r3
 80094e8:	4605      	mov	r5, r0
 80094ea:	4575      	cmp	r5, lr
 80094ec:	d30e      	bcc.n	800950c <__mdiff+0xec>
 80094ee:	f10e 0103 	add.w	r1, lr, #3
 80094f2:	1a09      	subs	r1, r1, r0
 80094f4:	f021 0103 	bic.w	r1, r1, #3
 80094f8:	3803      	subs	r0, #3
 80094fa:	4586      	cmp	lr, r0
 80094fc:	bf38      	it	cc
 80094fe:	2100      	movcc	r1, #0
 8009500:	440b      	add	r3, r1
 8009502:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009506:	b189      	cbz	r1, 800952c <__mdiff+0x10c>
 8009508:	6117      	str	r7, [r2, #16]
 800950a:	e7a3      	b.n	8009454 <__mdiff+0x34>
 800950c:	f855 8b04 	ldr.w	r8, [r5], #4
 8009510:	fa1f f188 	uxth.w	r1, r8
 8009514:	4461      	add	r1, ip
 8009516:	140c      	asrs	r4, r1, #16
 8009518:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800951c:	b289      	uxth	r1, r1
 800951e:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8009522:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8009526:	f846 1b04 	str.w	r1, [r6], #4
 800952a:	e7de      	b.n	80094ea <__mdiff+0xca>
 800952c:	3f01      	subs	r7, #1
 800952e:	e7e8      	b.n	8009502 <__mdiff+0xe2>
 8009530:	0800b6af 	.word	0x0800b6af
 8009534:	0800b6c0 	.word	0x0800b6c0

08009538 <__ulp>:
 8009538:	4b0e      	ldr	r3, [pc, #56]	; (8009574 <__ulp+0x3c>)
 800953a:	400b      	ands	r3, r1
 800953c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8009540:	2b00      	cmp	r3, #0
 8009542:	dc08      	bgt.n	8009556 <__ulp+0x1e>
 8009544:	425b      	negs	r3, r3
 8009546:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800954a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800954e:	da04      	bge.n	800955a <__ulp+0x22>
 8009550:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009554:	4113      	asrs	r3, r2
 8009556:	2200      	movs	r2, #0
 8009558:	e008      	b.n	800956c <__ulp+0x34>
 800955a:	f1a2 0314 	sub.w	r3, r2, #20
 800955e:	2b1e      	cmp	r3, #30
 8009560:	bfd6      	itet	le
 8009562:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8009566:	2201      	movgt	r2, #1
 8009568:	40da      	lsrle	r2, r3
 800956a:	2300      	movs	r3, #0
 800956c:	4619      	mov	r1, r3
 800956e:	4610      	mov	r0, r2
 8009570:	4770      	bx	lr
 8009572:	bf00      	nop
 8009574:	7ff00000 	.word	0x7ff00000

08009578 <__b2d>:
 8009578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800957a:	6905      	ldr	r5, [r0, #16]
 800957c:	f100 0714 	add.w	r7, r0, #20
 8009580:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8009584:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8009588:	1f2e      	subs	r6, r5, #4
 800958a:	4620      	mov	r0, r4
 800958c:	f7ff fd5a 	bl	8009044 <__hi0bits>
 8009590:	f1c0 0220 	rsb	r2, r0, #32
 8009594:	280a      	cmp	r0, #10
 8009596:	4603      	mov	r3, r0
 8009598:	f8df c068 	ldr.w	ip, [pc, #104]	; 8009604 <__b2d+0x8c>
 800959c:	600a      	str	r2, [r1, #0]
 800959e:	dc12      	bgt.n	80095c6 <__b2d+0x4e>
 80095a0:	f1c0 0e0b 	rsb	lr, r0, #11
 80095a4:	fa24 f20e 	lsr.w	r2, r4, lr
 80095a8:	42b7      	cmp	r7, r6
 80095aa:	ea42 010c 	orr.w	r1, r2, ip
 80095ae:	bf2c      	ite	cs
 80095b0:	2200      	movcs	r2, #0
 80095b2:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 80095b6:	3315      	adds	r3, #21
 80095b8:	fa04 f303 	lsl.w	r3, r4, r3
 80095bc:	fa22 f20e 	lsr.w	r2, r2, lr
 80095c0:	431a      	orrs	r2, r3
 80095c2:	4610      	mov	r0, r2
 80095c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80095c6:	42b7      	cmp	r7, r6
 80095c8:	bf2e      	itee	cs
 80095ca:	2200      	movcs	r2, #0
 80095cc:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 80095d0:	f1a5 0608 	subcc.w	r6, r5, #8
 80095d4:	3b0b      	subs	r3, #11
 80095d6:	d012      	beq.n	80095fe <__b2d+0x86>
 80095d8:	f1c3 0520 	rsb	r5, r3, #32
 80095dc:	fa22 f105 	lsr.w	r1, r2, r5
 80095e0:	409c      	lsls	r4, r3
 80095e2:	430c      	orrs	r4, r1
 80095e4:	42be      	cmp	r6, r7
 80095e6:	f044 517f 	orr.w	r1, r4, #1069547520	; 0x3fc00000
 80095ea:	bf94      	ite	ls
 80095ec:	2400      	movls	r4, #0
 80095ee:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80095f2:	409a      	lsls	r2, r3
 80095f4:	40ec      	lsrs	r4, r5
 80095f6:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80095fa:	4322      	orrs	r2, r4
 80095fc:	e7e1      	b.n	80095c2 <__b2d+0x4a>
 80095fe:	ea44 010c 	orr.w	r1, r4, ip
 8009602:	e7de      	b.n	80095c2 <__b2d+0x4a>
 8009604:	3ff00000 	.word	0x3ff00000

08009608 <__d2b>:
 8009608:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800960a:	2101      	movs	r1, #1
 800960c:	4617      	mov	r7, r2
 800960e:	461c      	mov	r4, r3
 8009610:	9e08      	ldr	r6, [sp, #32]
 8009612:	f7ff fc25 	bl	8008e60 <_Balloc>
 8009616:	4605      	mov	r5, r0
 8009618:	b930      	cbnz	r0, 8009628 <__d2b+0x20>
 800961a:	4602      	mov	r2, r0
 800961c:	f240 310f 	movw	r1, #783	; 0x30f
 8009620:	4b22      	ldr	r3, [pc, #136]	; (80096ac <__d2b+0xa4>)
 8009622:	4823      	ldr	r0, [pc, #140]	; (80096b0 <__d2b+0xa8>)
 8009624:	f001 fa2c 	bl	800aa80 <__assert_func>
 8009628:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800962c:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8009630:	bb24      	cbnz	r4, 800967c <__d2b+0x74>
 8009632:	2f00      	cmp	r7, #0
 8009634:	9301      	str	r3, [sp, #4]
 8009636:	d026      	beq.n	8009686 <__d2b+0x7e>
 8009638:	4668      	mov	r0, sp
 800963a:	9700      	str	r7, [sp, #0]
 800963c:	f7ff fd22 	bl	8009084 <__lo0bits>
 8009640:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009644:	b1e8      	cbz	r0, 8009682 <__d2b+0x7a>
 8009646:	f1c0 0320 	rsb	r3, r0, #32
 800964a:	fa02 f303 	lsl.w	r3, r2, r3
 800964e:	430b      	orrs	r3, r1
 8009650:	40c2      	lsrs	r2, r0
 8009652:	616b      	str	r3, [r5, #20]
 8009654:	9201      	str	r2, [sp, #4]
 8009656:	9b01      	ldr	r3, [sp, #4]
 8009658:	2b00      	cmp	r3, #0
 800965a:	bf14      	ite	ne
 800965c:	2102      	movne	r1, #2
 800965e:	2101      	moveq	r1, #1
 8009660:	61ab      	str	r3, [r5, #24]
 8009662:	6129      	str	r1, [r5, #16]
 8009664:	b1bc      	cbz	r4, 8009696 <__d2b+0x8e>
 8009666:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800966a:	4404      	add	r4, r0
 800966c:	6034      	str	r4, [r6, #0]
 800966e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009672:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009674:	6018      	str	r0, [r3, #0]
 8009676:	4628      	mov	r0, r5
 8009678:	b003      	add	sp, #12
 800967a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800967c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009680:	e7d7      	b.n	8009632 <__d2b+0x2a>
 8009682:	6169      	str	r1, [r5, #20]
 8009684:	e7e7      	b.n	8009656 <__d2b+0x4e>
 8009686:	a801      	add	r0, sp, #4
 8009688:	f7ff fcfc 	bl	8009084 <__lo0bits>
 800968c:	9b01      	ldr	r3, [sp, #4]
 800968e:	2101      	movs	r1, #1
 8009690:	616b      	str	r3, [r5, #20]
 8009692:	3020      	adds	r0, #32
 8009694:	e7e5      	b.n	8009662 <__d2b+0x5a>
 8009696:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800969a:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 800969e:	6030      	str	r0, [r6, #0]
 80096a0:	6918      	ldr	r0, [r3, #16]
 80096a2:	f7ff fccf 	bl	8009044 <__hi0bits>
 80096a6:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80096aa:	e7e2      	b.n	8009672 <__d2b+0x6a>
 80096ac:	0800b6af 	.word	0x0800b6af
 80096b0:	0800b6c0 	.word	0x0800b6c0

080096b4 <__ratio>:
 80096b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096b8:	4688      	mov	r8, r1
 80096ba:	4669      	mov	r1, sp
 80096bc:	4681      	mov	r9, r0
 80096be:	f7ff ff5b 	bl	8009578 <__b2d>
 80096c2:	460f      	mov	r7, r1
 80096c4:	4604      	mov	r4, r0
 80096c6:	460d      	mov	r5, r1
 80096c8:	4640      	mov	r0, r8
 80096ca:	a901      	add	r1, sp, #4
 80096cc:	f7ff ff54 	bl	8009578 <__b2d>
 80096d0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80096d4:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80096d8:	468b      	mov	fp, r1
 80096da:	eba3 0c02 	sub.w	ip, r3, r2
 80096de:	e9dd 3200 	ldrd	r3, r2, [sp]
 80096e2:	1a9b      	subs	r3, r3, r2
 80096e4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	bfd5      	itete	le
 80096ec:	460a      	movle	r2, r1
 80096ee:	462a      	movgt	r2, r5
 80096f0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80096f4:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80096f8:	bfd8      	it	le
 80096fa:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80096fe:	465b      	mov	r3, fp
 8009700:	4602      	mov	r2, r0
 8009702:	4639      	mov	r1, r7
 8009704:	4620      	mov	r0, r4
 8009706:	f7f7 f811 	bl	800072c <__aeabi_ddiv>
 800970a:	b003      	add	sp, #12
 800970c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009710 <__copybits>:
 8009710:	3901      	subs	r1, #1
 8009712:	b570      	push	{r4, r5, r6, lr}
 8009714:	1149      	asrs	r1, r1, #5
 8009716:	6914      	ldr	r4, [r2, #16]
 8009718:	3101      	adds	r1, #1
 800971a:	f102 0314 	add.w	r3, r2, #20
 800971e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009722:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009726:	1f05      	subs	r5, r0, #4
 8009728:	42a3      	cmp	r3, r4
 800972a:	d30c      	bcc.n	8009746 <__copybits+0x36>
 800972c:	1aa3      	subs	r3, r4, r2
 800972e:	3b11      	subs	r3, #17
 8009730:	f023 0303 	bic.w	r3, r3, #3
 8009734:	3211      	adds	r2, #17
 8009736:	42a2      	cmp	r2, r4
 8009738:	bf88      	it	hi
 800973a:	2300      	movhi	r3, #0
 800973c:	4418      	add	r0, r3
 800973e:	2300      	movs	r3, #0
 8009740:	4288      	cmp	r0, r1
 8009742:	d305      	bcc.n	8009750 <__copybits+0x40>
 8009744:	bd70      	pop	{r4, r5, r6, pc}
 8009746:	f853 6b04 	ldr.w	r6, [r3], #4
 800974a:	f845 6f04 	str.w	r6, [r5, #4]!
 800974e:	e7eb      	b.n	8009728 <__copybits+0x18>
 8009750:	f840 3b04 	str.w	r3, [r0], #4
 8009754:	e7f4      	b.n	8009740 <__copybits+0x30>

08009756 <__any_on>:
 8009756:	f100 0214 	add.w	r2, r0, #20
 800975a:	6900      	ldr	r0, [r0, #16]
 800975c:	114b      	asrs	r3, r1, #5
 800975e:	4298      	cmp	r0, r3
 8009760:	b510      	push	{r4, lr}
 8009762:	db11      	blt.n	8009788 <__any_on+0x32>
 8009764:	dd0a      	ble.n	800977c <__any_on+0x26>
 8009766:	f011 011f 	ands.w	r1, r1, #31
 800976a:	d007      	beq.n	800977c <__any_on+0x26>
 800976c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009770:	fa24 f001 	lsr.w	r0, r4, r1
 8009774:	fa00 f101 	lsl.w	r1, r0, r1
 8009778:	428c      	cmp	r4, r1
 800977a:	d10b      	bne.n	8009794 <__any_on+0x3e>
 800977c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009780:	4293      	cmp	r3, r2
 8009782:	d803      	bhi.n	800978c <__any_on+0x36>
 8009784:	2000      	movs	r0, #0
 8009786:	bd10      	pop	{r4, pc}
 8009788:	4603      	mov	r3, r0
 800978a:	e7f7      	b.n	800977c <__any_on+0x26>
 800978c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009790:	2900      	cmp	r1, #0
 8009792:	d0f5      	beq.n	8009780 <__any_on+0x2a>
 8009794:	2001      	movs	r0, #1
 8009796:	e7f6      	b.n	8009786 <__any_on+0x30>

08009798 <sulp>:
 8009798:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800979c:	460f      	mov	r7, r1
 800979e:	4690      	mov	r8, r2
 80097a0:	f7ff feca 	bl	8009538 <__ulp>
 80097a4:	4604      	mov	r4, r0
 80097a6:	460d      	mov	r5, r1
 80097a8:	f1b8 0f00 	cmp.w	r8, #0
 80097ac:	d011      	beq.n	80097d2 <sulp+0x3a>
 80097ae:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80097b2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	dd0b      	ble.n	80097d2 <sulp+0x3a>
 80097ba:	2400      	movs	r4, #0
 80097bc:	051b      	lsls	r3, r3, #20
 80097be:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80097c2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80097c6:	4622      	mov	r2, r4
 80097c8:	462b      	mov	r3, r5
 80097ca:	f7f6 fe85 	bl	80004d8 <__aeabi_dmul>
 80097ce:	4604      	mov	r4, r0
 80097d0:	460d      	mov	r5, r1
 80097d2:	4620      	mov	r0, r4
 80097d4:	4629      	mov	r1, r5
 80097d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80097da:	0000      	movs	r0, r0
 80097dc:	0000      	movs	r0, r0
	...

080097e0 <_strtod_l>:
 80097e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097e4:	b09f      	sub	sp, #124	; 0x7c
 80097e6:	9217      	str	r2, [sp, #92]	; 0x5c
 80097e8:	2200      	movs	r2, #0
 80097ea:	4604      	mov	r4, r0
 80097ec:	921a      	str	r2, [sp, #104]	; 0x68
 80097ee:	460d      	mov	r5, r1
 80097f0:	f04f 0800 	mov.w	r8, #0
 80097f4:	f04f 0900 	mov.w	r9, #0
 80097f8:	460a      	mov	r2, r1
 80097fa:	9219      	str	r2, [sp, #100]	; 0x64
 80097fc:	7811      	ldrb	r1, [r2, #0]
 80097fe:	292b      	cmp	r1, #43	; 0x2b
 8009800:	d04a      	beq.n	8009898 <_strtod_l+0xb8>
 8009802:	d838      	bhi.n	8009876 <_strtod_l+0x96>
 8009804:	290d      	cmp	r1, #13
 8009806:	d832      	bhi.n	800986e <_strtod_l+0x8e>
 8009808:	2908      	cmp	r1, #8
 800980a:	d832      	bhi.n	8009872 <_strtod_l+0x92>
 800980c:	2900      	cmp	r1, #0
 800980e:	d03b      	beq.n	8009888 <_strtod_l+0xa8>
 8009810:	2200      	movs	r2, #0
 8009812:	920e      	str	r2, [sp, #56]	; 0x38
 8009814:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8009816:	7832      	ldrb	r2, [r6, #0]
 8009818:	2a30      	cmp	r2, #48	; 0x30
 800981a:	f040 80b2 	bne.w	8009982 <_strtod_l+0x1a2>
 800981e:	7872      	ldrb	r2, [r6, #1]
 8009820:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8009824:	2a58      	cmp	r2, #88	; 0x58
 8009826:	d16e      	bne.n	8009906 <_strtod_l+0x126>
 8009828:	9302      	str	r3, [sp, #8]
 800982a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800982c:	4620      	mov	r0, r4
 800982e:	9301      	str	r3, [sp, #4]
 8009830:	ab1a      	add	r3, sp, #104	; 0x68
 8009832:	9300      	str	r3, [sp, #0]
 8009834:	4a8c      	ldr	r2, [pc, #560]	; (8009a68 <_strtod_l+0x288>)
 8009836:	ab1b      	add	r3, sp, #108	; 0x6c
 8009838:	a919      	add	r1, sp, #100	; 0x64
 800983a:	f001 f9bb 	bl	800abb4 <__gethex>
 800983e:	f010 070f 	ands.w	r7, r0, #15
 8009842:	4605      	mov	r5, r0
 8009844:	d005      	beq.n	8009852 <_strtod_l+0x72>
 8009846:	2f06      	cmp	r7, #6
 8009848:	d128      	bne.n	800989c <_strtod_l+0xbc>
 800984a:	2300      	movs	r3, #0
 800984c:	3601      	adds	r6, #1
 800984e:	9619      	str	r6, [sp, #100]	; 0x64
 8009850:	930e      	str	r3, [sp, #56]	; 0x38
 8009852:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009854:	2b00      	cmp	r3, #0
 8009856:	f040 85a0 	bne.w	800a39a <_strtod_l+0xbba>
 800985a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800985c:	b1cb      	cbz	r3, 8009892 <_strtod_l+0xb2>
 800985e:	4642      	mov	r2, r8
 8009860:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8009864:	4610      	mov	r0, r2
 8009866:	4619      	mov	r1, r3
 8009868:	b01f      	add	sp, #124	; 0x7c
 800986a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800986e:	2920      	cmp	r1, #32
 8009870:	d1ce      	bne.n	8009810 <_strtod_l+0x30>
 8009872:	3201      	adds	r2, #1
 8009874:	e7c1      	b.n	80097fa <_strtod_l+0x1a>
 8009876:	292d      	cmp	r1, #45	; 0x2d
 8009878:	d1ca      	bne.n	8009810 <_strtod_l+0x30>
 800987a:	2101      	movs	r1, #1
 800987c:	910e      	str	r1, [sp, #56]	; 0x38
 800987e:	1c51      	adds	r1, r2, #1
 8009880:	9119      	str	r1, [sp, #100]	; 0x64
 8009882:	7852      	ldrb	r2, [r2, #1]
 8009884:	2a00      	cmp	r2, #0
 8009886:	d1c5      	bne.n	8009814 <_strtod_l+0x34>
 8009888:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800988a:	9519      	str	r5, [sp, #100]	; 0x64
 800988c:	2b00      	cmp	r3, #0
 800988e:	f040 8582 	bne.w	800a396 <_strtod_l+0xbb6>
 8009892:	4642      	mov	r2, r8
 8009894:	464b      	mov	r3, r9
 8009896:	e7e5      	b.n	8009864 <_strtod_l+0x84>
 8009898:	2100      	movs	r1, #0
 800989a:	e7ef      	b.n	800987c <_strtod_l+0x9c>
 800989c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800989e:	b13a      	cbz	r2, 80098b0 <_strtod_l+0xd0>
 80098a0:	2135      	movs	r1, #53	; 0x35
 80098a2:	a81c      	add	r0, sp, #112	; 0x70
 80098a4:	f7ff ff34 	bl	8009710 <__copybits>
 80098a8:	4620      	mov	r0, r4
 80098aa:	991a      	ldr	r1, [sp, #104]	; 0x68
 80098ac:	f7ff fb18 	bl	8008ee0 <_Bfree>
 80098b0:	3f01      	subs	r7, #1
 80098b2:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80098b4:	2f04      	cmp	r7, #4
 80098b6:	d806      	bhi.n	80098c6 <_strtod_l+0xe6>
 80098b8:	e8df f007 	tbb	[pc, r7]
 80098bc:	201d0314 	.word	0x201d0314
 80098c0:	14          	.byte	0x14
 80098c1:	00          	.byte	0x00
 80098c2:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 80098c6:	05e9      	lsls	r1, r5, #23
 80098c8:	bf48      	it	mi
 80098ca:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 80098ce:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80098d2:	0d1b      	lsrs	r3, r3, #20
 80098d4:	051b      	lsls	r3, r3, #20
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d1bb      	bne.n	8009852 <_strtod_l+0x72>
 80098da:	f7fe fb17 	bl	8007f0c <__errno>
 80098de:	2322      	movs	r3, #34	; 0x22
 80098e0:	6003      	str	r3, [r0, #0]
 80098e2:	e7b6      	b.n	8009852 <_strtod_l+0x72>
 80098e4:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80098e8:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 80098ec:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80098f0:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80098f4:	e7e7      	b.n	80098c6 <_strtod_l+0xe6>
 80098f6:	f8df 9174 	ldr.w	r9, [pc, #372]	; 8009a6c <_strtod_l+0x28c>
 80098fa:	e7e4      	b.n	80098c6 <_strtod_l+0xe6>
 80098fc:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8009900:	f04f 38ff 	mov.w	r8, #4294967295
 8009904:	e7df      	b.n	80098c6 <_strtod_l+0xe6>
 8009906:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009908:	1c5a      	adds	r2, r3, #1
 800990a:	9219      	str	r2, [sp, #100]	; 0x64
 800990c:	785b      	ldrb	r3, [r3, #1]
 800990e:	2b30      	cmp	r3, #48	; 0x30
 8009910:	d0f9      	beq.n	8009906 <_strtod_l+0x126>
 8009912:	2b00      	cmp	r3, #0
 8009914:	d09d      	beq.n	8009852 <_strtod_l+0x72>
 8009916:	2301      	movs	r3, #1
 8009918:	f04f 0a00 	mov.w	sl, #0
 800991c:	220a      	movs	r2, #10
 800991e:	46d3      	mov	fp, sl
 8009920:	9305      	str	r3, [sp, #20]
 8009922:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009924:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 8009928:	930b      	str	r3, [sp, #44]	; 0x2c
 800992a:	9819      	ldr	r0, [sp, #100]	; 0x64
 800992c:	7806      	ldrb	r6, [r0, #0]
 800992e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8009932:	b2d9      	uxtb	r1, r3
 8009934:	2909      	cmp	r1, #9
 8009936:	d926      	bls.n	8009986 <_strtod_l+0x1a6>
 8009938:	2201      	movs	r2, #1
 800993a:	494d      	ldr	r1, [pc, #308]	; (8009a70 <_strtod_l+0x290>)
 800993c:	f001 f847 	bl	800a9ce <strncmp>
 8009940:	2800      	cmp	r0, #0
 8009942:	d030      	beq.n	80099a6 <_strtod_l+0x1c6>
 8009944:	2000      	movs	r0, #0
 8009946:	4632      	mov	r2, r6
 8009948:	4603      	mov	r3, r0
 800994a:	465e      	mov	r6, fp
 800994c:	9008      	str	r0, [sp, #32]
 800994e:	2a65      	cmp	r2, #101	; 0x65
 8009950:	d001      	beq.n	8009956 <_strtod_l+0x176>
 8009952:	2a45      	cmp	r2, #69	; 0x45
 8009954:	d113      	bne.n	800997e <_strtod_l+0x19e>
 8009956:	b91e      	cbnz	r6, 8009960 <_strtod_l+0x180>
 8009958:	9a05      	ldr	r2, [sp, #20]
 800995a:	4302      	orrs	r2, r0
 800995c:	d094      	beq.n	8009888 <_strtod_l+0xa8>
 800995e:	2600      	movs	r6, #0
 8009960:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8009962:	1c6a      	adds	r2, r5, #1
 8009964:	9219      	str	r2, [sp, #100]	; 0x64
 8009966:	786a      	ldrb	r2, [r5, #1]
 8009968:	2a2b      	cmp	r2, #43	; 0x2b
 800996a:	d074      	beq.n	8009a56 <_strtod_l+0x276>
 800996c:	2a2d      	cmp	r2, #45	; 0x2d
 800996e:	d078      	beq.n	8009a62 <_strtod_l+0x282>
 8009970:	f04f 0c00 	mov.w	ip, #0
 8009974:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8009978:	2909      	cmp	r1, #9
 800997a:	d97f      	bls.n	8009a7c <_strtod_l+0x29c>
 800997c:	9519      	str	r5, [sp, #100]	; 0x64
 800997e:	2700      	movs	r7, #0
 8009980:	e09e      	b.n	8009ac0 <_strtod_l+0x2e0>
 8009982:	2300      	movs	r3, #0
 8009984:	e7c8      	b.n	8009918 <_strtod_l+0x138>
 8009986:	f1bb 0f08 	cmp.w	fp, #8
 800998a:	bfd8      	it	le
 800998c:	990a      	ldrle	r1, [sp, #40]	; 0x28
 800998e:	f100 0001 	add.w	r0, r0, #1
 8009992:	bfd6      	itet	le
 8009994:	fb02 3301 	mlale	r3, r2, r1, r3
 8009998:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800999c:	930a      	strle	r3, [sp, #40]	; 0x28
 800999e:	f10b 0b01 	add.w	fp, fp, #1
 80099a2:	9019      	str	r0, [sp, #100]	; 0x64
 80099a4:	e7c1      	b.n	800992a <_strtod_l+0x14a>
 80099a6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80099a8:	1c5a      	adds	r2, r3, #1
 80099aa:	9219      	str	r2, [sp, #100]	; 0x64
 80099ac:	785a      	ldrb	r2, [r3, #1]
 80099ae:	f1bb 0f00 	cmp.w	fp, #0
 80099b2:	d037      	beq.n	8009a24 <_strtod_l+0x244>
 80099b4:	465e      	mov	r6, fp
 80099b6:	9008      	str	r0, [sp, #32]
 80099b8:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80099bc:	2b09      	cmp	r3, #9
 80099be:	d912      	bls.n	80099e6 <_strtod_l+0x206>
 80099c0:	2301      	movs	r3, #1
 80099c2:	e7c4      	b.n	800994e <_strtod_l+0x16e>
 80099c4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80099c6:	3001      	adds	r0, #1
 80099c8:	1c5a      	adds	r2, r3, #1
 80099ca:	9219      	str	r2, [sp, #100]	; 0x64
 80099cc:	785a      	ldrb	r2, [r3, #1]
 80099ce:	2a30      	cmp	r2, #48	; 0x30
 80099d0:	d0f8      	beq.n	80099c4 <_strtod_l+0x1e4>
 80099d2:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80099d6:	2b08      	cmp	r3, #8
 80099d8:	f200 84e4 	bhi.w	800a3a4 <_strtod_l+0xbc4>
 80099dc:	9008      	str	r0, [sp, #32]
 80099de:	2000      	movs	r0, #0
 80099e0:	4606      	mov	r6, r0
 80099e2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80099e4:	930b      	str	r3, [sp, #44]	; 0x2c
 80099e6:	3a30      	subs	r2, #48	; 0x30
 80099e8:	f100 0301 	add.w	r3, r0, #1
 80099ec:	d014      	beq.n	8009a18 <_strtod_l+0x238>
 80099ee:	9908      	ldr	r1, [sp, #32]
 80099f0:	eb00 0c06 	add.w	ip, r0, r6
 80099f4:	4419      	add	r1, r3
 80099f6:	9108      	str	r1, [sp, #32]
 80099f8:	4633      	mov	r3, r6
 80099fa:	210a      	movs	r1, #10
 80099fc:	4563      	cmp	r3, ip
 80099fe:	d113      	bne.n	8009a28 <_strtod_l+0x248>
 8009a00:	1833      	adds	r3, r6, r0
 8009a02:	2b08      	cmp	r3, #8
 8009a04:	f106 0601 	add.w	r6, r6, #1
 8009a08:	4406      	add	r6, r0
 8009a0a:	dc1a      	bgt.n	8009a42 <_strtod_l+0x262>
 8009a0c:	230a      	movs	r3, #10
 8009a0e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009a10:	fb03 2301 	mla	r3, r3, r1, r2
 8009a14:	930a      	str	r3, [sp, #40]	; 0x28
 8009a16:	2300      	movs	r3, #0
 8009a18:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009a1a:	4618      	mov	r0, r3
 8009a1c:	1c51      	adds	r1, r2, #1
 8009a1e:	9119      	str	r1, [sp, #100]	; 0x64
 8009a20:	7852      	ldrb	r2, [r2, #1]
 8009a22:	e7c9      	b.n	80099b8 <_strtod_l+0x1d8>
 8009a24:	4658      	mov	r0, fp
 8009a26:	e7d2      	b.n	80099ce <_strtod_l+0x1ee>
 8009a28:	2b08      	cmp	r3, #8
 8009a2a:	f103 0301 	add.w	r3, r3, #1
 8009a2e:	dc03      	bgt.n	8009a38 <_strtod_l+0x258>
 8009a30:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8009a32:	434f      	muls	r7, r1
 8009a34:	970a      	str	r7, [sp, #40]	; 0x28
 8009a36:	e7e1      	b.n	80099fc <_strtod_l+0x21c>
 8009a38:	2b10      	cmp	r3, #16
 8009a3a:	bfd8      	it	le
 8009a3c:	fb01 fa0a 	mulle.w	sl, r1, sl
 8009a40:	e7dc      	b.n	80099fc <_strtod_l+0x21c>
 8009a42:	2e10      	cmp	r6, #16
 8009a44:	bfdc      	itt	le
 8009a46:	230a      	movle	r3, #10
 8009a48:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8009a4c:	e7e3      	b.n	8009a16 <_strtod_l+0x236>
 8009a4e:	2300      	movs	r3, #0
 8009a50:	9308      	str	r3, [sp, #32]
 8009a52:	2301      	movs	r3, #1
 8009a54:	e780      	b.n	8009958 <_strtod_l+0x178>
 8009a56:	f04f 0c00 	mov.w	ip, #0
 8009a5a:	1caa      	adds	r2, r5, #2
 8009a5c:	9219      	str	r2, [sp, #100]	; 0x64
 8009a5e:	78aa      	ldrb	r2, [r5, #2]
 8009a60:	e788      	b.n	8009974 <_strtod_l+0x194>
 8009a62:	f04f 0c01 	mov.w	ip, #1
 8009a66:	e7f8      	b.n	8009a5a <_strtod_l+0x27a>
 8009a68:	0800b820 	.word	0x0800b820
 8009a6c:	7ff00000 	.word	0x7ff00000
 8009a70:	0800b81c 	.word	0x0800b81c
 8009a74:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009a76:	1c51      	adds	r1, r2, #1
 8009a78:	9119      	str	r1, [sp, #100]	; 0x64
 8009a7a:	7852      	ldrb	r2, [r2, #1]
 8009a7c:	2a30      	cmp	r2, #48	; 0x30
 8009a7e:	d0f9      	beq.n	8009a74 <_strtod_l+0x294>
 8009a80:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8009a84:	2908      	cmp	r1, #8
 8009a86:	f63f af7a 	bhi.w	800997e <_strtod_l+0x19e>
 8009a8a:	3a30      	subs	r2, #48	; 0x30
 8009a8c:	9209      	str	r2, [sp, #36]	; 0x24
 8009a8e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009a90:	920c      	str	r2, [sp, #48]	; 0x30
 8009a92:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009a94:	1c57      	adds	r7, r2, #1
 8009a96:	9719      	str	r7, [sp, #100]	; 0x64
 8009a98:	7852      	ldrb	r2, [r2, #1]
 8009a9a:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8009a9e:	f1be 0f09 	cmp.w	lr, #9
 8009aa2:	d938      	bls.n	8009b16 <_strtod_l+0x336>
 8009aa4:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009aa6:	1a7f      	subs	r7, r7, r1
 8009aa8:	2f08      	cmp	r7, #8
 8009aaa:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8009aae:	dc03      	bgt.n	8009ab8 <_strtod_l+0x2d8>
 8009ab0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009ab2:	428f      	cmp	r7, r1
 8009ab4:	bfa8      	it	ge
 8009ab6:	460f      	movge	r7, r1
 8009ab8:	f1bc 0f00 	cmp.w	ip, #0
 8009abc:	d000      	beq.n	8009ac0 <_strtod_l+0x2e0>
 8009abe:	427f      	negs	r7, r7
 8009ac0:	2e00      	cmp	r6, #0
 8009ac2:	d14f      	bne.n	8009b64 <_strtod_l+0x384>
 8009ac4:	9905      	ldr	r1, [sp, #20]
 8009ac6:	4301      	orrs	r1, r0
 8009ac8:	f47f aec3 	bne.w	8009852 <_strtod_l+0x72>
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	f47f aedb 	bne.w	8009888 <_strtod_l+0xa8>
 8009ad2:	2a69      	cmp	r2, #105	; 0x69
 8009ad4:	d029      	beq.n	8009b2a <_strtod_l+0x34a>
 8009ad6:	dc26      	bgt.n	8009b26 <_strtod_l+0x346>
 8009ad8:	2a49      	cmp	r2, #73	; 0x49
 8009ada:	d026      	beq.n	8009b2a <_strtod_l+0x34a>
 8009adc:	2a4e      	cmp	r2, #78	; 0x4e
 8009ade:	f47f aed3 	bne.w	8009888 <_strtod_l+0xa8>
 8009ae2:	499a      	ldr	r1, [pc, #616]	; (8009d4c <_strtod_l+0x56c>)
 8009ae4:	a819      	add	r0, sp, #100	; 0x64
 8009ae6:	f001 faa7 	bl	800b038 <__match>
 8009aea:	2800      	cmp	r0, #0
 8009aec:	f43f aecc 	beq.w	8009888 <_strtod_l+0xa8>
 8009af0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009af2:	781b      	ldrb	r3, [r3, #0]
 8009af4:	2b28      	cmp	r3, #40	; 0x28
 8009af6:	d12f      	bne.n	8009b58 <_strtod_l+0x378>
 8009af8:	4995      	ldr	r1, [pc, #596]	; (8009d50 <_strtod_l+0x570>)
 8009afa:	aa1c      	add	r2, sp, #112	; 0x70
 8009afc:	a819      	add	r0, sp, #100	; 0x64
 8009afe:	f001 faaf 	bl	800b060 <__hexnan>
 8009b02:	2805      	cmp	r0, #5
 8009b04:	d128      	bne.n	8009b58 <_strtod_l+0x378>
 8009b06:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009b08:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8009b0c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8009b10:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8009b14:	e69d      	b.n	8009852 <_strtod_l+0x72>
 8009b16:	210a      	movs	r1, #10
 8009b18:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8009b1a:	fb01 2107 	mla	r1, r1, r7, r2
 8009b1e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8009b22:	9209      	str	r2, [sp, #36]	; 0x24
 8009b24:	e7b5      	b.n	8009a92 <_strtod_l+0x2b2>
 8009b26:	2a6e      	cmp	r2, #110	; 0x6e
 8009b28:	e7d9      	b.n	8009ade <_strtod_l+0x2fe>
 8009b2a:	498a      	ldr	r1, [pc, #552]	; (8009d54 <_strtod_l+0x574>)
 8009b2c:	a819      	add	r0, sp, #100	; 0x64
 8009b2e:	f001 fa83 	bl	800b038 <__match>
 8009b32:	2800      	cmp	r0, #0
 8009b34:	f43f aea8 	beq.w	8009888 <_strtod_l+0xa8>
 8009b38:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009b3a:	4987      	ldr	r1, [pc, #540]	; (8009d58 <_strtod_l+0x578>)
 8009b3c:	3b01      	subs	r3, #1
 8009b3e:	a819      	add	r0, sp, #100	; 0x64
 8009b40:	9319      	str	r3, [sp, #100]	; 0x64
 8009b42:	f001 fa79 	bl	800b038 <__match>
 8009b46:	b910      	cbnz	r0, 8009b4e <_strtod_l+0x36e>
 8009b48:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009b4a:	3301      	adds	r3, #1
 8009b4c:	9319      	str	r3, [sp, #100]	; 0x64
 8009b4e:	f04f 0800 	mov.w	r8, #0
 8009b52:	f8df 9208 	ldr.w	r9, [pc, #520]	; 8009d5c <_strtod_l+0x57c>
 8009b56:	e67c      	b.n	8009852 <_strtod_l+0x72>
 8009b58:	4881      	ldr	r0, [pc, #516]	; (8009d60 <_strtod_l+0x580>)
 8009b5a:	f000 ff8b 	bl	800aa74 <nan>
 8009b5e:	4680      	mov	r8, r0
 8009b60:	4689      	mov	r9, r1
 8009b62:	e676      	b.n	8009852 <_strtod_l+0x72>
 8009b64:	9b08      	ldr	r3, [sp, #32]
 8009b66:	f1bb 0f00 	cmp.w	fp, #0
 8009b6a:	bf08      	it	eq
 8009b6c:	46b3      	moveq	fp, r6
 8009b6e:	1afb      	subs	r3, r7, r3
 8009b70:	2e10      	cmp	r6, #16
 8009b72:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009b74:	4635      	mov	r5, r6
 8009b76:	9309      	str	r3, [sp, #36]	; 0x24
 8009b78:	bfa8      	it	ge
 8009b7a:	2510      	movge	r5, #16
 8009b7c:	f7f6 fc32 	bl	80003e4 <__aeabi_ui2d>
 8009b80:	2e09      	cmp	r6, #9
 8009b82:	4680      	mov	r8, r0
 8009b84:	4689      	mov	r9, r1
 8009b86:	dd13      	ble.n	8009bb0 <_strtod_l+0x3d0>
 8009b88:	4b76      	ldr	r3, [pc, #472]	; (8009d64 <_strtod_l+0x584>)
 8009b8a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8009b8e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8009b92:	f7f6 fca1 	bl	80004d8 <__aeabi_dmul>
 8009b96:	4680      	mov	r8, r0
 8009b98:	4650      	mov	r0, sl
 8009b9a:	4689      	mov	r9, r1
 8009b9c:	f7f6 fc22 	bl	80003e4 <__aeabi_ui2d>
 8009ba0:	4602      	mov	r2, r0
 8009ba2:	460b      	mov	r3, r1
 8009ba4:	4640      	mov	r0, r8
 8009ba6:	4649      	mov	r1, r9
 8009ba8:	f7f6 fae0 	bl	800016c <__adddf3>
 8009bac:	4680      	mov	r8, r0
 8009bae:	4689      	mov	r9, r1
 8009bb0:	2e0f      	cmp	r6, #15
 8009bb2:	dc36      	bgt.n	8009c22 <_strtod_l+0x442>
 8009bb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	f43f ae4b 	beq.w	8009852 <_strtod_l+0x72>
 8009bbc:	dd22      	ble.n	8009c04 <_strtod_l+0x424>
 8009bbe:	2b16      	cmp	r3, #22
 8009bc0:	dc09      	bgt.n	8009bd6 <_strtod_l+0x3f6>
 8009bc2:	4968      	ldr	r1, [pc, #416]	; (8009d64 <_strtod_l+0x584>)
 8009bc4:	4642      	mov	r2, r8
 8009bc6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009bca:	464b      	mov	r3, r9
 8009bcc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009bd0:	f7f6 fc82 	bl	80004d8 <__aeabi_dmul>
 8009bd4:	e7c3      	b.n	8009b5e <_strtod_l+0x37e>
 8009bd6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009bd8:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8009bdc:	4293      	cmp	r3, r2
 8009bde:	db20      	blt.n	8009c22 <_strtod_l+0x442>
 8009be0:	4c60      	ldr	r4, [pc, #384]	; (8009d64 <_strtod_l+0x584>)
 8009be2:	f1c6 060f 	rsb	r6, r6, #15
 8009be6:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8009bea:	4642      	mov	r2, r8
 8009bec:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009bf0:	464b      	mov	r3, r9
 8009bf2:	f7f6 fc71 	bl	80004d8 <__aeabi_dmul>
 8009bf6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009bf8:	1b9e      	subs	r6, r3, r6
 8009bfa:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8009bfe:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009c02:	e7e5      	b.n	8009bd0 <_strtod_l+0x3f0>
 8009c04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c06:	3316      	adds	r3, #22
 8009c08:	db0b      	blt.n	8009c22 <_strtod_l+0x442>
 8009c0a:	9b08      	ldr	r3, [sp, #32]
 8009c0c:	4640      	mov	r0, r8
 8009c0e:	1bdf      	subs	r7, r3, r7
 8009c10:	4b54      	ldr	r3, [pc, #336]	; (8009d64 <_strtod_l+0x584>)
 8009c12:	4649      	mov	r1, r9
 8009c14:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8009c18:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009c1c:	f7f6 fd86 	bl	800072c <__aeabi_ddiv>
 8009c20:	e79d      	b.n	8009b5e <_strtod_l+0x37e>
 8009c22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c24:	1b75      	subs	r5, r6, r5
 8009c26:	441d      	add	r5, r3
 8009c28:	2d00      	cmp	r5, #0
 8009c2a:	dd70      	ble.n	8009d0e <_strtod_l+0x52e>
 8009c2c:	f015 030f 	ands.w	r3, r5, #15
 8009c30:	d00a      	beq.n	8009c48 <_strtod_l+0x468>
 8009c32:	494c      	ldr	r1, [pc, #304]	; (8009d64 <_strtod_l+0x584>)
 8009c34:	4642      	mov	r2, r8
 8009c36:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009c3a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009c3e:	464b      	mov	r3, r9
 8009c40:	f7f6 fc4a 	bl	80004d8 <__aeabi_dmul>
 8009c44:	4680      	mov	r8, r0
 8009c46:	4689      	mov	r9, r1
 8009c48:	f035 050f 	bics.w	r5, r5, #15
 8009c4c:	d04d      	beq.n	8009cea <_strtod_l+0x50a>
 8009c4e:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8009c52:	dd22      	ble.n	8009c9a <_strtod_l+0x4ba>
 8009c54:	2600      	movs	r6, #0
 8009c56:	46b3      	mov	fp, r6
 8009c58:	960b      	str	r6, [sp, #44]	; 0x2c
 8009c5a:	9608      	str	r6, [sp, #32]
 8009c5c:	2322      	movs	r3, #34	; 0x22
 8009c5e:	f04f 0800 	mov.w	r8, #0
 8009c62:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 8009d5c <_strtod_l+0x57c>
 8009c66:	6023      	str	r3, [r4, #0]
 8009c68:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	f43f adf1 	beq.w	8009852 <_strtod_l+0x72>
 8009c70:	4620      	mov	r0, r4
 8009c72:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009c74:	f7ff f934 	bl	8008ee0 <_Bfree>
 8009c78:	4620      	mov	r0, r4
 8009c7a:	9908      	ldr	r1, [sp, #32]
 8009c7c:	f7ff f930 	bl	8008ee0 <_Bfree>
 8009c80:	4659      	mov	r1, fp
 8009c82:	4620      	mov	r0, r4
 8009c84:	f7ff f92c 	bl	8008ee0 <_Bfree>
 8009c88:	4620      	mov	r0, r4
 8009c8a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009c8c:	f7ff f928 	bl	8008ee0 <_Bfree>
 8009c90:	4631      	mov	r1, r6
 8009c92:	4620      	mov	r0, r4
 8009c94:	f7ff f924 	bl	8008ee0 <_Bfree>
 8009c98:	e5db      	b.n	8009852 <_strtod_l+0x72>
 8009c9a:	4b33      	ldr	r3, [pc, #204]	; (8009d68 <_strtod_l+0x588>)
 8009c9c:	4640      	mov	r0, r8
 8009c9e:	9305      	str	r3, [sp, #20]
 8009ca0:	2300      	movs	r3, #0
 8009ca2:	4649      	mov	r1, r9
 8009ca4:	469a      	mov	sl, r3
 8009ca6:	112d      	asrs	r5, r5, #4
 8009ca8:	2d01      	cmp	r5, #1
 8009caa:	dc21      	bgt.n	8009cf0 <_strtod_l+0x510>
 8009cac:	b10b      	cbz	r3, 8009cb2 <_strtod_l+0x4d2>
 8009cae:	4680      	mov	r8, r0
 8009cb0:	4689      	mov	r9, r1
 8009cb2:	492d      	ldr	r1, [pc, #180]	; (8009d68 <_strtod_l+0x588>)
 8009cb4:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8009cb8:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8009cbc:	4642      	mov	r2, r8
 8009cbe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009cc2:	464b      	mov	r3, r9
 8009cc4:	f7f6 fc08 	bl	80004d8 <__aeabi_dmul>
 8009cc8:	4b24      	ldr	r3, [pc, #144]	; (8009d5c <_strtod_l+0x57c>)
 8009cca:	460a      	mov	r2, r1
 8009ccc:	400b      	ands	r3, r1
 8009cce:	4927      	ldr	r1, [pc, #156]	; (8009d6c <_strtod_l+0x58c>)
 8009cd0:	4680      	mov	r8, r0
 8009cd2:	428b      	cmp	r3, r1
 8009cd4:	d8be      	bhi.n	8009c54 <_strtod_l+0x474>
 8009cd6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8009cda:	428b      	cmp	r3, r1
 8009cdc:	bf86      	itte	hi
 8009cde:	f04f 38ff 	movhi.w	r8, #4294967295
 8009ce2:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 8009d70 <_strtod_l+0x590>
 8009ce6:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8009cea:	2300      	movs	r3, #0
 8009cec:	9305      	str	r3, [sp, #20]
 8009cee:	e07b      	b.n	8009de8 <_strtod_l+0x608>
 8009cf0:	07ea      	lsls	r2, r5, #31
 8009cf2:	d505      	bpl.n	8009d00 <_strtod_l+0x520>
 8009cf4:	9b05      	ldr	r3, [sp, #20]
 8009cf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cfa:	f7f6 fbed 	bl	80004d8 <__aeabi_dmul>
 8009cfe:	2301      	movs	r3, #1
 8009d00:	9a05      	ldr	r2, [sp, #20]
 8009d02:	f10a 0a01 	add.w	sl, sl, #1
 8009d06:	3208      	adds	r2, #8
 8009d08:	106d      	asrs	r5, r5, #1
 8009d0a:	9205      	str	r2, [sp, #20]
 8009d0c:	e7cc      	b.n	8009ca8 <_strtod_l+0x4c8>
 8009d0e:	d0ec      	beq.n	8009cea <_strtod_l+0x50a>
 8009d10:	426d      	negs	r5, r5
 8009d12:	f015 020f 	ands.w	r2, r5, #15
 8009d16:	d00a      	beq.n	8009d2e <_strtod_l+0x54e>
 8009d18:	4b12      	ldr	r3, [pc, #72]	; (8009d64 <_strtod_l+0x584>)
 8009d1a:	4640      	mov	r0, r8
 8009d1c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009d20:	4649      	mov	r1, r9
 8009d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d26:	f7f6 fd01 	bl	800072c <__aeabi_ddiv>
 8009d2a:	4680      	mov	r8, r0
 8009d2c:	4689      	mov	r9, r1
 8009d2e:	112d      	asrs	r5, r5, #4
 8009d30:	d0db      	beq.n	8009cea <_strtod_l+0x50a>
 8009d32:	2d1f      	cmp	r5, #31
 8009d34:	dd1e      	ble.n	8009d74 <_strtod_l+0x594>
 8009d36:	2600      	movs	r6, #0
 8009d38:	46b3      	mov	fp, r6
 8009d3a:	960b      	str	r6, [sp, #44]	; 0x2c
 8009d3c:	9608      	str	r6, [sp, #32]
 8009d3e:	2322      	movs	r3, #34	; 0x22
 8009d40:	f04f 0800 	mov.w	r8, #0
 8009d44:	f04f 0900 	mov.w	r9, #0
 8009d48:	6023      	str	r3, [r4, #0]
 8009d4a:	e78d      	b.n	8009c68 <_strtod_l+0x488>
 8009d4c:	0800b607 	.word	0x0800b607
 8009d50:	0800b834 	.word	0x0800b834
 8009d54:	0800b5ff 	.word	0x0800b5ff
 8009d58:	0800b636 	.word	0x0800b636
 8009d5c:	7ff00000 	.word	0x7ff00000
 8009d60:	0800b9c5 	.word	0x0800b9c5
 8009d64:	0800b748 	.word	0x0800b748
 8009d68:	0800b720 	.word	0x0800b720
 8009d6c:	7ca00000 	.word	0x7ca00000
 8009d70:	7fefffff 	.word	0x7fefffff
 8009d74:	f015 0310 	ands.w	r3, r5, #16
 8009d78:	bf18      	it	ne
 8009d7a:	236a      	movne	r3, #106	; 0x6a
 8009d7c:	4640      	mov	r0, r8
 8009d7e:	9305      	str	r3, [sp, #20]
 8009d80:	4649      	mov	r1, r9
 8009d82:	2300      	movs	r3, #0
 8009d84:	f8df a2c8 	ldr.w	sl, [pc, #712]	; 800a050 <_strtod_l+0x870>
 8009d88:	07ea      	lsls	r2, r5, #31
 8009d8a:	d504      	bpl.n	8009d96 <_strtod_l+0x5b6>
 8009d8c:	e9da 2300 	ldrd	r2, r3, [sl]
 8009d90:	f7f6 fba2 	bl	80004d8 <__aeabi_dmul>
 8009d94:	2301      	movs	r3, #1
 8009d96:	106d      	asrs	r5, r5, #1
 8009d98:	f10a 0a08 	add.w	sl, sl, #8
 8009d9c:	d1f4      	bne.n	8009d88 <_strtod_l+0x5a8>
 8009d9e:	b10b      	cbz	r3, 8009da4 <_strtod_l+0x5c4>
 8009da0:	4680      	mov	r8, r0
 8009da2:	4689      	mov	r9, r1
 8009da4:	9b05      	ldr	r3, [sp, #20]
 8009da6:	b1bb      	cbz	r3, 8009dd8 <_strtod_l+0x5f8>
 8009da8:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8009dac:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	4649      	mov	r1, r9
 8009db4:	dd10      	ble.n	8009dd8 <_strtod_l+0x5f8>
 8009db6:	2b1f      	cmp	r3, #31
 8009db8:	f340 8128 	ble.w	800a00c <_strtod_l+0x82c>
 8009dbc:	2b34      	cmp	r3, #52	; 0x34
 8009dbe:	bfd8      	it	le
 8009dc0:	f04f 33ff 	movle.w	r3, #4294967295
 8009dc4:	f04f 0800 	mov.w	r8, #0
 8009dc8:	bfcf      	iteee	gt
 8009dca:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8009dce:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8009dd2:	4093      	lslle	r3, r2
 8009dd4:	ea03 0901 	andle.w	r9, r3, r1
 8009dd8:	2200      	movs	r2, #0
 8009dda:	2300      	movs	r3, #0
 8009ddc:	4640      	mov	r0, r8
 8009dde:	4649      	mov	r1, r9
 8009de0:	f7f6 fde2 	bl	80009a8 <__aeabi_dcmpeq>
 8009de4:	2800      	cmp	r0, #0
 8009de6:	d1a6      	bne.n	8009d36 <_strtod_l+0x556>
 8009de8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009dea:	465a      	mov	r2, fp
 8009dec:	9300      	str	r3, [sp, #0]
 8009dee:	4620      	mov	r0, r4
 8009df0:	4633      	mov	r3, r6
 8009df2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009df4:	f7ff f8dc 	bl	8008fb0 <__s2b>
 8009df8:	900b      	str	r0, [sp, #44]	; 0x2c
 8009dfa:	2800      	cmp	r0, #0
 8009dfc:	f43f af2a 	beq.w	8009c54 <_strtod_l+0x474>
 8009e00:	2600      	movs	r6, #0
 8009e02:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009e04:	9b08      	ldr	r3, [sp, #32]
 8009e06:	2a00      	cmp	r2, #0
 8009e08:	eba3 0307 	sub.w	r3, r3, r7
 8009e0c:	bfa8      	it	ge
 8009e0e:	2300      	movge	r3, #0
 8009e10:	46b3      	mov	fp, r6
 8009e12:	9312      	str	r3, [sp, #72]	; 0x48
 8009e14:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8009e18:	9316      	str	r3, [sp, #88]	; 0x58
 8009e1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009e1c:	4620      	mov	r0, r4
 8009e1e:	6859      	ldr	r1, [r3, #4]
 8009e20:	f7ff f81e 	bl	8008e60 <_Balloc>
 8009e24:	9008      	str	r0, [sp, #32]
 8009e26:	2800      	cmp	r0, #0
 8009e28:	f43f af18 	beq.w	8009c5c <_strtod_l+0x47c>
 8009e2c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009e2e:	300c      	adds	r0, #12
 8009e30:	691a      	ldr	r2, [r3, #16]
 8009e32:	f103 010c 	add.w	r1, r3, #12
 8009e36:	3202      	adds	r2, #2
 8009e38:	0092      	lsls	r2, r2, #2
 8009e3a:	f000 fe0d 	bl	800aa58 <memcpy>
 8009e3e:	ab1c      	add	r3, sp, #112	; 0x70
 8009e40:	9301      	str	r3, [sp, #4]
 8009e42:	ab1b      	add	r3, sp, #108	; 0x6c
 8009e44:	9300      	str	r3, [sp, #0]
 8009e46:	4642      	mov	r2, r8
 8009e48:	464b      	mov	r3, r9
 8009e4a:	4620      	mov	r0, r4
 8009e4c:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 8009e50:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 8009e54:	f7ff fbd8 	bl	8009608 <__d2b>
 8009e58:	901a      	str	r0, [sp, #104]	; 0x68
 8009e5a:	2800      	cmp	r0, #0
 8009e5c:	f43f aefe 	beq.w	8009c5c <_strtod_l+0x47c>
 8009e60:	2101      	movs	r1, #1
 8009e62:	4620      	mov	r0, r4
 8009e64:	f7ff f93c 	bl	80090e0 <__i2b>
 8009e68:	4683      	mov	fp, r0
 8009e6a:	2800      	cmp	r0, #0
 8009e6c:	f43f aef6 	beq.w	8009c5c <_strtod_l+0x47c>
 8009e70:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 8009e72:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009e74:	2f00      	cmp	r7, #0
 8009e76:	bfab      	itete	ge
 8009e78:	9b12      	ldrge	r3, [sp, #72]	; 0x48
 8009e7a:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8009e7c:	eb07 0a03 	addge.w	sl, r7, r3
 8009e80:	1bdd      	sublt	r5, r3, r7
 8009e82:	9b05      	ldr	r3, [sp, #20]
 8009e84:	bfa8      	it	ge
 8009e86:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8009e88:	eba7 0703 	sub.w	r7, r7, r3
 8009e8c:	4417      	add	r7, r2
 8009e8e:	4b71      	ldr	r3, [pc, #452]	; (800a054 <_strtod_l+0x874>)
 8009e90:	f107 37ff 	add.w	r7, r7, #4294967295
 8009e94:	bfb8      	it	lt
 8009e96:	f8dd a048 	ldrlt.w	sl, [sp, #72]	; 0x48
 8009e9a:	429f      	cmp	r7, r3
 8009e9c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009ea0:	f280 80c7 	bge.w	800a032 <_strtod_l+0x852>
 8009ea4:	1bdb      	subs	r3, r3, r7
 8009ea6:	2b1f      	cmp	r3, #31
 8009ea8:	f04f 0101 	mov.w	r1, #1
 8009eac:	eba2 0203 	sub.w	r2, r2, r3
 8009eb0:	f300 80b3 	bgt.w	800a01a <_strtod_l+0x83a>
 8009eb4:	fa01 f303 	lsl.w	r3, r1, r3
 8009eb8:	9313      	str	r3, [sp, #76]	; 0x4c
 8009eba:	2300      	movs	r3, #0
 8009ebc:	9310      	str	r3, [sp, #64]	; 0x40
 8009ebe:	eb0a 0702 	add.w	r7, sl, r2
 8009ec2:	9b05      	ldr	r3, [sp, #20]
 8009ec4:	45ba      	cmp	sl, r7
 8009ec6:	4415      	add	r5, r2
 8009ec8:	441d      	add	r5, r3
 8009eca:	4653      	mov	r3, sl
 8009ecc:	bfa8      	it	ge
 8009ece:	463b      	movge	r3, r7
 8009ed0:	42ab      	cmp	r3, r5
 8009ed2:	bfa8      	it	ge
 8009ed4:	462b      	movge	r3, r5
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	bfc2      	ittt	gt
 8009eda:	1aff      	subgt	r7, r7, r3
 8009edc:	1aed      	subgt	r5, r5, r3
 8009ede:	ebaa 0a03 	subgt.w	sl, sl, r3
 8009ee2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	dd17      	ble.n	8009f18 <_strtod_l+0x738>
 8009ee8:	4659      	mov	r1, fp
 8009eea:	461a      	mov	r2, r3
 8009eec:	4620      	mov	r0, r4
 8009eee:	f7ff f9b5 	bl	800925c <__pow5mult>
 8009ef2:	4683      	mov	fp, r0
 8009ef4:	2800      	cmp	r0, #0
 8009ef6:	f43f aeb1 	beq.w	8009c5c <_strtod_l+0x47c>
 8009efa:	4601      	mov	r1, r0
 8009efc:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009efe:	4620      	mov	r0, r4
 8009f00:	f7ff f904 	bl	800910c <__multiply>
 8009f04:	900a      	str	r0, [sp, #40]	; 0x28
 8009f06:	2800      	cmp	r0, #0
 8009f08:	f43f aea8 	beq.w	8009c5c <_strtod_l+0x47c>
 8009f0c:	4620      	mov	r0, r4
 8009f0e:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009f10:	f7fe ffe6 	bl	8008ee0 <_Bfree>
 8009f14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f16:	931a      	str	r3, [sp, #104]	; 0x68
 8009f18:	2f00      	cmp	r7, #0
 8009f1a:	f300 808f 	bgt.w	800a03c <_strtod_l+0x85c>
 8009f1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	dd08      	ble.n	8009f36 <_strtod_l+0x756>
 8009f24:	4620      	mov	r0, r4
 8009f26:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8009f28:	9908      	ldr	r1, [sp, #32]
 8009f2a:	f7ff f997 	bl	800925c <__pow5mult>
 8009f2e:	9008      	str	r0, [sp, #32]
 8009f30:	2800      	cmp	r0, #0
 8009f32:	f43f ae93 	beq.w	8009c5c <_strtod_l+0x47c>
 8009f36:	2d00      	cmp	r5, #0
 8009f38:	dd08      	ble.n	8009f4c <_strtod_l+0x76c>
 8009f3a:	462a      	mov	r2, r5
 8009f3c:	4620      	mov	r0, r4
 8009f3e:	9908      	ldr	r1, [sp, #32]
 8009f40:	f7ff f9e6 	bl	8009310 <__lshift>
 8009f44:	9008      	str	r0, [sp, #32]
 8009f46:	2800      	cmp	r0, #0
 8009f48:	f43f ae88 	beq.w	8009c5c <_strtod_l+0x47c>
 8009f4c:	f1ba 0f00 	cmp.w	sl, #0
 8009f50:	dd08      	ble.n	8009f64 <_strtod_l+0x784>
 8009f52:	4659      	mov	r1, fp
 8009f54:	4652      	mov	r2, sl
 8009f56:	4620      	mov	r0, r4
 8009f58:	f7ff f9da 	bl	8009310 <__lshift>
 8009f5c:	4683      	mov	fp, r0
 8009f5e:	2800      	cmp	r0, #0
 8009f60:	f43f ae7c 	beq.w	8009c5c <_strtod_l+0x47c>
 8009f64:	4620      	mov	r0, r4
 8009f66:	9a08      	ldr	r2, [sp, #32]
 8009f68:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009f6a:	f7ff fa59 	bl	8009420 <__mdiff>
 8009f6e:	4606      	mov	r6, r0
 8009f70:	2800      	cmp	r0, #0
 8009f72:	f43f ae73 	beq.w	8009c5c <_strtod_l+0x47c>
 8009f76:	2500      	movs	r5, #0
 8009f78:	68c3      	ldr	r3, [r0, #12]
 8009f7a:	4659      	mov	r1, fp
 8009f7c:	60c5      	str	r5, [r0, #12]
 8009f7e:	930a      	str	r3, [sp, #40]	; 0x28
 8009f80:	f7ff fa32 	bl	80093e8 <__mcmp>
 8009f84:	42a8      	cmp	r0, r5
 8009f86:	da6b      	bge.n	800a060 <_strtod_l+0x880>
 8009f88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f8a:	ea53 0308 	orrs.w	r3, r3, r8
 8009f8e:	f040 808f 	bne.w	800a0b0 <_strtod_l+0x8d0>
 8009f92:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	f040 808a 	bne.w	800a0b0 <_strtod_l+0x8d0>
 8009f9c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009fa0:	0d1b      	lsrs	r3, r3, #20
 8009fa2:	051b      	lsls	r3, r3, #20
 8009fa4:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8009fa8:	f240 8082 	bls.w	800a0b0 <_strtod_l+0x8d0>
 8009fac:	6973      	ldr	r3, [r6, #20]
 8009fae:	b913      	cbnz	r3, 8009fb6 <_strtod_l+0x7d6>
 8009fb0:	6933      	ldr	r3, [r6, #16]
 8009fb2:	2b01      	cmp	r3, #1
 8009fb4:	dd7c      	ble.n	800a0b0 <_strtod_l+0x8d0>
 8009fb6:	4631      	mov	r1, r6
 8009fb8:	2201      	movs	r2, #1
 8009fba:	4620      	mov	r0, r4
 8009fbc:	f7ff f9a8 	bl	8009310 <__lshift>
 8009fc0:	4659      	mov	r1, fp
 8009fc2:	4606      	mov	r6, r0
 8009fc4:	f7ff fa10 	bl	80093e8 <__mcmp>
 8009fc8:	2800      	cmp	r0, #0
 8009fca:	dd71      	ble.n	800a0b0 <_strtod_l+0x8d0>
 8009fcc:	9905      	ldr	r1, [sp, #20]
 8009fce:	464b      	mov	r3, r9
 8009fd0:	4a21      	ldr	r2, [pc, #132]	; (800a058 <_strtod_l+0x878>)
 8009fd2:	2900      	cmp	r1, #0
 8009fd4:	f000 808d 	beq.w	800a0f2 <_strtod_l+0x912>
 8009fd8:	ea02 0109 	and.w	r1, r2, r9
 8009fdc:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8009fe0:	f300 8087 	bgt.w	800a0f2 <_strtod_l+0x912>
 8009fe4:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009fe8:	f77f aea9 	ble.w	8009d3e <_strtod_l+0x55e>
 8009fec:	4640      	mov	r0, r8
 8009fee:	4649      	mov	r1, r9
 8009ff0:	4b1a      	ldr	r3, [pc, #104]	; (800a05c <_strtod_l+0x87c>)
 8009ff2:	2200      	movs	r2, #0
 8009ff4:	f7f6 fa70 	bl	80004d8 <__aeabi_dmul>
 8009ff8:	4b17      	ldr	r3, [pc, #92]	; (800a058 <_strtod_l+0x878>)
 8009ffa:	4680      	mov	r8, r0
 8009ffc:	400b      	ands	r3, r1
 8009ffe:	4689      	mov	r9, r1
 800a000:	2b00      	cmp	r3, #0
 800a002:	f47f ae35 	bne.w	8009c70 <_strtod_l+0x490>
 800a006:	2322      	movs	r3, #34	; 0x22
 800a008:	6023      	str	r3, [r4, #0]
 800a00a:	e631      	b.n	8009c70 <_strtod_l+0x490>
 800a00c:	f04f 32ff 	mov.w	r2, #4294967295
 800a010:	fa02 f303 	lsl.w	r3, r2, r3
 800a014:	ea03 0808 	and.w	r8, r3, r8
 800a018:	e6de      	b.n	8009dd8 <_strtod_l+0x5f8>
 800a01a:	f1c7 477f 	rsb	r7, r7, #4278190080	; 0xff000000
 800a01e:	f507 077f 	add.w	r7, r7, #16711680	; 0xff0000
 800a022:	f507 477b 	add.w	r7, r7, #64256	; 0xfb00
 800a026:	37e2      	adds	r7, #226	; 0xe2
 800a028:	fa01 f307 	lsl.w	r3, r1, r7
 800a02c:	9310      	str	r3, [sp, #64]	; 0x40
 800a02e:	9113      	str	r1, [sp, #76]	; 0x4c
 800a030:	e745      	b.n	8009ebe <_strtod_l+0x6de>
 800a032:	2300      	movs	r3, #0
 800a034:	9310      	str	r3, [sp, #64]	; 0x40
 800a036:	2301      	movs	r3, #1
 800a038:	9313      	str	r3, [sp, #76]	; 0x4c
 800a03a:	e740      	b.n	8009ebe <_strtod_l+0x6de>
 800a03c:	463a      	mov	r2, r7
 800a03e:	4620      	mov	r0, r4
 800a040:	991a      	ldr	r1, [sp, #104]	; 0x68
 800a042:	f7ff f965 	bl	8009310 <__lshift>
 800a046:	901a      	str	r0, [sp, #104]	; 0x68
 800a048:	2800      	cmp	r0, #0
 800a04a:	f47f af68 	bne.w	8009f1e <_strtod_l+0x73e>
 800a04e:	e605      	b.n	8009c5c <_strtod_l+0x47c>
 800a050:	0800b848 	.word	0x0800b848
 800a054:	fffffc02 	.word	0xfffffc02
 800a058:	7ff00000 	.word	0x7ff00000
 800a05c:	39500000 	.word	0x39500000
 800a060:	46ca      	mov	sl, r9
 800a062:	d165      	bne.n	800a130 <_strtod_l+0x950>
 800a064:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a066:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a06a:	b352      	cbz	r2, 800a0c2 <_strtod_l+0x8e2>
 800a06c:	4a9e      	ldr	r2, [pc, #632]	; (800a2e8 <_strtod_l+0xb08>)
 800a06e:	4293      	cmp	r3, r2
 800a070:	d12a      	bne.n	800a0c8 <_strtod_l+0x8e8>
 800a072:	9b05      	ldr	r3, [sp, #20]
 800a074:	4641      	mov	r1, r8
 800a076:	b1fb      	cbz	r3, 800a0b8 <_strtod_l+0x8d8>
 800a078:	4b9c      	ldr	r3, [pc, #624]	; (800a2ec <_strtod_l+0xb0c>)
 800a07a:	f04f 32ff 	mov.w	r2, #4294967295
 800a07e:	ea09 0303 	and.w	r3, r9, r3
 800a082:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a086:	d81a      	bhi.n	800a0be <_strtod_l+0x8de>
 800a088:	0d1b      	lsrs	r3, r3, #20
 800a08a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a08e:	fa02 f303 	lsl.w	r3, r2, r3
 800a092:	4299      	cmp	r1, r3
 800a094:	d118      	bne.n	800a0c8 <_strtod_l+0x8e8>
 800a096:	4b96      	ldr	r3, [pc, #600]	; (800a2f0 <_strtod_l+0xb10>)
 800a098:	459a      	cmp	sl, r3
 800a09a:	d102      	bne.n	800a0a2 <_strtod_l+0x8c2>
 800a09c:	3101      	adds	r1, #1
 800a09e:	f43f addd 	beq.w	8009c5c <_strtod_l+0x47c>
 800a0a2:	f04f 0800 	mov.w	r8, #0
 800a0a6:	4b91      	ldr	r3, [pc, #580]	; (800a2ec <_strtod_l+0xb0c>)
 800a0a8:	ea0a 0303 	and.w	r3, sl, r3
 800a0ac:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800a0b0:	9b05      	ldr	r3, [sp, #20]
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d19a      	bne.n	8009fec <_strtod_l+0x80c>
 800a0b6:	e5db      	b.n	8009c70 <_strtod_l+0x490>
 800a0b8:	f04f 33ff 	mov.w	r3, #4294967295
 800a0bc:	e7e9      	b.n	800a092 <_strtod_l+0x8b2>
 800a0be:	4613      	mov	r3, r2
 800a0c0:	e7e7      	b.n	800a092 <_strtod_l+0x8b2>
 800a0c2:	ea53 0308 	orrs.w	r3, r3, r8
 800a0c6:	d081      	beq.n	8009fcc <_strtod_l+0x7ec>
 800a0c8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a0ca:	b1e3      	cbz	r3, 800a106 <_strtod_l+0x926>
 800a0cc:	ea13 0f0a 	tst.w	r3, sl
 800a0d0:	d0ee      	beq.n	800a0b0 <_strtod_l+0x8d0>
 800a0d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a0d4:	4640      	mov	r0, r8
 800a0d6:	4649      	mov	r1, r9
 800a0d8:	9a05      	ldr	r2, [sp, #20]
 800a0da:	b1c3      	cbz	r3, 800a10e <_strtod_l+0x92e>
 800a0dc:	f7ff fb5c 	bl	8009798 <sulp>
 800a0e0:	4602      	mov	r2, r0
 800a0e2:	460b      	mov	r3, r1
 800a0e4:	980c      	ldr	r0, [sp, #48]	; 0x30
 800a0e6:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a0e8:	f7f6 f840 	bl	800016c <__adddf3>
 800a0ec:	4680      	mov	r8, r0
 800a0ee:	4689      	mov	r9, r1
 800a0f0:	e7de      	b.n	800a0b0 <_strtod_l+0x8d0>
 800a0f2:	4013      	ands	r3, r2
 800a0f4:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800a0f8:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800a0fc:	f04f 38ff 	mov.w	r8, #4294967295
 800a100:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800a104:	e7d4      	b.n	800a0b0 <_strtod_l+0x8d0>
 800a106:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a108:	ea13 0f08 	tst.w	r3, r8
 800a10c:	e7e0      	b.n	800a0d0 <_strtod_l+0x8f0>
 800a10e:	f7ff fb43 	bl	8009798 <sulp>
 800a112:	4602      	mov	r2, r0
 800a114:	460b      	mov	r3, r1
 800a116:	980c      	ldr	r0, [sp, #48]	; 0x30
 800a118:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a11a:	f7f6 f825 	bl	8000168 <__aeabi_dsub>
 800a11e:	2200      	movs	r2, #0
 800a120:	2300      	movs	r3, #0
 800a122:	4680      	mov	r8, r0
 800a124:	4689      	mov	r9, r1
 800a126:	f7f6 fc3f 	bl	80009a8 <__aeabi_dcmpeq>
 800a12a:	2800      	cmp	r0, #0
 800a12c:	d0c0      	beq.n	800a0b0 <_strtod_l+0x8d0>
 800a12e:	e606      	b.n	8009d3e <_strtod_l+0x55e>
 800a130:	4659      	mov	r1, fp
 800a132:	4630      	mov	r0, r6
 800a134:	f7ff fabe 	bl	80096b4 <__ratio>
 800a138:	4602      	mov	r2, r0
 800a13a:	460b      	mov	r3, r1
 800a13c:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800a140:	2200      	movs	r2, #0
 800a142:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a146:	f7f6 fc43 	bl	80009d0 <__aeabi_dcmple>
 800a14a:	2800      	cmp	r0, #0
 800a14c:	d06f      	beq.n	800a22e <_strtod_l+0xa4e>
 800a14e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a150:	2b00      	cmp	r3, #0
 800a152:	d17c      	bne.n	800a24e <_strtod_l+0xa6e>
 800a154:	f1b8 0f00 	cmp.w	r8, #0
 800a158:	d159      	bne.n	800a20e <_strtod_l+0xa2e>
 800a15a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d17b      	bne.n	800a25a <_strtod_l+0xa7a>
 800a162:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a166:	2200      	movs	r2, #0
 800a168:	4b62      	ldr	r3, [pc, #392]	; (800a2f4 <_strtod_l+0xb14>)
 800a16a:	f7f6 fc27 	bl	80009bc <__aeabi_dcmplt>
 800a16e:	2800      	cmp	r0, #0
 800a170:	d15a      	bne.n	800a228 <_strtod_l+0xa48>
 800a172:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a176:	2200      	movs	r2, #0
 800a178:	4b5f      	ldr	r3, [pc, #380]	; (800a2f8 <_strtod_l+0xb18>)
 800a17a:	f7f6 f9ad 	bl	80004d8 <__aeabi_dmul>
 800a17e:	4605      	mov	r5, r0
 800a180:	460f      	mov	r7, r1
 800a182:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800a186:	9506      	str	r5, [sp, #24]
 800a188:	9307      	str	r3, [sp, #28]
 800a18a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a18e:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800a192:	4b56      	ldr	r3, [pc, #344]	; (800a2ec <_strtod_l+0xb0c>)
 800a194:	4a55      	ldr	r2, [pc, #340]	; (800a2ec <_strtod_l+0xb0c>)
 800a196:	ea0a 0303 	and.w	r3, sl, r3
 800a19a:	9313      	str	r3, [sp, #76]	; 0x4c
 800a19c:	4b57      	ldr	r3, [pc, #348]	; (800a2fc <_strtod_l+0xb1c>)
 800a19e:	ea0a 0202 	and.w	r2, sl, r2
 800a1a2:	429a      	cmp	r2, r3
 800a1a4:	f040 80b0 	bne.w	800a308 <_strtod_l+0xb28>
 800a1a8:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800a1ac:	4640      	mov	r0, r8
 800a1ae:	4649      	mov	r1, r9
 800a1b0:	f7ff f9c2 	bl	8009538 <__ulp>
 800a1b4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a1b8:	f7f6 f98e 	bl	80004d8 <__aeabi_dmul>
 800a1bc:	4642      	mov	r2, r8
 800a1be:	464b      	mov	r3, r9
 800a1c0:	f7f5 ffd4 	bl	800016c <__adddf3>
 800a1c4:	f8df a124 	ldr.w	sl, [pc, #292]	; 800a2ec <_strtod_l+0xb0c>
 800a1c8:	4a4d      	ldr	r2, [pc, #308]	; (800a300 <_strtod_l+0xb20>)
 800a1ca:	ea01 0a0a 	and.w	sl, r1, sl
 800a1ce:	4592      	cmp	sl, r2
 800a1d0:	4680      	mov	r8, r0
 800a1d2:	d948      	bls.n	800a266 <_strtod_l+0xa86>
 800a1d4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a1d6:	4b46      	ldr	r3, [pc, #280]	; (800a2f0 <_strtod_l+0xb10>)
 800a1d8:	429a      	cmp	r2, r3
 800a1da:	d103      	bne.n	800a1e4 <_strtod_l+0xa04>
 800a1dc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a1de:	3301      	adds	r3, #1
 800a1e0:	f43f ad3c 	beq.w	8009c5c <_strtod_l+0x47c>
 800a1e4:	f04f 38ff 	mov.w	r8, #4294967295
 800a1e8:	f8df 9104 	ldr.w	r9, [pc, #260]	; 800a2f0 <_strtod_l+0xb10>
 800a1ec:	4620      	mov	r0, r4
 800a1ee:	991a      	ldr	r1, [sp, #104]	; 0x68
 800a1f0:	f7fe fe76 	bl	8008ee0 <_Bfree>
 800a1f4:	4620      	mov	r0, r4
 800a1f6:	9908      	ldr	r1, [sp, #32]
 800a1f8:	f7fe fe72 	bl	8008ee0 <_Bfree>
 800a1fc:	4659      	mov	r1, fp
 800a1fe:	4620      	mov	r0, r4
 800a200:	f7fe fe6e 	bl	8008ee0 <_Bfree>
 800a204:	4631      	mov	r1, r6
 800a206:	4620      	mov	r0, r4
 800a208:	f7fe fe6a 	bl	8008ee0 <_Bfree>
 800a20c:	e605      	b.n	8009e1a <_strtod_l+0x63a>
 800a20e:	f1b8 0f01 	cmp.w	r8, #1
 800a212:	d103      	bne.n	800a21c <_strtod_l+0xa3c>
 800a214:	f1b9 0f00 	cmp.w	r9, #0
 800a218:	f43f ad91 	beq.w	8009d3e <_strtod_l+0x55e>
 800a21c:	2200      	movs	r2, #0
 800a21e:	4b39      	ldr	r3, [pc, #228]	; (800a304 <_strtod_l+0xb24>)
 800a220:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800a222:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a226:	e016      	b.n	800a256 <_strtod_l+0xa76>
 800a228:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800a22a:	4f33      	ldr	r7, [pc, #204]	; (800a2f8 <_strtod_l+0xb18>)
 800a22c:	e7a9      	b.n	800a182 <_strtod_l+0x9a2>
 800a22e:	4b32      	ldr	r3, [pc, #200]	; (800a2f8 <_strtod_l+0xb18>)
 800a230:	2200      	movs	r2, #0
 800a232:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a236:	f7f6 f94f 	bl	80004d8 <__aeabi_dmul>
 800a23a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a23c:	4605      	mov	r5, r0
 800a23e:	460f      	mov	r7, r1
 800a240:	2b00      	cmp	r3, #0
 800a242:	d09e      	beq.n	800a182 <_strtod_l+0x9a2>
 800a244:	4602      	mov	r2, r0
 800a246:	460b      	mov	r3, r1
 800a248:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a24c:	e79d      	b.n	800a18a <_strtod_l+0x9aa>
 800a24e:	2200      	movs	r2, #0
 800a250:	4b28      	ldr	r3, [pc, #160]	; (800a2f4 <_strtod_l+0xb14>)
 800a252:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a256:	4f27      	ldr	r7, [pc, #156]	; (800a2f4 <_strtod_l+0xb14>)
 800a258:	e797      	b.n	800a18a <_strtod_l+0x9aa>
 800a25a:	2200      	movs	r2, #0
 800a25c:	4b29      	ldr	r3, [pc, #164]	; (800a304 <_strtod_l+0xb24>)
 800a25e:	4645      	mov	r5, r8
 800a260:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a264:	e7f7      	b.n	800a256 <_strtod_l+0xa76>
 800a266:	f101 7954 	add.w	r9, r1, #55574528	; 0x3500000
 800a26a:	9b05      	ldr	r3, [sp, #20]
 800a26c:	46ca      	mov	sl, r9
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d1bc      	bne.n	800a1ec <_strtod_l+0xa0c>
 800a272:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a276:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a278:	0d1b      	lsrs	r3, r3, #20
 800a27a:	051b      	lsls	r3, r3, #20
 800a27c:	429a      	cmp	r2, r3
 800a27e:	d1b5      	bne.n	800a1ec <_strtod_l+0xa0c>
 800a280:	4628      	mov	r0, r5
 800a282:	4639      	mov	r1, r7
 800a284:	f7f6 fe56 	bl	8000f34 <__aeabi_d2lz>
 800a288:	f7f6 f8f8 	bl	800047c <__aeabi_l2d>
 800a28c:	4602      	mov	r2, r0
 800a28e:	460b      	mov	r3, r1
 800a290:	4628      	mov	r0, r5
 800a292:	4639      	mov	r1, r7
 800a294:	f7f5 ff68 	bl	8000168 <__aeabi_dsub>
 800a298:	460b      	mov	r3, r1
 800a29a:	4602      	mov	r2, r0
 800a29c:	f3c9 0a13 	ubfx	sl, r9, #0, #20
 800a2a0:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800a2a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a2a6:	ea4a 0a08 	orr.w	sl, sl, r8
 800a2aa:	ea5a 0a03 	orrs.w	sl, sl, r3
 800a2ae:	d06c      	beq.n	800a38a <_strtod_l+0xbaa>
 800a2b0:	a309      	add	r3, pc, #36	; (adr r3, 800a2d8 <_strtod_l+0xaf8>)
 800a2b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2b6:	f7f6 fb81 	bl	80009bc <__aeabi_dcmplt>
 800a2ba:	2800      	cmp	r0, #0
 800a2bc:	f47f acd8 	bne.w	8009c70 <_strtod_l+0x490>
 800a2c0:	a307      	add	r3, pc, #28	; (adr r3, 800a2e0 <_strtod_l+0xb00>)
 800a2c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2c6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a2ca:	f7f6 fb95 	bl	80009f8 <__aeabi_dcmpgt>
 800a2ce:	2800      	cmp	r0, #0
 800a2d0:	d08c      	beq.n	800a1ec <_strtod_l+0xa0c>
 800a2d2:	e4cd      	b.n	8009c70 <_strtod_l+0x490>
 800a2d4:	f3af 8000 	nop.w
 800a2d8:	94a03595 	.word	0x94a03595
 800a2dc:	3fdfffff 	.word	0x3fdfffff
 800a2e0:	35afe535 	.word	0x35afe535
 800a2e4:	3fe00000 	.word	0x3fe00000
 800a2e8:	000fffff 	.word	0x000fffff
 800a2ec:	7ff00000 	.word	0x7ff00000
 800a2f0:	7fefffff 	.word	0x7fefffff
 800a2f4:	3ff00000 	.word	0x3ff00000
 800a2f8:	3fe00000 	.word	0x3fe00000
 800a2fc:	7fe00000 	.word	0x7fe00000
 800a300:	7c9fffff 	.word	0x7c9fffff
 800a304:	bff00000 	.word	0xbff00000
 800a308:	9b05      	ldr	r3, [sp, #20]
 800a30a:	b333      	cbz	r3, 800a35a <_strtod_l+0xb7a>
 800a30c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a30e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a312:	d822      	bhi.n	800a35a <_strtod_l+0xb7a>
 800a314:	a328      	add	r3, pc, #160	; (adr r3, 800a3b8 <_strtod_l+0xbd8>)
 800a316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a31a:	4628      	mov	r0, r5
 800a31c:	4639      	mov	r1, r7
 800a31e:	f7f6 fb57 	bl	80009d0 <__aeabi_dcmple>
 800a322:	b1a0      	cbz	r0, 800a34e <_strtod_l+0xb6e>
 800a324:	4639      	mov	r1, r7
 800a326:	4628      	mov	r0, r5
 800a328:	f7f6 fbae 	bl	8000a88 <__aeabi_d2uiz>
 800a32c:	2801      	cmp	r0, #1
 800a32e:	bf38      	it	cc
 800a330:	2001      	movcc	r0, #1
 800a332:	f7f6 f857 	bl	80003e4 <__aeabi_ui2d>
 800a336:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a338:	4605      	mov	r5, r0
 800a33a:	460f      	mov	r7, r1
 800a33c:	bb03      	cbnz	r3, 800a380 <_strtod_l+0xba0>
 800a33e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a342:	9014      	str	r0, [sp, #80]	; 0x50
 800a344:	9315      	str	r3, [sp, #84]	; 0x54
 800a346:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800a34a:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800a34e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a350:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a352:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800a356:	1a9b      	subs	r3, r3, r2
 800a358:	9311      	str	r3, [sp, #68]	; 0x44
 800a35a:	980c      	ldr	r0, [sp, #48]	; 0x30
 800a35c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a35e:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
 800a362:	f7ff f8e9 	bl	8009538 <__ulp>
 800a366:	4602      	mov	r2, r0
 800a368:	460b      	mov	r3, r1
 800a36a:	4640      	mov	r0, r8
 800a36c:	4649      	mov	r1, r9
 800a36e:	f7f6 f8b3 	bl	80004d8 <__aeabi_dmul>
 800a372:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a374:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a376:	f7f5 fef9 	bl	800016c <__adddf3>
 800a37a:	4680      	mov	r8, r0
 800a37c:	4689      	mov	r9, r1
 800a37e:	e774      	b.n	800a26a <_strtod_l+0xa8a>
 800a380:	4602      	mov	r2, r0
 800a382:	460b      	mov	r3, r1
 800a384:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800a388:	e7dd      	b.n	800a346 <_strtod_l+0xb66>
 800a38a:	a30d      	add	r3, pc, #52	; (adr r3, 800a3c0 <_strtod_l+0xbe0>)
 800a38c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a390:	f7f6 fb14 	bl	80009bc <__aeabi_dcmplt>
 800a394:	e79b      	b.n	800a2ce <_strtod_l+0xaee>
 800a396:	2300      	movs	r3, #0
 800a398:	930e      	str	r3, [sp, #56]	; 0x38
 800a39a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a39c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a39e:	6013      	str	r3, [r2, #0]
 800a3a0:	f7ff ba5b 	b.w	800985a <_strtod_l+0x7a>
 800a3a4:	2a65      	cmp	r2, #101	; 0x65
 800a3a6:	f43f ab52 	beq.w	8009a4e <_strtod_l+0x26e>
 800a3aa:	2a45      	cmp	r2, #69	; 0x45
 800a3ac:	f43f ab4f 	beq.w	8009a4e <_strtod_l+0x26e>
 800a3b0:	2301      	movs	r3, #1
 800a3b2:	f7ff bb87 	b.w	8009ac4 <_strtod_l+0x2e4>
 800a3b6:	bf00      	nop
 800a3b8:	ffc00000 	.word	0xffc00000
 800a3bc:	41dfffff 	.word	0x41dfffff
 800a3c0:	94a03595 	.word	0x94a03595
 800a3c4:	3fcfffff 	.word	0x3fcfffff

0800a3c8 <_strtod_r>:
 800a3c8:	4b01      	ldr	r3, [pc, #4]	; (800a3d0 <_strtod_r+0x8>)
 800a3ca:	f7ff ba09 	b.w	80097e0 <_strtod_l>
 800a3ce:	bf00      	nop
 800a3d0:	2000006c 	.word	0x2000006c

0800a3d4 <_strtol_l.constprop.0>:
 800a3d4:	2b01      	cmp	r3, #1
 800a3d6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a3da:	4686      	mov	lr, r0
 800a3dc:	4690      	mov	r8, r2
 800a3de:	d001      	beq.n	800a3e4 <_strtol_l.constprop.0+0x10>
 800a3e0:	2b24      	cmp	r3, #36	; 0x24
 800a3e2:	d906      	bls.n	800a3f2 <_strtol_l.constprop.0+0x1e>
 800a3e4:	f7fd fd92 	bl	8007f0c <__errno>
 800a3e8:	2316      	movs	r3, #22
 800a3ea:	6003      	str	r3, [r0, #0]
 800a3ec:	2000      	movs	r0, #0
 800a3ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3f2:	460d      	mov	r5, r1
 800a3f4:	4835      	ldr	r0, [pc, #212]	; (800a4cc <_strtol_l.constprop.0+0xf8>)
 800a3f6:	462a      	mov	r2, r5
 800a3f8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a3fc:	5d06      	ldrb	r6, [r0, r4]
 800a3fe:	f016 0608 	ands.w	r6, r6, #8
 800a402:	d1f8      	bne.n	800a3f6 <_strtol_l.constprop.0+0x22>
 800a404:	2c2d      	cmp	r4, #45	; 0x2d
 800a406:	d12e      	bne.n	800a466 <_strtol_l.constprop.0+0x92>
 800a408:	2601      	movs	r6, #1
 800a40a:	782c      	ldrb	r4, [r5, #0]
 800a40c:	1c95      	adds	r5, r2, #2
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d057      	beq.n	800a4c2 <_strtol_l.constprop.0+0xee>
 800a412:	2b10      	cmp	r3, #16
 800a414:	d109      	bne.n	800a42a <_strtol_l.constprop.0+0x56>
 800a416:	2c30      	cmp	r4, #48	; 0x30
 800a418:	d107      	bne.n	800a42a <_strtol_l.constprop.0+0x56>
 800a41a:	782a      	ldrb	r2, [r5, #0]
 800a41c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800a420:	2a58      	cmp	r2, #88	; 0x58
 800a422:	d149      	bne.n	800a4b8 <_strtol_l.constprop.0+0xe4>
 800a424:	2310      	movs	r3, #16
 800a426:	786c      	ldrb	r4, [r5, #1]
 800a428:	3502      	adds	r5, #2
 800a42a:	2200      	movs	r2, #0
 800a42c:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 800a430:	f10c 3cff 	add.w	ip, ip, #4294967295
 800a434:	fbbc f9f3 	udiv	r9, ip, r3
 800a438:	4610      	mov	r0, r2
 800a43a:	fb03 ca19 	mls	sl, r3, r9, ip
 800a43e:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800a442:	2f09      	cmp	r7, #9
 800a444:	d814      	bhi.n	800a470 <_strtol_l.constprop.0+0x9c>
 800a446:	463c      	mov	r4, r7
 800a448:	42a3      	cmp	r3, r4
 800a44a:	dd20      	ble.n	800a48e <_strtol_l.constprop.0+0xba>
 800a44c:	1c57      	adds	r7, r2, #1
 800a44e:	d007      	beq.n	800a460 <_strtol_l.constprop.0+0x8c>
 800a450:	4581      	cmp	r9, r0
 800a452:	d319      	bcc.n	800a488 <_strtol_l.constprop.0+0xb4>
 800a454:	d101      	bne.n	800a45a <_strtol_l.constprop.0+0x86>
 800a456:	45a2      	cmp	sl, r4
 800a458:	db16      	blt.n	800a488 <_strtol_l.constprop.0+0xb4>
 800a45a:	2201      	movs	r2, #1
 800a45c:	fb00 4003 	mla	r0, r0, r3, r4
 800a460:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a464:	e7eb      	b.n	800a43e <_strtol_l.constprop.0+0x6a>
 800a466:	2c2b      	cmp	r4, #43	; 0x2b
 800a468:	bf04      	itt	eq
 800a46a:	782c      	ldrbeq	r4, [r5, #0]
 800a46c:	1c95      	addeq	r5, r2, #2
 800a46e:	e7ce      	b.n	800a40e <_strtol_l.constprop.0+0x3a>
 800a470:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800a474:	2f19      	cmp	r7, #25
 800a476:	d801      	bhi.n	800a47c <_strtol_l.constprop.0+0xa8>
 800a478:	3c37      	subs	r4, #55	; 0x37
 800a47a:	e7e5      	b.n	800a448 <_strtol_l.constprop.0+0x74>
 800a47c:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800a480:	2f19      	cmp	r7, #25
 800a482:	d804      	bhi.n	800a48e <_strtol_l.constprop.0+0xba>
 800a484:	3c57      	subs	r4, #87	; 0x57
 800a486:	e7df      	b.n	800a448 <_strtol_l.constprop.0+0x74>
 800a488:	f04f 32ff 	mov.w	r2, #4294967295
 800a48c:	e7e8      	b.n	800a460 <_strtol_l.constprop.0+0x8c>
 800a48e:	1c53      	adds	r3, r2, #1
 800a490:	d108      	bne.n	800a4a4 <_strtol_l.constprop.0+0xd0>
 800a492:	2322      	movs	r3, #34	; 0x22
 800a494:	4660      	mov	r0, ip
 800a496:	f8ce 3000 	str.w	r3, [lr]
 800a49a:	f1b8 0f00 	cmp.w	r8, #0
 800a49e:	d0a6      	beq.n	800a3ee <_strtol_l.constprop.0+0x1a>
 800a4a0:	1e69      	subs	r1, r5, #1
 800a4a2:	e006      	b.n	800a4b2 <_strtol_l.constprop.0+0xde>
 800a4a4:	b106      	cbz	r6, 800a4a8 <_strtol_l.constprop.0+0xd4>
 800a4a6:	4240      	negs	r0, r0
 800a4a8:	f1b8 0f00 	cmp.w	r8, #0
 800a4ac:	d09f      	beq.n	800a3ee <_strtol_l.constprop.0+0x1a>
 800a4ae:	2a00      	cmp	r2, #0
 800a4b0:	d1f6      	bne.n	800a4a0 <_strtol_l.constprop.0+0xcc>
 800a4b2:	f8c8 1000 	str.w	r1, [r8]
 800a4b6:	e79a      	b.n	800a3ee <_strtol_l.constprop.0+0x1a>
 800a4b8:	2430      	movs	r4, #48	; 0x30
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d1b5      	bne.n	800a42a <_strtol_l.constprop.0+0x56>
 800a4be:	2308      	movs	r3, #8
 800a4c0:	e7b3      	b.n	800a42a <_strtol_l.constprop.0+0x56>
 800a4c2:	2c30      	cmp	r4, #48	; 0x30
 800a4c4:	d0a9      	beq.n	800a41a <_strtol_l.constprop.0+0x46>
 800a4c6:	230a      	movs	r3, #10
 800a4c8:	e7af      	b.n	800a42a <_strtol_l.constprop.0+0x56>
 800a4ca:	bf00      	nop
 800a4cc:	0800b871 	.word	0x0800b871

0800a4d0 <_strtol_r>:
 800a4d0:	f7ff bf80 	b.w	800a3d4 <_strtol_l.constprop.0>

0800a4d4 <__ssputs_r>:
 800a4d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a4d8:	461f      	mov	r7, r3
 800a4da:	688e      	ldr	r6, [r1, #8]
 800a4dc:	4682      	mov	sl, r0
 800a4de:	42be      	cmp	r6, r7
 800a4e0:	460c      	mov	r4, r1
 800a4e2:	4690      	mov	r8, r2
 800a4e4:	680b      	ldr	r3, [r1, #0]
 800a4e6:	d82c      	bhi.n	800a542 <__ssputs_r+0x6e>
 800a4e8:	898a      	ldrh	r2, [r1, #12]
 800a4ea:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a4ee:	d026      	beq.n	800a53e <__ssputs_r+0x6a>
 800a4f0:	6965      	ldr	r5, [r4, #20]
 800a4f2:	6909      	ldr	r1, [r1, #16]
 800a4f4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a4f8:	eba3 0901 	sub.w	r9, r3, r1
 800a4fc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a500:	1c7b      	adds	r3, r7, #1
 800a502:	444b      	add	r3, r9
 800a504:	106d      	asrs	r5, r5, #1
 800a506:	429d      	cmp	r5, r3
 800a508:	bf38      	it	cc
 800a50a:	461d      	movcc	r5, r3
 800a50c:	0553      	lsls	r3, r2, #21
 800a50e:	d527      	bpl.n	800a560 <__ssputs_r+0x8c>
 800a510:	4629      	mov	r1, r5
 800a512:	f7fe fc19 	bl	8008d48 <_malloc_r>
 800a516:	4606      	mov	r6, r0
 800a518:	b360      	cbz	r0, 800a574 <__ssputs_r+0xa0>
 800a51a:	464a      	mov	r2, r9
 800a51c:	6921      	ldr	r1, [r4, #16]
 800a51e:	f000 fa9b 	bl	800aa58 <memcpy>
 800a522:	89a3      	ldrh	r3, [r4, #12]
 800a524:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a528:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a52c:	81a3      	strh	r3, [r4, #12]
 800a52e:	6126      	str	r6, [r4, #16]
 800a530:	444e      	add	r6, r9
 800a532:	6026      	str	r6, [r4, #0]
 800a534:	463e      	mov	r6, r7
 800a536:	6165      	str	r5, [r4, #20]
 800a538:	eba5 0509 	sub.w	r5, r5, r9
 800a53c:	60a5      	str	r5, [r4, #8]
 800a53e:	42be      	cmp	r6, r7
 800a540:	d900      	bls.n	800a544 <__ssputs_r+0x70>
 800a542:	463e      	mov	r6, r7
 800a544:	4632      	mov	r2, r6
 800a546:	4641      	mov	r1, r8
 800a548:	6820      	ldr	r0, [r4, #0]
 800a54a:	f000 fa26 	bl	800a99a <memmove>
 800a54e:	2000      	movs	r0, #0
 800a550:	68a3      	ldr	r3, [r4, #8]
 800a552:	1b9b      	subs	r3, r3, r6
 800a554:	60a3      	str	r3, [r4, #8]
 800a556:	6823      	ldr	r3, [r4, #0]
 800a558:	4433      	add	r3, r6
 800a55a:	6023      	str	r3, [r4, #0]
 800a55c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a560:	462a      	mov	r2, r5
 800a562:	f000 fe2a 	bl	800b1ba <_realloc_r>
 800a566:	4606      	mov	r6, r0
 800a568:	2800      	cmp	r0, #0
 800a56a:	d1e0      	bne.n	800a52e <__ssputs_r+0x5a>
 800a56c:	4650      	mov	r0, sl
 800a56e:	6921      	ldr	r1, [r4, #16]
 800a570:	f7fe fb7a 	bl	8008c68 <_free_r>
 800a574:	230c      	movs	r3, #12
 800a576:	f8ca 3000 	str.w	r3, [sl]
 800a57a:	89a3      	ldrh	r3, [r4, #12]
 800a57c:	f04f 30ff 	mov.w	r0, #4294967295
 800a580:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a584:	81a3      	strh	r3, [r4, #12]
 800a586:	e7e9      	b.n	800a55c <__ssputs_r+0x88>

0800a588 <_svfiprintf_r>:
 800a588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a58c:	4698      	mov	r8, r3
 800a58e:	898b      	ldrh	r3, [r1, #12]
 800a590:	4607      	mov	r7, r0
 800a592:	061b      	lsls	r3, r3, #24
 800a594:	460d      	mov	r5, r1
 800a596:	4614      	mov	r4, r2
 800a598:	b09d      	sub	sp, #116	; 0x74
 800a59a:	d50e      	bpl.n	800a5ba <_svfiprintf_r+0x32>
 800a59c:	690b      	ldr	r3, [r1, #16]
 800a59e:	b963      	cbnz	r3, 800a5ba <_svfiprintf_r+0x32>
 800a5a0:	2140      	movs	r1, #64	; 0x40
 800a5a2:	f7fe fbd1 	bl	8008d48 <_malloc_r>
 800a5a6:	6028      	str	r0, [r5, #0]
 800a5a8:	6128      	str	r0, [r5, #16]
 800a5aa:	b920      	cbnz	r0, 800a5b6 <_svfiprintf_r+0x2e>
 800a5ac:	230c      	movs	r3, #12
 800a5ae:	603b      	str	r3, [r7, #0]
 800a5b0:	f04f 30ff 	mov.w	r0, #4294967295
 800a5b4:	e0d0      	b.n	800a758 <_svfiprintf_r+0x1d0>
 800a5b6:	2340      	movs	r3, #64	; 0x40
 800a5b8:	616b      	str	r3, [r5, #20]
 800a5ba:	2300      	movs	r3, #0
 800a5bc:	9309      	str	r3, [sp, #36]	; 0x24
 800a5be:	2320      	movs	r3, #32
 800a5c0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a5c4:	2330      	movs	r3, #48	; 0x30
 800a5c6:	f04f 0901 	mov.w	r9, #1
 800a5ca:	f8cd 800c 	str.w	r8, [sp, #12]
 800a5ce:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800a770 <_svfiprintf_r+0x1e8>
 800a5d2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a5d6:	4623      	mov	r3, r4
 800a5d8:	469a      	mov	sl, r3
 800a5da:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a5de:	b10a      	cbz	r2, 800a5e4 <_svfiprintf_r+0x5c>
 800a5e0:	2a25      	cmp	r2, #37	; 0x25
 800a5e2:	d1f9      	bne.n	800a5d8 <_svfiprintf_r+0x50>
 800a5e4:	ebba 0b04 	subs.w	fp, sl, r4
 800a5e8:	d00b      	beq.n	800a602 <_svfiprintf_r+0x7a>
 800a5ea:	465b      	mov	r3, fp
 800a5ec:	4622      	mov	r2, r4
 800a5ee:	4629      	mov	r1, r5
 800a5f0:	4638      	mov	r0, r7
 800a5f2:	f7ff ff6f 	bl	800a4d4 <__ssputs_r>
 800a5f6:	3001      	adds	r0, #1
 800a5f8:	f000 80a9 	beq.w	800a74e <_svfiprintf_r+0x1c6>
 800a5fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a5fe:	445a      	add	r2, fp
 800a600:	9209      	str	r2, [sp, #36]	; 0x24
 800a602:	f89a 3000 	ldrb.w	r3, [sl]
 800a606:	2b00      	cmp	r3, #0
 800a608:	f000 80a1 	beq.w	800a74e <_svfiprintf_r+0x1c6>
 800a60c:	2300      	movs	r3, #0
 800a60e:	f04f 32ff 	mov.w	r2, #4294967295
 800a612:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a616:	f10a 0a01 	add.w	sl, sl, #1
 800a61a:	9304      	str	r3, [sp, #16]
 800a61c:	9307      	str	r3, [sp, #28]
 800a61e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a622:	931a      	str	r3, [sp, #104]	; 0x68
 800a624:	4654      	mov	r4, sl
 800a626:	2205      	movs	r2, #5
 800a628:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a62c:	4850      	ldr	r0, [pc, #320]	; (800a770 <_svfiprintf_r+0x1e8>)
 800a62e:	f7fd fc9a 	bl	8007f66 <memchr>
 800a632:	9a04      	ldr	r2, [sp, #16]
 800a634:	b9d8      	cbnz	r0, 800a66e <_svfiprintf_r+0xe6>
 800a636:	06d0      	lsls	r0, r2, #27
 800a638:	bf44      	itt	mi
 800a63a:	2320      	movmi	r3, #32
 800a63c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a640:	0711      	lsls	r1, r2, #28
 800a642:	bf44      	itt	mi
 800a644:	232b      	movmi	r3, #43	; 0x2b
 800a646:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a64a:	f89a 3000 	ldrb.w	r3, [sl]
 800a64e:	2b2a      	cmp	r3, #42	; 0x2a
 800a650:	d015      	beq.n	800a67e <_svfiprintf_r+0xf6>
 800a652:	4654      	mov	r4, sl
 800a654:	2000      	movs	r0, #0
 800a656:	f04f 0c0a 	mov.w	ip, #10
 800a65a:	9a07      	ldr	r2, [sp, #28]
 800a65c:	4621      	mov	r1, r4
 800a65e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a662:	3b30      	subs	r3, #48	; 0x30
 800a664:	2b09      	cmp	r3, #9
 800a666:	d94d      	bls.n	800a704 <_svfiprintf_r+0x17c>
 800a668:	b1b0      	cbz	r0, 800a698 <_svfiprintf_r+0x110>
 800a66a:	9207      	str	r2, [sp, #28]
 800a66c:	e014      	b.n	800a698 <_svfiprintf_r+0x110>
 800a66e:	eba0 0308 	sub.w	r3, r0, r8
 800a672:	fa09 f303 	lsl.w	r3, r9, r3
 800a676:	4313      	orrs	r3, r2
 800a678:	46a2      	mov	sl, r4
 800a67a:	9304      	str	r3, [sp, #16]
 800a67c:	e7d2      	b.n	800a624 <_svfiprintf_r+0x9c>
 800a67e:	9b03      	ldr	r3, [sp, #12]
 800a680:	1d19      	adds	r1, r3, #4
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	9103      	str	r1, [sp, #12]
 800a686:	2b00      	cmp	r3, #0
 800a688:	bfbb      	ittet	lt
 800a68a:	425b      	neglt	r3, r3
 800a68c:	f042 0202 	orrlt.w	r2, r2, #2
 800a690:	9307      	strge	r3, [sp, #28]
 800a692:	9307      	strlt	r3, [sp, #28]
 800a694:	bfb8      	it	lt
 800a696:	9204      	strlt	r2, [sp, #16]
 800a698:	7823      	ldrb	r3, [r4, #0]
 800a69a:	2b2e      	cmp	r3, #46	; 0x2e
 800a69c:	d10c      	bne.n	800a6b8 <_svfiprintf_r+0x130>
 800a69e:	7863      	ldrb	r3, [r4, #1]
 800a6a0:	2b2a      	cmp	r3, #42	; 0x2a
 800a6a2:	d134      	bne.n	800a70e <_svfiprintf_r+0x186>
 800a6a4:	9b03      	ldr	r3, [sp, #12]
 800a6a6:	3402      	adds	r4, #2
 800a6a8:	1d1a      	adds	r2, r3, #4
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	9203      	str	r2, [sp, #12]
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	bfb8      	it	lt
 800a6b2:	f04f 33ff 	movlt.w	r3, #4294967295
 800a6b6:	9305      	str	r3, [sp, #20]
 800a6b8:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800a774 <_svfiprintf_r+0x1ec>
 800a6bc:	2203      	movs	r2, #3
 800a6be:	4650      	mov	r0, sl
 800a6c0:	7821      	ldrb	r1, [r4, #0]
 800a6c2:	f7fd fc50 	bl	8007f66 <memchr>
 800a6c6:	b138      	cbz	r0, 800a6d8 <_svfiprintf_r+0x150>
 800a6c8:	2240      	movs	r2, #64	; 0x40
 800a6ca:	9b04      	ldr	r3, [sp, #16]
 800a6cc:	eba0 000a 	sub.w	r0, r0, sl
 800a6d0:	4082      	lsls	r2, r0
 800a6d2:	4313      	orrs	r3, r2
 800a6d4:	3401      	adds	r4, #1
 800a6d6:	9304      	str	r3, [sp, #16]
 800a6d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a6dc:	2206      	movs	r2, #6
 800a6de:	4826      	ldr	r0, [pc, #152]	; (800a778 <_svfiprintf_r+0x1f0>)
 800a6e0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a6e4:	f7fd fc3f 	bl	8007f66 <memchr>
 800a6e8:	2800      	cmp	r0, #0
 800a6ea:	d038      	beq.n	800a75e <_svfiprintf_r+0x1d6>
 800a6ec:	4b23      	ldr	r3, [pc, #140]	; (800a77c <_svfiprintf_r+0x1f4>)
 800a6ee:	bb1b      	cbnz	r3, 800a738 <_svfiprintf_r+0x1b0>
 800a6f0:	9b03      	ldr	r3, [sp, #12]
 800a6f2:	3307      	adds	r3, #7
 800a6f4:	f023 0307 	bic.w	r3, r3, #7
 800a6f8:	3308      	adds	r3, #8
 800a6fa:	9303      	str	r3, [sp, #12]
 800a6fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a6fe:	4433      	add	r3, r6
 800a700:	9309      	str	r3, [sp, #36]	; 0x24
 800a702:	e768      	b.n	800a5d6 <_svfiprintf_r+0x4e>
 800a704:	460c      	mov	r4, r1
 800a706:	2001      	movs	r0, #1
 800a708:	fb0c 3202 	mla	r2, ip, r2, r3
 800a70c:	e7a6      	b.n	800a65c <_svfiprintf_r+0xd4>
 800a70e:	2300      	movs	r3, #0
 800a710:	f04f 0c0a 	mov.w	ip, #10
 800a714:	4619      	mov	r1, r3
 800a716:	3401      	adds	r4, #1
 800a718:	9305      	str	r3, [sp, #20]
 800a71a:	4620      	mov	r0, r4
 800a71c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a720:	3a30      	subs	r2, #48	; 0x30
 800a722:	2a09      	cmp	r2, #9
 800a724:	d903      	bls.n	800a72e <_svfiprintf_r+0x1a6>
 800a726:	2b00      	cmp	r3, #0
 800a728:	d0c6      	beq.n	800a6b8 <_svfiprintf_r+0x130>
 800a72a:	9105      	str	r1, [sp, #20]
 800a72c:	e7c4      	b.n	800a6b8 <_svfiprintf_r+0x130>
 800a72e:	4604      	mov	r4, r0
 800a730:	2301      	movs	r3, #1
 800a732:	fb0c 2101 	mla	r1, ip, r1, r2
 800a736:	e7f0      	b.n	800a71a <_svfiprintf_r+0x192>
 800a738:	ab03      	add	r3, sp, #12
 800a73a:	9300      	str	r3, [sp, #0]
 800a73c:	462a      	mov	r2, r5
 800a73e:	4638      	mov	r0, r7
 800a740:	4b0f      	ldr	r3, [pc, #60]	; (800a780 <_svfiprintf_r+0x1f8>)
 800a742:	a904      	add	r1, sp, #16
 800a744:	f7fc fbaa 	bl	8006e9c <_printf_float>
 800a748:	1c42      	adds	r2, r0, #1
 800a74a:	4606      	mov	r6, r0
 800a74c:	d1d6      	bne.n	800a6fc <_svfiprintf_r+0x174>
 800a74e:	89ab      	ldrh	r3, [r5, #12]
 800a750:	065b      	lsls	r3, r3, #25
 800a752:	f53f af2d 	bmi.w	800a5b0 <_svfiprintf_r+0x28>
 800a756:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a758:	b01d      	add	sp, #116	; 0x74
 800a75a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a75e:	ab03      	add	r3, sp, #12
 800a760:	9300      	str	r3, [sp, #0]
 800a762:	462a      	mov	r2, r5
 800a764:	4638      	mov	r0, r7
 800a766:	4b06      	ldr	r3, [pc, #24]	; (800a780 <_svfiprintf_r+0x1f8>)
 800a768:	a904      	add	r1, sp, #16
 800a76a:	f7fc fe37 	bl	80073dc <_printf_i>
 800a76e:	e7eb      	b.n	800a748 <_svfiprintf_r+0x1c0>
 800a770:	0800b971 	.word	0x0800b971
 800a774:	0800b977 	.word	0x0800b977
 800a778:	0800b97b 	.word	0x0800b97b
 800a77c:	08006e9d 	.word	0x08006e9d
 800a780:	0800a4d5 	.word	0x0800a4d5

0800a784 <__sflush_r>:
 800a784:	898a      	ldrh	r2, [r1, #12]
 800a786:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a788:	4605      	mov	r5, r0
 800a78a:	0710      	lsls	r0, r2, #28
 800a78c:	460c      	mov	r4, r1
 800a78e:	d457      	bmi.n	800a840 <__sflush_r+0xbc>
 800a790:	684b      	ldr	r3, [r1, #4]
 800a792:	2b00      	cmp	r3, #0
 800a794:	dc04      	bgt.n	800a7a0 <__sflush_r+0x1c>
 800a796:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a798:	2b00      	cmp	r3, #0
 800a79a:	dc01      	bgt.n	800a7a0 <__sflush_r+0x1c>
 800a79c:	2000      	movs	r0, #0
 800a79e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a7a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a7a2:	2e00      	cmp	r6, #0
 800a7a4:	d0fa      	beq.n	800a79c <__sflush_r+0x18>
 800a7a6:	2300      	movs	r3, #0
 800a7a8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a7ac:	682f      	ldr	r7, [r5, #0]
 800a7ae:	6a21      	ldr	r1, [r4, #32]
 800a7b0:	602b      	str	r3, [r5, #0]
 800a7b2:	d032      	beq.n	800a81a <__sflush_r+0x96>
 800a7b4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a7b6:	89a3      	ldrh	r3, [r4, #12]
 800a7b8:	075a      	lsls	r2, r3, #29
 800a7ba:	d505      	bpl.n	800a7c8 <__sflush_r+0x44>
 800a7bc:	6863      	ldr	r3, [r4, #4]
 800a7be:	1ac0      	subs	r0, r0, r3
 800a7c0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a7c2:	b10b      	cbz	r3, 800a7c8 <__sflush_r+0x44>
 800a7c4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a7c6:	1ac0      	subs	r0, r0, r3
 800a7c8:	2300      	movs	r3, #0
 800a7ca:	4602      	mov	r2, r0
 800a7cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a7ce:	4628      	mov	r0, r5
 800a7d0:	6a21      	ldr	r1, [r4, #32]
 800a7d2:	47b0      	blx	r6
 800a7d4:	1c43      	adds	r3, r0, #1
 800a7d6:	89a3      	ldrh	r3, [r4, #12]
 800a7d8:	d106      	bne.n	800a7e8 <__sflush_r+0x64>
 800a7da:	6829      	ldr	r1, [r5, #0]
 800a7dc:	291d      	cmp	r1, #29
 800a7de:	d82b      	bhi.n	800a838 <__sflush_r+0xb4>
 800a7e0:	4a28      	ldr	r2, [pc, #160]	; (800a884 <__sflush_r+0x100>)
 800a7e2:	410a      	asrs	r2, r1
 800a7e4:	07d6      	lsls	r6, r2, #31
 800a7e6:	d427      	bmi.n	800a838 <__sflush_r+0xb4>
 800a7e8:	2200      	movs	r2, #0
 800a7ea:	6062      	str	r2, [r4, #4]
 800a7ec:	6922      	ldr	r2, [r4, #16]
 800a7ee:	04d9      	lsls	r1, r3, #19
 800a7f0:	6022      	str	r2, [r4, #0]
 800a7f2:	d504      	bpl.n	800a7fe <__sflush_r+0x7a>
 800a7f4:	1c42      	adds	r2, r0, #1
 800a7f6:	d101      	bne.n	800a7fc <__sflush_r+0x78>
 800a7f8:	682b      	ldr	r3, [r5, #0]
 800a7fa:	b903      	cbnz	r3, 800a7fe <__sflush_r+0x7a>
 800a7fc:	6560      	str	r0, [r4, #84]	; 0x54
 800a7fe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a800:	602f      	str	r7, [r5, #0]
 800a802:	2900      	cmp	r1, #0
 800a804:	d0ca      	beq.n	800a79c <__sflush_r+0x18>
 800a806:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a80a:	4299      	cmp	r1, r3
 800a80c:	d002      	beq.n	800a814 <__sflush_r+0x90>
 800a80e:	4628      	mov	r0, r5
 800a810:	f7fe fa2a 	bl	8008c68 <_free_r>
 800a814:	2000      	movs	r0, #0
 800a816:	6360      	str	r0, [r4, #52]	; 0x34
 800a818:	e7c1      	b.n	800a79e <__sflush_r+0x1a>
 800a81a:	2301      	movs	r3, #1
 800a81c:	4628      	mov	r0, r5
 800a81e:	47b0      	blx	r6
 800a820:	1c41      	adds	r1, r0, #1
 800a822:	d1c8      	bne.n	800a7b6 <__sflush_r+0x32>
 800a824:	682b      	ldr	r3, [r5, #0]
 800a826:	2b00      	cmp	r3, #0
 800a828:	d0c5      	beq.n	800a7b6 <__sflush_r+0x32>
 800a82a:	2b1d      	cmp	r3, #29
 800a82c:	d001      	beq.n	800a832 <__sflush_r+0xae>
 800a82e:	2b16      	cmp	r3, #22
 800a830:	d101      	bne.n	800a836 <__sflush_r+0xb2>
 800a832:	602f      	str	r7, [r5, #0]
 800a834:	e7b2      	b.n	800a79c <__sflush_r+0x18>
 800a836:	89a3      	ldrh	r3, [r4, #12]
 800a838:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a83c:	81a3      	strh	r3, [r4, #12]
 800a83e:	e7ae      	b.n	800a79e <__sflush_r+0x1a>
 800a840:	690f      	ldr	r7, [r1, #16]
 800a842:	2f00      	cmp	r7, #0
 800a844:	d0aa      	beq.n	800a79c <__sflush_r+0x18>
 800a846:	0793      	lsls	r3, r2, #30
 800a848:	bf18      	it	ne
 800a84a:	2300      	movne	r3, #0
 800a84c:	680e      	ldr	r6, [r1, #0]
 800a84e:	bf08      	it	eq
 800a850:	694b      	ldreq	r3, [r1, #20]
 800a852:	1bf6      	subs	r6, r6, r7
 800a854:	600f      	str	r7, [r1, #0]
 800a856:	608b      	str	r3, [r1, #8]
 800a858:	2e00      	cmp	r6, #0
 800a85a:	dd9f      	ble.n	800a79c <__sflush_r+0x18>
 800a85c:	4633      	mov	r3, r6
 800a85e:	463a      	mov	r2, r7
 800a860:	4628      	mov	r0, r5
 800a862:	6a21      	ldr	r1, [r4, #32]
 800a864:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800a868:	47e0      	blx	ip
 800a86a:	2800      	cmp	r0, #0
 800a86c:	dc06      	bgt.n	800a87c <__sflush_r+0xf8>
 800a86e:	89a3      	ldrh	r3, [r4, #12]
 800a870:	f04f 30ff 	mov.w	r0, #4294967295
 800a874:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a878:	81a3      	strh	r3, [r4, #12]
 800a87a:	e790      	b.n	800a79e <__sflush_r+0x1a>
 800a87c:	4407      	add	r7, r0
 800a87e:	1a36      	subs	r6, r6, r0
 800a880:	e7ea      	b.n	800a858 <__sflush_r+0xd4>
 800a882:	bf00      	nop
 800a884:	dfbffffe 	.word	0xdfbffffe

0800a888 <_fflush_r>:
 800a888:	b538      	push	{r3, r4, r5, lr}
 800a88a:	690b      	ldr	r3, [r1, #16]
 800a88c:	4605      	mov	r5, r0
 800a88e:	460c      	mov	r4, r1
 800a890:	b913      	cbnz	r3, 800a898 <_fflush_r+0x10>
 800a892:	2500      	movs	r5, #0
 800a894:	4628      	mov	r0, r5
 800a896:	bd38      	pop	{r3, r4, r5, pc}
 800a898:	b118      	cbz	r0, 800a8a2 <_fflush_r+0x1a>
 800a89a:	6a03      	ldr	r3, [r0, #32]
 800a89c:	b90b      	cbnz	r3, 800a8a2 <_fflush_r+0x1a>
 800a89e:	f7fd f959 	bl	8007b54 <__sinit>
 800a8a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d0f3      	beq.n	800a892 <_fflush_r+0xa>
 800a8aa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a8ac:	07d0      	lsls	r0, r2, #31
 800a8ae:	d404      	bmi.n	800a8ba <_fflush_r+0x32>
 800a8b0:	0599      	lsls	r1, r3, #22
 800a8b2:	d402      	bmi.n	800a8ba <_fflush_r+0x32>
 800a8b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a8b6:	f7fd fb54 	bl	8007f62 <__retarget_lock_acquire_recursive>
 800a8ba:	4628      	mov	r0, r5
 800a8bc:	4621      	mov	r1, r4
 800a8be:	f7ff ff61 	bl	800a784 <__sflush_r>
 800a8c2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a8c4:	4605      	mov	r5, r0
 800a8c6:	07da      	lsls	r2, r3, #31
 800a8c8:	d4e4      	bmi.n	800a894 <_fflush_r+0xc>
 800a8ca:	89a3      	ldrh	r3, [r4, #12]
 800a8cc:	059b      	lsls	r3, r3, #22
 800a8ce:	d4e1      	bmi.n	800a894 <_fflush_r+0xc>
 800a8d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a8d2:	f7fd fb47 	bl	8007f64 <__retarget_lock_release_recursive>
 800a8d6:	e7dd      	b.n	800a894 <_fflush_r+0xc>

0800a8d8 <__swhatbuf_r>:
 800a8d8:	b570      	push	{r4, r5, r6, lr}
 800a8da:	460c      	mov	r4, r1
 800a8dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a8e0:	4615      	mov	r5, r2
 800a8e2:	2900      	cmp	r1, #0
 800a8e4:	461e      	mov	r6, r3
 800a8e6:	b096      	sub	sp, #88	; 0x58
 800a8e8:	da0c      	bge.n	800a904 <__swhatbuf_r+0x2c>
 800a8ea:	89a3      	ldrh	r3, [r4, #12]
 800a8ec:	2100      	movs	r1, #0
 800a8ee:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a8f2:	bf0c      	ite	eq
 800a8f4:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800a8f8:	2340      	movne	r3, #64	; 0x40
 800a8fa:	2000      	movs	r0, #0
 800a8fc:	6031      	str	r1, [r6, #0]
 800a8fe:	602b      	str	r3, [r5, #0]
 800a900:	b016      	add	sp, #88	; 0x58
 800a902:	bd70      	pop	{r4, r5, r6, pc}
 800a904:	466a      	mov	r2, sp
 800a906:	f000 f875 	bl	800a9f4 <_fstat_r>
 800a90a:	2800      	cmp	r0, #0
 800a90c:	dbed      	blt.n	800a8ea <__swhatbuf_r+0x12>
 800a90e:	9901      	ldr	r1, [sp, #4]
 800a910:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800a914:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800a918:	4259      	negs	r1, r3
 800a91a:	4159      	adcs	r1, r3
 800a91c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a920:	e7eb      	b.n	800a8fa <__swhatbuf_r+0x22>

0800a922 <__smakebuf_r>:
 800a922:	898b      	ldrh	r3, [r1, #12]
 800a924:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a926:	079d      	lsls	r5, r3, #30
 800a928:	4606      	mov	r6, r0
 800a92a:	460c      	mov	r4, r1
 800a92c:	d507      	bpl.n	800a93e <__smakebuf_r+0x1c>
 800a92e:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a932:	6023      	str	r3, [r4, #0]
 800a934:	6123      	str	r3, [r4, #16]
 800a936:	2301      	movs	r3, #1
 800a938:	6163      	str	r3, [r4, #20]
 800a93a:	b002      	add	sp, #8
 800a93c:	bd70      	pop	{r4, r5, r6, pc}
 800a93e:	466a      	mov	r2, sp
 800a940:	ab01      	add	r3, sp, #4
 800a942:	f7ff ffc9 	bl	800a8d8 <__swhatbuf_r>
 800a946:	9900      	ldr	r1, [sp, #0]
 800a948:	4605      	mov	r5, r0
 800a94a:	4630      	mov	r0, r6
 800a94c:	f7fe f9fc 	bl	8008d48 <_malloc_r>
 800a950:	b948      	cbnz	r0, 800a966 <__smakebuf_r+0x44>
 800a952:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a956:	059a      	lsls	r2, r3, #22
 800a958:	d4ef      	bmi.n	800a93a <__smakebuf_r+0x18>
 800a95a:	f023 0303 	bic.w	r3, r3, #3
 800a95e:	f043 0302 	orr.w	r3, r3, #2
 800a962:	81a3      	strh	r3, [r4, #12]
 800a964:	e7e3      	b.n	800a92e <__smakebuf_r+0xc>
 800a966:	89a3      	ldrh	r3, [r4, #12]
 800a968:	6020      	str	r0, [r4, #0]
 800a96a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a96e:	81a3      	strh	r3, [r4, #12]
 800a970:	9b00      	ldr	r3, [sp, #0]
 800a972:	6120      	str	r0, [r4, #16]
 800a974:	6163      	str	r3, [r4, #20]
 800a976:	9b01      	ldr	r3, [sp, #4]
 800a978:	b15b      	cbz	r3, 800a992 <__smakebuf_r+0x70>
 800a97a:	4630      	mov	r0, r6
 800a97c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a980:	f000 f84a 	bl	800aa18 <_isatty_r>
 800a984:	b128      	cbz	r0, 800a992 <__smakebuf_r+0x70>
 800a986:	89a3      	ldrh	r3, [r4, #12]
 800a988:	f023 0303 	bic.w	r3, r3, #3
 800a98c:	f043 0301 	orr.w	r3, r3, #1
 800a990:	81a3      	strh	r3, [r4, #12]
 800a992:	89a3      	ldrh	r3, [r4, #12]
 800a994:	431d      	orrs	r5, r3
 800a996:	81a5      	strh	r5, [r4, #12]
 800a998:	e7cf      	b.n	800a93a <__smakebuf_r+0x18>

0800a99a <memmove>:
 800a99a:	4288      	cmp	r0, r1
 800a99c:	b510      	push	{r4, lr}
 800a99e:	eb01 0402 	add.w	r4, r1, r2
 800a9a2:	d902      	bls.n	800a9aa <memmove+0x10>
 800a9a4:	4284      	cmp	r4, r0
 800a9a6:	4623      	mov	r3, r4
 800a9a8:	d807      	bhi.n	800a9ba <memmove+0x20>
 800a9aa:	1e43      	subs	r3, r0, #1
 800a9ac:	42a1      	cmp	r1, r4
 800a9ae:	d008      	beq.n	800a9c2 <memmove+0x28>
 800a9b0:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a9b4:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a9b8:	e7f8      	b.n	800a9ac <memmove+0x12>
 800a9ba:	4601      	mov	r1, r0
 800a9bc:	4402      	add	r2, r0
 800a9be:	428a      	cmp	r2, r1
 800a9c0:	d100      	bne.n	800a9c4 <memmove+0x2a>
 800a9c2:	bd10      	pop	{r4, pc}
 800a9c4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a9c8:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a9cc:	e7f7      	b.n	800a9be <memmove+0x24>

0800a9ce <strncmp>:
 800a9ce:	b510      	push	{r4, lr}
 800a9d0:	b16a      	cbz	r2, 800a9ee <strncmp+0x20>
 800a9d2:	3901      	subs	r1, #1
 800a9d4:	1884      	adds	r4, r0, r2
 800a9d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a9da:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a9de:	429a      	cmp	r2, r3
 800a9e0:	d103      	bne.n	800a9ea <strncmp+0x1c>
 800a9e2:	42a0      	cmp	r0, r4
 800a9e4:	d001      	beq.n	800a9ea <strncmp+0x1c>
 800a9e6:	2a00      	cmp	r2, #0
 800a9e8:	d1f5      	bne.n	800a9d6 <strncmp+0x8>
 800a9ea:	1ad0      	subs	r0, r2, r3
 800a9ec:	bd10      	pop	{r4, pc}
 800a9ee:	4610      	mov	r0, r2
 800a9f0:	e7fc      	b.n	800a9ec <strncmp+0x1e>
	...

0800a9f4 <_fstat_r>:
 800a9f4:	b538      	push	{r3, r4, r5, lr}
 800a9f6:	2300      	movs	r3, #0
 800a9f8:	4d06      	ldr	r5, [pc, #24]	; (800aa14 <_fstat_r+0x20>)
 800a9fa:	4604      	mov	r4, r0
 800a9fc:	4608      	mov	r0, r1
 800a9fe:	4611      	mov	r1, r2
 800aa00:	602b      	str	r3, [r5, #0]
 800aa02:	f7f8 fa72 	bl	8002eea <_fstat>
 800aa06:	1c43      	adds	r3, r0, #1
 800aa08:	d102      	bne.n	800aa10 <_fstat_r+0x1c>
 800aa0a:	682b      	ldr	r3, [r5, #0]
 800aa0c:	b103      	cbz	r3, 800aa10 <_fstat_r+0x1c>
 800aa0e:	6023      	str	r3, [r4, #0]
 800aa10:	bd38      	pop	{r3, r4, r5, pc}
 800aa12:	bf00      	nop
 800aa14:	2000051c 	.word	0x2000051c

0800aa18 <_isatty_r>:
 800aa18:	b538      	push	{r3, r4, r5, lr}
 800aa1a:	2300      	movs	r3, #0
 800aa1c:	4d05      	ldr	r5, [pc, #20]	; (800aa34 <_isatty_r+0x1c>)
 800aa1e:	4604      	mov	r4, r0
 800aa20:	4608      	mov	r0, r1
 800aa22:	602b      	str	r3, [r5, #0]
 800aa24:	f7f8 fa70 	bl	8002f08 <_isatty>
 800aa28:	1c43      	adds	r3, r0, #1
 800aa2a:	d102      	bne.n	800aa32 <_isatty_r+0x1a>
 800aa2c:	682b      	ldr	r3, [r5, #0]
 800aa2e:	b103      	cbz	r3, 800aa32 <_isatty_r+0x1a>
 800aa30:	6023      	str	r3, [r4, #0]
 800aa32:	bd38      	pop	{r3, r4, r5, pc}
 800aa34:	2000051c 	.word	0x2000051c

0800aa38 <_sbrk_r>:
 800aa38:	b538      	push	{r3, r4, r5, lr}
 800aa3a:	2300      	movs	r3, #0
 800aa3c:	4d05      	ldr	r5, [pc, #20]	; (800aa54 <_sbrk_r+0x1c>)
 800aa3e:	4604      	mov	r4, r0
 800aa40:	4608      	mov	r0, r1
 800aa42:	602b      	str	r3, [r5, #0]
 800aa44:	f7f8 fa76 	bl	8002f34 <_sbrk>
 800aa48:	1c43      	adds	r3, r0, #1
 800aa4a:	d102      	bne.n	800aa52 <_sbrk_r+0x1a>
 800aa4c:	682b      	ldr	r3, [r5, #0]
 800aa4e:	b103      	cbz	r3, 800aa52 <_sbrk_r+0x1a>
 800aa50:	6023      	str	r3, [r4, #0]
 800aa52:	bd38      	pop	{r3, r4, r5, pc}
 800aa54:	2000051c 	.word	0x2000051c

0800aa58 <memcpy>:
 800aa58:	440a      	add	r2, r1
 800aa5a:	4291      	cmp	r1, r2
 800aa5c:	f100 33ff 	add.w	r3, r0, #4294967295
 800aa60:	d100      	bne.n	800aa64 <memcpy+0xc>
 800aa62:	4770      	bx	lr
 800aa64:	b510      	push	{r4, lr}
 800aa66:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aa6a:	4291      	cmp	r1, r2
 800aa6c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800aa70:	d1f9      	bne.n	800aa66 <memcpy+0xe>
 800aa72:	bd10      	pop	{r4, pc}

0800aa74 <nan>:
 800aa74:	2000      	movs	r0, #0
 800aa76:	4901      	ldr	r1, [pc, #4]	; (800aa7c <nan+0x8>)
 800aa78:	4770      	bx	lr
 800aa7a:	bf00      	nop
 800aa7c:	7ff80000 	.word	0x7ff80000

0800aa80 <__assert_func>:
 800aa80:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800aa82:	4614      	mov	r4, r2
 800aa84:	461a      	mov	r2, r3
 800aa86:	4b09      	ldr	r3, [pc, #36]	; (800aaac <__assert_func+0x2c>)
 800aa88:	4605      	mov	r5, r0
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	68d8      	ldr	r0, [r3, #12]
 800aa8e:	b14c      	cbz	r4, 800aaa4 <__assert_func+0x24>
 800aa90:	4b07      	ldr	r3, [pc, #28]	; (800aab0 <__assert_func+0x30>)
 800aa92:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800aa96:	9100      	str	r1, [sp, #0]
 800aa98:	462b      	mov	r3, r5
 800aa9a:	4906      	ldr	r1, [pc, #24]	; (800aab4 <__assert_func+0x34>)
 800aa9c:	f000 fbca 	bl	800b234 <fiprintf>
 800aaa0:	f000 fbda 	bl	800b258 <abort>
 800aaa4:	4b04      	ldr	r3, [pc, #16]	; (800aab8 <__assert_func+0x38>)
 800aaa6:	461c      	mov	r4, r3
 800aaa8:	e7f3      	b.n	800aa92 <__assert_func+0x12>
 800aaaa:	bf00      	nop
 800aaac:	20000068 	.word	0x20000068
 800aab0:	0800b98a 	.word	0x0800b98a
 800aab4:	0800b997 	.word	0x0800b997
 800aab8:	0800b9c5 	.word	0x0800b9c5

0800aabc <_calloc_r>:
 800aabc:	b570      	push	{r4, r5, r6, lr}
 800aabe:	fba1 5402 	umull	r5, r4, r1, r2
 800aac2:	b934      	cbnz	r4, 800aad2 <_calloc_r+0x16>
 800aac4:	4629      	mov	r1, r5
 800aac6:	f7fe f93f 	bl	8008d48 <_malloc_r>
 800aaca:	4606      	mov	r6, r0
 800aacc:	b928      	cbnz	r0, 800aada <_calloc_r+0x1e>
 800aace:	4630      	mov	r0, r6
 800aad0:	bd70      	pop	{r4, r5, r6, pc}
 800aad2:	220c      	movs	r2, #12
 800aad4:	2600      	movs	r6, #0
 800aad6:	6002      	str	r2, [r0, #0]
 800aad8:	e7f9      	b.n	800aace <_calloc_r+0x12>
 800aada:	462a      	mov	r2, r5
 800aadc:	4621      	mov	r1, r4
 800aade:	f7fd f9c3 	bl	8007e68 <memset>
 800aae2:	e7f4      	b.n	800aace <_calloc_r+0x12>

0800aae4 <rshift>:
 800aae4:	6903      	ldr	r3, [r0, #16]
 800aae6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800aaea:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800aaee:	f100 0414 	add.w	r4, r0, #20
 800aaf2:	ea4f 1261 	mov.w	r2, r1, asr #5
 800aaf6:	dd46      	ble.n	800ab86 <rshift+0xa2>
 800aaf8:	f011 011f 	ands.w	r1, r1, #31
 800aafc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800ab00:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ab04:	d10c      	bne.n	800ab20 <rshift+0x3c>
 800ab06:	4629      	mov	r1, r5
 800ab08:	f100 0710 	add.w	r7, r0, #16
 800ab0c:	42b1      	cmp	r1, r6
 800ab0e:	d335      	bcc.n	800ab7c <rshift+0x98>
 800ab10:	1a9b      	subs	r3, r3, r2
 800ab12:	009b      	lsls	r3, r3, #2
 800ab14:	1eea      	subs	r2, r5, #3
 800ab16:	4296      	cmp	r6, r2
 800ab18:	bf38      	it	cc
 800ab1a:	2300      	movcc	r3, #0
 800ab1c:	4423      	add	r3, r4
 800ab1e:	e015      	b.n	800ab4c <rshift+0x68>
 800ab20:	46a1      	mov	r9, r4
 800ab22:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800ab26:	f1c1 0820 	rsb	r8, r1, #32
 800ab2a:	40cf      	lsrs	r7, r1
 800ab2c:	f105 0e04 	add.w	lr, r5, #4
 800ab30:	4576      	cmp	r6, lr
 800ab32:	46f4      	mov	ip, lr
 800ab34:	d816      	bhi.n	800ab64 <rshift+0x80>
 800ab36:	1a9a      	subs	r2, r3, r2
 800ab38:	0092      	lsls	r2, r2, #2
 800ab3a:	3a04      	subs	r2, #4
 800ab3c:	3501      	adds	r5, #1
 800ab3e:	42ae      	cmp	r6, r5
 800ab40:	bf38      	it	cc
 800ab42:	2200      	movcc	r2, #0
 800ab44:	18a3      	adds	r3, r4, r2
 800ab46:	50a7      	str	r7, [r4, r2]
 800ab48:	b107      	cbz	r7, 800ab4c <rshift+0x68>
 800ab4a:	3304      	adds	r3, #4
 800ab4c:	42a3      	cmp	r3, r4
 800ab4e:	eba3 0204 	sub.w	r2, r3, r4
 800ab52:	bf08      	it	eq
 800ab54:	2300      	moveq	r3, #0
 800ab56:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ab5a:	6102      	str	r2, [r0, #16]
 800ab5c:	bf08      	it	eq
 800ab5e:	6143      	streq	r3, [r0, #20]
 800ab60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ab64:	f8dc c000 	ldr.w	ip, [ip]
 800ab68:	fa0c fc08 	lsl.w	ip, ip, r8
 800ab6c:	ea4c 0707 	orr.w	r7, ip, r7
 800ab70:	f849 7b04 	str.w	r7, [r9], #4
 800ab74:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ab78:	40cf      	lsrs	r7, r1
 800ab7a:	e7d9      	b.n	800ab30 <rshift+0x4c>
 800ab7c:	f851 cb04 	ldr.w	ip, [r1], #4
 800ab80:	f847 cf04 	str.w	ip, [r7, #4]!
 800ab84:	e7c2      	b.n	800ab0c <rshift+0x28>
 800ab86:	4623      	mov	r3, r4
 800ab88:	e7e0      	b.n	800ab4c <rshift+0x68>

0800ab8a <__hexdig_fun>:
 800ab8a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800ab8e:	2b09      	cmp	r3, #9
 800ab90:	d802      	bhi.n	800ab98 <__hexdig_fun+0xe>
 800ab92:	3820      	subs	r0, #32
 800ab94:	b2c0      	uxtb	r0, r0
 800ab96:	4770      	bx	lr
 800ab98:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800ab9c:	2b05      	cmp	r3, #5
 800ab9e:	d801      	bhi.n	800aba4 <__hexdig_fun+0x1a>
 800aba0:	3847      	subs	r0, #71	; 0x47
 800aba2:	e7f7      	b.n	800ab94 <__hexdig_fun+0xa>
 800aba4:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800aba8:	2b05      	cmp	r3, #5
 800abaa:	d801      	bhi.n	800abb0 <__hexdig_fun+0x26>
 800abac:	3827      	subs	r0, #39	; 0x27
 800abae:	e7f1      	b.n	800ab94 <__hexdig_fun+0xa>
 800abb0:	2000      	movs	r0, #0
 800abb2:	4770      	bx	lr

0800abb4 <__gethex>:
 800abb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abb8:	4681      	mov	r9, r0
 800abba:	468a      	mov	sl, r1
 800abbc:	4617      	mov	r7, r2
 800abbe:	680a      	ldr	r2, [r1, #0]
 800abc0:	b085      	sub	sp, #20
 800abc2:	f102 0b02 	add.w	fp, r2, #2
 800abc6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800abca:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800abce:	9302      	str	r3, [sp, #8]
 800abd0:	32fe      	adds	r2, #254	; 0xfe
 800abd2:	eb02 030b 	add.w	r3, r2, fp
 800abd6:	46d8      	mov	r8, fp
 800abd8:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800abdc:	9301      	str	r3, [sp, #4]
 800abde:	2830      	cmp	r0, #48	; 0x30
 800abe0:	d0f7      	beq.n	800abd2 <__gethex+0x1e>
 800abe2:	f7ff ffd2 	bl	800ab8a <__hexdig_fun>
 800abe6:	4604      	mov	r4, r0
 800abe8:	2800      	cmp	r0, #0
 800abea:	d138      	bne.n	800ac5e <__gethex+0xaa>
 800abec:	2201      	movs	r2, #1
 800abee:	4640      	mov	r0, r8
 800abf0:	49a7      	ldr	r1, [pc, #668]	; (800ae90 <__gethex+0x2dc>)
 800abf2:	f7ff feec 	bl	800a9ce <strncmp>
 800abf6:	4606      	mov	r6, r0
 800abf8:	2800      	cmp	r0, #0
 800abfa:	d169      	bne.n	800acd0 <__gethex+0x11c>
 800abfc:	f898 0001 	ldrb.w	r0, [r8, #1]
 800ac00:	465d      	mov	r5, fp
 800ac02:	f7ff ffc2 	bl	800ab8a <__hexdig_fun>
 800ac06:	2800      	cmp	r0, #0
 800ac08:	d064      	beq.n	800acd4 <__gethex+0x120>
 800ac0a:	465a      	mov	r2, fp
 800ac0c:	7810      	ldrb	r0, [r2, #0]
 800ac0e:	4690      	mov	r8, r2
 800ac10:	2830      	cmp	r0, #48	; 0x30
 800ac12:	f102 0201 	add.w	r2, r2, #1
 800ac16:	d0f9      	beq.n	800ac0c <__gethex+0x58>
 800ac18:	f7ff ffb7 	bl	800ab8a <__hexdig_fun>
 800ac1c:	2301      	movs	r3, #1
 800ac1e:	fab0 f480 	clz	r4, r0
 800ac22:	465e      	mov	r6, fp
 800ac24:	0964      	lsrs	r4, r4, #5
 800ac26:	9301      	str	r3, [sp, #4]
 800ac28:	4642      	mov	r2, r8
 800ac2a:	4615      	mov	r5, r2
 800ac2c:	7828      	ldrb	r0, [r5, #0]
 800ac2e:	3201      	adds	r2, #1
 800ac30:	f7ff ffab 	bl	800ab8a <__hexdig_fun>
 800ac34:	2800      	cmp	r0, #0
 800ac36:	d1f8      	bne.n	800ac2a <__gethex+0x76>
 800ac38:	2201      	movs	r2, #1
 800ac3a:	4628      	mov	r0, r5
 800ac3c:	4994      	ldr	r1, [pc, #592]	; (800ae90 <__gethex+0x2dc>)
 800ac3e:	f7ff fec6 	bl	800a9ce <strncmp>
 800ac42:	b978      	cbnz	r0, 800ac64 <__gethex+0xb0>
 800ac44:	b946      	cbnz	r6, 800ac58 <__gethex+0xa4>
 800ac46:	1c6e      	adds	r6, r5, #1
 800ac48:	4632      	mov	r2, r6
 800ac4a:	4615      	mov	r5, r2
 800ac4c:	7828      	ldrb	r0, [r5, #0]
 800ac4e:	3201      	adds	r2, #1
 800ac50:	f7ff ff9b 	bl	800ab8a <__hexdig_fun>
 800ac54:	2800      	cmp	r0, #0
 800ac56:	d1f8      	bne.n	800ac4a <__gethex+0x96>
 800ac58:	1b73      	subs	r3, r6, r5
 800ac5a:	009e      	lsls	r6, r3, #2
 800ac5c:	e004      	b.n	800ac68 <__gethex+0xb4>
 800ac5e:	2400      	movs	r4, #0
 800ac60:	4626      	mov	r6, r4
 800ac62:	e7e1      	b.n	800ac28 <__gethex+0x74>
 800ac64:	2e00      	cmp	r6, #0
 800ac66:	d1f7      	bne.n	800ac58 <__gethex+0xa4>
 800ac68:	782b      	ldrb	r3, [r5, #0]
 800ac6a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800ac6e:	2b50      	cmp	r3, #80	; 0x50
 800ac70:	d13d      	bne.n	800acee <__gethex+0x13a>
 800ac72:	786b      	ldrb	r3, [r5, #1]
 800ac74:	2b2b      	cmp	r3, #43	; 0x2b
 800ac76:	d02f      	beq.n	800acd8 <__gethex+0x124>
 800ac78:	2b2d      	cmp	r3, #45	; 0x2d
 800ac7a:	d031      	beq.n	800ace0 <__gethex+0x12c>
 800ac7c:	f04f 0b00 	mov.w	fp, #0
 800ac80:	1c69      	adds	r1, r5, #1
 800ac82:	7808      	ldrb	r0, [r1, #0]
 800ac84:	f7ff ff81 	bl	800ab8a <__hexdig_fun>
 800ac88:	1e42      	subs	r2, r0, #1
 800ac8a:	b2d2      	uxtb	r2, r2
 800ac8c:	2a18      	cmp	r2, #24
 800ac8e:	d82e      	bhi.n	800acee <__gethex+0x13a>
 800ac90:	f1a0 0210 	sub.w	r2, r0, #16
 800ac94:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ac98:	f7ff ff77 	bl	800ab8a <__hexdig_fun>
 800ac9c:	f100 3cff 	add.w	ip, r0, #4294967295
 800aca0:	fa5f fc8c 	uxtb.w	ip, ip
 800aca4:	f1bc 0f18 	cmp.w	ip, #24
 800aca8:	d91d      	bls.n	800ace6 <__gethex+0x132>
 800acaa:	f1bb 0f00 	cmp.w	fp, #0
 800acae:	d000      	beq.n	800acb2 <__gethex+0xfe>
 800acb0:	4252      	negs	r2, r2
 800acb2:	4416      	add	r6, r2
 800acb4:	f8ca 1000 	str.w	r1, [sl]
 800acb8:	b1dc      	cbz	r4, 800acf2 <__gethex+0x13e>
 800acba:	9b01      	ldr	r3, [sp, #4]
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	bf14      	ite	ne
 800acc0:	f04f 0800 	movne.w	r8, #0
 800acc4:	f04f 0806 	moveq.w	r8, #6
 800acc8:	4640      	mov	r0, r8
 800acca:	b005      	add	sp, #20
 800accc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800acd0:	4645      	mov	r5, r8
 800acd2:	4626      	mov	r6, r4
 800acd4:	2401      	movs	r4, #1
 800acd6:	e7c7      	b.n	800ac68 <__gethex+0xb4>
 800acd8:	f04f 0b00 	mov.w	fp, #0
 800acdc:	1ca9      	adds	r1, r5, #2
 800acde:	e7d0      	b.n	800ac82 <__gethex+0xce>
 800ace0:	f04f 0b01 	mov.w	fp, #1
 800ace4:	e7fa      	b.n	800acdc <__gethex+0x128>
 800ace6:	230a      	movs	r3, #10
 800ace8:	fb03 0002 	mla	r0, r3, r2, r0
 800acec:	e7d0      	b.n	800ac90 <__gethex+0xdc>
 800acee:	4629      	mov	r1, r5
 800acf0:	e7e0      	b.n	800acb4 <__gethex+0x100>
 800acf2:	4621      	mov	r1, r4
 800acf4:	eba5 0308 	sub.w	r3, r5, r8
 800acf8:	3b01      	subs	r3, #1
 800acfa:	2b07      	cmp	r3, #7
 800acfc:	dc0a      	bgt.n	800ad14 <__gethex+0x160>
 800acfe:	4648      	mov	r0, r9
 800ad00:	f7fe f8ae 	bl	8008e60 <_Balloc>
 800ad04:	4604      	mov	r4, r0
 800ad06:	b940      	cbnz	r0, 800ad1a <__gethex+0x166>
 800ad08:	4602      	mov	r2, r0
 800ad0a:	21e4      	movs	r1, #228	; 0xe4
 800ad0c:	4b61      	ldr	r3, [pc, #388]	; (800ae94 <__gethex+0x2e0>)
 800ad0e:	4862      	ldr	r0, [pc, #392]	; (800ae98 <__gethex+0x2e4>)
 800ad10:	f7ff feb6 	bl	800aa80 <__assert_func>
 800ad14:	3101      	adds	r1, #1
 800ad16:	105b      	asrs	r3, r3, #1
 800ad18:	e7ef      	b.n	800acfa <__gethex+0x146>
 800ad1a:	2300      	movs	r3, #0
 800ad1c:	469b      	mov	fp, r3
 800ad1e:	f100 0a14 	add.w	sl, r0, #20
 800ad22:	f8cd a004 	str.w	sl, [sp, #4]
 800ad26:	45a8      	cmp	r8, r5
 800ad28:	d344      	bcc.n	800adb4 <__gethex+0x200>
 800ad2a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800ad2e:	4658      	mov	r0, fp
 800ad30:	f848 bb04 	str.w	fp, [r8], #4
 800ad34:	eba8 080a 	sub.w	r8, r8, sl
 800ad38:	ea4f 02a8 	mov.w	r2, r8, asr #2
 800ad3c:	6122      	str	r2, [r4, #16]
 800ad3e:	ea4f 1842 	mov.w	r8, r2, lsl #5
 800ad42:	f7fe f97f 	bl	8009044 <__hi0bits>
 800ad46:	683d      	ldr	r5, [r7, #0]
 800ad48:	eba8 0800 	sub.w	r8, r8, r0
 800ad4c:	45a8      	cmp	r8, r5
 800ad4e:	dd59      	ble.n	800ae04 <__gethex+0x250>
 800ad50:	eba8 0805 	sub.w	r8, r8, r5
 800ad54:	4641      	mov	r1, r8
 800ad56:	4620      	mov	r0, r4
 800ad58:	f7fe fcfd 	bl	8009756 <__any_on>
 800ad5c:	4683      	mov	fp, r0
 800ad5e:	b1b8      	cbz	r0, 800ad90 <__gethex+0x1dc>
 800ad60:	f04f 0b01 	mov.w	fp, #1
 800ad64:	f108 33ff 	add.w	r3, r8, #4294967295
 800ad68:	1159      	asrs	r1, r3, #5
 800ad6a:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800ad6e:	f003 021f 	and.w	r2, r3, #31
 800ad72:	fa0b f202 	lsl.w	r2, fp, r2
 800ad76:	420a      	tst	r2, r1
 800ad78:	d00a      	beq.n	800ad90 <__gethex+0x1dc>
 800ad7a:	455b      	cmp	r3, fp
 800ad7c:	dd06      	ble.n	800ad8c <__gethex+0x1d8>
 800ad7e:	4620      	mov	r0, r4
 800ad80:	f1a8 0102 	sub.w	r1, r8, #2
 800ad84:	f7fe fce7 	bl	8009756 <__any_on>
 800ad88:	2800      	cmp	r0, #0
 800ad8a:	d138      	bne.n	800adfe <__gethex+0x24a>
 800ad8c:	f04f 0b02 	mov.w	fp, #2
 800ad90:	4641      	mov	r1, r8
 800ad92:	4620      	mov	r0, r4
 800ad94:	f7ff fea6 	bl	800aae4 <rshift>
 800ad98:	4446      	add	r6, r8
 800ad9a:	68bb      	ldr	r3, [r7, #8]
 800ad9c:	42b3      	cmp	r3, r6
 800ad9e:	da41      	bge.n	800ae24 <__gethex+0x270>
 800ada0:	4621      	mov	r1, r4
 800ada2:	4648      	mov	r0, r9
 800ada4:	f7fe f89c 	bl	8008ee0 <_Bfree>
 800ada8:	2300      	movs	r3, #0
 800adaa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800adac:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800adb0:	6013      	str	r3, [r2, #0]
 800adb2:	e789      	b.n	800acc8 <__gethex+0x114>
 800adb4:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800adb8:	2a2e      	cmp	r2, #46	; 0x2e
 800adba:	d014      	beq.n	800ade6 <__gethex+0x232>
 800adbc:	2b20      	cmp	r3, #32
 800adbe:	d106      	bne.n	800adce <__gethex+0x21a>
 800adc0:	9b01      	ldr	r3, [sp, #4]
 800adc2:	f843 bb04 	str.w	fp, [r3], #4
 800adc6:	f04f 0b00 	mov.w	fp, #0
 800adca:	9301      	str	r3, [sp, #4]
 800adcc:	465b      	mov	r3, fp
 800adce:	7828      	ldrb	r0, [r5, #0]
 800add0:	9303      	str	r3, [sp, #12]
 800add2:	f7ff feda 	bl	800ab8a <__hexdig_fun>
 800add6:	9b03      	ldr	r3, [sp, #12]
 800add8:	f000 000f 	and.w	r0, r0, #15
 800addc:	4098      	lsls	r0, r3
 800adde:	ea4b 0b00 	orr.w	fp, fp, r0
 800ade2:	3304      	adds	r3, #4
 800ade4:	e79f      	b.n	800ad26 <__gethex+0x172>
 800ade6:	45a8      	cmp	r8, r5
 800ade8:	d8e8      	bhi.n	800adbc <__gethex+0x208>
 800adea:	2201      	movs	r2, #1
 800adec:	4628      	mov	r0, r5
 800adee:	4928      	ldr	r1, [pc, #160]	; (800ae90 <__gethex+0x2dc>)
 800adf0:	9303      	str	r3, [sp, #12]
 800adf2:	f7ff fdec 	bl	800a9ce <strncmp>
 800adf6:	9b03      	ldr	r3, [sp, #12]
 800adf8:	2800      	cmp	r0, #0
 800adfa:	d1df      	bne.n	800adbc <__gethex+0x208>
 800adfc:	e793      	b.n	800ad26 <__gethex+0x172>
 800adfe:	f04f 0b03 	mov.w	fp, #3
 800ae02:	e7c5      	b.n	800ad90 <__gethex+0x1dc>
 800ae04:	da0b      	bge.n	800ae1e <__gethex+0x26a>
 800ae06:	eba5 0808 	sub.w	r8, r5, r8
 800ae0a:	4621      	mov	r1, r4
 800ae0c:	4642      	mov	r2, r8
 800ae0e:	4648      	mov	r0, r9
 800ae10:	f7fe fa7e 	bl	8009310 <__lshift>
 800ae14:	4604      	mov	r4, r0
 800ae16:	eba6 0608 	sub.w	r6, r6, r8
 800ae1a:	f100 0a14 	add.w	sl, r0, #20
 800ae1e:	f04f 0b00 	mov.w	fp, #0
 800ae22:	e7ba      	b.n	800ad9a <__gethex+0x1e6>
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	42b3      	cmp	r3, r6
 800ae28:	dd74      	ble.n	800af14 <__gethex+0x360>
 800ae2a:	1b9e      	subs	r6, r3, r6
 800ae2c:	42b5      	cmp	r5, r6
 800ae2e:	dc35      	bgt.n	800ae9c <__gethex+0x2e8>
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	2b02      	cmp	r3, #2
 800ae34:	d023      	beq.n	800ae7e <__gethex+0x2ca>
 800ae36:	2b03      	cmp	r3, #3
 800ae38:	d025      	beq.n	800ae86 <__gethex+0x2d2>
 800ae3a:	2b01      	cmp	r3, #1
 800ae3c:	d115      	bne.n	800ae6a <__gethex+0x2b6>
 800ae3e:	42b5      	cmp	r5, r6
 800ae40:	d113      	bne.n	800ae6a <__gethex+0x2b6>
 800ae42:	2d01      	cmp	r5, #1
 800ae44:	d10b      	bne.n	800ae5e <__gethex+0x2aa>
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	9a02      	ldr	r2, [sp, #8]
 800ae4a:	f04f 0862 	mov.w	r8, #98	; 0x62
 800ae4e:	6013      	str	r3, [r2, #0]
 800ae50:	2301      	movs	r3, #1
 800ae52:	6123      	str	r3, [r4, #16]
 800ae54:	f8ca 3000 	str.w	r3, [sl]
 800ae58:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ae5a:	601c      	str	r4, [r3, #0]
 800ae5c:	e734      	b.n	800acc8 <__gethex+0x114>
 800ae5e:	4620      	mov	r0, r4
 800ae60:	1e69      	subs	r1, r5, #1
 800ae62:	f7fe fc78 	bl	8009756 <__any_on>
 800ae66:	2800      	cmp	r0, #0
 800ae68:	d1ed      	bne.n	800ae46 <__gethex+0x292>
 800ae6a:	4621      	mov	r1, r4
 800ae6c:	4648      	mov	r0, r9
 800ae6e:	f7fe f837 	bl	8008ee0 <_Bfree>
 800ae72:	2300      	movs	r3, #0
 800ae74:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ae76:	f04f 0850 	mov.w	r8, #80	; 0x50
 800ae7a:	6013      	str	r3, [r2, #0]
 800ae7c:	e724      	b.n	800acc8 <__gethex+0x114>
 800ae7e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d1f2      	bne.n	800ae6a <__gethex+0x2b6>
 800ae84:	e7df      	b.n	800ae46 <__gethex+0x292>
 800ae86:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d1dc      	bne.n	800ae46 <__gethex+0x292>
 800ae8c:	e7ed      	b.n	800ae6a <__gethex+0x2b6>
 800ae8e:	bf00      	nop
 800ae90:	0800b81c 	.word	0x0800b81c
 800ae94:	0800b6af 	.word	0x0800b6af
 800ae98:	0800b9c6 	.word	0x0800b9c6
 800ae9c:	f106 38ff 	add.w	r8, r6, #4294967295
 800aea0:	f1bb 0f00 	cmp.w	fp, #0
 800aea4:	d133      	bne.n	800af0e <__gethex+0x35a>
 800aea6:	f1b8 0f00 	cmp.w	r8, #0
 800aeaa:	d004      	beq.n	800aeb6 <__gethex+0x302>
 800aeac:	4641      	mov	r1, r8
 800aeae:	4620      	mov	r0, r4
 800aeb0:	f7fe fc51 	bl	8009756 <__any_on>
 800aeb4:	4683      	mov	fp, r0
 800aeb6:	2301      	movs	r3, #1
 800aeb8:	ea4f 1268 	mov.w	r2, r8, asr #5
 800aebc:	f008 081f 	and.w	r8, r8, #31
 800aec0:	fa03 f308 	lsl.w	r3, r3, r8
 800aec4:	f04f 0802 	mov.w	r8, #2
 800aec8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800aecc:	4631      	mov	r1, r6
 800aece:	4213      	tst	r3, r2
 800aed0:	4620      	mov	r0, r4
 800aed2:	bf18      	it	ne
 800aed4:	f04b 0b02 	orrne.w	fp, fp, #2
 800aed8:	1bad      	subs	r5, r5, r6
 800aeda:	f7ff fe03 	bl	800aae4 <rshift>
 800aede:	687e      	ldr	r6, [r7, #4]
 800aee0:	f1bb 0f00 	cmp.w	fp, #0
 800aee4:	d04a      	beq.n	800af7c <__gethex+0x3c8>
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	2b02      	cmp	r3, #2
 800aeea:	d016      	beq.n	800af1a <__gethex+0x366>
 800aeec:	2b03      	cmp	r3, #3
 800aeee:	d018      	beq.n	800af22 <__gethex+0x36e>
 800aef0:	2b01      	cmp	r3, #1
 800aef2:	d109      	bne.n	800af08 <__gethex+0x354>
 800aef4:	f01b 0f02 	tst.w	fp, #2
 800aef8:	d006      	beq.n	800af08 <__gethex+0x354>
 800aefa:	f8da 3000 	ldr.w	r3, [sl]
 800aefe:	ea4b 0b03 	orr.w	fp, fp, r3
 800af02:	f01b 0f01 	tst.w	fp, #1
 800af06:	d10f      	bne.n	800af28 <__gethex+0x374>
 800af08:	f048 0810 	orr.w	r8, r8, #16
 800af0c:	e036      	b.n	800af7c <__gethex+0x3c8>
 800af0e:	f04f 0b01 	mov.w	fp, #1
 800af12:	e7d0      	b.n	800aeb6 <__gethex+0x302>
 800af14:	f04f 0801 	mov.w	r8, #1
 800af18:	e7e2      	b.n	800aee0 <__gethex+0x32c>
 800af1a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800af1c:	f1c3 0301 	rsb	r3, r3, #1
 800af20:	930f      	str	r3, [sp, #60]	; 0x3c
 800af22:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800af24:	2b00      	cmp	r3, #0
 800af26:	d0ef      	beq.n	800af08 <__gethex+0x354>
 800af28:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800af2c:	f104 0214 	add.w	r2, r4, #20
 800af30:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800af34:	9301      	str	r3, [sp, #4]
 800af36:	2300      	movs	r3, #0
 800af38:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800af3c:	4694      	mov	ip, r2
 800af3e:	f852 1b04 	ldr.w	r1, [r2], #4
 800af42:	f1b1 3fff 	cmp.w	r1, #4294967295
 800af46:	d01e      	beq.n	800af86 <__gethex+0x3d2>
 800af48:	3101      	adds	r1, #1
 800af4a:	f8cc 1000 	str.w	r1, [ip]
 800af4e:	f1b8 0f02 	cmp.w	r8, #2
 800af52:	f104 0214 	add.w	r2, r4, #20
 800af56:	d13d      	bne.n	800afd4 <__gethex+0x420>
 800af58:	683b      	ldr	r3, [r7, #0]
 800af5a:	3b01      	subs	r3, #1
 800af5c:	42ab      	cmp	r3, r5
 800af5e:	d10b      	bne.n	800af78 <__gethex+0x3c4>
 800af60:	2301      	movs	r3, #1
 800af62:	1169      	asrs	r1, r5, #5
 800af64:	f005 051f 	and.w	r5, r5, #31
 800af68:	fa03 f505 	lsl.w	r5, r3, r5
 800af6c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800af70:	421d      	tst	r5, r3
 800af72:	bf18      	it	ne
 800af74:	f04f 0801 	movne.w	r8, #1
 800af78:	f048 0820 	orr.w	r8, r8, #32
 800af7c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800af7e:	601c      	str	r4, [r3, #0]
 800af80:	9b02      	ldr	r3, [sp, #8]
 800af82:	601e      	str	r6, [r3, #0]
 800af84:	e6a0      	b.n	800acc8 <__gethex+0x114>
 800af86:	4290      	cmp	r0, r2
 800af88:	f842 3c04 	str.w	r3, [r2, #-4]
 800af8c:	d8d6      	bhi.n	800af3c <__gethex+0x388>
 800af8e:	68a2      	ldr	r2, [r4, #8]
 800af90:	4593      	cmp	fp, r2
 800af92:	db17      	blt.n	800afc4 <__gethex+0x410>
 800af94:	6861      	ldr	r1, [r4, #4]
 800af96:	4648      	mov	r0, r9
 800af98:	3101      	adds	r1, #1
 800af9a:	f7fd ff61 	bl	8008e60 <_Balloc>
 800af9e:	4682      	mov	sl, r0
 800afa0:	b918      	cbnz	r0, 800afaa <__gethex+0x3f6>
 800afa2:	4602      	mov	r2, r0
 800afa4:	2184      	movs	r1, #132	; 0x84
 800afa6:	4b1a      	ldr	r3, [pc, #104]	; (800b010 <__gethex+0x45c>)
 800afa8:	e6b1      	b.n	800ad0e <__gethex+0x15a>
 800afaa:	6922      	ldr	r2, [r4, #16]
 800afac:	f104 010c 	add.w	r1, r4, #12
 800afb0:	3202      	adds	r2, #2
 800afb2:	0092      	lsls	r2, r2, #2
 800afb4:	300c      	adds	r0, #12
 800afb6:	f7ff fd4f 	bl	800aa58 <memcpy>
 800afba:	4621      	mov	r1, r4
 800afbc:	4648      	mov	r0, r9
 800afbe:	f7fd ff8f 	bl	8008ee0 <_Bfree>
 800afc2:	4654      	mov	r4, sl
 800afc4:	6922      	ldr	r2, [r4, #16]
 800afc6:	1c51      	adds	r1, r2, #1
 800afc8:	6121      	str	r1, [r4, #16]
 800afca:	2101      	movs	r1, #1
 800afcc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800afd0:	6151      	str	r1, [r2, #20]
 800afd2:	e7bc      	b.n	800af4e <__gethex+0x39a>
 800afd4:	6921      	ldr	r1, [r4, #16]
 800afd6:	4559      	cmp	r1, fp
 800afd8:	dd0b      	ble.n	800aff2 <__gethex+0x43e>
 800afda:	2101      	movs	r1, #1
 800afdc:	4620      	mov	r0, r4
 800afde:	f7ff fd81 	bl	800aae4 <rshift>
 800afe2:	68bb      	ldr	r3, [r7, #8]
 800afe4:	3601      	adds	r6, #1
 800afe6:	42b3      	cmp	r3, r6
 800afe8:	f6ff aeda 	blt.w	800ada0 <__gethex+0x1ec>
 800afec:	f04f 0801 	mov.w	r8, #1
 800aff0:	e7c2      	b.n	800af78 <__gethex+0x3c4>
 800aff2:	f015 051f 	ands.w	r5, r5, #31
 800aff6:	d0f9      	beq.n	800afec <__gethex+0x438>
 800aff8:	9b01      	ldr	r3, [sp, #4]
 800affa:	f1c5 0520 	rsb	r5, r5, #32
 800affe:	441a      	add	r2, r3
 800b000:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800b004:	f7fe f81e 	bl	8009044 <__hi0bits>
 800b008:	42a8      	cmp	r0, r5
 800b00a:	dbe6      	blt.n	800afda <__gethex+0x426>
 800b00c:	e7ee      	b.n	800afec <__gethex+0x438>
 800b00e:	bf00      	nop
 800b010:	0800b6af 	.word	0x0800b6af

0800b014 <L_shift>:
 800b014:	f1c2 0208 	rsb	r2, r2, #8
 800b018:	0092      	lsls	r2, r2, #2
 800b01a:	b570      	push	{r4, r5, r6, lr}
 800b01c:	f1c2 0620 	rsb	r6, r2, #32
 800b020:	6843      	ldr	r3, [r0, #4]
 800b022:	6804      	ldr	r4, [r0, #0]
 800b024:	fa03 f506 	lsl.w	r5, r3, r6
 800b028:	432c      	orrs	r4, r5
 800b02a:	40d3      	lsrs	r3, r2
 800b02c:	6004      	str	r4, [r0, #0]
 800b02e:	f840 3f04 	str.w	r3, [r0, #4]!
 800b032:	4288      	cmp	r0, r1
 800b034:	d3f4      	bcc.n	800b020 <L_shift+0xc>
 800b036:	bd70      	pop	{r4, r5, r6, pc}

0800b038 <__match>:
 800b038:	b530      	push	{r4, r5, lr}
 800b03a:	6803      	ldr	r3, [r0, #0]
 800b03c:	3301      	adds	r3, #1
 800b03e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b042:	b914      	cbnz	r4, 800b04a <__match+0x12>
 800b044:	6003      	str	r3, [r0, #0]
 800b046:	2001      	movs	r0, #1
 800b048:	bd30      	pop	{r4, r5, pc}
 800b04a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b04e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800b052:	2d19      	cmp	r5, #25
 800b054:	bf98      	it	ls
 800b056:	3220      	addls	r2, #32
 800b058:	42a2      	cmp	r2, r4
 800b05a:	d0f0      	beq.n	800b03e <__match+0x6>
 800b05c:	2000      	movs	r0, #0
 800b05e:	e7f3      	b.n	800b048 <__match+0x10>

0800b060 <__hexnan>:
 800b060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b064:	2500      	movs	r5, #0
 800b066:	680b      	ldr	r3, [r1, #0]
 800b068:	4682      	mov	sl, r0
 800b06a:	115e      	asrs	r6, r3, #5
 800b06c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b070:	f013 031f 	ands.w	r3, r3, #31
 800b074:	bf18      	it	ne
 800b076:	3604      	addne	r6, #4
 800b078:	1f37      	subs	r7, r6, #4
 800b07a:	4690      	mov	r8, r2
 800b07c:	46b9      	mov	r9, r7
 800b07e:	463c      	mov	r4, r7
 800b080:	46ab      	mov	fp, r5
 800b082:	b087      	sub	sp, #28
 800b084:	6801      	ldr	r1, [r0, #0]
 800b086:	9301      	str	r3, [sp, #4]
 800b088:	f846 5c04 	str.w	r5, [r6, #-4]
 800b08c:	9502      	str	r5, [sp, #8]
 800b08e:	784a      	ldrb	r2, [r1, #1]
 800b090:	1c4b      	adds	r3, r1, #1
 800b092:	9303      	str	r3, [sp, #12]
 800b094:	b342      	cbz	r2, 800b0e8 <__hexnan+0x88>
 800b096:	4610      	mov	r0, r2
 800b098:	9105      	str	r1, [sp, #20]
 800b09a:	9204      	str	r2, [sp, #16]
 800b09c:	f7ff fd75 	bl	800ab8a <__hexdig_fun>
 800b0a0:	2800      	cmp	r0, #0
 800b0a2:	d14f      	bne.n	800b144 <__hexnan+0xe4>
 800b0a4:	9a04      	ldr	r2, [sp, #16]
 800b0a6:	9905      	ldr	r1, [sp, #20]
 800b0a8:	2a20      	cmp	r2, #32
 800b0aa:	d818      	bhi.n	800b0de <__hexnan+0x7e>
 800b0ac:	9b02      	ldr	r3, [sp, #8]
 800b0ae:	459b      	cmp	fp, r3
 800b0b0:	dd13      	ble.n	800b0da <__hexnan+0x7a>
 800b0b2:	454c      	cmp	r4, r9
 800b0b4:	d206      	bcs.n	800b0c4 <__hexnan+0x64>
 800b0b6:	2d07      	cmp	r5, #7
 800b0b8:	dc04      	bgt.n	800b0c4 <__hexnan+0x64>
 800b0ba:	462a      	mov	r2, r5
 800b0bc:	4649      	mov	r1, r9
 800b0be:	4620      	mov	r0, r4
 800b0c0:	f7ff ffa8 	bl	800b014 <L_shift>
 800b0c4:	4544      	cmp	r4, r8
 800b0c6:	d950      	bls.n	800b16a <__hexnan+0x10a>
 800b0c8:	2300      	movs	r3, #0
 800b0ca:	f1a4 0904 	sub.w	r9, r4, #4
 800b0ce:	f844 3c04 	str.w	r3, [r4, #-4]
 800b0d2:	461d      	mov	r5, r3
 800b0d4:	464c      	mov	r4, r9
 800b0d6:	f8cd b008 	str.w	fp, [sp, #8]
 800b0da:	9903      	ldr	r1, [sp, #12]
 800b0dc:	e7d7      	b.n	800b08e <__hexnan+0x2e>
 800b0de:	2a29      	cmp	r2, #41	; 0x29
 800b0e0:	d155      	bne.n	800b18e <__hexnan+0x12e>
 800b0e2:	3102      	adds	r1, #2
 800b0e4:	f8ca 1000 	str.w	r1, [sl]
 800b0e8:	f1bb 0f00 	cmp.w	fp, #0
 800b0ec:	d04f      	beq.n	800b18e <__hexnan+0x12e>
 800b0ee:	454c      	cmp	r4, r9
 800b0f0:	d206      	bcs.n	800b100 <__hexnan+0xa0>
 800b0f2:	2d07      	cmp	r5, #7
 800b0f4:	dc04      	bgt.n	800b100 <__hexnan+0xa0>
 800b0f6:	462a      	mov	r2, r5
 800b0f8:	4649      	mov	r1, r9
 800b0fa:	4620      	mov	r0, r4
 800b0fc:	f7ff ff8a 	bl	800b014 <L_shift>
 800b100:	4544      	cmp	r4, r8
 800b102:	d934      	bls.n	800b16e <__hexnan+0x10e>
 800b104:	4623      	mov	r3, r4
 800b106:	f1a8 0204 	sub.w	r2, r8, #4
 800b10a:	f853 1b04 	ldr.w	r1, [r3], #4
 800b10e:	429f      	cmp	r7, r3
 800b110:	f842 1f04 	str.w	r1, [r2, #4]!
 800b114:	d2f9      	bcs.n	800b10a <__hexnan+0xaa>
 800b116:	1b3b      	subs	r3, r7, r4
 800b118:	f023 0303 	bic.w	r3, r3, #3
 800b11c:	3304      	adds	r3, #4
 800b11e:	3e03      	subs	r6, #3
 800b120:	3401      	adds	r4, #1
 800b122:	42a6      	cmp	r6, r4
 800b124:	bf38      	it	cc
 800b126:	2304      	movcc	r3, #4
 800b128:	2200      	movs	r2, #0
 800b12a:	4443      	add	r3, r8
 800b12c:	f843 2b04 	str.w	r2, [r3], #4
 800b130:	429f      	cmp	r7, r3
 800b132:	d2fb      	bcs.n	800b12c <__hexnan+0xcc>
 800b134:	683b      	ldr	r3, [r7, #0]
 800b136:	b91b      	cbnz	r3, 800b140 <__hexnan+0xe0>
 800b138:	4547      	cmp	r7, r8
 800b13a:	d126      	bne.n	800b18a <__hexnan+0x12a>
 800b13c:	2301      	movs	r3, #1
 800b13e:	603b      	str	r3, [r7, #0]
 800b140:	2005      	movs	r0, #5
 800b142:	e025      	b.n	800b190 <__hexnan+0x130>
 800b144:	3501      	adds	r5, #1
 800b146:	2d08      	cmp	r5, #8
 800b148:	f10b 0b01 	add.w	fp, fp, #1
 800b14c:	dd06      	ble.n	800b15c <__hexnan+0xfc>
 800b14e:	4544      	cmp	r4, r8
 800b150:	d9c3      	bls.n	800b0da <__hexnan+0x7a>
 800b152:	2300      	movs	r3, #0
 800b154:	2501      	movs	r5, #1
 800b156:	f844 3c04 	str.w	r3, [r4, #-4]
 800b15a:	3c04      	subs	r4, #4
 800b15c:	6822      	ldr	r2, [r4, #0]
 800b15e:	f000 000f 	and.w	r0, r0, #15
 800b162:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800b166:	6020      	str	r0, [r4, #0]
 800b168:	e7b7      	b.n	800b0da <__hexnan+0x7a>
 800b16a:	2508      	movs	r5, #8
 800b16c:	e7b5      	b.n	800b0da <__hexnan+0x7a>
 800b16e:	9b01      	ldr	r3, [sp, #4]
 800b170:	2b00      	cmp	r3, #0
 800b172:	d0df      	beq.n	800b134 <__hexnan+0xd4>
 800b174:	f04f 32ff 	mov.w	r2, #4294967295
 800b178:	f1c3 0320 	rsb	r3, r3, #32
 800b17c:	40da      	lsrs	r2, r3
 800b17e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800b182:	4013      	ands	r3, r2
 800b184:	f846 3c04 	str.w	r3, [r6, #-4]
 800b188:	e7d4      	b.n	800b134 <__hexnan+0xd4>
 800b18a:	3f04      	subs	r7, #4
 800b18c:	e7d2      	b.n	800b134 <__hexnan+0xd4>
 800b18e:	2004      	movs	r0, #4
 800b190:	b007      	add	sp, #28
 800b192:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b196 <__ascii_mbtowc>:
 800b196:	b082      	sub	sp, #8
 800b198:	b901      	cbnz	r1, 800b19c <__ascii_mbtowc+0x6>
 800b19a:	a901      	add	r1, sp, #4
 800b19c:	b142      	cbz	r2, 800b1b0 <__ascii_mbtowc+0x1a>
 800b19e:	b14b      	cbz	r3, 800b1b4 <__ascii_mbtowc+0x1e>
 800b1a0:	7813      	ldrb	r3, [r2, #0]
 800b1a2:	600b      	str	r3, [r1, #0]
 800b1a4:	7812      	ldrb	r2, [r2, #0]
 800b1a6:	1e10      	subs	r0, r2, #0
 800b1a8:	bf18      	it	ne
 800b1aa:	2001      	movne	r0, #1
 800b1ac:	b002      	add	sp, #8
 800b1ae:	4770      	bx	lr
 800b1b0:	4610      	mov	r0, r2
 800b1b2:	e7fb      	b.n	800b1ac <__ascii_mbtowc+0x16>
 800b1b4:	f06f 0001 	mvn.w	r0, #1
 800b1b8:	e7f8      	b.n	800b1ac <__ascii_mbtowc+0x16>

0800b1ba <_realloc_r>:
 800b1ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b1be:	4680      	mov	r8, r0
 800b1c0:	4614      	mov	r4, r2
 800b1c2:	460e      	mov	r6, r1
 800b1c4:	b921      	cbnz	r1, 800b1d0 <_realloc_r+0x16>
 800b1c6:	4611      	mov	r1, r2
 800b1c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b1cc:	f7fd bdbc 	b.w	8008d48 <_malloc_r>
 800b1d0:	b92a      	cbnz	r2, 800b1de <_realloc_r+0x24>
 800b1d2:	f7fd fd49 	bl	8008c68 <_free_r>
 800b1d6:	4625      	mov	r5, r4
 800b1d8:	4628      	mov	r0, r5
 800b1da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b1de:	f000 f842 	bl	800b266 <_malloc_usable_size_r>
 800b1e2:	4284      	cmp	r4, r0
 800b1e4:	4607      	mov	r7, r0
 800b1e6:	d802      	bhi.n	800b1ee <_realloc_r+0x34>
 800b1e8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b1ec:	d812      	bhi.n	800b214 <_realloc_r+0x5a>
 800b1ee:	4621      	mov	r1, r4
 800b1f0:	4640      	mov	r0, r8
 800b1f2:	f7fd fda9 	bl	8008d48 <_malloc_r>
 800b1f6:	4605      	mov	r5, r0
 800b1f8:	2800      	cmp	r0, #0
 800b1fa:	d0ed      	beq.n	800b1d8 <_realloc_r+0x1e>
 800b1fc:	42bc      	cmp	r4, r7
 800b1fe:	4622      	mov	r2, r4
 800b200:	4631      	mov	r1, r6
 800b202:	bf28      	it	cs
 800b204:	463a      	movcs	r2, r7
 800b206:	f7ff fc27 	bl	800aa58 <memcpy>
 800b20a:	4631      	mov	r1, r6
 800b20c:	4640      	mov	r0, r8
 800b20e:	f7fd fd2b 	bl	8008c68 <_free_r>
 800b212:	e7e1      	b.n	800b1d8 <_realloc_r+0x1e>
 800b214:	4635      	mov	r5, r6
 800b216:	e7df      	b.n	800b1d8 <_realloc_r+0x1e>

0800b218 <__ascii_wctomb>:
 800b218:	4603      	mov	r3, r0
 800b21a:	4608      	mov	r0, r1
 800b21c:	b141      	cbz	r1, 800b230 <__ascii_wctomb+0x18>
 800b21e:	2aff      	cmp	r2, #255	; 0xff
 800b220:	d904      	bls.n	800b22c <__ascii_wctomb+0x14>
 800b222:	228a      	movs	r2, #138	; 0x8a
 800b224:	f04f 30ff 	mov.w	r0, #4294967295
 800b228:	601a      	str	r2, [r3, #0]
 800b22a:	4770      	bx	lr
 800b22c:	2001      	movs	r0, #1
 800b22e:	700a      	strb	r2, [r1, #0]
 800b230:	4770      	bx	lr
	...

0800b234 <fiprintf>:
 800b234:	b40e      	push	{r1, r2, r3}
 800b236:	b503      	push	{r0, r1, lr}
 800b238:	4601      	mov	r1, r0
 800b23a:	ab03      	add	r3, sp, #12
 800b23c:	4805      	ldr	r0, [pc, #20]	; (800b254 <fiprintf+0x20>)
 800b23e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b242:	6800      	ldr	r0, [r0, #0]
 800b244:	9301      	str	r3, [sp, #4]
 800b246:	f000 f83d 	bl	800b2c4 <_vfiprintf_r>
 800b24a:	b002      	add	sp, #8
 800b24c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b250:	b003      	add	sp, #12
 800b252:	4770      	bx	lr
 800b254:	20000068 	.word	0x20000068

0800b258 <abort>:
 800b258:	2006      	movs	r0, #6
 800b25a:	b508      	push	{r3, lr}
 800b25c:	f000 f974 	bl	800b548 <raise>
 800b260:	2001      	movs	r0, #1
 800b262:	f7f7 fdf4 	bl	8002e4e <_exit>

0800b266 <_malloc_usable_size_r>:
 800b266:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b26a:	1f18      	subs	r0, r3, #4
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	bfbc      	itt	lt
 800b270:	580b      	ldrlt	r3, [r1, r0]
 800b272:	18c0      	addlt	r0, r0, r3
 800b274:	4770      	bx	lr

0800b276 <__sfputc_r>:
 800b276:	6893      	ldr	r3, [r2, #8]
 800b278:	b410      	push	{r4}
 800b27a:	3b01      	subs	r3, #1
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	6093      	str	r3, [r2, #8]
 800b280:	da07      	bge.n	800b292 <__sfputc_r+0x1c>
 800b282:	6994      	ldr	r4, [r2, #24]
 800b284:	42a3      	cmp	r3, r4
 800b286:	db01      	blt.n	800b28c <__sfputc_r+0x16>
 800b288:	290a      	cmp	r1, #10
 800b28a:	d102      	bne.n	800b292 <__sfputc_r+0x1c>
 800b28c:	bc10      	pop	{r4}
 800b28e:	f7fc bd56 	b.w	8007d3e <__swbuf_r>
 800b292:	6813      	ldr	r3, [r2, #0]
 800b294:	1c58      	adds	r0, r3, #1
 800b296:	6010      	str	r0, [r2, #0]
 800b298:	7019      	strb	r1, [r3, #0]
 800b29a:	4608      	mov	r0, r1
 800b29c:	bc10      	pop	{r4}
 800b29e:	4770      	bx	lr

0800b2a0 <__sfputs_r>:
 800b2a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2a2:	4606      	mov	r6, r0
 800b2a4:	460f      	mov	r7, r1
 800b2a6:	4614      	mov	r4, r2
 800b2a8:	18d5      	adds	r5, r2, r3
 800b2aa:	42ac      	cmp	r4, r5
 800b2ac:	d101      	bne.n	800b2b2 <__sfputs_r+0x12>
 800b2ae:	2000      	movs	r0, #0
 800b2b0:	e007      	b.n	800b2c2 <__sfputs_r+0x22>
 800b2b2:	463a      	mov	r2, r7
 800b2b4:	4630      	mov	r0, r6
 800b2b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b2ba:	f7ff ffdc 	bl	800b276 <__sfputc_r>
 800b2be:	1c43      	adds	r3, r0, #1
 800b2c0:	d1f3      	bne.n	800b2aa <__sfputs_r+0xa>
 800b2c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b2c4 <_vfiprintf_r>:
 800b2c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2c8:	460d      	mov	r5, r1
 800b2ca:	4614      	mov	r4, r2
 800b2cc:	4698      	mov	r8, r3
 800b2ce:	4606      	mov	r6, r0
 800b2d0:	b09d      	sub	sp, #116	; 0x74
 800b2d2:	b118      	cbz	r0, 800b2dc <_vfiprintf_r+0x18>
 800b2d4:	6a03      	ldr	r3, [r0, #32]
 800b2d6:	b90b      	cbnz	r3, 800b2dc <_vfiprintf_r+0x18>
 800b2d8:	f7fc fc3c 	bl	8007b54 <__sinit>
 800b2dc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b2de:	07d9      	lsls	r1, r3, #31
 800b2e0:	d405      	bmi.n	800b2ee <_vfiprintf_r+0x2a>
 800b2e2:	89ab      	ldrh	r3, [r5, #12]
 800b2e4:	059a      	lsls	r2, r3, #22
 800b2e6:	d402      	bmi.n	800b2ee <_vfiprintf_r+0x2a>
 800b2e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b2ea:	f7fc fe3a 	bl	8007f62 <__retarget_lock_acquire_recursive>
 800b2ee:	89ab      	ldrh	r3, [r5, #12]
 800b2f0:	071b      	lsls	r3, r3, #28
 800b2f2:	d501      	bpl.n	800b2f8 <_vfiprintf_r+0x34>
 800b2f4:	692b      	ldr	r3, [r5, #16]
 800b2f6:	b99b      	cbnz	r3, 800b320 <_vfiprintf_r+0x5c>
 800b2f8:	4629      	mov	r1, r5
 800b2fa:	4630      	mov	r0, r6
 800b2fc:	f7fc fd5c 	bl	8007db8 <__swsetup_r>
 800b300:	b170      	cbz	r0, 800b320 <_vfiprintf_r+0x5c>
 800b302:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b304:	07dc      	lsls	r4, r3, #31
 800b306:	d504      	bpl.n	800b312 <_vfiprintf_r+0x4e>
 800b308:	f04f 30ff 	mov.w	r0, #4294967295
 800b30c:	b01d      	add	sp, #116	; 0x74
 800b30e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b312:	89ab      	ldrh	r3, [r5, #12]
 800b314:	0598      	lsls	r0, r3, #22
 800b316:	d4f7      	bmi.n	800b308 <_vfiprintf_r+0x44>
 800b318:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b31a:	f7fc fe23 	bl	8007f64 <__retarget_lock_release_recursive>
 800b31e:	e7f3      	b.n	800b308 <_vfiprintf_r+0x44>
 800b320:	2300      	movs	r3, #0
 800b322:	9309      	str	r3, [sp, #36]	; 0x24
 800b324:	2320      	movs	r3, #32
 800b326:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b32a:	2330      	movs	r3, #48	; 0x30
 800b32c:	f04f 0901 	mov.w	r9, #1
 800b330:	f8cd 800c 	str.w	r8, [sp, #12]
 800b334:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800b4e4 <_vfiprintf_r+0x220>
 800b338:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b33c:	4623      	mov	r3, r4
 800b33e:	469a      	mov	sl, r3
 800b340:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b344:	b10a      	cbz	r2, 800b34a <_vfiprintf_r+0x86>
 800b346:	2a25      	cmp	r2, #37	; 0x25
 800b348:	d1f9      	bne.n	800b33e <_vfiprintf_r+0x7a>
 800b34a:	ebba 0b04 	subs.w	fp, sl, r4
 800b34e:	d00b      	beq.n	800b368 <_vfiprintf_r+0xa4>
 800b350:	465b      	mov	r3, fp
 800b352:	4622      	mov	r2, r4
 800b354:	4629      	mov	r1, r5
 800b356:	4630      	mov	r0, r6
 800b358:	f7ff ffa2 	bl	800b2a0 <__sfputs_r>
 800b35c:	3001      	adds	r0, #1
 800b35e:	f000 80a9 	beq.w	800b4b4 <_vfiprintf_r+0x1f0>
 800b362:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b364:	445a      	add	r2, fp
 800b366:	9209      	str	r2, [sp, #36]	; 0x24
 800b368:	f89a 3000 	ldrb.w	r3, [sl]
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	f000 80a1 	beq.w	800b4b4 <_vfiprintf_r+0x1f0>
 800b372:	2300      	movs	r3, #0
 800b374:	f04f 32ff 	mov.w	r2, #4294967295
 800b378:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b37c:	f10a 0a01 	add.w	sl, sl, #1
 800b380:	9304      	str	r3, [sp, #16]
 800b382:	9307      	str	r3, [sp, #28]
 800b384:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b388:	931a      	str	r3, [sp, #104]	; 0x68
 800b38a:	4654      	mov	r4, sl
 800b38c:	2205      	movs	r2, #5
 800b38e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b392:	4854      	ldr	r0, [pc, #336]	; (800b4e4 <_vfiprintf_r+0x220>)
 800b394:	f7fc fde7 	bl	8007f66 <memchr>
 800b398:	9a04      	ldr	r2, [sp, #16]
 800b39a:	b9d8      	cbnz	r0, 800b3d4 <_vfiprintf_r+0x110>
 800b39c:	06d1      	lsls	r1, r2, #27
 800b39e:	bf44      	itt	mi
 800b3a0:	2320      	movmi	r3, #32
 800b3a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b3a6:	0713      	lsls	r3, r2, #28
 800b3a8:	bf44      	itt	mi
 800b3aa:	232b      	movmi	r3, #43	; 0x2b
 800b3ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b3b0:	f89a 3000 	ldrb.w	r3, [sl]
 800b3b4:	2b2a      	cmp	r3, #42	; 0x2a
 800b3b6:	d015      	beq.n	800b3e4 <_vfiprintf_r+0x120>
 800b3b8:	4654      	mov	r4, sl
 800b3ba:	2000      	movs	r0, #0
 800b3bc:	f04f 0c0a 	mov.w	ip, #10
 800b3c0:	9a07      	ldr	r2, [sp, #28]
 800b3c2:	4621      	mov	r1, r4
 800b3c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b3c8:	3b30      	subs	r3, #48	; 0x30
 800b3ca:	2b09      	cmp	r3, #9
 800b3cc:	d94d      	bls.n	800b46a <_vfiprintf_r+0x1a6>
 800b3ce:	b1b0      	cbz	r0, 800b3fe <_vfiprintf_r+0x13a>
 800b3d0:	9207      	str	r2, [sp, #28]
 800b3d2:	e014      	b.n	800b3fe <_vfiprintf_r+0x13a>
 800b3d4:	eba0 0308 	sub.w	r3, r0, r8
 800b3d8:	fa09 f303 	lsl.w	r3, r9, r3
 800b3dc:	4313      	orrs	r3, r2
 800b3de:	46a2      	mov	sl, r4
 800b3e0:	9304      	str	r3, [sp, #16]
 800b3e2:	e7d2      	b.n	800b38a <_vfiprintf_r+0xc6>
 800b3e4:	9b03      	ldr	r3, [sp, #12]
 800b3e6:	1d19      	adds	r1, r3, #4
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	9103      	str	r1, [sp, #12]
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	bfbb      	ittet	lt
 800b3f0:	425b      	neglt	r3, r3
 800b3f2:	f042 0202 	orrlt.w	r2, r2, #2
 800b3f6:	9307      	strge	r3, [sp, #28]
 800b3f8:	9307      	strlt	r3, [sp, #28]
 800b3fa:	bfb8      	it	lt
 800b3fc:	9204      	strlt	r2, [sp, #16]
 800b3fe:	7823      	ldrb	r3, [r4, #0]
 800b400:	2b2e      	cmp	r3, #46	; 0x2e
 800b402:	d10c      	bne.n	800b41e <_vfiprintf_r+0x15a>
 800b404:	7863      	ldrb	r3, [r4, #1]
 800b406:	2b2a      	cmp	r3, #42	; 0x2a
 800b408:	d134      	bne.n	800b474 <_vfiprintf_r+0x1b0>
 800b40a:	9b03      	ldr	r3, [sp, #12]
 800b40c:	3402      	adds	r4, #2
 800b40e:	1d1a      	adds	r2, r3, #4
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	9203      	str	r2, [sp, #12]
 800b414:	2b00      	cmp	r3, #0
 800b416:	bfb8      	it	lt
 800b418:	f04f 33ff 	movlt.w	r3, #4294967295
 800b41c:	9305      	str	r3, [sp, #20]
 800b41e:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b4e8 <_vfiprintf_r+0x224>
 800b422:	2203      	movs	r2, #3
 800b424:	4650      	mov	r0, sl
 800b426:	7821      	ldrb	r1, [r4, #0]
 800b428:	f7fc fd9d 	bl	8007f66 <memchr>
 800b42c:	b138      	cbz	r0, 800b43e <_vfiprintf_r+0x17a>
 800b42e:	2240      	movs	r2, #64	; 0x40
 800b430:	9b04      	ldr	r3, [sp, #16]
 800b432:	eba0 000a 	sub.w	r0, r0, sl
 800b436:	4082      	lsls	r2, r0
 800b438:	4313      	orrs	r3, r2
 800b43a:	3401      	adds	r4, #1
 800b43c:	9304      	str	r3, [sp, #16]
 800b43e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b442:	2206      	movs	r2, #6
 800b444:	4829      	ldr	r0, [pc, #164]	; (800b4ec <_vfiprintf_r+0x228>)
 800b446:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b44a:	f7fc fd8c 	bl	8007f66 <memchr>
 800b44e:	2800      	cmp	r0, #0
 800b450:	d03f      	beq.n	800b4d2 <_vfiprintf_r+0x20e>
 800b452:	4b27      	ldr	r3, [pc, #156]	; (800b4f0 <_vfiprintf_r+0x22c>)
 800b454:	bb1b      	cbnz	r3, 800b49e <_vfiprintf_r+0x1da>
 800b456:	9b03      	ldr	r3, [sp, #12]
 800b458:	3307      	adds	r3, #7
 800b45a:	f023 0307 	bic.w	r3, r3, #7
 800b45e:	3308      	adds	r3, #8
 800b460:	9303      	str	r3, [sp, #12]
 800b462:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b464:	443b      	add	r3, r7
 800b466:	9309      	str	r3, [sp, #36]	; 0x24
 800b468:	e768      	b.n	800b33c <_vfiprintf_r+0x78>
 800b46a:	460c      	mov	r4, r1
 800b46c:	2001      	movs	r0, #1
 800b46e:	fb0c 3202 	mla	r2, ip, r2, r3
 800b472:	e7a6      	b.n	800b3c2 <_vfiprintf_r+0xfe>
 800b474:	2300      	movs	r3, #0
 800b476:	f04f 0c0a 	mov.w	ip, #10
 800b47a:	4619      	mov	r1, r3
 800b47c:	3401      	adds	r4, #1
 800b47e:	9305      	str	r3, [sp, #20]
 800b480:	4620      	mov	r0, r4
 800b482:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b486:	3a30      	subs	r2, #48	; 0x30
 800b488:	2a09      	cmp	r2, #9
 800b48a:	d903      	bls.n	800b494 <_vfiprintf_r+0x1d0>
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d0c6      	beq.n	800b41e <_vfiprintf_r+0x15a>
 800b490:	9105      	str	r1, [sp, #20]
 800b492:	e7c4      	b.n	800b41e <_vfiprintf_r+0x15a>
 800b494:	4604      	mov	r4, r0
 800b496:	2301      	movs	r3, #1
 800b498:	fb0c 2101 	mla	r1, ip, r1, r2
 800b49c:	e7f0      	b.n	800b480 <_vfiprintf_r+0x1bc>
 800b49e:	ab03      	add	r3, sp, #12
 800b4a0:	9300      	str	r3, [sp, #0]
 800b4a2:	462a      	mov	r2, r5
 800b4a4:	4630      	mov	r0, r6
 800b4a6:	4b13      	ldr	r3, [pc, #76]	; (800b4f4 <_vfiprintf_r+0x230>)
 800b4a8:	a904      	add	r1, sp, #16
 800b4aa:	f7fb fcf7 	bl	8006e9c <_printf_float>
 800b4ae:	4607      	mov	r7, r0
 800b4b0:	1c78      	adds	r0, r7, #1
 800b4b2:	d1d6      	bne.n	800b462 <_vfiprintf_r+0x19e>
 800b4b4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b4b6:	07d9      	lsls	r1, r3, #31
 800b4b8:	d405      	bmi.n	800b4c6 <_vfiprintf_r+0x202>
 800b4ba:	89ab      	ldrh	r3, [r5, #12]
 800b4bc:	059a      	lsls	r2, r3, #22
 800b4be:	d402      	bmi.n	800b4c6 <_vfiprintf_r+0x202>
 800b4c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b4c2:	f7fc fd4f 	bl	8007f64 <__retarget_lock_release_recursive>
 800b4c6:	89ab      	ldrh	r3, [r5, #12]
 800b4c8:	065b      	lsls	r3, r3, #25
 800b4ca:	f53f af1d 	bmi.w	800b308 <_vfiprintf_r+0x44>
 800b4ce:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b4d0:	e71c      	b.n	800b30c <_vfiprintf_r+0x48>
 800b4d2:	ab03      	add	r3, sp, #12
 800b4d4:	9300      	str	r3, [sp, #0]
 800b4d6:	462a      	mov	r2, r5
 800b4d8:	4630      	mov	r0, r6
 800b4da:	4b06      	ldr	r3, [pc, #24]	; (800b4f4 <_vfiprintf_r+0x230>)
 800b4dc:	a904      	add	r1, sp, #16
 800b4de:	f7fb ff7d 	bl	80073dc <_printf_i>
 800b4e2:	e7e4      	b.n	800b4ae <_vfiprintf_r+0x1ea>
 800b4e4:	0800b971 	.word	0x0800b971
 800b4e8:	0800b977 	.word	0x0800b977
 800b4ec:	0800b97b 	.word	0x0800b97b
 800b4f0:	08006e9d 	.word	0x08006e9d
 800b4f4:	0800b2a1 	.word	0x0800b2a1

0800b4f8 <_raise_r>:
 800b4f8:	291f      	cmp	r1, #31
 800b4fa:	b538      	push	{r3, r4, r5, lr}
 800b4fc:	4604      	mov	r4, r0
 800b4fe:	460d      	mov	r5, r1
 800b500:	d904      	bls.n	800b50c <_raise_r+0x14>
 800b502:	2316      	movs	r3, #22
 800b504:	6003      	str	r3, [r0, #0]
 800b506:	f04f 30ff 	mov.w	r0, #4294967295
 800b50a:	bd38      	pop	{r3, r4, r5, pc}
 800b50c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800b50e:	b112      	cbz	r2, 800b516 <_raise_r+0x1e>
 800b510:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b514:	b94b      	cbnz	r3, 800b52a <_raise_r+0x32>
 800b516:	4620      	mov	r0, r4
 800b518:	f000 f830 	bl	800b57c <_getpid_r>
 800b51c:	462a      	mov	r2, r5
 800b51e:	4601      	mov	r1, r0
 800b520:	4620      	mov	r0, r4
 800b522:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b526:	f000 b817 	b.w	800b558 <_kill_r>
 800b52a:	2b01      	cmp	r3, #1
 800b52c:	d00a      	beq.n	800b544 <_raise_r+0x4c>
 800b52e:	1c59      	adds	r1, r3, #1
 800b530:	d103      	bne.n	800b53a <_raise_r+0x42>
 800b532:	2316      	movs	r3, #22
 800b534:	6003      	str	r3, [r0, #0]
 800b536:	2001      	movs	r0, #1
 800b538:	e7e7      	b.n	800b50a <_raise_r+0x12>
 800b53a:	2400      	movs	r4, #0
 800b53c:	4628      	mov	r0, r5
 800b53e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b542:	4798      	blx	r3
 800b544:	2000      	movs	r0, #0
 800b546:	e7e0      	b.n	800b50a <_raise_r+0x12>

0800b548 <raise>:
 800b548:	4b02      	ldr	r3, [pc, #8]	; (800b554 <raise+0xc>)
 800b54a:	4601      	mov	r1, r0
 800b54c:	6818      	ldr	r0, [r3, #0]
 800b54e:	f7ff bfd3 	b.w	800b4f8 <_raise_r>
 800b552:	bf00      	nop
 800b554:	20000068 	.word	0x20000068

0800b558 <_kill_r>:
 800b558:	b538      	push	{r3, r4, r5, lr}
 800b55a:	2300      	movs	r3, #0
 800b55c:	4d06      	ldr	r5, [pc, #24]	; (800b578 <_kill_r+0x20>)
 800b55e:	4604      	mov	r4, r0
 800b560:	4608      	mov	r0, r1
 800b562:	4611      	mov	r1, r2
 800b564:	602b      	str	r3, [r5, #0]
 800b566:	f7f7 fc62 	bl	8002e2e <_kill>
 800b56a:	1c43      	adds	r3, r0, #1
 800b56c:	d102      	bne.n	800b574 <_kill_r+0x1c>
 800b56e:	682b      	ldr	r3, [r5, #0]
 800b570:	b103      	cbz	r3, 800b574 <_kill_r+0x1c>
 800b572:	6023      	str	r3, [r4, #0]
 800b574:	bd38      	pop	{r3, r4, r5, pc}
 800b576:	bf00      	nop
 800b578:	2000051c 	.word	0x2000051c

0800b57c <_getpid_r>:
 800b57c:	f7f7 bc50 	b.w	8002e20 <_getpid>

0800b580 <_init>:
 800b580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b582:	bf00      	nop
 800b584:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b586:	bc08      	pop	{r3}
 800b588:	469e      	mov	lr, r3
 800b58a:	4770      	bx	lr

0800b58c <_fini>:
 800b58c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b58e:	bf00      	nop
 800b590:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b592:	bc08      	pop	{r3}
 800b594:	469e      	mov	lr, r3
 800b596:	4770      	bx	lr
